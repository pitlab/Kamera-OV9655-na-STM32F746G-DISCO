
APL2_STM32F746-disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000288b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000486c  08028a80  08028a80  00029a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d2ec  0802d2ec  0002f274  2**0
                  CONTENTS
  4 .ARM          00000008  0802d2ec  0802d2ec  0002e2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d2f4  0802d2f4  0002f274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d2f4  0802d2f4  0002e2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802d2f8  0802d2f8  0002e2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000274  20010000  0802d2fc  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002ccd4  20010274  0802d570  0002f274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003cf48  0802d570  0002ff48  2**0
                  ALLOC
 11 .lwip_sec     00003f43  2004c000  2004c000  00030000  2**2
                  ALLOC
 12 ExtFlashSection 00000000  90000000  90000000  0002f274  2**0
                  CONTENTS
 13 FontFlashSection 00000000  90000000  90000000  0002f274  2**0
                  CONTENTS
 14 TextFlashSection 00000000  90000000  90000000  0002f274  2**0
                  CONTENTS
 15 BufferSection 00158000  c0000000  c0000000  00030000  2**2
                  ALLOC
 16 .ARM.attributes 00000030  00000000  00000000  0002f274  2**0
                  CONTENTS, READONLY
 17 .debug_info   0005a2ff  00000000  00000000  0002f2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000cfd7  00000000  00000000  000895a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00004498  00000000  00000000  00096580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00003592  00000000  00000000  0009aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00046502  00000000  00000000  0009dfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0006944c  00000000  00000000  000e44ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00145b6d  00000000  00000000  0014d8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  00293465  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00012e94  00000000  00000000  002934a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000054  00000000  00000000  002a633c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20010274 	.word	0x20010274
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08028a68 	.word	0x08028a68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20010278 	.word	0x20010278
 800020c:	08028a68 	.word	0x08028a68

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4a07      	ldr	r2, [pc, #28]	@ (8000fc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <vApplicationGetIdleTaskMemory+0x30>)
 8000fb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2280      	movs	r2, #128	@ 0x80
 8000fb8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20010290 	.word	0x20010290
 8000fcc:	20010334 	.word	0x20010334

08000fd0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd4:	f3bf 8f4f 	dsb	sy
}
 8000fd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fda:	f3bf 8f6f 	isb	sy
}
 8000fde:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <SCB_EnableICache+0x48>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe8:	f3bf 8f4f 	dsb	sy
}
 8000fec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fee:	f3bf 8f6f 	isb	sy
}
 8000ff2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <SCB_EnableICache+0x48>)
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	@ (8001018 <SCB_EnableICache+0x48>)
 8000ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001000:	f3bf 8f4f 	dsb	sy
}
 8001004:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001006:	f3bf 8f6f 	isb	sy
}
 800100a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001022:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <SCB_EnableDCache+0x84>)
 8001024:	2200      	movs	r2, #0
 8001026:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800102a:	f3bf 8f4f 	dsb	sy
}
 800102e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <SCB_EnableDCache+0x84>)
 8001032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001036:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0b5b      	lsrs	r3, r3, #13
 800103c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001040:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800104a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	015a      	lsls	r2, r3, #5
 8001050:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001054:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800105a:	4911      	ldr	r1, [pc, #68]	@ (80010a0 <SCB_EnableDCache+0x84>)
 800105c:	4313      	orrs	r3, r2
 800105e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1e5a      	subs	r2, r3, #1
 8001066:	60ba      	str	r2, [r7, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1ef      	bne.n	800104c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	1e5a      	subs	r2, r3, #1
 8001070:	60fa      	str	r2, [r7, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1e5      	bne.n	8001042 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001076:	f3bf 8f4f 	dsb	sy
}
 800107a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <SCB_EnableDCache+0x84>)
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	4a07      	ldr	r2, [pc, #28]	@ (80010a0 <SCB_EnableDCache+0x84>)
 8001082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001086:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001088:	f3bf 8f4f 	dsb	sy
}
 800108c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800108e:	f3bf 8f6f 	isb	sy
}
 8001092:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b096      	sub	sp, #88	@ 0x58
 80010a8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010aa:	f001 fc23 	bl	80028f4 <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80010ae:	f7ff ff8f 	bl	8000fd0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80010b2:	f7ff ffb3 	bl	800101c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f005 fe99 	bl	8006dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f931 	bl	8001320 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010be:	f000 f9a1 	bl	8001404 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c2:	f001 f8ef 	bl	80022a4 <MX_GPIO_Init>
  MX_ADC3_Init();
 80010c6:	f000 f9cf 	bl	8001468 <MX_ADC3_Init>
  MX_CRC_Init();
 80010ca:	f000 fa1f 	bl	800150c <MX_CRC_Init>
  MX_DCMI_Init();
 80010ce:	f000 fa3f 	bl	8001550 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80010d2:	f000 fa71 	bl	80015b8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80010d6:	f001 f895 	bl	8002204 <MX_FMC_Init>
  MX_I2C1_Init();
 80010da:	f000 fa9f 	bl	800161c <MX_I2C1_Init>
  MX_I2C3_Init();
 80010de:	f000 fadd 	bl	800169c <MX_I2C3_Init>
  MX_LTDC_Init();
 80010e2:	f000 fb1b 	bl	800171c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80010e6:	f000 fb9b 	bl	8001820 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80010ea:	f000 fbc5 	bl	8001878 <MX_RTC_Init>
  MX_SAI2_Init();
 80010ee:	f000 fc67 	bl	80019c0 <MX_SAI2_Init>
  //MX_SDMMC1_SD_Init();
  MX_SPDIFRX_Init();
 80010f2:	f000 fd0d 	bl	8001b10 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80010f6:	f000 fd3b 	bl	8001b70 <MX_SPI2_Init>
  MX_TIM1_Init();
 80010fa:	f000 fd77 	bl	8001bec <MX_TIM1_Init>
  MX_TIM2_Init();
 80010fe:	f000 fe21 	bl	8001d44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001102:	f000 fe95 	bl	8001e30 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001106:	f000 ff0b 	bl	8001f20 <MX_TIM5_Init>
  MX_TIM8_Init();
 800110a:	f000 ff81 	bl	8002010 <MX_TIM8_Init>
  MX_TIM12_Init();
 800110e:	f000 ffd3 	bl	80020b8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001112:	f001 f817 	bl	8002144 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001116:	f001 f845 	bl	80021a4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //httpd_init();
  BSP_LED_Init(LED1);
 800111a:	2000      	movs	r0, #0
 800111c:	f003 fdea 	bl	8004cf4 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_TAMPER, BUTTON_MODE_GPIO);
 8001120:	2100      	movs	r1, #0
 8001122:	2001      	movs	r0, #1
 8001124:	f003 fe30 	bl	8004d88 <BSP_PB_Init>
  BSP_TS_Init(640, 272);	//480x272
 8001128:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800112c:	f44f 7020 	mov.w	r0, #640	@ 0x280
 8001130:	f005 fbde 	bl	80068f0 <BSP_TS_Init>
  BSP_CAMERA_Init(CAMERA_R320x240);
 8001134:	2001      	movs	r0, #1
 8001136:	f004 f8a3 	bl	8005280 <BSP_CAMERA_Init>
  BSP_LED_Init(0);
 800113a:	2000      	movs	r0, #0
 800113c:	f003 fdda 	bl	8004cf4 <BSP_LED_Init>

  //Initialize the LCD using the BSP_LCD_Init() function.
  //o Apply the Layer configuration using the BSP_LCD_LayerDefaultInit() function.
  //o Select the LCD layer to be used using the BSP_LCD_SelectLayer() function.
  //o Enable the LCD display using the BSP_LCD_DisplayOn() function.
  BSP_LCD_Init();
 8001140:	f004 fb38 	bl	80057b4 <BSP_LCD_Init>
  BSP_LCD_SelectLayer(0);
 8001144:	2000      	movs	r0, #0
 8001146:	f004 fc8d 	bl	8005a64 <BSP_LCD_SelectLayer>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800114a:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800114e:	2000      	movs	r0, #0
 8001150:	f004 fbc8 	bl	80058e4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS+(BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4));
 8001154:	f004 fb9e 	bl	8005894 <BSP_LCD_GetXSize>
 8001158:	4604      	mov	r4, r0
 800115a:	f004 fbaf 	bl	80058bc <BSP_LCD_GetYSize>
 800115e:	4603      	mov	r3, r0
 8001160:	fb04 f303 	mul.w	r3, r4, r3
 8001164:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4619      	mov	r1, r3
 800116c:	2001      	movs	r0, #1
 800116e:	f004 fc19 	bl	80059a4 <BSP_LCD_LayerRgb565Init>
  BSP_LCD_SelectLayer(1);
 8001172:	2001      	movs	r0, #1
 8001174:	f004 fc76 	bl	8005a64 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001178:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800117c:	f004 fd02 	bl	8005b84 <BSP_LCD_Clear>
  BSP_LCD_SetTransparency(1, 0xFF);
 8001180:	21ff      	movs	r1, #255	@ 0xff
 8001182:	2001      	movs	r0, #1
 8001184:	f004 fc7e 	bl	8005a84 <BSP_LCD_SetTransparency>

  BSP_LCD_SelectLayer(0);
 8001188:	2000      	movs	r0, #0
 800118a:	f004 fc6b 	bl	8005a64 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	f004 fcf7 	bl	8005b84 <BSP_LCD_Clear>
  BSP_LCD_SetTransparency(0, 0xFF);
 8001196:	21ff      	movs	r1, #255	@ 0xff
 8001198:	2000      	movs	r0, #0
 800119a:	f004 fc73 	bl	8005a84 <BSP_LCD_SetTransparency>

  BSP_LCD_DisplayOn();
 800119e:	f004 ffd9 	bl	8006154 <BSP_LCD_DisplayOn>

  uint8_t chNapis[45];

  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80011a2:	4856      	ldr	r0, [pc, #344]	@ (80012fc <main+0x258>)
 80011a4:	f004 fca2 	bl	8005aec <BSP_LCD_SetTextColor>
  sprintf((char*)chNapis, "AutoPitLot2 na STM32F746G-DISCO @%lu MHz", (uint32_t)HAL_RCC_GetSysClockFreq()/1000000);
 80011a8:	f00e fe02 	bl	800fdb0 <HAL_RCC_GetSysClockFreq>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4a54      	ldr	r2, [pc, #336]	@ (8001300 <main+0x25c>)
 80011b0:	fba2 2303 	umull	r2, r3, r2, r3
 80011b4:	0c9a      	lsrs	r2, r3, #18
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	4952      	ldr	r1, [pc, #328]	@ (8001304 <main+0x260>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f025 fb7d 	bl	80268bc <siprintf>
  BSP_LCD_DisplayStringAt(0, 5, chNapis, CENTER_MODE);
 80011c2:	f107 0220 	add.w	r2, r7, #32
 80011c6:	2301      	movs	r3, #1
 80011c8:	2105      	movs	r1, #5
 80011ca:	2000      	movs	r0, #0
 80011cc:	f004 fd46 	bl	8005c5c <BSP_LCD_DisplayStringAt>

  //przyciski tło
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80011d0:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80011d4:	f004 fc8a 	bl	8005aec <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(KLAW_POZ_X, KLAW1_Y, KLAW_ROZ_X, KLAW_ROZ_Y);		//ramka przycisku robienia zdjecia
 80011d8:	2324      	movs	r3, #36	@ 0x24
 80011da:	2287      	movs	r2, #135	@ 0x87
 80011dc:	2119      	movs	r1, #25
 80011de:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 80011e2:	f004 ff3d 	bl	8006060 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(KLAW_POZ_X, KLAW2_Y, KLAW_ROZ_X, KLAW_ROZ_Y);		//ramka przycisku startu filmu
 80011e6:	2324      	movs	r3, #36	@ 0x24
 80011e8:	2287      	movs	r2, #135	@ 0x87
 80011ea:	214b      	movs	r1, #75	@ 0x4b
 80011ec:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 80011f0:	f004 ff36 	bl	8006060 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(KLAW_POZ_X, KLAW3_Y, KLAW_ROZ_X, KLAW_ROZ_Y);		//ramka przycisku stopu filmu
 80011f4:	2324      	movs	r3, #36	@ 0x24
 80011f6:	2287      	movs	r2, #135	@ 0x87
 80011f8:	217d      	movs	r1, #125	@ 0x7d
 80011fa:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 80011fe:	f004 ff2f 	bl	8006060 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(KLAW_POZ_X, KLAW4_Y, KLAW_ROZ_X, KLAW_ROZ_Y);		//ramka przycisku stopu filmu
 8001202:	2324      	movs	r3, #36	@ 0x24
 8001204:	2287      	movs	r2, #135	@ 0x87
 8001206:	21af      	movs	r1, #175	@ 0xaf
 8001208:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 800120c:	f004 ff28 	bl	8006060 <BSP_LCD_FillRect>

  //przyciski ramka
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001210:	483a      	ldr	r0, [pc, #232]	@ (80012fc <main+0x258>)
 8001212:	f004 fc6b 	bl	8005aec <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(KLAW_POZ_X, KLAW1_Y, KLAW_ROZ_X, KLAW_ROZ_Y);		//ramka przycisku robienia zdjecia
 8001216:	2324      	movs	r3, #36	@ 0x24
 8001218:	2287      	movs	r2, #135	@ 0x87
 800121a:	2119      	movs	r1, #25
 800121c:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 8001220:	f004 fea4 	bl	8005f6c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(KLAW_POZ_X, KLAW2_Y, KLAW_ROZ_X, KLAW_ROZ_Y);		//ramka przycisku startu filmu
 8001224:	2324      	movs	r3, #36	@ 0x24
 8001226:	2287      	movs	r2, #135	@ 0x87
 8001228:	214b      	movs	r1, #75	@ 0x4b
 800122a:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 800122e:	f004 fe9d 	bl	8005f6c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(KLAW_POZ_X, KLAW3_Y, KLAW_ROZ_X, KLAW_ROZ_Y);		//ramka przycisku stopu filmu
 8001232:	2324      	movs	r3, #36	@ 0x24
 8001234:	2287      	movs	r2, #135	@ 0x87
 8001236:	217d      	movs	r1, #125	@ 0x7d
 8001238:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 800123c:	f004 fe96 	bl	8005f6c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(KLAW_POZ_X, KLAW4_Y, KLAW_ROZ_X, KLAW_ROZ_Y);		//ramka przycisku demo
 8001240:	2324      	movs	r3, #36	@ 0x24
 8001242:	2287      	movs	r2, #135	@ 0x87
 8001244:	21af      	movs	r1, #175	@ 0xaf
 8001246:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 800124a:	f004 fe8f 	bl	8005f6c <BSP_LCD_DrawRect>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800124e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001252:	f004 fc4b 	bl	8005aec <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001256:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800125a:	f004 fc5f 	bl	8005b1c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(KLAW_POZ_X+5, KLAW1_Y+NAPIS_OFFY, ( uint8_t*)"Zdjecie", LEFT_MODE);
 800125e:	2303      	movs	r3, #3
 8001260:	4a29      	ldr	r2, [pc, #164]	@ (8001308 <main+0x264>)
 8001262:	2125      	movs	r1, #37	@ 0x25
 8001264:	f240 1059 	movw	r0, #345	@ 0x159
 8001268:	f004 fcf8 	bl	8005c5c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(KLAW_POZ_X+5, KLAW2_Y+NAPIS_OFFY, ( uint8_t*)"Start Film", LEFT_MODE);
 800126c:	2303      	movs	r3, #3
 800126e:	4a27      	ldr	r2, [pc, #156]	@ (800130c <main+0x268>)
 8001270:	2157      	movs	r1, #87	@ 0x57
 8001272:	f240 1059 	movw	r0, #345	@ 0x159
 8001276:	f004 fcf1 	bl	8005c5c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(KLAW_POZ_X+5, KLAW3_Y+NAPIS_OFFY, ( uint8_t*)"wolny...", LEFT_MODE);
 800127a:	2303      	movs	r3, #3
 800127c:	4a24      	ldr	r2, [pc, #144]	@ (8001310 <main+0x26c>)
 800127e:	2189      	movs	r1, #137	@ 0x89
 8001280:	f240 1059 	movw	r0, #345	@ 0x159
 8001284:	f004 fcea 	bl	8005c5c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(KLAW_POZ_X+5, KLAW4_Y+NAPIS_OFFY, ( uint8_t*)"Julia",  LEFT_MODE);
 8001288:	2303      	movs	r3, #3
 800128a:	4a22      	ldr	r2, [pc, #136]	@ (8001314 <main+0x270>)
 800128c:	21bb      	movs	r1, #187	@ 0xbb
 800128e:	f240 1059 	movw	r0, #345	@ 0x159
 8001292:	f004 fce3 	bl	8005c5c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001296:	f04f 30ff 	mov.w	r0, #4294967295
 800129a:	f004 fc3f 	bl	8005b1c <BSP_LCD_SetBackColor>

  //obraz
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800129e:	4817      	ldr	r0, [pc, #92]	@ (80012fc <main+0x258>)
 80012a0:	f004 fc24 	bl	8005aec <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(4, 25, 321, 241);		//ramka obrazu
 80012a4:	23f1      	movs	r3, #241	@ 0xf1
 80012a6:	f240 1241 	movw	r2, #321	@ 0x141
 80012aa:	2119      	movs	r1, #25
 80012ac:	2004      	movs	r0, #4
 80012ae:	f004 fe5d 	bl	8005f6c <BSP_LCD_DrawRect>
  BSP_LCD_SelectLayer(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f004 fbd6 	bl	8005a64 <BSP_LCD_SelectLayer>
  BSP_LCD_SetLayerWindow(1, 5, 26, 320, 240);
 80012b8:	23f0      	movs	r3, #240	@ 0xf0
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80012c0:	221a      	movs	r2, #26
 80012c2:	2105      	movs	r1, #5
 80012c4:	2001      	movs	r0, #1
 80012c6:	f004 fbef 	bl	8005aa8 <BSP_LCD_SetLayerWindow>
  BSP_LCD_SelectLayer(0);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f004 fbca 	bl	8005a64 <BSP_LCD_SelectLayer>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <main+0x274>)
 80012d2:	1d3c      	adds	r4, r7, #4
 80012d4:	461d      	mov	r5, r3
 80012d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f016 fc45 	bl	8017b76 <osThreadCreate>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a0b      	ldr	r2, [pc, #44]	@ (800131c <main+0x278>)
 80012f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012f2:	f016 fc29 	bl	8017b48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012f6:	bf00      	nop
 80012f8:	e7fd      	b.n	80012f6 <main+0x252>
 80012fa:	bf00      	nop
 80012fc:	ff0000ff 	.word	0xff0000ff
 8001300:	431bde83 	.word	0x431bde83
 8001304:	08028a80 	.word	0x08028a80
 8001308:	08028aac 	.word	0x08028aac
 800130c:	08028ab4 	.word	0x08028ab4
 8001310:	08028ac0 	.word	0x08028ac0
 8001314:	08028acc 	.word	0x08028acc
 8001318:	08028ae0 	.word	0x08028ae0
 800131c:	20010cb0 	.word	0x20010cb0

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b094      	sub	sp, #80	@ 0x50
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	2230      	movs	r2, #48	@ 0x30
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f025 fb51 	bl	80269d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001344:	f00e f882 	bl	800f44c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001348:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <SystemClock_Config+0xdc>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134c:	4a2b      	ldr	r2, [pc, #172]	@ (80013fc <SystemClock_Config+0xdc>)
 800134e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001352:	6413      	str	r3, [r2, #64]	@ 0x40
 8001354:	4b29      	ldr	r3, [pc, #164]	@ (80013fc <SystemClock_Config+0xdc>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <SystemClock_Config+0xe0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a26      	ldr	r2, [pc, #152]	@ (8001400 <SystemClock_Config+0xe0>)
 8001366:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <SystemClock_Config+0xe0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001378:	2309      	movs	r3, #9
 800137a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001382:	2301      	movs	r3, #1
 8001384:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800138e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001390:	2319      	movs	r3, #25
 8001392:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001394:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001398:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800139a:	2302      	movs	r3, #2
 800139c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800139e:	2309      	movs	r3, #9
 80013a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a2:	f107 0320 	add.w	r3, r7, #32
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00e f972 	bl	800f690 <HAL_RCC_OscConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013b2:	f001 faf1 	bl	8002998 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013b6:	f00e f859 	bl	800f46c <HAL_PWREx_EnableOverDrive>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80013c0:	f001 faea 	bl	8002998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c4:	230f      	movs	r3, #15
 80013c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c8:	2302      	movs	r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2106      	movs	r1, #6
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00e fbf8 	bl	800fbd8 <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013ee:	f001 fad3 	bl	8002998 <Error_Handler>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3750      	adds	r7, #80	@ 0x50
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000

08001404 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0a2      	sub	sp, #136	@ 0x88
 8001408:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2284      	movs	r2, #132	@ 0x84
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f025 fae0 	bl	80269d6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001416:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <PeriphCommonClock_Config+0x60>)
 8001418:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800141a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800141e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001420:	2305      	movs	r3, #5
 8001422:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001424:	2302      	movs	r3, #2
 8001426:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001428:	2303      	movs	r3, #3
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001430:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001434:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001436:	2300      	movs	r3, #0
 8001438:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800143a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800143e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4618      	mov	r0, r3
 800144c:	f00e fddc 	bl	8010008 <HAL_RCCEx_PeriphCLKConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001456:	f001 fa9f 	bl	8002998 <Error_Handler>
  }
}
 800145a:	bf00      	nop
 800145c:	3788      	adds	r7, #136	@ 0x88
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	00b00008 	.word	0x00b00008

08001468 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146e:	463b      	mov	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <MX_ADC3_Init+0x98>)
 800147c:	4a21      	ldr	r2, [pc, #132]	@ (8001504 <MX_ADC3_Init+0x9c>)
 800147e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001480:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <MX_ADC3_Init+0x98>)
 8001482:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001486:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001488:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <MX_ADC3_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800148e:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <MX_ADC3_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <MX_ADC3_Init+0x98>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800149a:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <MX_ADC3_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a2:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <MX_ADC3_Init+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <MX_ADC3_Init+0x98>)
 80014aa:	4a17      	ldr	r2, [pc, #92]	@ (8001508 <MX_ADC3_Init+0xa0>)
 80014ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ae:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_ADC3_Init+0x98>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <MX_ADC3_Init+0x98>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_ADC3_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <MX_ADC3_Init+0x98>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014c8:	480d      	ldr	r0, [pc, #52]	@ (8001500 <MX_ADC3_Init+0x98>)
 80014ca:	f005 fced 	bl	8006ea8 <HAL_ADC_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80014d4:	f001 fa60 	bl	8002998 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014d8:	2304      	movs	r3, #4
 80014da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014dc:	2301      	movs	r3, #1
 80014de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_ADC3_Init+0x98>)
 80014ea:	f005 fd21 	bl	8006f30 <HAL_ADC_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80014f4:	f001 fa50 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20010534 	.word	0x20010534
 8001504:	40012200 	.word	0x40012200
 8001508:	0f000001 	.word	0x0f000001

0800150c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <MX_CRC_Init+0x3c>)
 8001512:	4a0e      	ldr	r2, [pc, #56]	@ (800154c <MX_CRC_Init+0x40>)
 8001514:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <MX_CRC_Init+0x3c>)
 8001518:	2200      	movs	r2, #0
 800151a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <MX_CRC_Init+0x3c>)
 800151e:	2200      	movs	r2, #0
 8001520:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <MX_CRC_Init+0x3c>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001528:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <MX_CRC_Init+0x3c>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <MX_CRC_Init+0x3c>)
 8001530:	2201      	movs	r2, #1
 8001532:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001534:	4804      	ldr	r0, [pc, #16]	@ (8001548 <MX_CRC_Init+0x3c>)
 8001536:	f006 f8a5 	bl	8007684 <HAL_CRC_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001540:	f001 fa2a 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2001057c 	.word	0x2001057c
 800154c:	40023000 	.word	0x40023000

08001550 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001554:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <MX_DCMI_Init+0x60>)
 8001556:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <MX_DCMI_Init+0x64>)
 8001558:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <MX_DCMI_Init+0x60>)
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <MX_DCMI_Init+0x60>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_DCMI_Init+0x60>)
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <MX_DCMI_Init+0x60>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001572:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_DCMI_Init+0x60>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001578:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <MX_DCMI_Init+0x60>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_DCMI_Init+0x60>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_DCMI_Init+0x60>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_DCMI_Init+0x60>)
 800158c:	2200      	movs	r2, #0
 800158e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <MX_DCMI_Init+0x60>)
 8001592:	2200      	movs	r2, #0
 8001594:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_DCMI_Init+0x60>)
 8001598:	2200      	movs	r2, #0
 800159a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_DCMI_Init+0x60>)
 800159e:	f006 f963 	bl	8007868 <HAL_DCMI_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80015a8:	f001 f9f6 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200105a0 	.word	0x200105a0
 80015b4:	50050000 	.word	0x50050000

080015b8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80015bc:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <MX_DMA2D_Init+0x5c>)
 80015be:	4a16      	ldr	r2, [pc, #88]	@ (8001618 <MX_DMA2D_Init+0x60>)
 80015c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80015c2:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <MX_DMA2D_Init+0x5c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <MX_DMA2D_Init+0x5c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <MX_DMA2D_Init+0x5c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <MX_DMA2D_Init+0x5c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_DMA2D_Init+0x5c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_DMA2D_Init+0x5c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <MX_DMA2D_Init+0x5c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80015ec:	4809      	ldr	r0, [pc, #36]	@ (8001614 <MX_DMA2D_Init+0x5c>)
 80015ee:	f007 f911 	bl	8008814 <HAL_DMA2D_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80015f8:	f001 f9ce 	bl	8002998 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80015fc:	2101      	movs	r1, #1
 80015fe:	4805      	ldr	r0, [pc, #20]	@ (8001614 <MX_DMA2D_Init+0x5c>)
 8001600:	f007 fb76 	bl	8008cf0 <HAL_DMA2D_ConfigLayer>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800160a:	f001 f9c5 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200105f0 	.word	0x200105f0
 8001618:	4002b000 	.word	0x4002b000

0800161c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <MX_I2C1_Init+0x74>)
 8001622:	4a1c      	ldr	r2, [pc, #112]	@ (8001694 <MX_I2C1_Init+0x78>)
 8001624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <MX_I2C1_Init+0x74>)
 8001628:	4a1b      	ldr	r2, [pc, #108]	@ (8001698 <MX_I2C1_Init+0x7c>)
 800162a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800162c:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <MX_I2C1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001632:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <MX_I2C1_Init+0x74>)
 8001634:	2201      	movs	r2, #1
 8001636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001638:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <MX_I2C1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800163e:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <MX_I2C1_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <MX_I2C1_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164a:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <MX_I2C1_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001650:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <MX_I2C1_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001656:	480e      	ldr	r0, [pc, #56]	@ (8001690 <MX_I2C1_Init+0x74>)
 8001658:	f00c fc5c 	bl	800df14 <HAL_I2C_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001662:	f001 f999 	bl	8002998 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4809      	ldr	r0, [pc, #36]	@ (8001690 <MX_I2C1_Init+0x74>)
 800166a:	f00d fa1d 	bl	800eaa8 <HAL_I2CEx_ConfigAnalogFilter>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001674:	f001 f990 	bl	8002998 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001678:	2100      	movs	r1, #0
 800167a:	4805      	ldr	r0, [pc, #20]	@ (8001690 <MX_I2C1_Init+0x74>)
 800167c:	f00d fa5f 	bl	800eb3e <HAL_I2CEx_ConfigDigitalFilter>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001686:	f001 f987 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20010630 	.word	0x20010630
 8001694:	40005400 	.word	0x40005400
 8001698:	00c0eaff 	.word	0x00c0eaff

0800169c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <MX_I2C3_Init+0x74>)
 80016a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001714 <MX_I2C3_Init+0x78>)
 80016a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <MX_I2C3_Init+0x74>)
 80016a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001718 <MX_I2C3_Init+0x7c>)
 80016aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <MX_I2C3_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b2:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <MX_I2C3_Init+0x74>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <MX_I2C3_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016be:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <MX_I2C3_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <MX_I2C3_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <MX_I2C3_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <MX_I2C3_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016d6:	480e      	ldr	r0, [pc, #56]	@ (8001710 <MX_I2C3_Init+0x74>)
 80016d8:	f00c fc1c 	bl	800df14 <HAL_I2C_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80016e2:	f001 f959 	bl	8002998 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016e6:	2100      	movs	r1, #0
 80016e8:	4809      	ldr	r0, [pc, #36]	@ (8001710 <MX_I2C3_Init+0x74>)
 80016ea:	f00d f9dd 	bl	800eaa8 <HAL_I2CEx_ConfigAnalogFilter>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80016f4:	f001 f950 	bl	8002998 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80016f8:	2100      	movs	r1, #0
 80016fa:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_I2C3_Init+0x74>)
 80016fc:	f00d fa1f 	bl	800eb3e <HAL_I2CEx_ConfigDigitalFilter>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001706:	f001 f947 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20010684 	.word	0x20010684
 8001714:	40005c00 	.word	0x40005c00
 8001718:	00c0eaff 	.word	0x00c0eaff

0800171c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08e      	sub	sp, #56	@ 0x38
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2234      	movs	r2, #52	@ 0x34
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f025 f954 	bl	80269d6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800172e:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <MX_LTDC_Init+0xfc>)
 8001730:	4a3a      	ldr	r2, [pc, #232]	@ (800181c <MX_LTDC_Init+0x100>)
 8001732:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001734:	4b38      	ldr	r3, [pc, #224]	@ (8001818 <MX_LTDC_Init+0xfc>)
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800173a:	4b37      	ldr	r3, [pc, #220]	@ (8001818 <MX_LTDC_Init+0xfc>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001740:	4b35      	ldr	r3, [pc, #212]	@ (8001818 <MX_LTDC_Init+0xfc>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001746:	4b34      	ldr	r3, [pc, #208]	@ (8001818 <MX_LTDC_Init+0xfc>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800174c:	4b32      	ldr	r3, [pc, #200]	@ (8001818 <MX_LTDC_Init+0xfc>)
 800174e:	2228      	movs	r2, #40	@ 0x28
 8001750:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001752:	4b31      	ldr	r3, [pc, #196]	@ (8001818 <MX_LTDC_Init+0xfc>)
 8001754:	2209      	movs	r2, #9
 8001756:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001758:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <MX_LTDC_Init+0xfc>)
 800175a:	2235      	movs	r2, #53	@ 0x35
 800175c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800175e:	4b2e      	ldr	r3, [pc, #184]	@ (8001818 <MX_LTDC_Init+0xfc>)
 8001760:	220b      	movs	r2, #11
 8001762:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001764:	4b2c      	ldr	r3, [pc, #176]	@ (8001818 <MX_LTDC_Init+0xfc>)
 8001766:	f240 2215 	movw	r2, #533	@ 0x215
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800176c:	4b2a      	ldr	r3, [pc, #168]	@ (8001818 <MX_LTDC_Init+0xfc>)
 800176e:	f240 121b 	movw	r2, #283	@ 0x11b
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001774:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <MX_LTDC_Init+0xfc>)
 8001776:	f240 2235 	movw	r2, #565	@ 0x235
 800177a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 800177c:	4b26      	ldr	r3, [pc, #152]	@ (8001818 <MX_LTDC_Init+0xfc>)
 800177e:	f240 121d 	movw	r2, #285	@ 0x11d
 8001782:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001784:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <MX_LTDC_Init+0xfc>)
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800178c:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <MX_LTDC_Init+0xfc>)
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001794:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <MX_LTDC_Init+0xfc>)
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800179c:	481e      	ldr	r0, [pc, #120]	@ (8001818 <MX_LTDC_Init+0xfc>)
 800179e:	f00d fa1b 	bl	800ebd8 <HAL_LTDC_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80017a8:	f001 f8f6 	bl	8002998 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80017b0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80017b4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80017ba:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80017be:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80017c0:	2302      	movs	r3, #2
 80017c2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80017c4:	23ff      	movs	r3, #255	@ 0xff
 80017c6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80017cc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017d0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80017d2:	2307      	movs	r3, #7
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80017d6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80017dc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80017e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80017e2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80017e6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_LTDC_Init+0xfc>)
 8001802:	f00d fb7b 	bl	800eefc <HAL_LTDC_ConfigLayer>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800180c:	f001 f8c4 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	3738      	adds	r7, #56	@ 0x38
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200106d8 	.word	0x200106d8
 800181c:	40016800 	.word	0x40016800

08001820 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <MX_QUADSPI_Init+0x50>)
 8001826:	4a13      	ldr	r2, [pc, #76]	@ (8001874 <MX_QUADSPI_Init+0x54>)
 8001828:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <MX_QUADSPI_Init+0x50>)
 800182c:	2201      	movs	r2, #1
 800182e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001830:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <MX_QUADSPI_Init+0x50>)
 8001832:	2204      	movs	r2, #4
 8001834:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <MX_QUADSPI_Init+0x50>)
 8001838:	2210      	movs	r2, #16
 800183a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <MX_QUADSPI_Init+0x50>)
 800183e:	2218      	movs	r2, #24
 8001840:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001842:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <MX_QUADSPI_Init+0x50>)
 8001844:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001848:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <MX_QUADSPI_Init+0x50>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001850:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <MX_QUADSPI_Init+0x50>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <MX_QUADSPI_Init+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	@ (8001870 <MX_QUADSPI_Init+0x50>)
 800185e:	f00d fe55 	bl	800f50c <HAL_QSPI_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001868:	f001 f896 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20010780 	.word	0x20010780
 8001874:	a0001000 	.word	0xa0001000

08001878 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b090      	sub	sp, #64	@ 0x40
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800187e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800188e:	2300      	movs	r3, #0
 8001890:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001892:	463b      	mov	r3, r7
 8001894:	2228      	movs	r2, #40	@ 0x28
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f025 f89c 	bl	80269d6 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800189e:	4b46      	ldr	r3, [pc, #280]	@ (80019b8 <MX_RTC_Init+0x140>)
 80018a0:	4a46      	ldr	r2, [pc, #280]	@ (80019bc <MX_RTC_Init+0x144>)
 80018a2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018a4:	4b44      	ldr	r3, [pc, #272]	@ (80019b8 <MX_RTC_Init+0x140>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018aa:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <MX_RTC_Init+0x140>)
 80018ac:	227f      	movs	r2, #127	@ 0x7f
 80018ae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018b0:	4b41      	ldr	r3, [pc, #260]	@ (80019b8 <MX_RTC_Init+0x140>)
 80018b2:	22ff      	movs	r2, #255	@ 0xff
 80018b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018b6:	4b40      	ldr	r3, [pc, #256]	@ (80019b8 <MX_RTC_Init+0x140>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018bc:	4b3e      	ldr	r3, [pc, #248]	@ (80019b8 <MX_RTC_Init+0x140>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018c2:	4b3d      	ldr	r3, [pc, #244]	@ (80019b8 <MX_RTC_Init+0x140>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018c8:	483b      	ldr	r0, [pc, #236]	@ (80019b8 <MX_RTC_Init+0x140>)
 80018ca:	f00f f8cd 	bl	8010a68 <HAL_RTC_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80018d4:	f001 f860 	bl	8002998 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018f6:	2201      	movs	r2, #1
 80018f8:	4619      	mov	r1, r3
 80018fa:	482f      	ldr	r0, [pc, #188]	@ (80019b8 <MX_RTC_Init+0x140>)
 80018fc:	f00f f938 	bl	8010b70 <HAL_RTC_SetTime>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001906:	f001 f847 	bl	8002998 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800190a:	2301      	movs	r3, #1
 800190c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001910:	2301      	movs	r3, #1
 8001912:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001916:	2301      	movs	r3, #1
 8001918:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001922:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001926:	2201      	movs	r2, #1
 8001928:	4619      	mov	r1, r3
 800192a:	4823      	ldr	r0, [pc, #140]	@ (80019b8 <MX_RTC_Init+0x140>)
 800192c:	f00f f9ba 	bl	8010ca4 <HAL_RTC_SetDate>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001936:	f001 f82f 	bl	8002998 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800193a:	2300      	movs	r3, #0
 800193c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800193e:	2300      	movs	r3, #0
 8001940:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001942:	2300      	movs	r3, #0
 8001944:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800195e:	2301      	movs	r3, #1
 8001960:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001964:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800196a:	463b      	mov	r3, r7
 800196c:	2201      	movs	r2, #1
 800196e:	4619      	mov	r1, r3
 8001970:	4811      	ldr	r0, [pc, #68]	@ (80019b8 <MX_RTC_Init+0x140>)
 8001972:	f00f fa1b 	bl	8010dac <HAL_RTC_SetAlarm>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800197c:	f001 f80c 	bl	8002998 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001986:	463b      	mov	r3, r7
 8001988:	2201      	movs	r2, #1
 800198a:	4619      	mov	r1, r3
 800198c:	480a      	ldr	r0, [pc, #40]	@ (80019b8 <MX_RTC_Init+0x140>)
 800198e:	f00f fa0d 	bl	8010dac <HAL_RTC_SetAlarm>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001998:	f000 fffe 	bl	8002998 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800199c:	2202      	movs	r2, #2
 800199e:	2100      	movs	r1, #0
 80019a0:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <MX_RTC_Init+0x140>)
 80019a2:	f00f fbcd 	bl	8011140 <HAL_RTCEx_SetTimeStamp>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80019ac:	f000 fff4 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	3740      	adds	r7, #64	@ 0x40
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200107cc 	.word	0x200107cc
 80019bc:	40002800 	.word	0x40002800

080019c0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80019c4:	4b4d      	ldr	r3, [pc, #308]	@ (8001afc <MX_SAI2_Init+0x13c>)
 80019c6:	4a4e      	ldr	r2, [pc, #312]	@ (8001b00 <MX_SAI2_Init+0x140>)
 80019c8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80019ca:	4b4c      	ldr	r3, [pc, #304]	@ (8001afc <MX_SAI2_Init+0x13c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80019d0:	4b4a      	ldr	r3, [pc, #296]	@ (8001afc <MX_SAI2_Init+0x13c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80019d6:	4b49      	ldr	r3, [pc, #292]	@ (8001afc <MX_SAI2_Init+0x13c>)
 80019d8:	2240      	movs	r2, #64	@ 0x40
 80019da:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80019dc:	4b47      	ldr	r3, [pc, #284]	@ (8001afc <MX_SAI2_Init+0x13c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80019e2:	4b46      	ldr	r3, [pc, #280]	@ (8001afc <MX_SAI2_Init+0x13c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80019e8:	4b44      	ldr	r3, [pc, #272]	@ (8001afc <MX_SAI2_Init+0x13c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80019ee:	4b43      	ldr	r3, [pc, #268]	@ (8001afc <MX_SAI2_Init+0x13c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80019f4:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <MX_SAI2_Init+0x13c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80019fa:	4b40      	ldr	r3, [pc, #256]	@ (8001afc <MX_SAI2_Init+0x13c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001a00:	4b3e      	ldr	r3, [pc, #248]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a02:	4a40      	ldr	r2, [pc, #256]	@ (8001b04 <MX_SAI2_Init+0x144>)
 8001a04:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a06:	4b3d      	ldr	r3, [pc, #244]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001a12:	4b3a      	ldr	r3, [pc, #232]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001a18:	4b38      	ldr	r3, [pc, #224]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001a1e:	4b37      	ldr	r3, [pc, #220]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a20:	2208      	movs	r2, #8
 8001a22:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001a24:	4b35      	ldr	r3, [pc, #212]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001a2a:	4b34      	ldr	r3, [pc, #208]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a30:	4b32      	ldr	r3, [pc, #200]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001a36:	4b31      	ldr	r3, [pc, #196]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001a42:	4b2e      	ldr	r3, [pc, #184]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001a48:	4b2c      	ldr	r3, [pc, #176]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001a54:	4829      	ldr	r0, [pc, #164]	@ (8001afc <MX_SAI2_Init+0x13c>)
 8001a56:	f00f fbdb 	bl	8011210 <HAL_SAI_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001a60:	f000 ff9a 	bl	8002998 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001a64:	4b28      	ldr	r3, [pc, #160]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001a66:	4a29      	ldr	r2, [pc, #164]	@ (8001b0c <MX_SAI2_Init+0x14c>)
 8001a68:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a6a:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001a70:	4b25      	ldr	r3, [pc, #148]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001a72:	2203      	movs	r2, #3
 8001a74:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001a76:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001a78:	2240      	movs	r2, #64	@ 0x40
 8001a7a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a7c:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001a82:	4b21      	ldr	r3, [pc, #132]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001a88:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a94:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001aa0:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001aac:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001ab8:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001abe:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001aca:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001ae8:	4807      	ldr	r0, [pc, #28]	@ (8001b08 <MX_SAI2_Init+0x148>)
 8001aea:	f00f fb91 	bl	8011210 <HAL_SAI_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001af4:	f000 ff50 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200107ec 	.word	0x200107ec
 8001b00:	40015c04 	.word	0x40015c04
 8001b04:	0002ee00 	.word	0x0002ee00
 8001b08:	20010870 	.word	0x20010870
 8001b0c:	40015c24 	.word	0x40015c24

08001b10 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001b14:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <MX_SPDIFRX_Init+0x5c>)
 8001b16:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001b1a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <MX_SPDIFRX_Init+0x5c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001b22:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <MX_SPDIFRX_Init+0x5c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001b28:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <MX_SPDIFRX_Init+0x5c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <MX_SPDIFRX_Init+0x5c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001b34:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <MX_SPDIFRX_Init+0x5c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <MX_SPDIFRX_Init+0x5c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <MX_SPDIFRX_Init+0x5c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <MX_SPDIFRX_Init+0x5c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001b4c:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <MX_SPDIFRX_Init+0x5c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <MX_SPDIFRX_Init+0x5c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001b58:	4804      	ldr	r0, [pc, #16]	@ (8001b6c <MX_SPDIFRX_Init+0x5c>)
 8001b5a:	f00f fda1 	bl	80116a0 <HAL_SPDIFRX_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001b64:	f000 ff18 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200108f4 	.word	0x200108f4

08001b70 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001b76:	4a1c      	ldr	r2, [pc, #112]	@ (8001be8 <MX_SPI2_Init+0x78>)
 8001b78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001b7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b82:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b88:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001b8a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001b8e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ba2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001bca:	2208      	movs	r2, #8
 8001bcc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_SPI2_Init+0x74>)
 8001bd0:	f00f fdc2 	bl	8011758 <HAL_SPI_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001bda:	f000 fedd 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20010940 	.word	0x20010940
 8001be8:	40003800 	.word	0x40003800

08001bec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b09a      	sub	sp, #104	@ 0x68
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	222c      	movs	r2, #44	@ 0x2c
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f024 fed5 	bl	80269d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c2c:	4b43      	ldr	r3, [pc, #268]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001c2e:	4a44      	ldr	r2, [pc, #272]	@ (8001d40 <MX_TIM1_Init+0x154>)
 8001c30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c32:	4b42      	ldr	r3, [pc, #264]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c38:	4b40      	ldr	r3, [pc, #256]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001c40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c46:	4b3d      	ldr	r3, [pc, #244]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b3a      	ldr	r3, [pc, #232]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c58:	4838      	ldr	r0, [pc, #224]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001c5a:	f00f fe28 	bl	80118ae <HAL_TIM_Base_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c64:	f000 fe98 	bl	8002998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c72:	4619      	mov	r1, r3
 8001c74:	4831      	ldr	r0, [pc, #196]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001c76:	f010 f95b 	bl	8011f30 <HAL_TIM_ConfigClockSource>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c80:	f000 fe8a 	bl	8002998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c84:	482d      	ldr	r0, [pc, #180]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001c86:	f00f fee1 	bl	8011a4c <HAL_TIM_PWM_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c90:	f000 fe82 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ca0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4825      	ldr	r0, [pc, #148]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001ca8:	f010 fdd8 	bl	801285c <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001cb2:	f000 fe71 	bl	8002998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb6:	2360      	movs	r3, #96	@ 0x60
 8001cb8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4818      	ldr	r0, [pc, #96]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001cdc:	f010 f814 	bl	8011d08 <HAL_TIM_PWM_ConfigChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001ce6:	f000 fe57 	bl	8002998 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4807      	ldr	r0, [pc, #28]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001d20:	f010 fe2a 	bl	8012978 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001d2a:	f000 fe35 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d2e:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <MX_TIM1_Init+0x150>)
 8001d30:	f001 fb7c 	bl	800342c <HAL_TIM_MspPostInit>

}
 8001d34:	bf00      	nop
 8001d36:	3768      	adds	r7, #104	@ 0x68
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200109a4 	.word	0x200109a4
 8001d40:	40010000 	.word	0x40010000

08001d44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08e      	sub	sp, #56	@ 0x38
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d64:	463b      	mov	r3, r7
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d76:	4b2d      	ldr	r3, [pc, #180]	@ (8001e2c <MX_TIM2_Init+0xe8>)
 8001d78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e2c <MX_TIM2_Init+0xe8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b29      	ldr	r3, [pc, #164]	@ (8001e2c <MX_TIM2_Init+0xe8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d8a:	4b28      	ldr	r3, [pc, #160]	@ (8001e2c <MX_TIM2_Init+0xe8>)
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b26      	ldr	r3, [pc, #152]	@ (8001e2c <MX_TIM2_Init+0xe8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <MX_TIM2_Init+0xe8>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d9e:	4823      	ldr	r0, [pc, #140]	@ (8001e2c <MX_TIM2_Init+0xe8>)
 8001da0:	f00f fd85 	bl	80118ae <HAL_TIM_Base_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001daa:	f000 fdf5 	bl	8002998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001db8:	4619      	mov	r1, r3
 8001dba:	481c      	ldr	r0, [pc, #112]	@ (8001e2c <MX_TIM2_Init+0xe8>)
 8001dbc:	f010 f8b8 	bl	8011f30 <HAL_TIM_ConfigClockSource>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001dc6:	f000 fde7 	bl	8002998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dca:	4818      	ldr	r0, [pc, #96]	@ (8001e2c <MX_TIM2_Init+0xe8>)
 8001dcc:	f00f fe3e 	bl	8011a4c <HAL_TIM_PWM_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001dd6:	f000 fddf 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	4619      	mov	r1, r3
 8001de8:	4810      	ldr	r0, [pc, #64]	@ (8001e2c <MX_TIM2_Init+0xe8>)
 8001dea:	f010 fd37 	bl	801285c <HAL_TIMEx_MasterConfigSynchronization>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001df4:	f000 fdd0 	bl	8002998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df8:	2360      	movs	r3, #96	@ 0x60
 8001dfa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e08:	463b      	mov	r3, r7
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4807      	ldr	r0, [pc, #28]	@ (8001e2c <MX_TIM2_Init+0xe8>)
 8001e10:	f00f ff7a 	bl	8011d08 <HAL_TIM_PWM_ConfigChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001e1a:	f000 fdbd 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e1e:	4803      	ldr	r0, [pc, #12]	@ (8001e2c <MX_TIM2_Init+0xe8>)
 8001e20:	f001 fb04 	bl	800342c <HAL_TIM_MspPostInit>

}
 8001e24:	bf00      	nop
 8001e26:	3738      	adds	r7, #56	@ 0x38
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200109f0 	.word	0x200109f0

08001e30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08e      	sub	sp, #56	@ 0x38
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e50:	463b      	mov	r3, r7
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
 8001e5e:	615a      	str	r2, [r3, #20]
 8001e60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e62:	4b2d      	ldr	r3, [pc, #180]	@ (8001f18 <MX_TIM3_Init+0xe8>)
 8001e64:	4a2d      	ldr	r2, [pc, #180]	@ (8001f1c <MX_TIM3_Init+0xec>)
 8001e66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <MX_TIM3_Init+0xe8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f18 <MX_TIM3_Init+0xe8>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e74:	4b28      	ldr	r3, [pc, #160]	@ (8001f18 <MX_TIM3_Init+0xe8>)
 8001e76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7c:	4b26      	ldr	r3, [pc, #152]	@ (8001f18 <MX_TIM3_Init+0xe8>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e82:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <MX_TIM3_Init+0xe8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e88:	4823      	ldr	r0, [pc, #140]	@ (8001f18 <MX_TIM3_Init+0xe8>)
 8001e8a:	f00f fd10 	bl	80118ae <HAL_TIM_Base_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001e94:	f000 fd80 	bl	8002998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	481c      	ldr	r0, [pc, #112]	@ (8001f18 <MX_TIM3_Init+0xe8>)
 8001ea6:	f010 f843 	bl	8011f30 <HAL_TIM_ConfigClockSource>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001eb0:	f000 fd72 	bl	8002998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001eb4:	4818      	ldr	r0, [pc, #96]	@ (8001f18 <MX_TIM3_Init+0xe8>)
 8001eb6:	f00f fdc9 	bl	8011a4c <HAL_TIM_PWM_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001ec0:	f000 fd6a 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4811      	ldr	r0, [pc, #68]	@ (8001f18 <MX_TIM3_Init+0xe8>)
 8001ed4:	f010 fcc2 	bl	801285c <HAL_TIMEx_MasterConfigSynchronization>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001ede:	f000 fd5b 	bl	8002998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee2:	2360      	movs	r3, #96	@ 0x60
 8001ee4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4807      	ldr	r0, [pc, #28]	@ (8001f18 <MX_TIM3_Init+0xe8>)
 8001efa:	f00f ff05 	bl	8011d08 <HAL_TIM_PWM_ConfigChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f04:	f000 fd48 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f08:	4803      	ldr	r0, [pc, #12]	@ (8001f18 <MX_TIM3_Init+0xe8>)
 8001f0a:	f001 fa8f 	bl	800342c <HAL_TIM_MspPostInit>

}
 8001f0e:	bf00      	nop
 8001f10:	3738      	adds	r7, #56	@ 0x38
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20010a3c 	.word	0x20010a3c
 8001f1c:	40000400 	.word	0x40000400

08001f20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08e      	sub	sp, #56	@ 0x38
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f40:	463b      	mov	r3, r7
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	615a      	str	r2, [r3, #20]
 8001f50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f52:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <MX_TIM5_Init+0xe8>)
 8001f54:	4a2d      	ldr	r2, [pc, #180]	@ (800200c <MX_TIM5_Init+0xec>)
 8001f56:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f58:	4b2b      	ldr	r3, [pc, #172]	@ (8002008 <MX_TIM5_Init+0xe8>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002008 <MX_TIM5_Init+0xe8>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f64:	4b28      	ldr	r3, [pc, #160]	@ (8002008 <MX_TIM5_Init+0xe8>)
 8001f66:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6c:	4b26      	ldr	r3, [pc, #152]	@ (8002008 <MX_TIM5_Init+0xe8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f72:	4b25      	ldr	r3, [pc, #148]	@ (8002008 <MX_TIM5_Init+0xe8>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f78:	4823      	ldr	r0, [pc, #140]	@ (8002008 <MX_TIM5_Init+0xe8>)
 8001f7a:	f00f fc98 	bl	80118ae <HAL_TIM_Base_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001f84:	f000 fd08 	bl	8002998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f92:	4619      	mov	r1, r3
 8001f94:	481c      	ldr	r0, [pc, #112]	@ (8002008 <MX_TIM5_Init+0xe8>)
 8001f96:	f00f ffcb 	bl	8011f30 <HAL_TIM_ConfigClockSource>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001fa0:	f000 fcfa 	bl	8002998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001fa4:	4818      	ldr	r0, [pc, #96]	@ (8002008 <MX_TIM5_Init+0xe8>)
 8001fa6:	f00f fd51 	bl	8011a4c <HAL_TIM_PWM_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001fb0:	f000 fcf2 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4811      	ldr	r0, [pc, #68]	@ (8002008 <MX_TIM5_Init+0xe8>)
 8001fc4:	f010 fc4a 	bl	801285c <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001fce:	f000 fce3 	bl	8002998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd2:	2360      	movs	r3, #96	@ 0x60
 8001fd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	220c      	movs	r2, #12
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4807      	ldr	r0, [pc, #28]	@ (8002008 <MX_TIM5_Init+0xe8>)
 8001fea:	f00f fe8d 	bl	8011d08 <HAL_TIM_PWM_ConfigChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001ff4:	f000 fcd0 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001ff8:	4803      	ldr	r0, [pc, #12]	@ (8002008 <MX_TIM5_Init+0xe8>)
 8001ffa:	f001 fa17 	bl	800342c <HAL_TIM_MspPostInit>

}
 8001ffe:	bf00      	nop
 8002000:	3738      	adds	r7, #56	@ 0x38
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20010a88 	.word	0x20010a88
 800200c:	40000c00 	.word	0x40000c00

08002010 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002016:	f107 0310 	add.w	r3, r7, #16
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <MX_TIM8_Init+0xa0>)
 8002030:	4a20      	ldr	r2, [pc, #128]	@ (80020b4 <MX_TIM8_Init+0xa4>)
 8002032:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002034:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <MX_TIM8_Init+0xa0>)
 8002036:	2200      	movs	r2, #0
 8002038:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <MX_TIM8_Init+0xa0>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002040:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <MX_TIM8_Init+0xa0>)
 8002042:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002046:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002048:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <MX_TIM8_Init+0xa0>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800204e:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <MX_TIM8_Init+0xa0>)
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002054:	4b16      	ldr	r3, [pc, #88]	@ (80020b0 <MX_TIM8_Init+0xa0>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800205a:	4815      	ldr	r0, [pc, #84]	@ (80020b0 <MX_TIM8_Init+0xa0>)
 800205c:	f00f fc27 	bl	80118ae <HAL_TIM_Base_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002066:	f000 fc97 	bl	8002998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800206a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800206e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	4619      	mov	r1, r3
 8002076:	480e      	ldr	r0, [pc, #56]	@ (80020b0 <MX_TIM8_Init+0xa0>)
 8002078:	f00f ff5a 	bl	8011f30 <HAL_TIM_ConfigClockSource>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002082:	f000 fc89 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4806      	ldr	r0, [pc, #24]	@ (80020b0 <MX_TIM8_Init+0xa0>)
 8002098:	f010 fbe0 	bl	801285c <HAL_TIMEx_MasterConfigSynchronization>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80020a2:	f000 fc79 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	3720      	adds	r7, #32
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20010ad4 	.word	0x20010ad4
 80020b4:	40010400 	.word	0x40010400

080020b8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	615a      	str	r2, [r3, #20]
 80020ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80020d0:	4b1a      	ldr	r3, [pc, #104]	@ (800213c <MX_TIM12_Init+0x84>)
 80020d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002140 <MX_TIM12_Init+0x88>)
 80020d4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80020d6:	4b19      	ldr	r3, [pc, #100]	@ (800213c <MX_TIM12_Init+0x84>)
 80020d8:	2200      	movs	r2, #0
 80020da:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020dc:	4b17      	ldr	r3, [pc, #92]	@ (800213c <MX_TIM12_Init+0x84>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80020e2:	4b16      	ldr	r3, [pc, #88]	@ (800213c <MX_TIM12_Init+0x84>)
 80020e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020e8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ea:	4b14      	ldr	r3, [pc, #80]	@ (800213c <MX_TIM12_Init+0x84>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <MX_TIM12_Init+0x84>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80020f6:	4811      	ldr	r0, [pc, #68]	@ (800213c <MX_TIM12_Init+0x84>)
 80020f8:	f00f fca8 	bl	8011a4c <HAL_TIM_PWM_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002102:	f000 fc49 	bl	8002998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002106:	2360      	movs	r3, #96	@ 0x60
 8002108:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	2200      	movs	r2, #0
 800211a:	4619      	mov	r1, r3
 800211c:	4807      	ldr	r0, [pc, #28]	@ (800213c <MX_TIM12_Init+0x84>)
 800211e:	f00f fdf3 	bl	8011d08 <HAL_TIM_PWM_ConfigChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002128:	f000 fc36 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800212c:	4803      	ldr	r0, [pc, #12]	@ (800213c <MX_TIM12_Init+0x84>)
 800212e:	f001 f97d 	bl	800342c <HAL_TIM_MspPostInit>

}
 8002132:	bf00      	nop
 8002134:	3720      	adds	r7, #32
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20010b20 	.word	0x20010b20
 8002140:	40001800 	.word	0x40001800

08002144 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <MX_USART1_UART_Init+0x58>)
 800214a:	4a15      	ldr	r2, [pc, #84]	@ (80021a0 <MX_USART1_UART_Init+0x5c>)
 800214c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800214e:	4b13      	ldr	r3, [pc, #76]	@ (800219c <MX_USART1_UART_Init+0x58>)
 8002150:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002154:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002156:	4b11      	ldr	r3, [pc, #68]	@ (800219c <MX_USART1_UART_Init+0x58>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800215c:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <MX_USART1_UART_Init+0x58>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002162:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <MX_USART1_UART_Init+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002168:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <MX_USART1_UART_Init+0x58>)
 800216a:	220c      	movs	r2, #12
 800216c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <MX_USART1_UART_Init+0x58>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002174:	4b09      	ldr	r3, [pc, #36]	@ (800219c <MX_USART1_UART_Init+0x58>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800217a:	4b08      	ldr	r3, [pc, #32]	@ (800219c <MX_USART1_UART_Init+0x58>)
 800217c:	2200      	movs	r2, #0
 800217e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <MX_USART1_UART_Init+0x58>)
 8002182:	2200      	movs	r2, #0
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002186:	4805      	ldr	r0, [pc, #20]	@ (800219c <MX_USART1_UART_Init+0x58>)
 8002188:	f010 fc92 	bl	8012ab0 <HAL_UART_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002192:	f000 fc01 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20010b6c 	.word	0x20010b6c
 80021a0:	40011000 	.word	0x40011000

080021a4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021a8:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <MX_USART6_UART_Init+0x58>)
 80021aa:	4a15      	ldr	r2, [pc, #84]	@ (8002200 <MX_USART6_UART_Init+0x5c>)
 80021ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021ae:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <MX_USART6_UART_Init+0x58>)
 80021b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <MX_USART6_UART_Init+0x58>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	@ (80021fc <MX_USART6_UART_Init+0x58>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <MX_USART6_UART_Init+0x58>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <MX_USART6_UART_Init+0x58>)
 80021ca:	220c      	movs	r2, #12
 80021cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <MX_USART6_UART_Init+0x58>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d4:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <MX_USART6_UART_Init+0x58>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <MX_USART6_UART_Init+0x58>)
 80021dc:	2200      	movs	r2, #0
 80021de:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <MX_USART6_UART_Init+0x58>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021e6:	4805      	ldr	r0, [pc, #20]	@ (80021fc <MX_USART6_UART_Init+0x58>)
 80021e8:	f010 fc62 	bl	8012ab0 <HAL_UART_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80021f2:	f000 fbd1 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20010bf4 	.word	0x20010bf4
 8002200:	40011400 	.word	0x40011400

08002204 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
 8002218:	615a      	str	r2, [r3, #20]
 800221a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800221c:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <MX_FMC_Init+0x98>)
 800221e:	4a20      	ldr	r2, [pc, #128]	@ (80022a0 <MX_FMC_Init+0x9c>)
 8002220:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002222:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <MX_FMC_Init+0x98>)
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002228:	4b1c      	ldr	r3, [pc, #112]	@ (800229c <MX_FMC_Init+0x98>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800222e:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <MX_FMC_Init+0x98>)
 8002230:	2204      	movs	r2, #4
 8002232:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <MX_FMC_Init+0x98>)
 8002236:	2210      	movs	r2, #16
 8002238:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800223a:	4b18      	ldr	r3, [pc, #96]	@ (800229c <MX_FMC_Init+0x98>)
 800223c:	2240      	movs	r2, #64	@ 0x40
 800223e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002240:	4b16      	ldr	r3, [pc, #88]	@ (800229c <MX_FMC_Init+0x98>)
 8002242:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002246:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002248:	4b14      	ldr	r3, [pc, #80]	@ (800229c <MX_FMC_Init+0x98>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800224e:	4b13      	ldr	r3, [pc, #76]	@ (800229c <MX_FMC_Init+0x98>)
 8002250:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002254:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002256:	4b11      	ldr	r3, [pc, #68]	@ (800229c <MX_FMC_Init+0x98>)
 8002258:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800225e:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <MX_FMC_Init+0x98>)
 8002260:	2200      	movs	r2, #0
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002264:	2302      	movs	r3, #2
 8002266:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002268:	2307      	movs	r3, #7
 800226a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800226c:	2304      	movs	r3, #4
 800226e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002270:	2307      	movs	r3, #7
 8002272:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002274:	2303      	movs	r3, #3
 8002276:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002278:	2302      	movs	r3, #2
 800227a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800227c:	2302      	movs	r3, #2
 800227e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	4619      	mov	r1, r3
 8002284:	4805      	ldr	r0, [pc, #20]	@ (800229c <MX_FMC_Init+0x98>)
 8002286:	f00f f979 	bl	801157c <HAL_SDRAM_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002290:	f000 fb82 	bl	8002998 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20010c7c 	.word	0x20010c7c
 80022a0:	a0000140 	.word	0xa0000140

080022a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b090      	sub	sp, #64	@ 0x40
 80022a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ba:	4bb0      	ldr	r3, [pc, #704]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4aaf      	ldr	r2, [pc, #700]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80022c0:	f043 0310 	orr.w	r3, r3, #16
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4bad      	ldr	r3, [pc, #692]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022d2:	4baa      	ldr	r3, [pc, #680]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	4aa9      	ldr	r2, [pc, #676]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80022d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022de:	4ba7      	ldr	r3, [pc, #668]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	4ba4      	ldr	r3, [pc, #656]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	4aa3      	ldr	r2, [pc, #652]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f6:	4ba1      	ldr	r3, [pc, #644]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	623b      	str	r3, [r7, #32]
 8002300:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002302:	4b9e      	ldr	r3, [pc, #632]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	4a9d      	ldr	r2, [pc, #628]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	6313      	str	r3, [r2, #48]	@ 0x30
 800230e:	4b9b      	ldr	r3, [pc, #620]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231a:	4b98      	ldr	r3, [pc, #608]	@ (800257c <MX_GPIO_Init+0x2d8>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a97      	ldr	r2, [pc, #604]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b95      	ldr	r3, [pc, #596]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	4b92      	ldr	r3, [pc, #584]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	4a91      	ldr	r2, [pc, #580]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6313      	str	r3, [r2, #48]	@ 0x30
 800233e:	4b8f      	ldr	r3, [pc, #572]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800234a:	4b8c      	ldr	r3, [pc, #560]	@ (800257c <MX_GPIO_Init+0x2d8>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	4a8b      	ldr	r2, [pc, #556]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002350:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002354:	6313      	str	r3, [r2, #48]	@ 0x30
 8002356:	4b89      	ldr	r3, [pc, #548]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002362:	4b86      	ldr	r3, [pc, #536]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a85      	ldr	r2, [pc, #532]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b83      	ldr	r3, [pc, #524]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800237a:	4b80      	ldr	r3, [pc, #512]	@ (800257c <MX_GPIO_Init+0x2d8>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	4a7f      	ldr	r2, [pc, #508]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002380:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002384:	6313      	str	r3, [r2, #48]	@ 0x30
 8002386:	4b7d      	ldr	r3, [pc, #500]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002392:	4b7a      	ldr	r3, [pc, #488]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	4a79      	ldr	r2, [pc, #484]	@ (800257c <MX_GPIO_Init+0x2d8>)
 8002398:	f043 0320 	orr.w	r3, r3, #32
 800239c:	6313      	str	r3, [r2, #48]	@ 0x30
 800239e:	4b77      	ldr	r3, [pc, #476]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023aa:	4b74      	ldr	r3, [pc, #464]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	4a73      	ldr	r2, [pc, #460]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80023b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b6:	4b71      	ldr	r3, [pc, #452]	@ (800257c <MX_GPIO_Init+0x2d8>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023c2:	2201      	movs	r2, #1
 80023c4:	2120      	movs	r1, #32
 80023c6:	486e      	ldr	r0, [pc, #440]	@ (8002580 <MX_GPIO_Init+0x2dc>)
 80023c8:	f009 fc56 	bl	800bc78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80023cc:	2200      	movs	r2, #0
 80023ce:	210c      	movs	r1, #12
 80023d0:	486c      	ldr	r0, [pc, #432]	@ (8002584 <MX_GPIO_Init+0x2e0>)
 80023d2:	f009 fc51 	bl	800bc78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80023d6:	2201      	movs	r2, #1
 80023d8:	2108      	movs	r1, #8
 80023da:	486b      	ldr	r0, [pc, #428]	@ (8002588 <MX_GPIO_Init+0x2e4>)
 80023dc:	f009 fc4c 	bl	800bc78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80023e0:	2201      	movs	r2, #1
 80023e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023e6:	4867      	ldr	r0, [pc, #412]	@ (8002584 <MX_GPIO_Init+0x2e0>)
 80023e8:	f009 fc46 	bl	800bc78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80023ec:	2200      	movs	r2, #0
 80023ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023f2:	4866      	ldr	r0, [pc, #408]	@ (800258c <MX_GPIO_Init+0x2e8>)
 80023f4:	f009 fc40 	bl	800bc78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80023f8:	2200      	movs	r2, #0
 80023fa:	21c8      	movs	r1, #200	@ 0xc8
 80023fc:	4864      	ldr	r0, [pc, #400]	@ (8002590 <MX_GPIO_Init+0x2ec>)
 80023fe:	f009 fc3b 	bl	800bc78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002402:	2308      	movs	r3, #8
 8002404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002406:	2300      	movs	r3, #0
 8002408:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800240e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002412:	4619      	mov	r1, r3
 8002414:	485f      	ldr	r0, [pc, #380]	@ (8002594 <MX_GPIO_Init+0x2f0>)
 8002416:	f009 f977 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800241a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800241e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002428:	2303      	movs	r3, #3
 800242a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800242c:	230a      	movs	r3, #10
 800242e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002430:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002434:	4619      	mov	r1, r3
 8002436:	4858      	ldr	r0, [pc, #352]	@ (8002598 <MX_GPIO_Init+0x2f4>)
 8002438:	f009 f966 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800243c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002442:	2300      	movs	r3, #0
 8002444:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800244e:	4619      	mov	r1, r3
 8002450:	4852      	ldr	r0, [pc, #328]	@ (800259c <MX_GPIO_Init+0x2f8>)
 8002452:	f009 f959 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002456:	2340      	movs	r3, #64	@ 0x40
 8002458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800245a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800245e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002464:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002468:	4619      	mov	r1, r3
 800246a:	4845      	ldr	r0, [pc, #276]	@ (8002580 <MX_GPIO_Init+0x2dc>)
 800246c:	f009 f94c 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002470:	2320      	movs	r3, #32
 8002472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002474:	2301      	movs	r3, #1
 8002476:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002480:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002484:	4619      	mov	r1, r3
 8002486:	483e      	ldr	r0, [pc, #248]	@ (8002580 <MX_GPIO_Init+0x2dc>)
 8002488:	f009 f93e 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800248c:	f241 030c 	movw	r3, #4108	@ 0x100c
 8002490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002492:	2301      	movs	r3, #1
 8002494:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800249e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024a2:	4619      	mov	r1, r3
 80024a4:	4837      	ldr	r0, [pc, #220]	@ (8002584 <MX_GPIO_Init+0x2e0>)
 80024a6:	f009 f92f 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80024aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b0:	2300      	movs	r3, #0
 80024b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80024b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024bc:	4619      	mov	r1, r3
 80024be:	4838      	ldr	r0, [pc, #224]	@ (80025a0 <MX_GPIO_Init+0x2fc>)
 80024c0:	f009 f922 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80024c4:	2308      	movs	r3, #8
 80024c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c8:	2301      	movs	r3, #1
 80024ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80024d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024d8:	4619      	mov	r1, r3
 80024da:	482b      	ldr	r0, [pc, #172]	@ (8002588 <MX_GPIO_Init+0x2e4>)
 80024dc:	f009 f914 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80024e0:	2310      	movs	r3, #16
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e4:	2300      	movs	r3, #0
 80024e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024f0:	4619      	mov	r1, r3
 80024f2:	4823      	ldr	r0, [pc, #140]	@ (8002580 <MX_GPIO_Init+0x2dc>)
 80024f4:	f009 f908 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80024f8:	f248 0304 	movw	r3, #32772	@ 0x8004
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fe:	2300      	movs	r3, #0
 8002500:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002506:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800250a:	4619      	mov	r1, r3
 800250c:	481f      	ldr	r0, [pc, #124]	@ (800258c <MX_GPIO_Init+0x2e8>)
 800250e:	f009 f8fb 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002512:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002518:	2301      	movs	r3, #1
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002524:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002528:	4619      	mov	r1, r3
 800252a:	4818      	ldr	r0, [pc, #96]	@ (800258c <MX_GPIO_Init+0x2e8>)
 800252c:	f009 f8ec 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002530:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002536:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800253a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002540:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002544:	4619      	mov	r1, r3
 8002546:	480f      	ldr	r0, [pc, #60]	@ (8002584 <MX_GPIO_Init+0x2e0>)
 8002548:	f009 f8de 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800254c:	2310      	movs	r3, #16
 800254e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800255c:	230a      	movs	r3, #10
 800255e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002560:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002564:	4619      	mov	r1, r3
 8002566:	4809      	ldr	r0, [pc, #36]	@ (800258c <MX_GPIO_Init+0x2e8>)
 8002568:	f009 f8ce 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800256c:	23c8      	movs	r3, #200	@ 0xc8
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002570:	2301      	movs	r3, #1
 8002572:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	@ 0x34
 8002578:	e014      	b.n	80025a4 <MX_GPIO_Init+0x300>
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	40020c00 	.word	0x40020c00
 8002584:	40022000 	.word	0x40022000
 8002588:	40022800 	.word	0x40022800
 800258c:	40021c00 	.word	0x40021c00
 8002590:	40021800 	.word	0x40021800
 8002594:	40021000 	.word	0x40021000
 8002598:	40020400 	.word	0x40020400
 800259c:	40022400 	.word	0x40022400
 80025a0:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025ac:	4619      	mov	r1, r3
 80025ae:	4819      	ldr	r0, [pc, #100]	@ (8002614 <MX_GPIO_Init+0x370>)
 80025b0:	f009 f8aa 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80025b4:	2305      	movs	r3, #5
 80025b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c0:	2303      	movs	r3, #3
 80025c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025c4:	230a      	movs	r3, #10
 80025c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025cc:	4619      	mov	r1, r3
 80025ce:	4812      	ldr	r0, [pc, #72]	@ (8002618 <MX_GPIO_Init+0x374>)
 80025d0:	f009 f89a 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80025d4:	2304      	movs	r3, #4
 80025d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d8:	2300      	movs	r3, #0
 80025da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80025e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025e4:	4619      	mov	r1, r3
 80025e6:	480b      	ldr	r0, [pc, #44]	@ (8002614 <MX_GPIO_Init+0x370>)
 80025e8:	f009 f88e 	bl	800b708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80025ec:	2328      	movs	r3, #40	@ 0x28
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025fc:	230a      	movs	r3, #10
 80025fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002600:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002604:	4619      	mov	r1, r3
 8002606:	4805      	ldr	r0, [pc, #20]	@ (800261c <MX_GPIO_Init+0x378>)
 8002608:	f009 f87e 	bl	800b708 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800260c:	bf00      	nop
 800260e:	3740      	adds	r7, #64	@ 0x40
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021800 	.word	0x40021800
 8002618:	40020800 	.word	0x40020800
 800261c:	40020000 	.word	0x40020000

08002620 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
void vApplicationIdleHook( void )
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b09f      	sub	sp, #124	@ 0x7c
 8002634:	af02      	add	r7, sp, #8
 8002636:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002638:	f023 f820 	bl	802567c <MX_USB_HOST_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 800263c:	f012 f90e 	bl	801485c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  const char* message = "Hello UDP message!\n\r";
 8002640:	4ba3      	ldr	r3, [pc, #652]	@ (80028d0 <StartDefaultTask+0x2a0>)
 8002642:	66bb      	str	r3, [r7, #104]	@ 0x68
  static uint8_t bufor_kamery[1280 * 1024 * 2] __attribute__((section(".BuforKamery")));
  static uint8_t bufor_okna[320 * 240 * 2] __attribute__((section(".BuforLCD1")));
  static uint8_t bufor_ekranu[480 * 272 * 4] __attribute__((section(".BuforLCD0")));
  char chNapis[30];
  uint8_t chZrobione = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint8_t chFilm = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
  TS_StateTypeDef touch;
  HAL_StatusTypeDef err;
  extern float fImag;
  uint8_t chStartFraktal = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
  uint32_t nCzas;

  osDelay(1000);
 8002656:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800265a:	f015 fae4 	bl	8017c26 <osDelay>

  ip_addr_t PC_IPADDR;
  IP_ADDR4(&PC_IPADDR, 192, 168, 1, 111);
 800265e:	4b9d      	ldr	r3, [pc, #628]	@ (80028d4 <StartDefaultTask+0x2a4>)
 8002660:	60bb      	str	r3, [r7, #8]

  struct udp_pcb* my_udp = udp_new();
 8002662:	f020 fbc1 	bl	8022de8 <udp_new>
 8002666:	6678      	str	r0, [r7, #100]	@ 0x64
  udp_connect(my_udp, &PC_IPADDR, 55151);
 8002668:	f107 0308 	add.w	r3, r7, #8
 800266c:	f24d 726f 	movw	r2, #55151	@ 0xd76f
 8002670:	4619      	mov	r1, r3
 8002672:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002674:	f020 fb4a 	bl	8022d0c <udp_connect>
  struct pbuf* udp_buffer = NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	663b      	str	r3, [r7, #96]	@ 0x60



  /* Infinite loop */
  for (;;) {
    osDelay(100);
 800267c:	2064      	movs	r0, #100	@ 0x64
 800267e:	f015 fad2 	bl	8017c26 <osDelay>
    /* !! PBUF_RAM is critical for correct operation !! */
    udp_buffer = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 8002682:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002684:	f7fd fe14 	bl	80002b0 <strlen>
 8002688:	4603      	mov	r3, r0
 800268a:	b29b      	uxth	r3, r3
 800268c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8002690:	4619      	mov	r1, r3
 8002692:	2036      	movs	r0, #54	@ 0x36
 8002694:	f019 fea8 	bl	801c3e8 <pbuf_alloc>
 8002698:	6638      	str	r0, [r7, #96]	@ 0x60

    if (udp_buffer != NULL) {
 800269a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800269c:	2b00      	cmp	r3, #0
 800269e:	d011      	beq.n	80026c4 <StartDefaultTask+0x94>
      memcpy(udp_buffer->payload, message, strlen(message));
 80026a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026a2:	685c      	ldr	r4, [r3, #4]
 80026a4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80026a6:	f7fd fe03 	bl	80002b0 <strlen>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80026b0:	4620      	mov	r0, r4
 80026b2:	f024 fa70 	bl	8026b96 <memcpy>
      udp_send(my_udp, udp_buffer);
 80026b6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80026b8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80026ba:	f020 f8b5 	bl	8022828 <udp_send>
      pbuf_free(udp_buffer);
 80026be:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80026c0:	f01a f974 	bl	801c9ac <pbuf_free>
    }

    BSP_LED_Toggle(0);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f002 fb49 	bl	8004d5c <BSP_LED_Toggle>
    BSP_TS_GetState(&touch);
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	4618      	mov	r0, r3
 80026d0:	f004 f94e 	bl	8006970 <BSP_TS_GetState>

    BSP_LCD_SelectLayer(0);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f003 f9c5 	bl	8005a64 <BSP_LCD_SelectLayer>
    sprintf(chNapis, "X=%d, T=%d  ", touch.touchX[0], touch.touchY[0]);
 80026da:	89fb      	ldrh	r3, [r7, #14]
 80026dc:	461a      	mov	r2, r3
 80026de:	8b3b      	ldrh	r3, [r7, #24]
 80026e0:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80026e4:	497c      	ldr	r1, [pc, #496]	@ (80028d8 <StartDefaultTask+0x2a8>)
 80026e6:	f024 f8e9 	bl	80268bc <siprintf>
    BSP_LCD_DisplayStringAt(KLAW_POZ_X, 220, (uint8_t*)chNapis, LEFT_MODE);
 80026ea:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80026ee:	2303      	movs	r3, #3
 80026f0:	21dc      	movs	r1, #220	@ 0xdc
 80026f2:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 80026f6:	f003 fab1 	bl	8005c5c <BSP_LCD_DisplayStringAt>
    sprintf(chNapis, "T=%d, W=%d  ", touch.touchDetected, touch.touchWeight[0]);
 80026fa:	7b3b      	ldrb	r3, [r7, #12]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002702:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002706:	4975      	ldr	r1, [pc, #468]	@ (80028dc <StartDefaultTask+0x2ac>)
 8002708:	f024 f8d8 	bl	80268bc <siprintf>
    BSP_LCD_DisplayStringAt(KLAW_POZ_X, 240, (uint8_t*)chNapis, LEFT_MODE);
 800270c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002710:	2303      	movs	r3, #3
 8002712:	21f0      	movs	r1, #240	@ 0xf0
 8002714:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 8002718:	f003 faa0 	bl	8005c5c <BSP_LCD_DisplayStringAt>

    if (touch.touchDetected == 0)
 800271c:	7b3b      	ldrb	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <StartDefaultTask+0xf8>
    	chZrobione = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


    //przycisk zrób zdjęcie
    if ((touch.touchDetected >= 1) && (touch.touchX[0] >= KLAW_POZ_X)  && (touch.touchY[0] >= KLAW1_Y) && (touch.touchY[0] < (KLAW1_Y + KLAW_ROZ_Y)) && !chZrobione)
 8002728:	7b3b      	ldrb	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d019      	beq.n	8002762 <StartDefaultTask+0x132>
 800272e:	89fb      	ldrh	r3, [r7, #14]
 8002730:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8002734:	d315      	bcc.n	8002762 <StartDefaultTask+0x132>
 8002736:	8b3b      	ldrh	r3, [r7, #24]
 8002738:	2b18      	cmp	r3, #24
 800273a:	d912      	bls.n	8002762 <StartDefaultTask+0x132>
 800273c:	8b3b      	ldrh	r3, [r7, #24]
 800273e:	2b3c      	cmp	r3, #60	@ 0x3c
 8002740:	d80f      	bhi.n	8002762 <StartDefaultTask+0x132>
 8002742:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <StartDefaultTask+0x132>
    {
    	err = BSP_CAMERA_SnapshotStart(bufor_okna);
 800274a:	4865      	ldr	r0, [pc, #404]	@ (80028e0 <StartDefaultTask+0x2b0>)
 800274c:	f002 fe3c 	bl	80053c8 <BSP_CAMERA_SnapshotStart>
 8002750:	4603      	mov	r3, r0
 8002752:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    	chZrobione = 1;
 8002756:	2301      	movs	r3, #1
 8002758:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    	chStartFraktal = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    }

    //przycisk rozpocznij/zakończ film
    if ((touch.touchDetected >= 1) && (touch.touchX[0] >= KLAW_POZ_X)  && (touch.touchY[0] >= KLAW2_Y) && (touch.touchY[0] < (KLAW2_Y + KLAW_ROZ_Y)) && !chZrobione)
 8002762:	7b3b      	ldrb	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d046      	beq.n	80027f6 <StartDefaultTask+0x1c6>
 8002768:	89fb      	ldrh	r3, [r7, #14]
 800276a:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800276e:	d342      	bcc.n	80027f6 <StartDefaultTask+0x1c6>
 8002770:	8b3b      	ldrh	r3, [r7, #24]
 8002772:	2b4a      	cmp	r3, #74	@ 0x4a
 8002774:	d93f      	bls.n	80027f6 <StartDefaultTask+0x1c6>
 8002776:	8b3b      	ldrh	r3, [r7, #24]
 8002778:	2b6e      	cmp	r3, #110	@ 0x6e
 800277a:	d83c      	bhi.n	80027f6 <StartDefaultTask+0x1c6>
 800277c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002780:	2b00      	cmp	r3, #0
 8002782:	d138      	bne.n	80027f6 <StartDefaultTask+0x1c6>
	{
    	if (chFilm)
 8002784:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <StartDefaultTask+0x174>
    	{
    		BSP_CAMERA_Suspend();
 800278c:	f002 fe4e 	bl	800542c <BSP_CAMERA_Suspend>
    		sprintf(chNapis, "Start Film");
 8002790:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002794:	4953      	ldr	r1, [pc, #332]	@ (80028e4 <StartDefaultTask+0x2b4>)
 8002796:	4618      	mov	r0, r3
 8002798:	f024 f890 	bl	80268bc <siprintf>
			chFilm = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80027a2:	e00b      	b.n	80027bc <StartDefaultTask+0x18c>
    	}
    	else
    	{
			BSP_CAMERA_ContinuousStart(bufor_okna);
 80027a4:	484e      	ldr	r0, [pc, #312]	@ (80028e0 <StartDefaultTask+0x2b0>)
 80027a6:	f002 fddd 	bl	8005364 <BSP_CAMERA_ContinuousStart>
			sprintf(chNapis, "Stop Film ");
 80027aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80027ae:	494e      	ldr	r1, [pc, #312]	@ (80028e8 <StartDefaultTask+0x2b8>)
 80027b0:	4618      	mov	r0, r3
 80027b2:	f024 f883 	bl	80268bc <siprintf>
			chFilm = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
    	}

    	//zmień status przycisku Start/Stop Film
		BSP_LCD_SelectLayer(0);
 80027bc:	2000      	movs	r0, #0
 80027be:	f003 f951 	bl	8005a64 <BSP_LCD_SelectLayer>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80027c2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80027c6:	f003 f991 	bl	8005aec <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 80027ca:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80027ce:	f003 f9a5 	bl	8005b1c <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(KLAW_POZ_X+5, KLAW2_Y+NAPIS_OFFY, (uint8_t*)chNapis, LEFT_MODE);
 80027d2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80027d6:	2303      	movs	r3, #3
 80027d8:	2157      	movs	r1, #87	@ 0x57
 80027da:	f240 1059 	movw	r0, #345	@ 0x159
 80027de:	f003 fa3d 	bl	8005c5c <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);	//przywróć kolor tła
 80027e2:	f04f 30ff 	mov.w	r0, #4294967295
 80027e6:	f003 f999 	bl	8005b1c <BSP_LCD_SetBackColor>
    	chStartFraktal = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    	chZrobione = 1;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	//przycisk
	if ((touch.touchDetected >= 1) && (touch.touchX[0] >= KLAW_POZ_X)  && (touch.touchY[0] >= KLAW3_Y) && (touch.touchY[0] < (KLAW3_Y + KLAW_ROZ_Y)) && !chZrobione)
 80027f6:	7b3b      	ldrb	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <StartDefaultTask+0x1d8>
 80027fc:	89fb      	ldrh	r3, [r7, #14]
 80027fe:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8002802:	d301      	bcc.n	8002808 <StartDefaultTask+0x1d8>
 8002804:	8b3b      	ldrh	r3, [r7, #24]
 8002806:	2b7c      	cmp	r3, #124	@ 0x7c


	}

	//przycisk fraktalada
	if ((touch.touchDetected >= 1) && (touch.touchX[0] >= KLAW_POZ_X)  && (touch.touchY[0] >= KLAW4_Y) && (touch.touchY[0] < (KLAW4_Y + KLAW_ROZ_Y)) && !chZrobione)
 8002808:	7b3b      	ldrb	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d016      	beq.n	800283c <StartDefaultTask+0x20c>
 800280e:	89fb      	ldrh	r3, [r7, #14]
 8002810:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8002814:	d312      	bcc.n	800283c <StartDefaultTask+0x20c>
 8002816:	8b3b      	ldrh	r3, [r7, #24]
 8002818:	2bae      	cmp	r3, #174	@ 0xae
 800281a:	d90f      	bls.n	800283c <StartDefaultTask+0x20c>
 800281c:	8b3b      	ldrh	r3, [r7, #24]
 800281e:	2bd2      	cmp	r3, #210	@ 0xd2
 8002820:	d80c      	bhi.n	800283c <StartDefaultTask+0x20c>
 8002822:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002826:	2b00      	cmp	r3, #0
 8002828:	d108      	bne.n	800283c <StartDefaultTask+0x20c>
	{
		InitFraktal(0);
 800282a:	2000      	movs	r0, #0
 800282c:	f002 f936 	bl	8004a9c <InitFraktal>
		chStartFraktal = 1;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
		chZrobione = 1;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}



	if (chStartFraktal)
 800283c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002840:	2b00      	cmp	r3, #0
 8002842:	f43f af1b 	beq.w	800267c <StartDefaultTask+0x4c>
	{
		nCzas = HAL_GetTick();
 8002846:	f004 faf3 	bl	8006e30 <HAL_GetTick>
 800284a:	65b8      	str	r0, [r7, #88]	@ 0x58
		GenerateJulia(320, 240, 160, 120, 135, (unsigned short *)bufor_okna);
 800284c:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <StartDefaultTask+0x2b0>)
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	2387      	movs	r3, #135	@ 0x87
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2378      	movs	r3, #120	@ 0x78
 8002856:	22a0      	movs	r2, #160	@ 0xa0
 8002858:	21f0      	movs	r1, #240	@ 0xf0
 800285a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800285e:	f002 f983 	bl	8004b68 <GenerateJulia>
		fImag -= 0.002;
 8002862:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <StartDefaultTask+0x2bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fe8e 	bl	8000588 <__aeabi_f2d>
 800286c:	a316      	add	r3, pc, #88	@ (adr r3, 80028c8 <StartDefaultTask+0x298>)
 800286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002872:	f7fd fd29 	bl	80002c8 <__aeabi_dsub>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f7fe f9b3 	bl	8000be8 <__aeabi_d2f>
 8002882:	4603      	mov	r3, r0
 8002884:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <StartDefaultTask+0x2bc>)
 8002886:	6013      	str	r3, [r2, #0]
		nCzas = MinalCzas(nCzas);
 8002888:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800288a:	f002 fa19 	bl	8004cc0 <MinalCzas>
 800288e:	65b8      	str	r0, [r7, #88]	@ 0x58

		BSP_LCD_SelectLayer(1);
 8002890:	2001      	movs	r0, #1
 8002892:	f003 f8e7 	bl	8005a64 <BSP_LCD_SelectLayer>
		sprintf(chNapis, "Julia: t=%ldms, c=%.3f ", nCzas, fImag);
 8002896:	4b15      	ldr	r3, [pc, #84]	@ (80028ec <StartDefaultTask+0x2bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fe74 	bl	8000588 <__aeabi_f2d>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80028a8:	e9cd 2300 	strd	r2, r3, [sp]
 80028ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028ae:	4910      	ldr	r1, [pc, #64]	@ (80028f0 <StartDefaultTask+0x2c0>)
 80028b0:	f024 f804 	bl	80268bc <siprintf>
		BSP_LCD_DisplayStringAt(6, 224, (uint8_t*)chNapis, LEFT_MODE);
 80028b4:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80028b8:	2303      	movs	r3, #3
 80028ba:	21e0      	movs	r1, #224	@ 0xe0
 80028bc:	2006      	movs	r0, #6
 80028be:	f003 f9cd 	bl	8005c5c <BSP_LCD_DisplayStringAt>
    osDelay(100);
 80028c2:	e6db      	b.n	800267c <StartDefaultTask+0x4c>
 80028c4:	f3af 8000 	nop.w
 80028c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80028cc:	3f60624d 	.word	0x3f60624d
 80028d0:	08028afc 	.word	0x08028afc
 80028d4:	6f01a8c0 	.word	0x6f01a8c0
 80028d8:	08028b14 	.word	0x08028b14
 80028dc:	08028b24 	.word	0x08028b24
 80028e0:	c007f800 	.word	0xc007f800
 80028e4:	08028ab4 	.word	0x08028ab4
 80028e8:	08028b34 	.word	0x08028b34
 80028ec:	20010d18 	.word	0x20010d18
 80028f0:	08028b40 	.word	0x08028b40

080028f4 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80028fa:	463b      	mov	r3, r7
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002906:	f004 fe45 	bl	8007594 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800290a:	2301      	movs	r3, #1
 800290c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800290e:	2301      	movs	r3, #1
 8002910:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 8002912:	4b16      	ldr	r3, [pc, #88]	@ (800296c <MPU_Config+0x78>)
 8002914:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002916:	2310      	movs	r3, #16
 8002918:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800291a:	2300      	movs	r3, #0
 800291c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800291e:	2301      	movs	r3, #1
 8002920:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002922:	2303      	movs	r3, #3
 8002924:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002926:	2301      	movs	r3, #1
 8002928:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002936:	463b      	mov	r3, r7
 8002938:	4618      	mov	r0, r3
 800293a:	f004 fe63 	bl	8007604 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800293e:	2302      	movs	r3, #2
 8002940:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2004C000;
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <MPU_Config+0x7c>)
 8002944:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8002946:	2308      	movs	r3, #8
 8002948:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800294a:	2300      	movs	r3, #0
 800294c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800294e:	2301      	movs	r3, #1
 8002950:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002956:	463b      	mov	r3, r7
 8002958:	4618      	mov	r0, r3
 800295a:	f004 fe53 	bl	8007604 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800295e:	2004      	movs	r0, #4
 8002960:	f004 fe30 	bl	80075c4 <HAL_MPU_Enable>

}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20010000 	.word	0x20010000
 8002970:	2004c000 	.word	0x2004c000

08002974 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a04      	ldr	r2, [pc, #16]	@ (8002994 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002986:	f004 fa3f 	bl	8006e08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40001000 	.word	0x40001000

08002998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800299c:	b672      	cpsid	i
}
 800299e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <Error_Handler+0x8>

080029a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a10      	ldr	r2, [pc, #64]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b6:	4b0e      	ldr	r3, [pc, #56]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c2:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	4a0a      	ldr	r2, [pc, #40]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ce:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	210f      	movs	r1, #15
 80029de:	f06f 0001 	mvn.w	r0, #1
 80029e2:	f004 fdad 	bl	8007540 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	@ 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a21      	ldr	r2, [pc, #132]	@ (8002a98 <HAL_ADC_MspInit+0xa4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d13c      	bne.n	8002a90 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a16:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <HAL_ADC_MspInit+0xa8>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	4a20      	ldr	r2, [pc, #128]	@ (8002a9c <HAL_ADC_MspInit+0xa8>)
 8002a1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a22:	4b1e      	ldr	r3, [pc, #120]	@ (8002a9c <HAL_ADC_MspInit+0xa8>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <HAL_ADC_MspInit+0xa8>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	4a1a      	ldr	r2, [pc, #104]	@ (8002a9c <HAL_ADC_MspInit+0xa8>)
 8002a34:	f043 0320 	orr.w	r3, r3, #32
 8002a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3a:	4b18      	ldr	r3, [pc, #96]	@ (8002a9c <HAL_ADC_MspInit+0xa8>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <HAL_ADC_MspInit+0xa8>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	4a14      	ldr	r2, [pc, #80]	@ (8002a9c <HAL_ADC_MspInit+0xa8>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a52:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <HAL_ADC_MspInit+0xa8>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002a5e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002a62:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a64:	2303      	movs	r3, #3
 8002a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	480b      	ldr	r0, [pc, #44]	@ (8002aa0 <HAL_ADC_MspInit+0xac>)
 8002a74:	f008 fe48 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4806      	ldr	r0, [pc, #24]	@ (8002aa4 <HAL_ADC_MspInit+0xb0>)
 8002a8c:	f008 fe3c 	bl	800b708 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a90:	bf00      	nop
 8002a92:	3728      	adds	r7, #40	@ 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40012200 	.word	0x40012200
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40021400 	.word	0x40021400
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <HAL_CRC_MspInit+0x38>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002aba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <HAL_CRC_MspInit+0x3c>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	4a09      	ldr	r2, [pc, #36]	@ (8002ae4 <HAL_CRC_MspInit+0x3c>)
 8002ac0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac6:	4b07      	ldr	r3, [pc, #28]	@ (8002ae4 <HAL_CRC_MspInit+0x3c>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40023000 	.word	0x40023000
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08e      	sub	sp, #56	@ 0x38
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a50      	ldr	r2, [pc, #320]	@ (8002c48 <HAL_DCMI_MspInit+0x160>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	f040 809a 	bne.w	8002c40 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002b0c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b10:	4a4e      	ldr	r2, [pc, #312]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6353      	str	r3, [r2, #52]	@ 0x34
 8002b18:	4b4c      	ldr	r3, [pc, #304]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b24:	4b49      	ldr	r3, [pc, #292]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	4a48      	ldr	r2, [pc, #288]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b2a:	f043 0310 	orr.w	r3, r3, #16
 8002b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b30:	4b46      	ldr	r3, [pc, #280]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b3c:	4b43      	ldr	r3, [pc, #268]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b40:	4a42      	ldr	r2, [pc, #264]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b42:	f043 0308 	orr.w	r3, r3, #8
 8002b46:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b48:	4b40      	ldr	r3, [pc, #256]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b54:	4b3d      	ldr	r3, [pc, #244]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	4a3c      	ldr	r2, [pc, #240]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b60:	4b3a      	ldr	r3, [pc, #232]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b6c:	4b37      	ldr	r3, [pc, #220]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	4a36      	ldr	r2, [pc, #216]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b78:	4b34      	ldr	r3, [pc, #208]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b84:	4b31      	ldr	r3, [pc, #196]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	4a30      	ldr	r2, [pc, #192]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b90:	4b2e      	ldr	r3, [pc, #184]	@ (8002c4c <HAL_DCMI_MspInit+0x164>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002b9c:	2360      	movs	r3, #96	@ 0x60
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bac:	230d      	movs	r3, #13
 8002bae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4826      	ldr	r0, [pc, #152]	@ (8002c50 <HAL_DCMI_MspInit+0x168>)
 8002bb8:	f008 fda6 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002bbc:	2308      	movs	r3, #8
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bcc:	230d      	movs	r3, #13
 8002bce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	481f      	ldr	r0, [pc, #124]	@ (8002c54 <HAL_DCMI_MspInit+0x16c>)
 8002bd8:	f008 fd96 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bea:	2300      	movs	r3, #0
 8002bec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bee:	230d      	movs	r3, #13
 8002bf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4817      	ldr	r0, [pc, #92]	@ (8002c58 <HAL_DCMI_MspInit+0x170>)
 8002bfa:	f008 fd85 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002bfe:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c10:	230d      	movs	r3, #13
 8002c12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4810      	ldr	r0, [pc, #64]	@ (8002c5c <HAL_DCMI_MspInit+0x174>)
 8002c1c:	f008 fd74 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002c20:	2350      	movs	r3, #80	@ 0x50
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c30:	230d      	movs	r3, #13
 8002c32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4809      	ldr	r0, [pc, #36]	@ (8002c60 <HAL_DCMI_MspInit+0x178>)
 8002c3c:	f008 fd64 	bl	800b708 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002c40:	bf00      	nop
 8002c42:	3738      	adds	r7, #56	@ 0x38
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	50050000 	.word	0x50050000
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40020c00 	.word	0x40020c00
 8002c58:	40021800 	.word	0x40021800
 8002c5c:	40021c00 	.word	0x40021c00
 8002c60:	40020000 	.word	0x40020000

08002c64 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <HAL_DMA2D_MspInit+0x44>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d113      	bne.n	8002c9e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <HAL_DMA2D_MspInit+0x48>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002cac <HAL_DMA2D_MspInit+0x48>)
 8002c7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <HAL_DMA2D_MspInit+0x48>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2105      	movs	r1, #5
 8002c92:	205a      	movs	r0, #90	@ 0x5a
 8002c94:	f004 fc54 	bl	8007540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002c98:	205a      	movs	r0, #90	@ 0x5a
 8002c9a:	f004 fc6d 	bl	8007578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	4002b000 	.word	0x4002b000
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b0ac      	sub	sp, #176	@ 0xb0
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cc8:	f107 0318 	add.w	r3, r7, #24
 8002ccc:	2284      	movs	r2, #132	@ 0x84
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f023 fe80 	bl	80269d6 <memset>
  if(hi2c->Instance==I2C1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a44      	ldr	r2, [pc, #272]	@ (8002dec <HAL_I2C_MspInit+0x13c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d13d      	bne.n	8002d5c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ce0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ce4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cea:	f107 0318 	add.w	r3, r7, #24
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f00d f98a 	bl	8010008 <HAL_RCCEx_PeriphCLKConfig>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002cfa:	f7ff fe4d 	bl	8002998 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8002df0 <HAL_I2C_MspInit+0x140>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	4a3b      	ldr	r2, [pc, #236]	@ (8002df0 <HAL_I2C_MspInit+0x140>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d0a:	4b39      	ldr	r3, [pc, #228]	@ (8002df0 <HAL_I2C_MspInit+0x140>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002d16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d1e:	2312      	movs	r3, #18
 8002d20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d30:	2304      	movs	r3, #4
 8002d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	482d      	ldr	r0, [pc, #180]	@ (8002df4 <HAL_I2C_MspInit+0x144>)
 8002d3e:	f008 fce3 	bl	800b708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d42:	4b2b      	ldr	r3, [pc, #172]	@ (8002df0 <HAL_I2C_MspInit+0x140>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	4a2a      	ldr	r2, [pc, #168]	@ (8002df0 <HAL_I2C_MspInit+0x140>)
 8002d48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d4e:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <HAL_I2C_MspInit+0x140>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002d5a:	e042      	b.n	8002de2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a25      	ldr	r2, [pc, #148]	@ (8002df8 <HAL_I2C_MspInit+0x148>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d13d      	bne.n	8002de2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002d66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d72:	f107 0318 	add.w	r3, r7, #24
 8002d76:	4618      	mov	r0, r3
 8002d78:	f00d f946 	bl	8010008 <HAL_RCCEx_PeriphCLKConfig>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002d82:	f7ff fe09 	bl	8002998 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d86:	4b1a      	ldr	r3, [pc, #104]	@ (8002df0 <HAL_I2C_MspInit+0x140>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	4a19      	ldr	r2, [pc, #100]	@ (8002df0 <HAL_I2C_MspInit+0x140>)
 8002d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d92:	4b17      	ldr	r3, [pc, #92]	@ (8002df0 <HAL_I2C_MspInit+0x140>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002d9e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002da2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da6:	2312      	movs	r3, #18
 8002da8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002db8:	2304      	movs	r3, #4
 8002dba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002dbe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	480d      	ldr	r0, [pc, #52]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002dc6:	f008 fc9f 	bl	800b708 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dca:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <HAL_I2C_MspInit+0x140>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	4a08      	ldr	r2, [pc, #32]	@ (8002df0 <HAL_I2C_MspInit+0x140>)
 8002dd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_I2C_MspInit+0x140>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
}
 8002de2:	bf00      	nop
 8002de4:	37b0      	adds	r7, #176	@ 0xb0
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40005400 	.word	0x40005400
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40005c00 	.word	0x40005c00
 8002dfc:	40021c00 	.word	0x40021c00

08002e00 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a15      	ldr	r2, [pc, #84]	@ (8002e64 <HAL_I2C_MspDeInit+0x64>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d110      	bne.n	8002e34 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002e12:	4b15      	ldr	r3, [pc, #84]	@ (8002e68 <HAL_I2C_MspDeInit+0x68>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	4a14      	ldr	r2, [pc, #80]	@ (8002e68 <HAL_I2C_MspDeInit+0x68>)
 8002e18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e1c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002e1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e22:	4812      	ldr	r0, [pc, #72]	@ (8002e6c <HAL_I2C_MspDeInit+0x6c>)
 8002e24:	f008 fe1c 	bl	800ba60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002e28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e2c:	480f      	ldr	r0, [pc, #60]	@ (8002e6c <HAL_I2C_MspDeInit+0x6c>)
 8002e2e:	f008 fe17 	bl	800ba60 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002e32:	e013      	b.n	8002e5c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0d      	ldr	r2, [pc, #52]	@ (8002e70 <HAL_I2C_MspDeInit+0x70>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10e      	bne.n	8002e5c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <HAL_I2C_MspDeInit+0x68>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	4a09      	ldr	r2, [pc, #36]	@ (8002e68 <HAL_I2C_MspDeInit+0x68>)
 8002e44:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e48:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002e4a:	2180      	movs	r1, #128	@ 0x80
 8002e4c:	4809      	ldr	r0, [pc, #36]	@ (8002e74 <HAL_I2C_MspDeInit+0x74>)
 8002e4e:	f008 fe07 	bl	800ba60 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002e52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e56:	4807      	ldr	r0, [pc, #28]	@ (8002e74 <HAL_I2C_MspDeInit+0x74>)
 8002e58:	f008 fe02 	bl	800ba60 <HAL_GPIO_DeInit>
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40005400 	.word	0x40005400
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40005c00 	.word	0x40005c00
 8002e74:	40021c00 	.word	0x40021c00

08002e78 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08e      	sub	sp, #56	@ 0x38
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a55      	ldr	r2, [pc, #340]	@ (8002fec <HAL_LTDC_MspInit+0x174>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	f040 80a3 	bne.w	8002fe2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e9c:	4b54      	ldr	r3, [pc, #336]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea0:	4a53      	ldr	r2, [pc, #332]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002ea2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ea6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea8:	4b51      	ldr	r3, [pc, #324]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002eb0:	623b      	str	r3, [r7, #32]
 8002eb2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002eba:	f043 0310 	orr.w	r3, r3, #16
 8002ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ecc:	4b48      	ldr	r3, [pc, #288]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	4a47      	ldr	r2, [pc, #284]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ed6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed8:	4b45      	ldr	r3, [pc, #276]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ee4:	4b42      	ldr	r3, [pc, #264]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	4a41      	ldr	r2, [pc, #260]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002efc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	4a3b      	ldr	r2, [pc, #236]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f08:	4b39      	ldr	r3, [pc, #228]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f14:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f18:	4a35      	ldr	r2, [pc, #212]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f20:	4b33      	ldr	r3, [pc, #204]	@ (8002ff0 <HAL_LTDC_MspInit+0x178>)
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2302      	movs	r3, #2
 8002f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f3c:	230e      	movs	r3, #14
 8002f3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f44:	4619      	mov	r1, r3
 8002f46:	482b      	ldr	r0, [pc, #172]	@ (8002ff4 <HAL_LTDC_MspInit+0x17c>)
 8002f48:	f008 fbde 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002f4c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f5e:	230e      	movs	r3, #14
 8002f60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f66:	4619      	mov	r1, r3
 8002f68:	4823      	ldr	r0, [pc, #140]	@ (8002ff8 <HAL_LTDC_MspInit+0x180>)
 8002f6a:	f008 fbcd 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002f6e:	23f7      	movs	r3, #247	@ 0xf7
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	2302      	movs	r3, #2
 8002f74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f7e:	230e      	movs	r3, #14
 8002f80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f86:	4619      	mov	r1, r3
 8002f88:	481c      	ldr	r0, [pc, #112]	@ (8002ffc <HAL_LTDC_MspInit+0x184>)
 8002f8a:	f008 fbbd 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002f8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f94:	2302      	movs	r3, #2
 8002f96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002fa0:	2309      	movs	r3, #9
 8002fa2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4815      	ldr	r0, [pc, #84]	@ (8003000 <HAL_LTDC_MspInit+0x188>)
 8002fac:	f008 fbac 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002fb0:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fc2:	230e      	movs	r3, #14
 8002fc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002fc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fca:	4619      	mov	r1, r3
 8002fcc:	480d      	ldr	r0, [pc, #52]	@ (8003004 <HAL_LTDC_MspInit+0x18c>)
 8002fce:	f008 fb9b 	bl	800b708 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2105      	movs	r1, #5
 8002fd6:	2058      	movs	r0, #88	@ 0x58
 8002fd8:	f004 fab2 	bl	8007540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002fdc:	2058      	movs	r0, #88	@ 0x58
 8002fde:	f004 facb 	bl	8007578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002fe2:	bf00      	nop
 8002fe4:	3738      	adds	r7, #56	@ 0x38
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40016800 	.word	0x40016800
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40022400 	.word	0x40022400
 8002ffc:	40022800 	.word	0x40022800
 8003000:	40021800 	.word	0x40021800
 8003004:	40022000 	.word	0x40022000

08003008 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08c      	sub	sp, #48	@ 0x30
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 031c 	add.w	r3, r7, #28
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a3b      	ldr	r2, [pc, #236]	@ (8003114 <HAL_QSPI_MspInit+0x10c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d170      	bne.n	800310c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800302a:	4b3b      	ldr	r3, [pc, #236]	@ (8003118 <HAL_QSPI_MspInit+0x110>)
 800302c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302e:	4a3a      	ldr	r2, [pc, #232]	@ (8003118 <HAL_QSPI_MspInit+0x110>)
 8003030:	f043 0302 	orr.w	r3, r3, #2
 8003034:	6393      	str	r3, [r2, #56]	@ 0x38
 8003036:	4b38      	ldr	r3, [pc, #224]	@ (8003118 <HAL_QSPI_MspInit+0x110>)
 8003038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	61bb      	str	r3, [r7, #24]
 8003040:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003042:	4b35      	ldr	r3, [pc, #212]	@ (8003118 <HAL_QSPI_MspInit+0x110>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	4a34      	ldr	r2, [pc, #208]	@ (8003118 <HAL_QSPI_MspInit+0x110>)
 8003048:	f043 0310 	orr.w	r3, r3, #16
 800304c:	6313      	str	r3, [r2, #48]	@ 0x30
 800304e:	4b32      	ldr	r3, [pc, #200]	@ (8003118 <HAL_QSPI_MspInit+0x110>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800305a:	4b2f      	ldr	r3, [pc, #188]	@ (8003118 <HAL_QSPI_MspInit+0x110>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	4a2e      	ldr	r2, [pc, #184]	@ (8003118 <HAL_QSPI_MspInit+0x110>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	6313      	str	r3, [r2, #48]	@ 0x30
 8003066:	4b2c      	ldr	r3, [pc, #176]	@ (8003118 <HAL_QSPI_MspInit+0x110>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003072:	4b29      	ldr	r3, [pc, #164]	@ (8003118 <HAL_QSPI_MspInit+0x110>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	4a28      	ldr	r2, [pc, #160]	@ (8003118 <HAL_QSPI_MspInit+0x110>)
 8003078:	f043 0308 	orr.w	r3, r3, #8
 800307c:	6313      	str	r3, [r2, #48]	@ 0x30
 800307e:	4b26      	ldr	r3, [pc, #152]	@ (8003118 <HAL_QSPI_MspInit+0x110>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800308a:	2304      	movs	r3, #4
 800308c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003096:	2303      	movs	r3, #3
 8003098:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800309a:	2309      	movs	r3, #9
 800309c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800309e:	f107 031c 	add.w	r3, r7, #28
 80030a2:	4619      	mov	r1, r3
 80030a4:	481d      	ldr	r0, [pc, #116]	@ (800311c <HAL_QSPI_MspInit+0x114>)
 80030a6:	f008 fb2f 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80030aa:	2340      	movs	r3, #64	@ 0x40
 80030ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b6:	2303      	movs	r3, #3
 80030b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80030ba:	230a      	movs	r3, #10
 80030bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80030be:	f107 031c 	add.w	r3, r7, #28
 80030c2:	4619      	mov	r1, r3
 80030c4:	4816      	ldr	r0, [pc, #88]	@ (8003120 <HAL_QSPI_MspInit+0x118>)
 80030c6:	f008 fb1f 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030ca:	2304      	movs	r3, #4
 80030cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80030da:	2309      	movs	r3, #9
 80030dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030de:	f107 031c 	add.w	r3, r7, #28
 80030e2:	4619      	mov	r1, r3
 80030e4:	480e      	ldr	r0, [pc, #56]	@ (8003120 <HAL_QSPI_MspInit+0x118>)
 80030e6:	f008 fb0f 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80030ea:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80030ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f0:	2302      	movs	r3, #2
 80030f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f8:	2303      	movs	r3, #3
 80030fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80030fc:	2309      	movs	r3, #9
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003100:	f107 031c 	add.w	r3, r7, #28
 8003104:	4619      	mov	r1, r3
 8003106:	4807      	ldr	r0, [pc, #28]	@ (8003124 <HAL_QSPI_MspInit+0x11c>)
 8003108:	f008 fafe 	bl	800b708 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800310c:	bf00      	nop
 800310e:	3730      	adds	r7, #48	@ 0x30
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	a0001000 	.word	0xa0001000
 8003118:	40023800 	.word	0x40023800
 800311c:	40021000 	.word	0x40021000
 8003120:	40020400 	.word	0x40020400
 8003124:	40020c00 	.word	0x40020c00

08003128 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b0a4      	sub	sp, #144	@ 0x90
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	2284      	movs	r2, #132	@ 0x84
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f023 fc4c 	bl	80269d6 <memset>
  if(hrtc->Instance==RTC)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a0e      	ldr	r2, [pc, #56]	@ (800317c <HAL_RTC_MspInit+0x54>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d114      	bne.n	8003172 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003148:	2320      	movs	r3, #32
 800314a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800314c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003150:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003152:	f107 030c 	add.w	r3, r7, #12
 8003156:	4618      	mov	r0, r3
 8003158:	f00c ff56 	bl	8010008 <HAL_RCCEx_PeriphCLKConfig>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003162:	f7ff fc19 	bl	8002998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_RTC_MspInit+0x58>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	4a05      	ldr	r2, [pc, #20]	@ (8003180 <HAL_RTC_MspInit+0x58>)
 800316c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003170:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003172:	bf00      	nop
 8003174:	3790      	adds	r7, #144	@ 0x90
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40002800 	.word	0x40002800
 8003180:	40023800 	.word	0x40023800

08003184 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b0aa      	sub	sp, #168	@ 0xa8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800319c:	f107 0310 	add.w	r3, r7, #16
 80031a0:	2284      	movs	r2, #132	@ 0x84
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f023 fc16 	bl	80269d6 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80031b2:	d143      	bne.n	800323c <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80031b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80031ba:	2364      	movs	r3, #100	@ 0x64
 80031bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80031be:	2302      	movs	r3, #2
 80031c0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80031c2:	2302      	movs	r3, #2
 80031c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80031c6:	2302      	movs	r3, #2
 80031c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ce:	f107 0310 	add.w	r3, r7, #16
 80031d2:	4618      	mov	r0, r3
 80031d4:	f00c ff18 	bl	8010008 <HAL_RCCEx_PeriphCLKConfig>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80031de:	f7ff fbdb 	bl	8002998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80031e2:	4b18      	ldr	r3, [pc, #96]	@ (8003244 <HAL_SPDIFRX_MspInit+0xc0>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <HAL_SPDIFRX_MspInit+0xc0>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ee:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <HAL_SPDIFRX_MspInit+0xc0>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031fa:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <HAL_SPDIFRX_MspInit+0xc0>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	4a11      	ldr	r2, [pc, #68]	@ (8003244 <HAL_SPDIFRX_MspInit+0xc0>)
 8003200:	f043 0308 	orr.w	r3, r3, #8
 8003204:	6313      	str	r3, [r2, #48]	@ 0x30
 8003206:	4b0f      	ldr	r3, [pc, #60]	@ (8003244 <HAL_SPDIFRX_MspInit+0xc0>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003212:	2380      	movs	r3, #128	@ 0x80
 8003214:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800322a:	2308      	movs	r3, #8
 800322c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003230:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003234:	4619      	mov	r1, r3
 8003236:	4804      	ldr	r0, [pc, #16]	@ (8003248 <HAL_SPDIFRX_MspInit+0xc4>)
 8003238:	f008 fa66 	bl	800b708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800323c:	bf00      	nop
 800323e:	37a8      	adds	r7, #168	@ 0xa8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	40020c00 	.word	0x40020c00

0800324c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	@ 0x28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 0314 	add.w	r3, r7, #20
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a25      	ldr	r2, [pc, #148]	@ (8003300 <HAL_SPI_MspInit+0xb4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d144      	bne.n	80032f8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800326e:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <HAL_SPI_MspInit+0xb8>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	4a24      	ldr	r2, [pc, #144]	@ (8003304 <HAL_SPI_MspInit+0xb8>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003278:	6413      	str	r3, [r2, #64]	@ 0x40
 800327a:	4b22      	ldr	r3, [pc, #136]	@ (8003304 <HAL_SPI_MspInit+0xb8>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003286:	4b1f      	ldr	r3, [pc, #124]	@ (8003304 <HAL_SPI_MspInit+0xb8>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	4a1e      	ldr	r2, [pc, #120]	@ (8003304 <HAL_SPI_MspInit+0xb8>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003290:	6313      	str	r3, [r2, #48]	@ 0x30
 8003292:	4b1c      	ldr	r3, [pc, #112]	@ (8003304 <HAL_SPI_MspInit+0xb8>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329e:	4b19      	ldr	r3, [pc, #100]	@ (8003304 <HAL_SPI_MspInit+0xb8>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	4a18      	ldr	r2, [pc, #96]	@ (8003304 <HAL_SPI_MspInit+0xb8>)
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032aa:	4b16      	ldr	r3, [pc, #88]	@ (8003304 <HAL_SPI_MspInit+0xb8>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80032b6:	2302      	movs	r3, #2
 80032b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c2:	2300      	movs	r3, #0
 80032c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032c6:	2305      	movs	r3, #5
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	4619      	mov	r1, r3
 80032d0:	480d      	ldr	r0, [pc, #52]	@ (8003308 <HAL_SPI_MspInit+0xbc>)
 80032d2:	f008 fa19 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80032d6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80032da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032dc:	2302      	movs	r3, #2
 80032de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e4:	2300      	movs	r3, #0
 80032e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032e8:	2305      	movs	r3, #5
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	4619      	mov	r1, r3
 80032f2:	4806      	ldr	r0, [pc, #24]	@ (800330c <HAL_SPI_MspInit+0xc0>)
 80032f4:	f008 fa08 	bl	800b708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80032f8:	bf00      	nop
 80032fa:	3728      	adds	r7, #40	@ 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40003800 	.word	0x40003800
 8003304:	40023800 	.word	0x40023800
 8003308:	40022000 	.word	0x40022000
 800330c:	40020400 	.word	0x40020400

08003310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	@ 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2e      	ldr	r2, [pc, #184]	@ (80033d8 <HAL_TIM_Base_MspInit+0xc8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d10c      	bne.n	800333c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003322:	4b2e      	ldr	r3, [pc, #184]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	4a2d      	ldr	r2, [pc, #180]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6453      	str	r3, [r2, #68]	@ 0x44
 800332e:	4b2b      	ldr	r3, [pc, #172]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800333a:	e046      	b.n	80033ca <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003344:	d10c      	bne.n	8003360 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003346:	4b25      	ldr	r3, [pc, #148]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	4a24      	ldr	r2, [pc, #144]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6413      	str	r3, [r2, #64]	@ 0x40
 8003352:	4b22      	ldr	r3, [pc, #136]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	69bb      	ldr	r3, [r7, #24]
}
 800335e:	e034      	b.n	80033ca <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1e      	ldr	r2, [pc, #120]	@ (80033e0 <HAL_TIM_Base_MspInit+0xd0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d10c      	bne.n	8003384 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800336a:	4b1c      	ldr	r3, [pc, #112]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	4a1b      	ldr	r2, [pc, #108]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 8003370:	f043 0302 	orr.w	r3, r3, #2
 8003374:	6413      	str	r3, [r2, #64]	@ 0x40
 8003376:	4b19      	ldr	r3, [pc, #100]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697b      	ldr	r3, [r7, #20]
}
 8003382:	e022      	b.n	80033ca <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a16      	ldr	r2, [pc, #88]	@ (80033e4 <HAL_TIM_Base_MspInit+0xd4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10c      	bne.n	80033a8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800338e:	4b13      	ldr	r3, [pc, #76]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	4a12      	ldr	r2, [pc, #72]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6413      	str	r3, [r2, #64]	@ 0x40
 800339a:	4b10      	ldr	r3, [pc, #64]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]
}
 80033a6:	e010      	b.n	80033ca <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0e      	ldr	r2, [pc, #56]	@ (80033e8 <HAL_TIM_Base_MspInit+0xd8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d10b      	bne.n	80033ca <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80033b2:	4b0a      	ldr	r3, [pc, #40]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b6:	4a09      	ldr	r2, [pc, #36]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80033be:	4b07      	ldr	r3, [pc, #28]	@ (80033dc <HAL_TIM_Base_MspInit+0xcc>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
}
 80033ca:	bf00      	nop
 80033cc:	3724      	adds	r7, #36	@ 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40000400 	.word	0x40000400
 80033e4:	40000c00 	.word	0x40000c00
 80033e8:	40010400 	.word	0x40010400

080033ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003424 <HAL_TIM_PWM_MspInit+0x38>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10b      	bne.n	8003416 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80033fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <HAL_TIM_PWM_MspInit+0x3c>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	4a09      	ldr	r2, [pc, #36]	@ (8003428 <HAL_TIM_PWM_MspInit+0x3c>)
 8003404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003408:	6413      	str	r3, [r2, #64]	@ 0x40
 800340a:	4b07      	ldr	r3, [pc, #28]	@ (8003428 <HAL_TIM_PWM_MspInit+0x3c>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40001800 	.word	0x40001800
 8003428:	40023800 	.word	0x40023800

0800342c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08c      	sub	sp, #48	@ 0x30
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 031c 	add.w	r3, r7, #28
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a56      	ldr	r2, [pc, #344]	@ (80035a4 <HAL_TIM_MspPostInit+0x178>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d11d      	bne.n	800348a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	4b56      	ldr	r3, [pc, #344]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	4a55      	ldr	r2, [pc, #340]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6313      	str	r3, [r2, #48]	@ 0x30
 800345a:	4b53      	ldr	r3, [pc, #332]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003466:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800346a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2302      	movs	r3, #2
 800346e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003474:	2300      	movs	r3, #0
 8003476:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003478:	2301      	movs	r3, #1
 800347a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800347c:	f107 031c 	add.w	r3, r7, #28
 8003480:	4619      	mov	r1, r3
 8003482:	484a      	ldr	r0, [pc, #296]	@ (80035ac <HAL_TIM_MspPostInit+0x180>)
 8003484:	f008 f940 	bl	800b708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003488:	e087      	b.n	800359a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003492:	d11d      	bne.n	80034d0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003494:	4b44      	ldr	r3, [pc, #272]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	4a43      	ldr	r2, [pc, #268]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6313      	str	r3, [r2, #48]	@ 0x30
 80034a0:	4b41      	ldr	r3, [pc, #260]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80034ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ba:	2300      	movs	r3, #0
 80034bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034be:	2301      	movs	r3, #1
 80034c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80034c2:	f107 031c 	add.w	r3, r7, #28
 80034c6:	4619      	mov	r1, r3
 80034c8:	4838      	ldr	r0, [pc, #224]	@ (80035ac <HAL_TIM_MspPostInit+0x180>)
 80034ca:	f008 f91d 	bl	800b708 <HAL_GPIO_Init>
}
 80034ce:	e064      	b.n	800359a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a36      	ldr	r2, [pc, #216]	@ (80035b0 <HAL_TIM_MspPostInit+0x184>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d11c      	bne.n	8003514 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034da:	4b33      	ldr	r3, [pc, #204]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	4a32      	ldr	r2, [pc, #200]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 80034e0:	f043 0302 	orr.w	r3, r3, #2
 80034e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e6:	4b30      	ldr	r3, [pc, #192]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80034f2:	2310      	movs	r3, #16
 80034f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	2300      	movs	r3, #0
 8003500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003502:	2302      	movs	r3, #2
 8003504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003506:	f107 031c 	add.w	r3, r7, #28
 800350a:	4619      	mov	r1, r3
 800350c:	4829      	ldr	r0, [pc, #164]	@ (80035b4 <HAL_TIM_MspPostInit+0x188>)
 800350e:	f008 f8fb 	bl	800b708 <HAL_GPIO_Init>
}
 8003512:	e042      	b.n	800359a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a27      	ldr	r2, [pc, #156]	@ (80035b8 <HAL_TIM_MspPostInit+0x18c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d11c      	bne.n	8003558 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800351e:	4b22      	ldr	r3, [pc, #136]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	4a21      	ldr	r2, [pc, #132]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 8003524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003528:	6313      	str	r3, [r2, #48]	@ 0x30
 800352a:	4b1f      	ldr	r3, [pc, #124]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003536:	2301      	movs	r3, #1
 8003538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353a:	2302      	movs	r3, #2
 800353c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003542:	2300      	movs	r3, #0
 8003544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003546:	2302      	movs	r3, #2
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800354a:	f107 031c 	add.w	r3, r7, #28
 800354e:	4619      	mov	r1, r3
 8003550:	481a      	ldr	r0, [pc, #104]	@ (80035bc <HAL_TIM_MspPostInit+0x190>)
 8003552:	f008 f8d9 	bl	800b708 <HAL_GPIO_Init>
}
 8003556:	e020      	b.n	800359a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a18      	ldr	r2, [pc, #96]	@ (80035c0 <HAL_TIM_MspPostInit+0x194>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d11b      	bne.n	800359a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003562:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	4a10      	ldr	r2, [pc, #64]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 8003568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800356c:	6313      	str	r3, [r2, #48]	@ 0x30
 800356e:	4b0e      	ldr	r3, [pc, #56]	@ (80035a8 <HAL_TIM_MspPostInit+0x17c>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800357a:	2340      	movs	r3, #64	@ 0x40
 800357c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357e:	2302      	movs	r3, #2
 8003580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003582:	2300      	movs	r3, #0
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003586:	2300      	movs	r3, #0
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800358a:	2309      	movs	r3, #9
 800358c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800358e:	f107 031c 	add.w	r3, r7, #28
 8003592:	4619      	mov	r1, r3
 8003594:	480b      	ldr	r0, [pc, #44]	@ (80035c4 <HAL_TIM_MspPostInit+0x198>)
 8003596:	f008 f8b7 	bl	800b708 <HAL_GPIO_Init>
}
 800359a:	bf00      	nop
 800359c:	3730      	adds	r7, #48	@ 0x30
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40020000 	.word	0x40020000
 80035b0:	40000400 	.word	0x40000400
 80035b4:	40020400 	.word	0x40020400
 80035b8:	40000c00 	.word	0x40000c00
 80035bc:	40022000 	.word	0x40022000
 80035c0:	40001800 	.word	0x40001800
 80035c4:	40021c00 	.word	0x40021c00

080035c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b0ae      	sub	sp, #184	@ 0xb8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035e0:	f107 0320 	add.w	r3, r7, #32
 80035e4:	2284      	movs	r2, #132	@ 0x84
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f023 f9f4 	bl	80269d6 <memset>
  if(huart->Instance==USART1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a53      	ldr	r2, [pc, #332]	@ (8003740 <HAL_UART_MspInit+0x178>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d15d      	bne.n	80036b4 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035f8:	2340      	movs	r3, #64	@ 0x40
 80035fa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80035fc:	2300      	movs	r3, #0
 80035fe:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003600:	f107 0320 	add.w	r3, r7, #32
 8003604:	4618      	mov	r0, r3
 8003606:	f00c fcff 	bl	8010008 <HAL_RCCEx_PeriphCLKConfig>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003610:	f7ff f9c2 	bl	8002998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003614:	4b4b      	ldr	r3, [pc, #300]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 8003616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003618:	4a4a      	ldr	r2, [pc, #296]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 800361a:	f043 0310 	orr.w	r3, r3, #16
 800361e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003620:	4b48      	ldr	r3, [pc, #288]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 8003622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800362c:	4b45      	ldr	r3, [pc, #276]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003630:	4a44      	ldr	r2, [pc, #272]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 8003632:	f043 0302 	orr.w	r3, r3, #2
 8003636:	6313      	str	r3, [r2, #48]	@ 0x30
 8003638:	4b42      	ldr	r3, [pc, #264]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003644:	4b3f      	ldr	r3, [pc, #252]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003648:	4a3e      	ldr	r2, [pc, #248]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003650:	4b3c      	ldr	r3, [pc, #240]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800365c:	2380      	movs	r3, #128	@ 0x80
 800365e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003674:	2307      	movs	r3, #7
 8003676:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800367a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800367e:	4619      	mov	r1, r3
 8003680:	4831      	ldr	r0, [pc, #196]	@ (8003748 <HAL_UART_MspInit+0x180>)
 8003682:	f008 f841 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003686:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800368a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036a0:	2307      	movs	r3, #7
 80036a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80036a6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80036aa:	4619      	mov	r1, r3
 80036ac:	4827      	ldr	r0, [pc, #156]	@ (800374c <HAL_UART_MspInit+0x184>)
 80036ae:	f008 f82b 	bl	800b708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80036b2:	e040      	b.n	8003736 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a25      	ldr	r2, [pc, #148]	@ (8003750 <HAL_UART_MspInit+0x188>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d13b      	bne.n	8003736 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80036be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036c2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80036c4:	2300      	movs	r3, #0
 80036c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036c8:	f107 0320 	add.w	r3, r7, #32
 80036cc:	4618      	mov	r0, r3
 80036ce:	f00c fc9b 	bl	8010008 <HAL_RCCEx_PeriphCLKConfig>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_UART_MspInit+0x114>
      Error_Handler();
 80036d8:	f7ff f95e 	bl	8002998 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80036dc:	4b19      	ldr	r3, [pc, #100]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 80036de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e0:	4a18      	ldr	r2, [pc, #96]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 80036e2:	f043 0320 	orr.w	r3, r3, #32
 80036e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80036e8:	4b16      	ldr	r3, [pc, #88]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 80036ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036f4:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	4a12      	ldr	r2, [pc, #72]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003700:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <HAL_UART_MspInit+0x17c>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800370c:	23c0      	movs	r3, #192	@ 0xc0
 800370e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003712:	2302      	movs	r3, #2
 8003714:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371e:	2303      	movs	r3, #3
 8003720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003724:	2308      	movs	r3, #8
 8003726:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800372a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800372e:	4619      	mov	r1, r3
 8003730:	4808      	ldr	r0, [pc, #32]	@ (8003754 <HAL_UART_MspInit+0x18c>)
 8003732:	f007 ffe9 	bl	800b708 <HAL_GPIO_Init>
}
 8003736:	bf00      	nop
 8003738:	37b8      	adds	r7, #184	@ 0xb8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40011000 	.word	0x40011000
 8003744:	40023800 	.word	0x40023800
 8003748:	40020400 	.word	0x40020400
 800374c:	40020000 	.word	0x40020000
 8003750:	40011400 	.word	0x40011400
 8003754:	40020800 	.word	0x40020800

08003758 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800376c:	4b3a      	ldr	r3, [pc, #232]	@ (8003858 <HAL_FMC_MspInit+0x100>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d16d      	bne.n	8003850 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003774:	4b38      	ldr	r3, [pc, #224]	@ (8003858 <HAL_FMC_MspInit+0x100>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800377a:	4b38      	ldr	r3, [pc, #224]	@ (800385c <HAL_FMC_MspInit+0x104>)
 800377c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377e:	4a37      	ldr	r2, [pc, #220]	@ (800385c <HAL_FMC_MspInit+0x104>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6393      	str	r3, [r2, #56]	@ 0x38
 8003786:	4b35      	ldr	r3, [pc, #212]	@ (800385c <HAL_FMC_MspInit+0x104>)
 8003788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003792:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003796:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a0:	2303      	movs	r3, #3
 80037a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037a4:	230c      	movs	r3, #12
 80037a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	4619      	mov	r1, r3
 80037ac:	482c      	ldr	r0, [pc, #176]	@ (8003860 <HAL_FMC_MspInit+0x108>)
 80037ae:	f007 ffab 	bl	800b708 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80037b2:	f248 1333 	movw	r3, #33075	@ 0x8133
 80037b6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b8:	2302      	movs	r3, #2
 80037ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c0:	2303      	movs	r3, #3
 80037c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037c4:	230c      	movs	r3, #12
 80037c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037c8:	1d3b      	adds	r3, r7, #4
 80037ca:	4619      	mov	r1, r3
 80037cc:	4825      	ldr	r0, [pc, #148]	@ (8003864 <HAL_FMC_MspInit+0x10c>)
 80037ce:	f007 ff9b 	bl	800b708 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80037d2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80037d6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d8:	2302      	movs	r3, #2
 80037da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e0:	2303      	movs	r3, #3
 80037e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037e4:	230c      	movs	r3, #12
 80037e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	4619      	mov	r1, r3
 80037ec:	481e      	ldr	r0, [pc, #120]	@ (8003868 <HAL_FMC_MspInit+0x110>)
 80037ee:	f007 ff8b 	bl	800b708 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80037f2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80037f6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f8:	2302      	movs	r3, #2
 80037fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003800:	2303      	movs	r3, #3
 8003802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003804:	230c      	movs	r3, #12
 8003806:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003808:	1d3b      	adds	r3, r7, #4
 800380a:	4619      	mov	r1, r3
 800380c:	4817      	ldr	r0, [pc, #92]	@ (800386c <HAL_FMC_MspInit+0x114>)
 800380e:	f007 ff7b 	bl	800b708 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003812:	2328      	movs	r3, #40	@ 0x28
 8003814:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800381e:	2303      	movs	r3, #3
 8003820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003822:	230c      	movs	r3, #12
 8003824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	4619      	mov	r1, r3
 800382a:	4811      	ldr	r0, [pc, #68]	@ (8003870 <HAL_FMC_MspInit+0x118>)
 800382c:	f007 ff6c 	bl	800b708 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003830:	2308      	movs	r3, #8
 8003832:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003834:	2302      	movs	r3, #2
 8003836:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383c:	2303      	movs	r3, #3
 800383e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003840:	230c      	movs	r3, #12
 8003842:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003844:	1d3b      	adds	r3, r7, #4
 8003846:	4619      	mov	r1, r3
 8003848:	480a      	ldr	r0, [pc, #40]	@ (8003874 <HAL_FMC_MspInit+0x11c>)
 800384a:	f007 ff5d 	bl	800b708 <HAL_GPIO_Init>
 800384e:	e000      	b.n	8003852 <HAL_FMC_MspInit+0xfa>
    return;
 8003850:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20010cb4 	.word	0x20010cb4
 800385c:	40023800 	.word	0x40023800
 8003860:	40021000 	.word	0x40021000
 8003864:	40021800 	.word	0x40021800
 8003868:	40020c00 	.word	0x40020c00
 800386c:	40021400 	.word	0x40021400
 8003870:	40021c00 	.word	0x40021c00
 8003874:	40020800 	.word	0x40020800

08003878 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003880:	f7ff ff6a 	bl	8003758 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	@ 0x28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2b      	ldr	r2, [pc, #172]	@ (8003948 <HAL_SAI_MspInit+0xbc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d124      	bne.n	80038e8 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800389e:	4b2b      	ldr	r3, [pc, #172]	@ (800394c <HAL_SAI_MspInit+0xc0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10b      	bne.n	80038be <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80038a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003950 <HAL_SAI_MspInit+0xc4>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038aa:	4a29      	ldr	r2, [pc, #164]	@ (8003950 <HAL_SAI_MspInit+0xc4>)
 80038ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80038b2:	4b27      	ldr	r3, [pc, #156]	@ (8003950 <HAL_SAI_MspInit+0xc4>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80038be:	4b23      	ldr	r3, [pc, #140]	@ (800394c <HAL_SAI_MspInit+0xc0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	4a21      	ldr	r2, [pc, #132]	@ (800394c <HAL_SAI_MspInit+0xc0>)
 80038c6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80038c8:	23f0      	movs	r3, #240	@ 0xf0
 80038ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038cc:	2302      	movs	r3, #2
 80038ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d4:	2300      	movs	r3, #0
 80038d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80038d8:	230a      	movs	r3, #10
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	4619      	mov	r1, r3
 80038e2:	481c      	ldr	r0, [pc, #112]	@ (8003954 <HAL_SAI_MspInit+0xc8>)
 80038e4:	f007 ff10 	bl	800b708 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003958 <HAL_SAI_MspInit+0xcc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d125      	bne.n	800393e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80038f2:	4b16      	ldr	r3, [pc, #88]	@ (800394c <HAL_SAI_MspInit+0xc0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80038fa:	4b15      	ldr	r3, [pc, #84]	@ (8003950 <HAL_SAI_MspInit+0xc4>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	4a14      	ldr	r2, [pc, #80]	@ (8003950 <HAL_SAI_MspInit+0xc4>)
 8003900:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003904:	6453      	str	r3, [r2, #68]	@ 0x44
 8003906:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <HAL_SAI_MspInit+0xc4>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003912:	4b0e      	ldr	r3, [pc, #56]	@ (800394c <HAL_SAI_MspInit+0xc0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3301      	adds	r3, #1
 8003918:	4a0c      	ldr	r2, [pc, #48]	@ (800394c <HAL_SAI_MspInit+0xc0>)
 800391a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800391c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003922:	2302      	movs	r3, #2
 8003924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392a:	2300      	movs	r3, #0
 800392c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800392e:	230a      	movs	r3, #10
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003932:	f107 0314 	add.w	r3, r7, #20
 8003936:	4619      	mov	r1, r3
 8003938:	4808      	ldr	r0, [pc, #32]	@ (800395c <HAL_SAI_MspInit+0xd0>)
 800393a:	f007 fee5 	bl	800b708 <HAL_GPIO_Init>

    }
}
 800393e:	bf00      	nop
 8003940:	3728      	adds	r7, #40	@ 0x28
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40015c04 	.word	0x40015c04
 800394c:	20010cb8 	.word	0x20010cb8
 8003950:	40023800 	.word	0x40023800
 8003954:	40022000 	.word	0x40022000
 8003958:	40015c24 	.word	0x40015c24
 800395c:	40021800 	.word	0x40021800

08003960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08e      	sub	sp, #56	@ 0x38
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003970:	4b33      	ldr	r3, [pc, #204]	@ (8003a40 <HAL_InitTick+0xe0>)
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	4a32      	ldr	r2, [pc, #200]	@ (8003a40 <HAL_InitTick+0xe0>)
 8003976:	f043 0310 	orr.w	r3, r3, #16
 800397a:	6413      	str	r3, [r2, #64]	@ 0x40
 800397c:	4b30      	ldr	r3, [pc, #192]	@ (8003a40 <HAL_InitTick+0xe0>)
 800397e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003988:	f107 0210 	add.w	r2, r7, #16
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f00c fb06 	bl	800ffa4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800399c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80039a2:	f00c fad7 	bl	800ff54 <HAL_RCC_GetPCLK1Freq>
 80039a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80039a8:	e004      	b.n	80039b4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80039aa:	f00c fad3 	bl	800ff54 <HAL_RCC_GetPCLK1Freq>
 80039ae:	4603      	mov	r3, r0
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b6:	4a23      	ldr	r2, [pc, #140]	@ (8003a44 <HAL_InitTick+0xe4>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	0c9b      	lsrs	r3, r3, #18
 80039be:	3b01      	subs	r3, #1
 80039c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80039c2:	4b21      	ldr	r3, [pc, #132]	@ (8003a48 <HAL_InitTick+0xe8>)
 80039c4:	4a21      	ldr	r2, [pc, #132]	@ (8003a4c <HAL_InitTick+0xec>)
 80039c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80039c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a48 <HAL_InitTick+0xe8>)
 80039ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80039ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80039d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a48 <HAL_InitTick+0xe8>)
 80039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80039d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a48 <HAL_InitTick+0xe8>)
 80039d8:	2200      	movs	r2, #0
 80039da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a48 <HAL_InitTick+0xe8>)
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039e2:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <HAL_InitTick+0xe8>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80039e8:	4817      	ldr	r0, [pc, #92]	@ (8003a48 <HAL_InitTick+0xe8>)
 80039ea:	f00d ff60 	bl	80118ae <HAL_TIM_Base_Init>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80039f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d11b      	bne.n	8003a34 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80039fc:	4812      	ldr	r0, [pc, #72]	@ (8003a48 <HAL_InitTick+0xe8>)
 80039fe:	f00d ffad 	bl	801195c <HAL_TIM_Base_Start_IT>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003a08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d111      	bne.n	8003a34 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a10:	2036      	movs	r0, #54	@ 0x36
 8003a12:	f003 fdb1 	bl	8007578 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b0f      	cmp	r3, #15
 8003a1a:	d808      	bhi.n	8003a2e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	2036      	movs	r0, #54	@ 0x36
 8003a22:	f003 fd8d 	bl	8007540 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a26:	4a0a      	ldr	r2, [pc, #40]	@ (8003a50 <HAL_InitTick+0xf0>)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	e002      	b.n	8003a34 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003a34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3738      	adds	r7, #56	@ 0x38
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	431bde83 	.word	0x431bde83
 8003a48:	20010cbc 	.word	0x20010cbc
 8003a4c:	40001000 	.word	0x40001000
 8003a50:	20010060 	.word	0x20010060

08003a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a58:	bf00      	nop
 8003a5a:	e7fd      	b.n	8003a58 <NMI_Handler+0x4>

08003a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a60:	bf00      	nop
 8003a62:	e7fd      	b.n	8003a60 <HardFault_Handler+0x4>

08003a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a68:	bf00      	nop
 8003a6a:	e7fd      	b.n	8003a68 <MemManage_Handler+0x4>

08003a6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a70:	bf00      	nop
 8003a72:	e7fd      	b.n	8003a70 <BusFault_Handler+0x4>

08003a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a78:	bf00      	nop
 8003a7a:	e7fd      	b.n	8003a78 <UsageFault_Handler+0x4>

08003a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a90:	4802      	ldr	r0, [pc, #8]	@ (8003a9c <TIM6_DAC_IRQHandler+0x10>)
 8003a92:	f00e f832 	bl	8011afa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20010cbc 	.word	0x20010cbc

08003aa0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003aa4:	4802      	ldr	r0, [pc, #8]	@ (8003ab0 <ETH_IRQHandler+0x10>)
 8003aa6:	f006 ff55 	bl	800a954 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	2001116c 	.word	0x2001116c

08003ab4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003ab8:	4802      	ldr	r0, [pc, #8]	@ (8003ac4 <OTG_FS_IRQHandler+0x10>)
 8003aba:	f008 fbf1 	bl	800c2a0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	2003ca1c 	.word	0x2003ca1c

08003ac8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003acc:	4802      	ldr	r0, [pc, #8]	@ (8003ad8 <LTDC_IRQHandler+0x10>)
 8003ace:	f00b f953 	bl	800ed78 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200106d8 	.word	0x200106d8

08003adc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003ae0:	4802      	ldr	r0, [pc, #8]	@ (8003aec <DMA2D_IRQHandler+0x10>)
 8003ae2:	f004 fff5 	bl	8008ad0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200105f0 	.word	0x200105f0

08003af0 <WWDG_IRQHandler>:

/* USER CODE BEGIN 1 */
void WWDG_IRQHandler(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
	while (1)
 8003af4:	bf00      	nop
 8003af6:	e7fd      	b.n	8003af4 <WWDG_IRQHandler+0x4>

08003af8 <PVD_IRQHandler>:

	}
}

void PVD_IRQHandler(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
	while (1)
 8003afc:	bf00      	nop
 8003afe:	e7fd      	b.n	8003afc <PVD_IRQHandler+0x4>

08003b00 <TAMP_STAMP_IRQHandler>:
	}
}


void TAMP_STAMP_IRQHandler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
	while (1)
 8003b04:	bf00      	nop
 8003b06:	e7fd      	b.n	8003b04 <TAMP_STAMP_IRQHandler+0x4>

08003b08 <RTC_WKUP_IRQHandler>:

	}
}

void RTC_WKUP_IRQHandler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
	while (1)
 8003b0c:	bf00      	nop
 8003b0e:	e7fd      	b.n	8003b0c <RTC_WKUP_IRQHandler+0x4>

08003b10 <FLASH_IRQHandler>:

	}
}

void FLASH_IRQHandler(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
	while (1)
 8003b14:	bf00      	nop
 8003b16:	e7fd      	b.n	8003b14 <FLASH_IRQHandler+0x4>

08003b18 <RCC_IRQHandler>:

	}
}

void RCC_IRQHandler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
	while (1)
 8003b1c:	bf00      	nop
 8003b1e:	e7fd      	b.n	8003b1c <RCC_IRQHandler+0x4>

08003b20 <EXTI0_IRQHandler>:

	}
}

void EXTI0_IRQHandler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
	while (1)
 8003b24:	bf00      	nop
 8003b26:	e7fd      	b.n	8003b24 <EXTI0_IRQHandler+0x4>

08003b28 <EXTI1_IRQHandler>:
	{

	}
}
void EXTI1_IRQHandler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
	while (1)
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <EXTI1_IRQHandler+0x4>

08003b30 <EXTI2_IRQHandler>:

	}
}

void EXTI2_IRQHandler(void)                  /* EXTI Line2                   */
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
	while (1)
 8003b34:	bf00      	nop
 8003b36:	e7fd      	b.n	8003b34 <EXTI2_IRQHandler+0x4>

08003b38 <EXTI3_IRQHandler>:

	}
}

void EXTI3_IRQHandler(void)                  /* EXTI Line3                   */
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
	while (1)
 8003b3c:	bf00      	nop
 8003b3e:	e7fd      	b.n	8003b3c <EXTI3_IRQHandler+0x4>

08003b40 <EXTI4_IRQHandler>:

	}
}

void EXTI4_IRQHandler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
	while (1)
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <EXTI4_IRQHandler+0x4>

08003b48 <DMA1_Stream0_IRQHandler>:

	}
}

void DMA1_Stream0_IRQHandler(void)           /* DMA1 Stream 0                */
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
	while (1)
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <DMA1_Stream0_IRQHandler+0x4>

08003b50 <DMA1_Stream1_IRQHandler>:

	}
}

void DMA1_Stream1_IRQHandler(void)           /* DMA1 Stream 1                */
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
	while (1)
 8003b54:	bf00      	nop
 8003b56:	e7fd      	b.n	8003b54 <DMA1_Stream1_IRQHandler+0x4>

08003b58 <DMA1_Stream2_IRQHandler>:

	}
}

void DMA1_Stream2_IRQHandler(void)           /* DMA1 Stream 2                */
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
	while (1)
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <DMA1_Stream2_IRQHandler+0x4>

08003b60 <DMA1_Stream3_IRQHandler>:

	}
}

void DMA1_Stream3_IRQHandler(void)           /* DMA1 Stream 3                */
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
	while (1)
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <DMA1_Stream3_IRQHandler+0x4>

08003b68 <DMA1_Stream4_IRQHandler>:

	}
}

void DMA1_Stream4_IRQHandler(void)          /* DMA1 Stream 4                */
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
	while (1)
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <DMA1_Stream4_IRQHandler+0x4>

08003b70 <DMA1_Stream5_IRQHandler>:

	}
}

void DMA1_Stream5_IRQHandler(void)           /* DMA1 Stream 5                */
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
	while (1)
 8003b74:	bf00      	nop
 8003b76:	e7fd      	b.n	8003b74 <DMA1_Stream5_IRQHandler+0x4>

08003b78 <DMA1_Stream6_IRQHandler>:

	}
}

void DMA1_Stream6_IRQHandler(void)           /* DMA1 Stream 6                */
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
	while (1)
 8003b7c:	bf00      	nop
 8003b7e:	e7fd      	b.n	8003b7c <DMA1_Stream6_IRQHandler+0x4>

08003b80 <ADC_IRQHandler>:

	}
}

void ADC_IRQHandler(void)                    /* ADC1, ADC2 and ADC3s         */
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
	while (1)
 8003b84:	bf00      	nop
 8003b86:	e7fd      	b.n	8003b84 <ADC_IRQHandler+0x4>

08003b88 <CAN1_TX_IRQHandler>:

	}
}

void CAN1_TX_IRQHandler(void)                /* CAN1 TX                      */
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
	while (1)
 8003b8c:	bf00      	nop
 8003b8e:	e7fd      	b.n	8003b8c <CAN1_TX_IRQHandler+0x4>

08003b90 <CAN1_RX0_IRQHandler>:

	}
}

void CAN1_RX0_IRQHandler(void)               /* CAN1 RX0                     */
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
	while (1)
 8003b94:	bf00      	nop
 8003b96:	e7fd      	b.n	8003b94 <CAN1_RX0_IRQHandler+0x4>

08003b98 <CAN1_RX1_IRQHandler>:

	}
}

void CAN1_RX1_IRQHandler(void)               /* CAN1 RX1                     */
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
	while (1)
 8003b9c:	bf00      	nop
 8003b9e:	e7fd      	b.n	8003b9c <CAN1_RX1_IRQHandler+0x4>

08003ba0 <CAN1_SCE_IRQHandler>:

	}
}

void CAN1_SCE_IRQHandler(void)               /* CAN1 SCE                     */
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
	while (1)
 8003ba4:	bf00      	nop
 8003ba6:	e7fd      	b.n	8003ba4 <CAN1_SCE_IRQHandler+0x4>

08003ba8 <EXTI9_5_IRQHandler>:

	}
}

void EXTI9_5_IRQHandler(void)                /* External Line[9:5]s          */
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
	while (1)
 8003bac:	bf00      	nop
 8003bae:	e7fd      	b.n	8003bac <EXTI9_5_IRQHandler+0x4>

08003bb0 <TIM1_BRK_TIM9_IRQHandler>:

	}
}

void TIM1_BRK_TIM9_IRQHandler(void)        /* TIM1 Break and TIM9          */
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
	while (1)
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <TIM1_BRK_TIM9_IRQHandler+0x4>

08003bb8 <TIM1_UP_TIM10_IRQHandler>:

	}
}

void TIM1_UP_TIM10_IRQHandler(void)          /* TIM1 Update and TIM10        */
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
	while (1)
 8003bbc:	bf00      	nop
 8003bbe:	e7fd      	b.n	8003bbc <TIM1_UP_TIM10_IRQHandler+0x4>

08003bc0 <TIM1_TRG_COM_TIM11_IRQHandler>:

	}
}

void TIM1_TRG_COM_TIM11_IRQHandler(void)    /* TIM1 Trigger and Commutation and TIM11 */
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
	while (1)
 8003bc4:	bf00      	nop
 8003bc6:	e7fd      	b.n	8003bc4 <TIM1_TRG_COM_TIM11_IRQHandler+0x4>

08003bc8 <TIM1_CC_IRQHandler>:

	}
}

void TIM1_CC_IRQHandler(void)                /* TIM1 Capture Compare         */
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
	while (1)
 8003bcc:	bf00      	nop
 8003bce:	e7fd      	b.n	8003bcc <TIM1_CC_IRQHandler+0x4>

08003bd0 <TIM2_IRQHandler>:

	}
}

void TIM2_IRQHandler(void)                  /* TIM2                         */
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
	while (1)
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <TIM2_IRQHandler+0x4>

08003bd8 <TIM3_IRQHandler>:

	}
}

void TIM3_IRQHandler(void)                   /* TIM3                         */
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
	while (1)
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <TIM3_IRQHandler+0x4>

08003be0 <TIM4_IRQHandler>:

	}
}

void TIM4_IRQHandler(void)                  /* TIM4                         */
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
	while (1)
 8003be4:	bf00      	nop
 8003be6:	e7fd      	b.n	8003be4 <TIM4_IRQHandler+0x4>

08003be8 <I2C1_EV_IRQHandler>:

	}
}

void I2C1_EV_IRQHandler(void)                /* I2C1 Event                   */
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	while (1)
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <I2C1_EV_IRQHandler+0x4>

08003bf0 <I2C1_ER_IRQHandler>:

	}
}

void I2C1_ER_IRQHandler(void)                /* I2C1 Error                   */
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
	while (1)
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <I2C1_ER_IRQHandler+0x4>

08003bf8 <I2C2_EV_IRQHandler>:

	}
}

void I2C2_EV_IRQHandler(void)                /* I2C2 Event                   */
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
	while (1)
 8003bfc:	bf00      	nop
 8003bfe:	e7fd      	b.n	8003bfc <I2C2_EV_IRQHandler+0x4>

08003c00 <I2C2_ER_IRQHandler>:

	}
}

void I2C2_ER_IRQHandler(void)                /* I2C2 Error                   */
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
	while (1)
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <I2C2_ER_IRQHandler+0x4>

08003c08 <SPI1_IRQHandler>:

	}
}

void SPI1_IRQHandler(void)                 /* SPI1                         */
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
	while (1)
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <SPI1_IRQHandler+0x4>

08003c10 <SPI2_IRQHandler>:

	}
}

void SPI2_IRQHandler(void)                  /* SPI2                         */
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
	while (1)
 8003c14:	bf00      	nop
 8003c16:	e7fd      	b.n	8003c14 <SPI2_IRQHandler+0x4>

08003c18 <USART1_IRQHandler>:

	}
}

void  USART1_IRQHandler(void)                 /* USART1                       */
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
	while (1)
 8003c1c:	bf00      	nop
 8003c1e:	e7fd      	b.n	8003c1c <USART1_IRQHandler+0x4>

08003c20 <USART2_IRQHandler>:

	}
}

void USART2_IRQHandler(void)                 /* USART2                       */
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
	while (1)
 8003c24:	bf00      	nop
 8003c26:	e7fd      	b.n	8003c24 <USART2_IRQHandler+0x4>

08003c28 <USART3_IRQHandler>:

	}
}

void USART3_IRQHandler(void)                /* USART3                       */
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
	while (1)
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <USART3_IRQHandler+0x4>

08003c30 <EXTI15_10_IRQHandler>:

	}
}

void EXTI15_10_IRQHandler(void)              /* External Line[15:10]s        */
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
	while (1)
 8003c34:	bf00      	nop
 8003c36:	e7fd      	b.n	8003c34 <EXTI15_10_IRQHandler+0x4>

08003c38 <RTC_Alarm_IRQHandler>:

	}
}

void RTC_Alarm_IRQHandler(void)              /* RTC Alarm (A and B) through EXTI Line */
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
	while (1)
 8003c3c:	bf00      	nop
 8003c3e:	e7fd      	b.n	8003c3c <RTC_Alarm_IRQHandler+0x4>

08003c40 <OTG_FS_WKUP_IRQHandler>:

	}
}

void OTG_FS_WKUP_IRQHandler(void)            /* USB OTG FS Wakeup through EXTI line */
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
	while (1)
 8003c44:	bf00      	nop
 8003c46:	e7fd      	b.n	8003c44 <OTG_FS_WKUP_IRQHandler+0x4>

08003c48 <TIM8_BRK_TIM12_IRQHandler>:

	}
}

void TIM8_BRK_TIM12_IRQHandler(void)         /* TIM8 Break and TIM12         */
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
	while (1)
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <TIM8_BRK_TIM12_IRQHandler+0x4>

08003c50 <TIM8_UP_TIM13_IRQHandler>:

	}
}

void TIM8_UP_TIM13_IRQHandler(void)          /* TIM8 Update and TIM13        */
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
	while (1)
 8003c54:	bf00      	nop
 8003c56:	e7fd      	b.n	8003c54 <TIM8_UP_TIM13_IRQHandler+0x4>

08003c58 <TIM8_TRG_COM_TIM14_IRQHandler>:

	}
}

void TIM8_TRG_COM_TIM14_IRQHandler(void)     /* TIM8 Trigger and Commutation and TIM14 */
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
	while (1)
 8003c5c:	bf00      	nop
 8003c5e:	e7fd      	b.n	8003c5c <TIM8_TRG_COM_TIM14_IRQHandler+0x4>

08003c60 <TIM8_CC_IRQHandler>:

	}
}

void TIM8_CC_IRQHandler(void)                /* TIM8 Capture Compare         */
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	while (1)
 8003c64:	bf00      	nop
 8003c66:	e7fd      	b.n	8003c64 <TIM8_CC_IRQHandler+0x4>

08003c68 <DMA1_Stream7_IRQHandler>:

	}
}

void DMA1_Stream7_IRQHandler(void)          /* DMA1 Stream7                 */
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
	while (1)
 8003c6c:	bf00      	nop
 8003c6e:	e7fd      	b.n	8003c6c <DMA1_Stream7_IRQHandler+0x4>

08003c70 <FMC_IRQHandler>:

	}
}

void FMC_IRQHandler(void)                    /* FMC                          */
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
	while (1)
 8003c74:	bf00      	nop
 8003c76:	e7fd      	b.n	8003c74 <FMC_IRQHandler+0x4>

08003c78 <SDMMC1_IRQHandler>:

	}
}

void SDMMC1_IRQHandler(void)                 /* SDMMC1                       */
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
	while (1)
 8003c7c:	bf00      	nop
 8003c7e:	e7fd      	b.n	8003c7c <SDMMC1_IRQHandler+0x4>

08003c80 <TIM5_IRQHandler>:

	}
}

void TIM5_IRQHandler(void)                   /* TIM5                         */
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
	while (1)
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <TIM5_IRQHandler+0x4>

08003c88 <SPI3_IRQHandler>:
	{

	}
}
void SPI3_IRQHandler(void)                   /* SPI3                         */
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
	while (1)
 8003c8c:	bf00      	nop
 8003c8e:	e7fd      	b.n	8003c8c <SPI3_IRQHandler+0x4>

08003c90 <UART4_IRQHandler>:

	}
}

void UART4_IRQHandler(void)                  /* UART4                        */
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
	while (1)
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <UART4_IRQHandler+0x4>

08003c98 <UART5_IRQHandler>:

	}
}

  void UART5_IRQHandler(void)                  /* UART5                        */
  {
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  	while (1)
 8003c9c:	bf00      	nop
 8003c9e:	e7fd      	b.n	8003c9c <UART5_IRQHandler+0x4>

08003ca0 <TIM7_IRQHandler>:
  	}
  }


void TIM7_IRQHandler(void)                   /* TIM7                         */
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
	while (1)
 8003ca4:	bf00      	nop
 8003ca6:	e7fd      	b.n	8003ca4 <TIM7_IRQHandler+0x4>

08003ca8 <DMA2_Stream0_IRQHandler>:

	}
}

void DMA2_Stream0_IRQHandler(void)           /* DMA2 Stream 0                */
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
	while (1)
 8003cac:	bf00      	nop
 8003cae:	e7fd      	b.n	8003cac <DMA2_Stream0_IRQHandler+0x4>

08003cb0 <DMA2_Stream2_IRQHandler>:
}



void DMA2_Stream2_IRQHandler(void)           /* DMA2 Stream 2                */
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
	while (1)
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <DMA2_Stream2_IRQHandler+0x4>

08003cb8 <DMA2_Stream3_IRQHandler>:

	}
}

void DMA2_Stream3_IRQHandler(void)           /* DMA2 Stream 3                */
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
	while (1)
 8003cbc:	bf00      	nop
 8003cbe:	e7fd      	b.n	8003cbc <DMA2_Stream3_IRQHandler+0x4>

08003cc0 <DMA2_Stream4_IRQHandler>:

	}
}

void DMA2_Stream4_IRQHandler(void)           /* DMA2 Stream 4                */
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
	while (1)
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <DMA2_Stream4_IRQHandler+0x4>

08003cc8 <USART6_IRQHandler>:
	}
}


void USART6_IRQHandler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
	while (1)
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <USART6_IRQHandler+0x4>

08003cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return 1;
 8003cd4:	2301      	movs	r3, #1
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_kill>:

int _kill(int pid, int sig)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cea:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <_kill+0x20>)
 8003cec:	2216      	movs	r2, #22
 8003cee:	601a      	str	r2, [r3, #0]
  return -1;
 8003cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	2003cf40 	.word	0x2003cf40

08003d04 <_exit>:

void _exit (int status)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ffe5 	bl	8003ce0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d16:	bf00      	nop
 8003d18:	e7fd      	b.n	8003d16 <_exit+0x12>

08003d1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	e00a      	b.n	8003d42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d2c:	f3af 8000 	nop.w
 8003d30:	4601      	mov	r1, r0
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	60ba      	str	r2, [r7, #8]
 8003d38:	b2ca      	uxtb	r2, r1
 8003d3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	dbf0      	blt.n	8003d2c <_read+0x12>
  }

  return len;
 8003d4a:	687b      	ldr	r3, [r7, #4]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e009      	b.n	8003d7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	60ba      	str	r2, [r7, #8]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3301      	adds	r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	dbf1      	blt.n	8003d66 <_write+0x12>
  }
  return len;
 8003d82:	687b      	ldr	r3, [r7, #4]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_close>:

int _close(int file)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003db4:	605a      	str	r2, [r3, #4]
  return 0;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <_isatty>:

int _isatty(int file)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003dcc:	2301      	movs	r3, #1
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dfc:	4a14      	ldr	r2, [pc, #80]	@ (8003e50 <_sbrk+0x5c>)
 8003dfe:	4b15      	ldr	r3, [pc, #84]	@ (8003e54 <_sbrk+0x60>)
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e08:	4b13      	ldr	r3, [pc, #76]	@ (8003e58 <_sbrk+0x64>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d102      	bne.n	8003e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e10:	4b11      	ldr	r3, [pc, #68]	@ (8003e58 <_sbrk+0x64>)
 8003e12:	4a12      	ldr	r2, [pc, #72]	@ (8003e5c <_sbrk+0x68>)
 8003e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e16:	4b10      	ldr	r3, [pc, #64]	@ (8003e58 <_sbrk+0x64>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d205      	bcs.n	8003e30 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003e24:	4b0e      	ldr	r3, [pc, #56]	@ (8003e60 <_sbrk+0x6c>)
 8003e26:	220c      	movs	r2, #12
 8003e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2e:	e009      	b.n	8003e44 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e30:	4b09      	ldr	r3, [pc, #36]	@ (8003e58 <_sbrk+0x64>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e36:	4b08      	ldr	r3, [pc, #32]	@ (8003e58 <_sbrk+0x64>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	4a06      	ldr	r2, [pc, #24]	@ (8003e58 <_sbrk+0x64>)
 8003e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e42:	68fb      	ldr	r3, [r7, #12]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	2004c000 	.word	0x2004c000
 8003e54:	00000400 	.word	0x00000400
 8003e58:	20010d08 	.word	0x20010d08
 8003e5c:	2003cf48 	.word	0x2003cf48
 8003e60:	2003cf40 	.word	0x2003cf40

08003e64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e68:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <SystemInit+0x20>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6e:	4a05      	ldr	r2, [pc, #20]	@ (8003e84 <SystemInit+0x20>)
 8003e70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ec0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e8c:	f7ff ffea 	bl	8003e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e90:	480c      	ldr	r0, [pc, #48]	@ (8003ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e92:	490d      	ldr	r1, [pc, #52]	@ (8003ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e94:	4a0d      	ldr	r2, [pc, #52]	@ (8003ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e98:	e002      	b.n	8003ea0 <LoopCopyDataInit>

08003e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e9e:	3304      	adds	r3, #4

08003ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ea4:	d3f9      	bcc.n	8003e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8003ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eac:	e001      	b.n	8003eb2 <LoopFillZerobss>

08003eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eb0:	3204      	adds	r2, #4

08003eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eb4:	d3fb      	bcc.n	8003eae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003eb6:	f022 fe47 	bl	8026b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eba:	f7fd f8f3 	bl	80010a4 <main>
  bx  lr    
 8003ebe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ec0:	2004c000 	.word	0x2004c000
  ldr r0, =_sdata
 8003ec4:	20010000 	.word	0x20010000
  ldr r1, =_edata
 8003ec8:	20010274 	.word	0x20010274
  ldr r2, =_sidata
 8003ecc:	0802d2fc 	.word	0x0802d2fc
  ldr r2, =_sbss
 8003ed0:	20010274 	.word	0x20010274
  ldr r4, =_ebss
 8003ed4:	2003cf48 	.word	0x2003cf48

08003ed8 <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ed8:	e7fe      	b.n	8003ed8 <CAN2_RX0_IRQHandler>

08003eda <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8003ee4:	20c8      	movs	r0, #200	@ 0xc8
 8003ee6:	f001 f9bf 	bl	8005268 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003eea:	f000 fa79 	bl	80043e0 <ft5336_I2C_InitializeIfRequired>
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	4603      	mov	r3, r0
 8003efe:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8003f1e:	2300      	movs	r3, #0
 8003f20:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003f22:	f000 fa5d 	bl	80043e0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003f26:	2300      	movs	r3, #0
 8003f28:	73fb      	strb	r3, [r7, #15]
 8003f2a:	e010      	b.n	8003f4e <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	21a8      	movs	r1, #168	@ 0xa8
 8003f32:	4618      	mov	r0, r3
 8003f34:	f001 f97a 	bl	800522c <TS_IO_Read>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8003f3c:	7b7b      	ldrb	r3, [r7, #13]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b51      	cmp	r3, #81	@ 0x51
 8003f42:	d101      	bne.n	8003f48 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d802      	bhi.n	8003f5a <ft5336_ReadID+0x4e>
 8003f54:	7bbb      	ldrb	r3, [r7, #14]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0e8      	beq.n	8003f2c <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8003f5a:	7b7b      	ldrb	r3, [r7, #13]
 8003f5c:	b2db      	uxtb	r3, r3
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fa44 	bl	8004400 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f932 	bl	80041e4 <ft5336_TS_DisableIT>
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 f945 	bl	800522c <TS_IO_Read>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b05      	cmp	r3, #5
 8003fb8:	d901      	bls.n	8003fbe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <ft5336_TS_DetectTouch+0x50>)
 8003fc4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8003fc6:	4b04      	ldr	r3, [pc, #16]	@ (8003fd8 <ft5336_TS_DetectTouch+0x50>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	b2db      	uxtb	r3, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20010d0c 	.word	0x20010d0c

08003fdc <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80041b4 <ft5336_TS_GetXY+0x1d8>)
 8004000:	789a      	ldrb	r2, [r3, #2]
 8004002:	4b6c      	ldr	r3, [pc, #432]	@ (80041b4 <ft5336_TS_GetXY+0x1d8>)
 8004004:	785b      	ldrb	r3, [r3, #1]
 8004006:	429a      	cmp	r2, r3
 8004008:	f080 80cf 	bcs.w	80041aa <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800400c:	4b69      	ldr	r3, [pc, #420]	@ (80041b4 <ft5336_TS_GetXY+0x1d8>)
 800400e:	789b      	ldrb	r3, [r3, #2]
 8004010:	2b09      	cmp	r3, #9
 8004012:	d871      	bhi.n	80040f8 <ft5336_TS_GetXY+0x11c>
 8004014:	a201      	add	r2, pc, #4	@ (adr r2, 800401c <ft5336_TS_GetXY+0x40>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	08004045 	.word	0x08004045
 8004020:	08004057 	.word	0x08004057
 8004024:	08004069 	.word	0x08004069
 8004028:	0800407b 	.word	0x0800407b
 800402c:	0800408d 	.word	0x0800408d
 8004030:	0800409f 	.word	0x0800409f
 8004034:	080040b1 	.word	0x080040b1
 8004038:	080040c3 	.word	0x080040c3
 800403c:	080040d5 	.word	0x080040d5
 8004040:	080040e7 	.word	0x080040e7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8004044:	2304      	movs	r3, #4
 8004046:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8004048:	2303      	movs	r3, #3
 800404a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800404c:	2306      	movs	r3, #6
 800404e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8004050:	2305      	movs	r3, #5
 8004052:	753b      	strb	r3, [r7, #20]
      break;
 8004054:	e051      	b.n	80040fa <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8004056:	230a      	movs	r3, #10
 8004058:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800405a:	2309      	movs	r3, #9
 800405c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800405e:	230c      	movs	r3, #12
 8004060:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8004062:	230b      	movs	r3, #11
 8004064:	753b      	strb	r3, [r7, #20]
      break;
 8004066:	e048      	b.n	80040fa <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8004068:	2310      	movs	r3, #16
 800406a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800406c:	230f      	movs	r3, #15
 800406e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8004070:	2312      	movs	r3, #18
 8004072:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8004074:	2311      	movs	r3, #17
 8004076:	753b      	strb	r3, [r7, #20]
      break;
 8004078:	e03f      	b.n	80040fa <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800407a:	2316      	movs	r3, #22
 800407c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800407e:	2315      	movs	r3, #21
 8004080:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8004082:	2318      	movs	r3, #24
 8004084:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8004086:	2317      	movs	r3, #23
 8004088:	753b      	strb	r3, [r7, #20]
      break;
 800408a:	e036      	b.n	80040fa <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800408c:	231c      	movs	r3, #28
 800408e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8004090:	231b      	movs	r3, #27
 8004092:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8004094:	231e      	movs	r3, #30
 8004096:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8004098:	231d      	movs	r3, #29
 800409a:	753b      	strb	r3, [r7, #20]
      break;
 800409c:	e02d      	b.n	80040fa <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800409e:	2322      	movs	r3, #34	@ 0x22
 80040a0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80040a2:	2321      	movs	r3, #33	@ 0x21
 80040a4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80040a6:	2324      	movs	r3, #36	@ 0x24
 80040a8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80040aa:	2323      	movs	r3, #35	@ 0x23
 80040ac:	753b      	strb	r3, [r7, #20]
      break;
 80040ae:	e024      	b.n	80040fa <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80040b0:	2328      	movs	r3, #40	@ 0x28
 80040b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80040b4:	2327      	movs	r3, #39	@ 0x27
 80040b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80040b8:	232a      	movs	r3, #42	@ 0x2a
 80040ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80040bc:	2329      	movs	r3, #41	@ 0x29
 80040be:	753b      	strb	r3, [r7, #20]
      break;
 80040c0:	e01b      	b.n	80040fa <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80040c2:	232e      	movs	r3, #46	@ 0x2e
 80040c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80040c6:	232d      	movs	r3, #45	@ 0x2d
 80040c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80040ca:	2330      	movs	r3, #48	@ 0x30
 80040cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80040ce:	232f      	movs	r3, #47	@ 0x2f
 80040d0:	753b      	strb	r3, [r7, #20]
      break;
 80040d2:	e012      	b.n	80040fa <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80040d4:	2334      	movs	r3, #52	@ 0x34
 80040d6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80040d8:	2333      	movs	r3, #51	@ 0x33
 80040da:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80040dc:	2336      	movs	r3, #54	@ 0x36
 80040de:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80040e0:	2335      	movs	r3, #53	@ 0x35
 80040e2:	753b      	strb	r3, [r7, #20]
      break;
 80040e4:	e009      	b.n	80040fa <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80040e6:	233a      	movs	r3, #58	@ 0x3a
 80040e8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80040ea:	2339      	movs	r3, #57	@ 0x39
 80040ec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80040ee:	233c      	movs	r3, #60	@ 0x3c
 80040f0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80040f2:	233b      	movs	r3, #59	@ 0x3b
 80040f4:	753b      	strb	r3, [r7, #20]
      break;
 80040f6:	e000      	b.n	80040fa <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80040f8:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80040fa:	89fb      	ldrh	r3, [r7, #14]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	7dfa      	ldrb	r2, [r7, #23]
 8004100:	4611      	mov	r1, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f001 f892 	bl	800522c <TS_IO_Read>
 8004108:	4603      	mov	r3, r0
 800410a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	4b29      	ldr	r3, [pc, #164]	@ (80041b8 <ft5336_TS_GetXY+0x1dc>)
 8004114:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004116:	89fb      	ldrh	r3, [r7, #14]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	7dba      	ldrb	r2, [r7, #22]
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f001 f884 	bl	800522c <TS_IO_Read>
 8004124:	4603      	mov	r3, r0
 8004126:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004132:	b21a      	sxth	r2, r3
 8004134:	4b20      	ldr	r3, [pc, #128]	@ (80041b8 <ft5336_TS_GetXY+0x1dc>)
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b21b      	sxth	r3, r3
 800413a:	4313      	orrs	r3, r2
 800413c:	b21b      	sxth	r3, r3
 800413e:	b29a      	uxth	r2, r3
 8004140:	4b1d      	ldr	r3, [pc, #116]	@ (80041b8 <ft5336_TS_GetXY+0x1dc>)
 8004142:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8004144:	4b1c      	ldr	r3, [pc, #112]	@ (80041b8 <ft5336_TS_GetXY+0x1dc>)
 8004146:	881a      	ldrh	r2, [r3, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800414c:	89fb      	ldrh	r3, [r7, #14]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	7d7a      	ldrb	r2, [r7, #21]
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f001 f869 	bl	800522c <TS_IO_Read>
 800415a:	4603      	mov	r3, r0
 800415c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800415e:	7cfb      	ldrb	r3, [r7, #19]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	4b14      	ldr	r3, [pc, #80]	@ (80041b8 <ft5336_TS_GetXY+0x1dc>)
 8004166:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004168:	89fb      	ldrh	r3, [r7, #14]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	7d3a      	ldrb	r2, [r7, #20]
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f001 f85b 	bl	800522c <TS_IO_Read>
 8004176:	4603      	mov	r3, r0
 8004178:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004184:	b21a      	sxth	r2, r3
 8004186:	4b0c      	ldr	r3, [pc, #48]	@ (80041b8 <ft5336_TS_GetXY+0x1dc>)
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	b21b      	sxth	r3, r3
 800418c:	4313      	orrs	r3, r2
 800418e:	b21b      	sxth	r3, r3
 8004190:	b29a      	uxth	r2, r3
 8004192:	4b09      	ldr	r3, [pc, #36]	@ (80041b8 <ft5336_TS_GetXY+0x1dc>)
 8004194:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8004196:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <ft5336_TS_GetXY+0x1dc>)
 8004198:	881a      	ldrh	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800419e:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <ft5336_TS_GetXY+0x1d8>)
 80041a0:	789b      	ldrb	r3, [r3, #2]
 80041a2:	3301      	adds	r3, #1
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	4b03      	ldr	r3, [pc, #12]	@ (80041b4 <ft5336_TS_GetXY+0x1d8>)
 80041a8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80041aa:	bf00      	nop
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20010d0c 	.word	0x20010d0c
 80041b8:	20010d10 	.word	0x20010d10

080041bc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	21a4      	movs	r1, #164	@ 0xa4
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 f80e 	bl	80051f8 <TS_IO_Write>
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	7bfa      	ldrb	r2, [r7, #15]
 80041fc:	21a4      	movs	r1, #164	@ 0xa4
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fffa 	bl	80051f8 <TS_IO_Write>
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	4603      	mov	r3, r0
 8004242:	6039      	str	r1, [r7, #0]
 8004244:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2101      	movs	r1, #1
 8004250:	4618      	mov	r0, r3
 8004252:	f000 ffeb 	bl	800522c <TS_IO_Read>
 8004256:	4603      	mov	r3, r0
 8004258:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	461a      	mov	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	4603      	mov	r3, r0
 800427a:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800428c:	4b4d      	ldr	r3, [pc, #308]	@ (80043c4 <ft5336_TS_GetTouchInfo+0x158>)
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	461a      	mov	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4293      	cmp	r3, r2
 8004296:	f080 8090 	bcs.w	80043ba <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b09      	cmp	r3, #9
 800429e:	d85d      	bhi.n	800435c <ft5336_TS_GetTouchInfo+0xf0>
 80042a0:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <ft5336_TS_GetTouchInfo+0x3c>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042d1 	.word	0x080042d1
 80042ac:	080042df 	.word	0x080042df
 80042b0:	080042ed 	.word	0x080042ed
 80042b4:	080042fb 	.word	0x080042fb
 80042b8:	08004309 	.word	0x08004309
 80042bc:	08004317 	.word	0x08004317
 80042c0:	08004325 	.word	0x08004325
 80042c4:	08004333 	.word	0x08004333
 80042c8:	08004341 	.word	0x08004341
 80042cc:	0800434f 	.word	0x0800434f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80042d0:	2303      	movs	r3, #3
 80042d2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80042d4:	2307      	movs	r3, #7
 80042d6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80042d8:	2308      	movs	r3, #8
 80042da:	757b      	strb	r3, [r7, #21]
      break;
 80042dc:	e03f      	b.n	800435e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80042de:	2309      	movs	r3, #9
 80042e0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80042e2:	230d      	movs	r3, #13
 80042e4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80042e6:	230e      	movs	r3, #14
 80042e8:	757b      	strb	r3, [r7, #21]
      break;
 80042ea:	e038      	b.n	800435e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80042ec:	230f      	movs	r3, #15
 80042ee:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80042f0:	2313      	movs	r3, #19
 80042f2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80042f4:	2314      	movs	r3, #20
 80042f6:	757b      	strb	r3, [r7, #21]
      break;
 80042f8:	e031      	b.n	800435e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80042fa:	2315      	movs	r3, #21
 80042fc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80042fe:	2319      	movs	r3, #25
 8004300:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8004302:	231a      	movs	r3, #26
 8004304:	757b      	strb	r3, [r7, #21]
      break;
 8004306:	e02a      	b.n	800435e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8004308:	231b      	movs	r3, #27
 800430a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 800430c:	231f      	movs	r3, #31
 800430e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8004310:	2320      	movs	r3, #32
 8004312:	757b      	strb	r3, [r7, #21]
      break;
 8004314:	e023      	b.n	800435e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8004316:	2321      	movs	r3, #33	@ 0x21
 8004318:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800431a:	2325      	movs	r3, #37	@ 0x25
 800431c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 800431e:	2326      	movs	r3, #38	@ 0x26
 8004320:	757b      	strb	r3, [r7, #21]
      break;
 8004322:	e01c      	b.n	800435e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8004324:	2327      	movs	r3, #39	@ 0x27
 8004326:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8004328:	232b      	movs	r3, #43	@ 0x2b
 800432a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 800432c:	232c      	movs	r3, #44	@ 0x2c
 800432e:	757b      	strb	r3, [r7, #21]
      break;
 8004330:	e015      	b.n	800435e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8004332:	232d      	movs	r3, #45	@ 0x2d
 8004334:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8004336:	2331      	movs	r3, #49	@ 0x31
 8004338:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800433a:	2332      	movs	r3, #50	@ 0x32
 800433c:	757b      	strb	r3, [r7, #21]
      break;
 800433e:	e00e      	b.n	800435e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8004340:	2333      	movs	r3, #51	@ 0x33
 8004342:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8004344:	2337      	movs	r3, #55	@ 0x37
 8004346:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8004348:	2338      	movs	r3, #56	@ 0x38
 800434a:	757b      	strb	r3, [r7, #21]
      break;
 800434c:	e007      	b.n	800435e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800434e:	2339      	movs	r3, #57	@ 0x39
 8004350:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8004352:	233d      	movs	r3, #61	@ 0x3d
 8004354:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8004356:	233e      	movs	r3, #62	@ 0x3e
 8004358:	757b      	strb	r3, [r7, #21]
      break;
 800435a:	e000      	b.n	800435e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800435c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800435e:	89fb      	ldrh	r3, [r7, #14]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	7dfa      	ldrb	r2, [r7, #23]
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f000 ff60 	bl	800522c <TS_IO_Read>
 800436c:	4603      	mov	r3, r0
 800436e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8004370:	7d3b      	ldrb	r3, [r7, #20]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	119b      	asrs	r3, r3, #6
 8004376:	f003 0203 	and.w	r2, r3, #3
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800437e:	89fb      	ldrh	r3, [r7, #14]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	7dba      	ldrb	r2, [r7, #22]
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f000 ff50 	bl	800522c <TS_IO_Read>
 800438c:	4603      	mov	r3, r0
 800438e:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8004390:	7d3b      	ldrb	r3, [r7, #20]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800439a:	89fb      	ldrh	r3, [r7, #14]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	7d7a      	ldrb	r2, [r7, #21]
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 ff42 	bl	800522c <TS_IO_Read>
 80043a8:	4603      	mov	r3, r0
 80043aa:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80043ac:	7d3b      	ldrb	r3, [r7, #20]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	111b      	asrs	r3, r3, #4
 80043b2:	f003 0204 	and.w	r2, r3, #4
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80043ba:	bf00      	nop
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20010d0c 	.word	0x20010d0c

080043c8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80043cc:	4b03      	ldr	r3, [pc, #12]	@ (80043dc <ft5336_Get_I2C_InitializedStatus+0x14>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20010d0c 	.word	0x20010d0c

080043e0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80043e4:	f7ff fff0 	bl	80043c8 <ft5336_Get_I2C_InitializedStatus>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80043ee:	f000 fef9 	bl	80051e4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80043f2:	4b02      	ldr	r3, [pc, #8]	@ (80043fc <ft5336_I2C_InitializeIfRequired+0x1c>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
  }
}
 80043f8:	bf00      	nop
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20010d0c 	.word	0x20010d0c

08004400 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <LAN8742_RegisterBusIO+0x28>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <LAN8742_RegisterBusIO+0x28>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <LAN8742_RegisterBusIO+0x28>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8004444:	f04f 33ff 	mov.w	r3, #4294967295
 8004448:	e014      	b.n	8004474 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d139      	bne.n	8004510 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	e01c      	b.n	80044f0 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f107 020c 	add.w	r2, r7, #12
 80044be:	2112      	movs	r1, #18
 80044c0:	6978      	ldr	r0, [r7, #20]
 80044c2:	4798      	blx	r3
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	da03      	bge.n	80044d2 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80044ca:	f06f 0304 	mvn.w	r3, #4
 80044ce:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80044d0:	e00b      	b.n	80044ea <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d105      	bne.n	80044ea <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
         break;
 80044e8:	e005      	b.n	80044f6 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	3301      	adds	r3, #1
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2b1f      	cmp	r3, #31
 80044f4:	d9df      	bls.n	80044b6 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b1f      	cmp	r3, #31
 80044fc:	d902      	bls.n	8004504 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80044fe:	f06f 0302 	mvn.w	r3, #2
 8004502:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8004510:	693b      	ldr	r3, [r7, #16]
 }
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6810      	ldr	r0, [r2, #0]
 800452e:	f107 020c 	add.w	r2, r7, #12
 8004532:	2101      	movs	r1, #1
 8004534:	4798      	blx	r3
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	da02      	bge.n	8004542 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800453c:	f06f 0304 	mvn.w	r3, #4
 8004540:	e06e      	b.n	8004620 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6810      	ldr	r0, [r2, #0]
 800454a:	f107 020c 	add.w	r2, r7, #12
 800454e:	2101      	movs	r1, #1
 8004550:	4798      	blx	r3
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	da02      	bge.n	800455e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004558:	f06f 0304 	mvn.w	r3, #4
 800455c:	e060      	b.n	8004620 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8004568:	2301      	movs	r3, #1
 800456a:	e059      	b.n	8004620 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6810      	ldr	r0, [r2, #0]
 8004574:	f107 020c 	add.w	r2, r7, #12
 8004578:	2100      	movs	r1, #0
 800457a:	4798      	blx	r3
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	da02      	bge.n	8004588 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004582:	f06f 0304 	mvn.w	r3, #4
 8004586:	e04b      	b.n	8004620 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d11b      	bne.n	80045ca <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d006      	beq.n	80045aa <LAN8742_GetLinkState+0x90>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80045a6:	2302      	movs	r3, #2
 80045a8:	e03a      	b.n	8004620 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e033      	b.n	8004620 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80045c2:	2304      	movs	r3, #4
 80045c4:	e02c      	b.n	8004620 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80045c6:	2305      	movs	r3, #5
 80045c8:	e02a      	b.n	8004620 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6810      	ldr	r0, [r2, #0]
 80045d2:	f107 020c 	add.w	r2, r7, #12
 80045d6:	211f      	movs	r1, #31
 80045d8:	4798      	blx	r3
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da02      	bge.n	80045e6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80045e0:	f06f 0304 	mvn.w	r3, #4
 80045e4:	e01c      	b.n	8004620 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80045f0:	2306      	movs	r3, #6
 80045f2:	e015      	b.n	8004620 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 031c 	and.w	r3, r3, #28
 80045fa:	2b18      	cmp	r3, #24
 80045fc:	d101      	bne.n	8004602 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80045fe:	2302      	movs	r3, #2
 8004600:	e00e      	b.n	8004620 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f003 031c 	and.w	r3, r3, #28
 8004608:	2b08      	cmp	r3, #8
 800460a:	d101      	bne.n	8004610 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800460c:	2303      	movs	r3, #3
 800460e:	e007      	b.n	8004620 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 031c 	and.w	r3, r3, #28
 8004616:	2b14      	cmp	r3, #20
 8004618:	d101      	bne.n	800461e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800461a:	2304      	movs	r3, #4
 800461c:	e000      	b.n	8004620 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800461e:	2305      	movs	r3, #5
    }
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <ov9655_Init>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  resolution: Camera resolution
  * @retval None
  */
void ov9655_Init(uint16_t DeviceAddr, uint32_t resolution)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	6039      	str	r1, [r7, #0]
 8004632:	80fb      	strh	r3, [r7, #6]
  uint32_t index;
  
  /* Initialize I2C */
  CAMERA_IO_Init();    
 8004634:	f000 fd88 	bl	8005148 <CAMERA_IO_Init>
  
  /* Prepare the camera to be configured by resetting all its registers */
  CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_COM7, 0x80);
 8004638:	88fb      	ldrh	r3, [r7, #6]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2280      	movs	r2, #128	@ 0x80
 800463e:	2112      	movs	r1, #18
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fd8b 	bl	800515c <CAMERA_IO_Write>
  CAMERA_Delay(200);
 8004646:	20c8      	movs	r0, #200	@ 0xc8
 8004648:	f000 fdc0 	bl	80051cc <CAMERA_Delay>
  
  /* Initialize OV9655 */
  switch (resolution)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d85b      	bhi.n	800470a <ov9655_Init+0xe2>
 8004652:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <ov9655_Init+0x30>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	08004669 	.word	0x08004669
 800465c:	0800469f 	.word	0x0800469f
 8004660:	0800470b 	.word	0x0800470b
 8004664:	080046d5 	.word	0x080046d5
  {
  case CAMERA_R160x120:
    {
      for(index=0; index<(sizeof(OV9655_QQVGA)/2); index++)
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e013      	b.n	8004696 <ov9655_Init+0x6e>
      {
        CAMERA_IO_Write(DeviceAddr, OV9655_QQVGA[index][0], OV9655_QQVGA[index][1]);
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	b2d8      	uxtb	r0, r3
 8004672:	4a28      	ldr	r2, [pc, #160]	@ (8004714 <ov9655_Init+0xec>)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 800467a:	4a26      	ldr	r2, [pc, #152]	@ (8004714 <ov9655_Init+0xec>)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	4413      	add	r3, r2
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	461a      	mov	r2, r3
 8004686:	f000 fd69 	bl	800515c <CAMERA_IO_Write>
        CAMERA_Delay(2);
 800468a:	2002      	movs	r0, #2
 800468c:	f000 fd9e 	bl	80051cc <CAMERA_Delay>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2); index++)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3301      	adds	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b95      	cmp	r3, #149	@ 0x95
 800469a:	d9e8      	bls.n	800466e <ov9655_Init+0x46>
      } 
      break;
 800469c:	e036      	b.n	800470c <ov9655_Init+0xe4>
    }    
  case CAMERA_R320x240:
    {
      for(index=0; index<(sizeof(OV9655_QVGA)/2); index++)
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	e013      	b.n	80046cc <ov9655_Init+0xa4>
      {
        CAMERA_IO_Write(DeviceAddr, OV9655_QVGA[index][0], OV9655_QVGA[index][1]);
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	b2d8      	uxtb	r0, r3
 80046a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004718 <ov9655_Init+0xf0>)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80046b0:	4a19      	ldr	r2, [pc, #100]	@ (8004718 <ov9655_Init+0xf0>)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	4413      	add	r3, r2
 80046b8:	785b      	ldrb	r3, [r3, #1]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f000 fd4e 	bl	800515c <CAMERA_IO_Write>
        CAMERA_Delay(2);
 80046c0:	2002      	movs	r0, #2
 80046c2:	f000 fd83 	bl	80051cc <CAMERA_Delay>
      for(index=0; index<(sizeof(OV9655_QVGA)/2); index++)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3301      	adds	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b95      	cmp	r3, #149	@ 0x95
 80046d0:	d9e8      	bls.n	80046a4 <ov9655_Init+0x7c>
      } 
      break;
 80046d2:	e01b      	b.n	800470c <ov9655_Init+0xe4>
      /* Not supported resolution */
      break;
    }
  case CAMERA_R640x480:
    {
      for(index=0; index<(sizeof(OV9655_VGA)/2); index++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e013      	b.n	8004702 <ov9655_Init+0xda>
      {
        CAMERA_IO_Write(DeviceAddr, OV9655_VGA[index][0], OV9655_VGA[index][1]);
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	b2d8      	uxtb	r0, r3
 80046de:	4a0f      	ldr	r2, [pc, #60]	@ (800471c <ov9655_Init+0xf4>)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80046e6:	4a0d      	ldr	r2, [pc, #52]	@ (800471c <ov9655_Init+0xf4>)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	4413      	add	r3, r2
 80046ee:	785b      	ldrb	r3, [r3, #1]
 80046f0:	461a      	mov	r2, r3
 80046f2:	f000 fd33 	bl	800515c <CAMERA_IO_Write>
        CAMERA_Delay(2);
 80046f6:	2002      	movs	r0, #2
 80046f8:	f000 fd68 	bl	80051cc <CAMERA_Delay>
      for(index=0; index<(sizeof(OV9655_VGA)/2); index++)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3301      	adds	r3, #1
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b92      	cmp	r3, #146	@ 0x92
 8004706:	d9e8      	bls.n	80046da <ov9655_Init+0xb2>
      }
      break;
 8004708:	e000      	b.n	800470c <ov9655_Init+0xe4>
    }    
  default:
    {
      break;
 800470a:	bf00      	nop
    }
  }
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	0802b958 	.word	0x0802b958
 8004718:	0802b82c 	.word	0x0802b82c
 800471c:	0802b704 	.word	0x0802b704

08004720 <ov9655_Config>:
  * @param  value: Value to be configured
  * @param  brightness_value: Brightness value to be configured
  * @retval None
  */
void ov9655_Config(uint16_t DeviceAddr, uint32_t feature, uint32_t value, uint32_t brightness_value)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	@ 0x28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4603      	mov	r3, r0
 800472e:	81fb      	strh	r3, [r7, #14]
  uint8_t tslb, mtx1, mtx2, mtx3, mtx4, mtx5, mtx6;
  uint64_t value_tmp;
  uint32_t br_value;
  
  /* Convert the input value into ov9655 parameters */
  value_tmp = ov9655_ConvertValue(feature, value); 
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	68b8      	ldr	r0, [r7, #8]
 8004734:	f000 f8b6 	bl	80048a4 <ov9655_ConvertValue>
 8004738:	e9c7 0108 	strd	r0, r1, [r7, #32]
  br_value = (uint32_t)ov9655_ConvertValue(CAMERA_CONTRAST_BRIGHTNESS, brightness_value);
 800473c:	6839      	ldr	r1, [r7, #0]
 800473e:	2000      	movs	r0, #0
 8004740:	f000 f8b0 	bl	80048a4 <ov9655_ConvertValue>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4613      	mov	r3, r2
 800474a:	61fb      	str	r3, [r7, #28]
    
  switch(feature)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d01b      	beq.n	800478a <ov9655_Config+0x6a>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b03      	cmp	r3, #3
 8004756:	f200 808e 	bhi.w	8004876 <ov9655_Config+0x156>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <ov9655_Config+0x48>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d011      	beq.n	800478a <ov9655_Config+0x6a>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX6, mtx6);
      break;
    }     
  default:
    {
      break;
 8004766:	e086      	b.n	8004876 <ov9655_Config+0x156>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_BRTN, br_value);
 8004768:	89fb      	ldrh	r3, [r7, #14]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	2155      	movs	r1, #85	@ 0x55
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fcf2 	bl	800515c <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_CNST1, value_tmp);
 8004778:	89fb      	ldrh	r3, [r7, #14]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004780:	2156      	movs	r1, #86	@ 0x56
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fcea 	bl	800515c <CAMERA_IO_Write>
      break;
 8004788:	e076      	b.n	8004878 <ov9655_Config+0x158>
      tslb = (uint8_t)(value_tmp >> 48);
 800478a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	0c0a      	lsrs	r2, r1, #16
 8004798:	2300      	movs	r3, #0
 800479a:	4613      	mov	r3, r2
 800479c:	76fb      	strb	r3, [r7, #27]
      mtx1 = (uint8_t)(value_tmp >> 40);
 800479e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	0a0a      	lsrs	r2, r1, #8
 80047ac:	2300      	movs	r3, #0
 80047ae:	4613      	mov	r3, r2
 80047b0:	76bb      	strb	r3, [r7, #26]
      mtx2 = (uint8_t)(value_tmp >> 32);
 80047b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	000a      	movs	r2, r1
 80047c0:	2300      	movs	r3, #0
 80047c2:	4613      	mov	r3, r2
 80047c4:	767b      	strb	r3, [r7, #25]
      mtx3 = (uint8_t)(value_tmp >> 24);
 80047c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	0e02      	lsrs	r2, r0, #24
 80047d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80047d8:	0e0b      	lsrs	r3, r1, #24
 80047da:	4613      	mov	r3, r2
 80047dc:	763b      	strb	r3, [r7, #24]
      mtx4 = (uint8_t)(value_tmp >> 16);
 80047de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	0c02      	lsrs	r2, r0, #16
 80047ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80047f0:	0c0b      	lsrs	r3, r1, #16
 80047f2:	4613      	mov	r3, r2
 80047f4:	75fb      	strb	r3, [r7, #23]
      mtx5 = (uint8_t)(value_tmp >> 8);
 80047f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	0a02      	lsrs	r2, r0, #8
 8004804:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004808:	0a0b      	lsrs	r3, r1, #8
 800480a:	4613      	mov	r3, r2
 800480c:	75bb      	strb	r3, [r7, #22]
      mtx6 = (uint8_t)(value_tmp);
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	757b      	strb	r3, [r7, #21]
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_TSLB, tslb);
 8004812:	89fb      	ldrh	r3, [r7, #14]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	7efa      	ldrb	r2, [r7, #27]
 8004818:	213a      	movs	r1, #58	@ 0x3a
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fc9e 	bl	800515c <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX1, mtx1);
 8004820:	89fb      	ldrh	r3, [r7, #14]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	7eba      	ldrb	r2, [r7, #26]
 8004826:	214f      	movs	r1, #79	@ 0x4f
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fc97 	bl	800515c <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX2, mtx2);
 800482e:	89fb      	ldrh	r3, [r7, #14]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	7e7a      	ldrb	r2, [r7, #25]
 8004834:	2150      	movs	r1, #80	@ 0x50
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fc90 	bl	800515c <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX3, mtx3);
 800483c:	89fb      	ldrh	r3, [r7, #14]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	7e3a      	ldrb	r2, [r7, #24]
 8004842:	2151      	movs	r1, #81	@ 0x51
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fc89 	bl	800515c <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX4, mtx4);
 800484a:	89fb      	ldrh	r3, [r7, #14]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	7dfa      	ldrb	r2, [r7, #23]
 8004850:	2152      	movs	r1, #82	@ 0x52
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fc82 	bl	800515c <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX5, mtx5);
 8004858:	89fb      	ldrh	r3, [r7, #14]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	7dba      	ldrb	r2, [r7, #22]
 800485e:	2153      	movs	r1, #83	@ 0x53
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fc7b 	bl	800515c <CAMERA_IO_Write>
      CAMERA_IO_Write(DeviceAddr, OV9655_SENSOR_MTX6, mtx6);
 8004866:	89fb      	ldrh	r3, [r7, #14]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	7d7a      	ldrb	r2, [r7, #21]
 800486c:	2154      	movs	r1, #84	@ 0x54
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fc74 	bl	800515c <CAMERA_IO_Write>
      break;
 8004874:	e000      	b.n	8004878 <ov9655_Config+0x158>
      break;
 8004876:	bf00      	nop
    }
  }
}
 8004878:	bf00      	nop
 800487a:	3728      	adds	r7, #40	@ 0x28
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <ov9655_ReadID>:
  * @brief  Read the OV9655 Camera identity.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval the OV9655 ID
  */
uint16_t ov9655_ReadID(uint16_t DeviceAddr)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C */
  CAMERA_IO_Init();
 800488a:	f000 fc5d 	bl	8005148 <CAMERA_IO_Init>
  
  /* Get the camera ID */
  return (CAMERA_IO_Read(DeviceAddr, OV9655_SENSOR_PIDH));
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	210a      	movs	r1, #10
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fc7b 	bl	8005190 <CAMERA_IO_Read>
 800489a:	4603      	mov	r3, r0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <ov9655_ConvertValue>:
  * @param  feature: Camera feature to be configured
  * @param  value: Value to be configured
  * @retval The converted value
  */
static uint64_t ov9655_ConvertValue(uint32_t feature, uint32_t value)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint64_t ret = 0;
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  
  switch(feature)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	f000 80a3 	beq.w	8004a08 <ov9655_ConvertValue+0x164>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	f200 80d0 	bhi.w	8004a6a <ov9655_ConvertValue+0x1c6>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d032      	beq.n	8004936 <ov9655_ConvertValue+0x92>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	f040 80c9 	bne.w	8004a6a <ov9655_ConvertValue+0x1c6>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d824      	bhi.n	8004928 <ov9655_ConvertValue+0x84>
 80048de:	a201      	add	r2, pc, #4	@ (adr r2, 80048e4 <ov9655_ConvertValue+0x40>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	080048f5 	.word	0x080048f5
 80048e8:	08004903 	.word	0x08004903
 80048ec:	0800490f 	.word	0x0800490f
 80048f0:	0800491d 	.word	0x0800491d
    {
      switch(value)
      {
      case CAMERA_BLACK_WHITE_BW:
        {
          ret =  OV9655_BLACK_WHITE_BW;
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f44f 034c 	mov.w	r3, #13369344	@ 0xcc0000
 80048fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 8004900:	e018      	b.n	8004934 <ov9655_ConvertValue+0x90>
        }
      case CAMERA_BLACK_WHITE_NEGATIVE:
        {
          ret =  OV9655_BLACK_WHITE_NEGATIVE;
 8004902:	f248 0280 	movw	r2, #32896	@ 0x8080
 8004906:	4b61      	ldr	r3, [pc, #388]	@ (8004a8c <ov9655_ConvertValue+0x1e8>)
 8004908:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 800490c:	e012      	b.n	8004934 <ov9655_ConvertValue+0x90>
        }
      case CAMERA_BLACK_WHITE_BW_NEGATIVE:
        {
          ret =  OV9655_BLACK_WHITE_BW_NEGATIVE;
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f44f 036c 	mov.w	r3, #15466496	@ 0xec0000
 8004916:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 800491a:	e00b      	b.n	8004934 <ov9655_ConvertValue+0x90>
        }
      case CAMERA_BLACK_WHITE_NORMAL:
        {
          ret =  OV9655_BLACK_WHITE_NORMAL;
 800491c:	f248 0280 	movw	r2, #32896	@ 0x8080
 8004920:	4b5b      	ldr	r3, [pc, #364]	@ (8004a90 <ov9655_ConvertValue+0x1ec>)
 8004922:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 8004926:	e005      	b.n	8004934 <ov9655_ConvertValue+0x90>
        }
      default:
        {
          ret =  OV9655_BLACK_WHITE_NORMAL;
 8004928:	f248 0280 	movw	r2, #32896	@ 0x8080
 800492c:	4b58      	ldr	r3, [pc, #352]	@ (8004a90 <ov9655_ConvertValue+0x1ec>)
 800492e:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 8004932:	bf00      	nop
        }
      }
      break;
 8004934:	e0a0      	b.n	8004a78 <ov9655_ConvertValue+0x1d4>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b09      	cmp	r3, #9
 800493a:	d85d      	bhi.n	80049f8 <ov9655_ConvertValue+0x154>
 800493c:	a201      	add	r2, pc, #4	@ (adr r2, 8004944 <ov9655_ConvertValue+0xa0>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	0800496d 	.word	0x0800496d
 8004948:	0800497b 	.word	0x0800497b
 800494c:	08004989 	.word	0x08004989
 8004950:	08004997 	.word	0x08004997
 8004954:	080049a5 	.word	0x080049a5
 8004958:	080049b3 	.word	0x080049b3
 800495c:	080049c1 	.word	0x080049c1
 8004960:	080049cf 	.word	0x080049cf
 8004964:	080049dd 	.word	0x080049dd
 8004968:	080049eb 	.word	0x080049eb
    {
      switch(value)
      {
      case CAMERA_BRIGHTNESS_LEVEL0:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL0;
 800496c:	f04f 02b0 	mov.w	r2, #176	@ 0xb0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 8004978:	e045      	b.n	8004a06 <ov9655_ConvertValue+0x162>
        }
      case CAMERA_BRIGHTNESS_LEVEL1:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL1;
 800497a:	f04f 0298 	mov.w	r2, #152	@ 0x98
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 8004986:	e03e      	b.n	8004a06 <ov9655_ConvertValue+0x162>
        }
      case CAMERA_BRIGHTNESS_LEVEL2:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL2;
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 8004994:	e037      	b.n	8004a06 <ov9655_ConvertValue+0x162>
        }
      case CAMERA_BRIGHTNESS_LEVEL3:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL3;
 8004996:	f04f 0218 	mov.w	r2, #24
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 80049a2:	e030      	b.n	8004a06 <ov9655_ConvertValue+0x162>
        }
      case CAMERA_BRIGHTNESS_LEVEL4:
        {
          ret =  OV9655_BRIGHTNESS_LEVEL4;
 80049a4:	f04f 0230 	mov.w	r2, #48	@ 0x30
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 80049b0:	e029      	b.n	8004a06 <ov9655_ConvertValue+0x162>
        }        
      case CAMERA_CONTRAST_LEVEL0:
        {
          ret =  OV9655_CONTRAST_LEVEL0;
 80049b2:	f04f 0230 	mov.w	r2, #48	@ 0x30
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 80049be:	e022      	b.n	8004a06 <ov9655_ConvertValue+0x162>
        }
      case CAMERA_CONTRAST_LEVEL1:
        {
          ret =  OV9655_CONTRAST_LEVEL1;
 80049c0:	f04f 0238 	mov.w	r2, #56	@ 0x38
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 80049cc:	e01b      	b.n	8004a06 <ov9655_ConvertValue+0x162>
        }
      case CAMERA_CONTRAST_LEVEL2:
        {
          ret =  OV9655_CONTRAST_LEVEL2;
 80049ce:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 80049da:	e014      	b.n	8004a06 <ov9655_ConvertValue+0x162>
        }
      case CAMERA_CONTRAST_LEVEL3:
        {
          ret =  OV9655_CONTRAST_LEVEL3;
 80049dc:	f04f 0250 	mov.w	r2, #80	@ 0x50
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 80049e8:	e00d      	b.n	8004a06 <ov9655_ConvertValue+0x162>
        }
      case CAMERA_CONTRAST_LEVEL4:
        {
          ret =  OV9655_CONTRAST_LEVEL4;
 80049ea:	f04f 0260 	mov.w	r2, #96	@ 0x60
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 80049f6:	e006      	b.n	8004a06 <ov9655_ConvertValue+0x162>
        }
      default:
        {
          ret =  OV9655_CONTRAST_LEVEL0;
 80049f8:	f04f 0230 	mov.w	r2, #48	@ 0x30
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 8004a04:	bf00      	nop
        }
      }
      break;
 8004a06:	e037      	b.n	8004a78 <ov9655_ConvertValue+0x1d4>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d825      	bhi.n	8004a5c <ov9655_ConvertValue+0x1b8>
 8004a10:	a201      	add	r2, pc, #4	@ (adr r2, 8004a18 <ov9655_ConvertValue+0x174>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a35 	.word	0x08004a35
 8004a1c:	08004a43 	.word	0x08004a43
 8004a20:	08004a51 	.word	0x08004a51
 8004a24:	08004a29 	.word	0x08004a29
    {
      switch(value)
      {
      case CAMERA_COLOR_EFFECT_ANTIQUE:
        {
          ret =  OV9655_COLOR_EFFECT_ANTIQUE;
 8004a28:	4a1a      	ldr	r2, [pc, #104]	@ (8004a94 <ov9655_ConvertValue+0x1f0>)
 8004a2a:	f44f 034c 	mov.w	r3, #13369344	@ 0xcc0000
 8004a2e:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 8004a32:	e019      	b.n	8004a68 <ov9655_ConvertValue+0x1c4>
        }
      case CAMERA_COLOR_EFFECT_BLUE:
        {
          ret =  OV9655_COLOR_EFFECT_BLUE;
 8004a34:	f04f 0260 	mov.w	r2, #96	@ 0x60
 8004a38:	f44f 034c 	mov.w	r3, #13369344	@ 0xcc0000
 8004a3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 8004a40:	e012      	b.n	8004a68 <ov9655_ConvertValue+0x1c4>
        }
      case CAMERA_COLOR_EFFECT_GREEN:
        {
          ret =  OV9655_COLOR_EFFECT_GREEN;
 8004a42:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004a46:	f44f 034c 	mov.w	r3, #13369344	@ 0xcc0000
 8004a4a:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 8004a4e:	e00b      	b.n	8004a68 <ov9655_ConvertValue+0x1c4>
        }
      case CAMERA_COLOR_EFFECT_RED:
        {
          ret =  OV9655_COLOR_EFFECT_RED;
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	4b10      	ldr	r3, [pc, #64]	@ (8004a98 <ov9655_ConvertValue+0x1f4>)
 8004a56:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 8004a5a:	e005      	b.n	8004a68 <ov9655_ConvertValue+0x1c4>
        }
      case CAMERA_COLOR_EFFECT_NONE:
      default:
        {
          ret =  OV9655_COLOR_EFFECT_NONE;
 8004a5c:	f248 0280 	movw	r2, #32896	@ 0x8080
 8004a60:	4b0b      	ldr	r3, [pc, #44]	@ (8004a90 <ov9655_ConvertValue+0x1ec>)
 8004a62:	e9c7 2302 	strd	r2, r3, [r7, #8]
          break;
 8004a66:	bf00      	nop
        }
      }
      break;
 8004a68:	e006      	b.n	8004a78 <ov9655_ConvertValue+0x1d4>
    default:
      {
        ret = 0;
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	e9c7 2302 	strd	r2, r3, [r7, #8]
        break;
 8004a76:	bf00      	nop
      }    
    }
  }
  
  return ret;
 8004a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	00ec8080 	.word	0x00ec8080
 8004a90:	00cc8080 	.word	0x00cc8080
 8004a94:	20f00000 	.word	0x20f00000
 8004a98:	00cc6000 	.word	0x00cc6000

08004a9c <InitFraktal>:
// zmierz czas liczenia fraktala Julii
// Parametry: nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void InitFraktal(unsigned char chTyp)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]
//#define IMG_CONSTANT	-0.73
//#define REAL_CONSTANT	0.19
#define IMG_CONSTANT	-0.1
#define REAL_CONSTANT	0.65

	switch (chTyp)
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d839      	bhi.n	8004b20 <InitFraktal+0x84>
 8004aac:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab4 <InitFraktal+0x18>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004ac5 	.word	0x08004ac5
 8004ab8:	08004ad3 	.word	0x08004ad3
 8004abc:	08004aed 	.word	0x08004aed
 8004ac0:	08004b07 	.word	0x08004b07
	{
	case 0:	fReal = 0.38; 	fImag = -0.1;	break;	//Julia
 8004ac4:	4b19      	ldr	r3, [pc, #100]	@ (8004b2c <InitFraktal+0x90>)
 8004ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b30 <InitFraktal+0x94>)
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	4b1a      	ldr	r3, [pc, #104]	@ (8004b34 <InitFraktal+0x98>)
 8004acc:	4a1a      	ldr	r2, [pc, #104]	@ (8004b38 <InitFraktal+0x9c>)
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	e026      	b.n	8004b20 <InitFraktal+0x84>
	case 1:	fX=-0.70; 	fY=0.60;	fZoom = -0.6;	chMnozPalety = 2;	break;		//ca�y fraktal - rotacja palety -0.7, 0.6, -0.6,
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b3c <InitFraktal+0xa0>)
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b40 <InitFraktal+0xa4>)
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b44 <InitFraktal+0xa8>)
 8004ada:	4a1b      	ldr	r2, [pc, #108]	@ (8004b48 <InitFraktal+0xac>)
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	4b1b      	ldr	r3, [pc, #108]	@ (8004b4c <InitFraktal+0xb0>)
 8004ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b50 <InitFraktal+0xb4>)
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b54 <InitFraktal+0xb8>)
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	e019      	b.n	8004b20 <InitFraktal+0x84>
	case 2:	fX=-0.75; 	fY=0.18;	fZoom = -0.6;	chMnozPalety = 15;	break;		//dolina konika x=-0,75, y=0,1
 8004aec:	4b13      	ldr	r3, [pc, #76]	@ (8004b3c <InitFraktal+0xa0>)
 8004aee:	4a1a      	ldr	r2, [pc, #104]	@ (8004b58 <InitFraktal+0xbc>)
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	4b14      	ldr	r3, [pc, #80]	@ (8004b44 <InitFraktal+0xa8>)
 8004af4:	4a19      	ldr	r2, [pc, #100]	@ (8004b5c <InitFraktal+0xc0>)
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	4b14      	ldr	r3, [pc, #80]	@ (8004b4c <InitFraktal+0xb0>)
 8004afa:	4a15      	ldr	r2, [pc, #84]	@ (8004b50 <InitFraktal+0xb4>)
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	4b15      	ldr	r3, [pc, #84]	@ (8004b54 <InitFraktal+0xb8>)
 8004b00:	220f      	movs	r2, #15
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e00c      	b.n	8004b20 <InitFraktal+0x84>
	case 3:	fX= 0.30; 	fY=0.05;	fZoom = -0.6;	chMnozPalety = 43;	break;		//dolina s�onia x=0,25-0,35, y=0,05, zoom=-0,6..-40
 8004b06:	4b0d      	ldr	r3, [pc, #52]	@ (8004b3c <InitFraktal+0xa0>)
 8004b08:	4a15      	ldr	r2, [pc, #84]	@ (8004b60 <InitFraktal+0xc4>)
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b44 <InitFraktal+0xa8>)
 8004b0e:	4a15      	ldr	r2, [pc, #84]	@ (8004b64 <InitFraktal+0xc8>)
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	4b0e      	ldr	r3, [pc, #56]	@ (8004b4c <InitFraktal+0xb0>)
 8004b14:	4a0e      	ldr	r2, [pc, #56]	@ (8004b50 <InitFraktal+0xb4>)
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	4b0e      	ldr	r3, [pc, #56]	@ (8004b54 <InitFraktal+0xb8>)
 8004b1a:	222b      	movs	r2, #43	@ 0x2b
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	bf00      	nop
	}


	//chMnozPalety = 43;		//8, 13, 21, 30, 34, 43, 48, 56, 61
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	20010d14 	.word	0x20010d14
 8004b30:	3ec28f5c 	.word	0x3ec28f5c
 8004b34:	20010d18 	.word	0x20010d18
 8004b38:	bdcccccd 	.word	0xbdcccccd
 8004b3c:	20010d20 	.word	0x20010d20
 8004b40:	bf333333 	.word	0xbf333333
 8004b44:	20010d24 	.word	0x20010d24
 8004b48:	3f19999a 	.word	0x3f19999a
 8004b4c:	20010d1c 	.word	0x20010d1c
 8004b50:	bf19999a 	.word	0xbf19999a
 8004b54:	20010d28 	.word	0x20010d28
 8004b58:	bf400000 	.word	0xbf400000
 8004b5c:	3e3851ec 	.word	0x3e3851ec
 8004b60:	3e99999a 	.word	0x3e99999a
 8004b64:	3d4ccccd 	.word	0x3d4ccccd

08004b68 <GenerateJulia>:
// Generuj fraktal Julii
// Parametry:
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void GenerateJulia(unsigned short size_x, unsigned short size_y, unsigned short offset_x, unsigned short offset_y, unsigned short zoom, unsigned short * buffer)
{
 8004b68:	b490      	push	{r4, r7}
 8004b6a:	b08a      	sub	sp, #40	@ 0x28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4604      	mov	r4, r0
 8004b70:	4608      	mov	r0, r1
 8004b72:	4611      	mov	r1, r2
 8004b74:	461a      	mov	r2, r3
 8004b76:	4623      	mov	r3, r4
 8004b78:	80fb      	strh	r3, [r7, #6]
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	80bb      	strh	r3, [r7, #4]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	807b      	strh	r3, [r7, #2]
 8004b82:	4613      	mov	r3, r2
 8004b84:	803b      	strh	r3, [r7, #0]
	float num_real, num_img;
	float radius;
	unsigned short i;
	unsigned short x,y;

	for (y=0; y<size_y; y++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	82fb      	strh	r3, [r7, #22]
 8004b8a:	e08a      	b.n	8004ca2 <GenerateJulia+0x13a>
	{
		for (x=0; x<size_x; x++)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	833b      	strh	r3, [r7, #24]
 8004b90:	e07f      	b.n	8004c92 <GenerateJulia+0x12a>
		{
			num_real = y - offset_y;
 8004b92:	8afa      	ldrh	r2, [r7, #22]
 8004b94:	883b      	ldrh	r3, [r7, #0]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	ee07 3a90 	vmov	s15, r3
 8004b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ba0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			num_real = num_real / zoom;
 8004ba4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			num_img = x - offset_x;
 8004bba:	8b3a      	ldrh	r2, [r7, #24]
 8004bbc:	887b      	ldrh	r3, [r7, #2]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	ee07 3a90 	vmov	s15, r3
 8004bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bc8:	edc7 7a08 	vstr	s15, [r7, #32]
			num_img = num_img / zoom;
 8004bcc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bd6:	edd7 6a08 	vldr	s13, [r7, #32]
 8004bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bde:	edc7 7a08 	vstr	s15, [r7, #32]
			i=0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	837b      	strh	r3, [r7, #26]
			radius = 0;
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	61fb      	str	r3, [r7, #28]
			while ((i<ITERATION-1) && (radius < 2))
 8004bec:	e032      	b.n	8004c54 <GenerateJulia+0xec>
			{
				tmp1 = num_real * num_real;
 8004bee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004bf2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004bf6:	edc7 7a04 	vstr	s15, [r7, #16]
				tmp2 = num_img * num_img;
 8004bfa:	edd7 7a08 	vldr	s15, [r7, #32]
 8004bfe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004c02:	edc7 7a03 	vstr	s15, [r7, #12]
				num_img = 2*num_real*num_img + fImag;
 8004c06:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004c0a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004c0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c16:	4b28      	ldr	r3, [pc, #160]	@ (8004cb8 <GenerateJulia+0x150>)
 8004c18:	edd3 7a00 	vldr	s15, [r3]
 8004c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c20:	edc7 7a08 	vstr	s15, [r7, #32]
				num_real = tmp1 - tmp2 + fReal;
 8004c24:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c28:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c30:	4b22      	ldr	r3, [pc, #136]	@ (8004cbc <GenerateJulia+0x154>)
 8004c32:	edd3 7a00 	vldr	s15, [r3]
 8004c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c3a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
				radius = tmp1 + tmp2;
 8004c3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c42:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c4a:	edc7 7a07 	vstr	s15, [r7, #28]
				i++;
 8004c4e:	8b7b      	ldrh	r3, [r7, #26]
 8004c50:	3301      	adds	r3, #1
 8004c52:	837b      	strh	r3, [r7, #26]
			while ((i<ITERATION-1) && (radius < 2))
 8004c54:	8b7b      	ldrh	r3, [r7, #26]
 8004c56:	2b4e      	cmp	r3, #78	@ 0x4e
 8004c58:	d808      	bhi.n	8004c6c <GenerateJulia+0x104>
 8004c5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c5e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6a:	d4c0      	bmi.n	8004bee <GenerateJulia+0x86>
			}
			/* Store the value in the buffer */
			buffer[x+y*size_x] = i*20;
 8004c6c:	8b3a      	ldrh	r2, [r7, #24]
 8004c6e:	8afb      	ldrh	r3, [r7, #22]
 8004c70:	88f9      	ldrh	r1, [r7, #6]
 8004c72:	fb01 f303 	mul.w	r3, r1, r3
 8004c76:	4413      	add	r3, r2
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c7c:	441a      	add	r2, r3
 8004c7e:	8b7b      	ldrh	r3, [r7, #26]
 8004c80:	4619      	mov	r1, r3
 8004c82:	0089      	lsls	r1, r1, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8013      	strh	r3, [r2, #0]
		for (x=0; x<size_x; x++)
 8004c8c:	8b3b      	ldrh	r3, [r7, #24]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	833b      	strh	r3, [r7, #24]
 8004c92:	8b3a      	ldrh	r2, [r7, #24]
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	f4ff af7b 	bcc.w	8004b92 <GenerateJulia+0x2a>
	for (y=0; y<size_y; y++)
 8004c9c:	8afb      	ldrh	r3, [r7, #22]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	82fb      	strh	r3, [r7, #22]
 8004ca2:	8afa      	ldrh	r2, [r7, #22]
 8004ca4:	88bb      	ldrh	r3, [r7, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	f4ff af70 	bcc.w	8004b8c <GenerateJulia+0x24>
		}
	}
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3728      	adds	r7, #40	@ 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc90      	pop	{r4, r7}
 8004cb6:	4770      	bx	lr
 8004cb8:	20010d18 	.word	0x20010d18
 8004cbc:	20010d14 	.word	0x20010d14

08004cc0 <MinalCzas>:
// Liczy upływ czasu
// Parametry: nStart - licznik czasu na na początku pomiaru
// Zwraca: ilość czasu w setkach us jaki upłynął do podanego czasu startu
////////////////////////////////////////////////////////////////////////////////
unsigned int MinalCzas(unsigned int nStart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	unsigned int nCzas, nCzasAkt;

	nCzasAkt = HAL_GetTick();
 8004cc8:	f002 f8b2 	bl	8006e30 <HAL_GetTick>
 8004ccc:	60b8      	str	r0, [r7, #8]
	if (nCzasAkt >= nStart)
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d304      	bcc.n	8004ce0 <MinalCzas+0x20>
		nCzas = nCzasAkt - nStart;
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e004      	b.n	8004cea <MinalCzas+0x2a>
	else
		nCzas = 0xFFFFFFFF - nStart + nCzasAkt;
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
	return nCzas;
 8004cea:	68fb      	ldr	r3, [r7, #12]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08a      	sub	sp, #40	@ 0x28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d122      	bne.n	8004d4a <BSP_LED_Init+0x56>
  {
    gpio_led = LED1_GPIO_PORT;
 8004d04:	4b13      	ldr	r3, [pc, #76]	@ (8004d54 <BSP_LED_Init+0x60>)
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 8004d08:	4b13      	ldr	r3, [pc, #76]	@ (8004d58 <BSP_LED_Init+0x64>)
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0c:	4a12      	ldr	r2, [pc, #72]	@ (8004d58 <BSP_LED_Init+0x64>)
 8004d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d12:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d14:	4b10      	ldr	r3, [pc, #64]	@ (8004d58 <BSP_LED_Init+0x64>)
 8004d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	68fb      	ldr	r3, [r7, #12]

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
 8004d20:	2302      	movs	r3, #2
 8004d22:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	61fb      	str	r3, [r7, #28]
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8004d30:	f107 0310 	add.w	r3, r7, #16
 8004d34:	4619      	mov	r1, r3
 8004d36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d38:	f006 fce6 	bl	800b708 <HAL_GPIO_Init>
    
    /* By default, turn off LED */
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2200      	movs	r2, #0
 8004d42:	4619      	mov	r1, r3
 8004d44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d46:	f006 ff97 	bl	800bc78 <HAL_GPIO_WritePin>
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	3728      	adds	r7, #40	@ 0x28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40022000 	.word	0x40022000
 8004d58:	40023800 	.word	0x40023800

08004d5c <BSP_LED_Toggle>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Toggle LED connected to GPIO */
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d107      	bne.n	8004d7c <BSP_LED_Toggle+0x20>
  {
    gpio_led = LED1_GPIO_PORT;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	@ (8004d84 <BSP_LED_Toggle+0x28>)
 8004d6e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 8004d70:	2302      	movs	r3, #2
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	4619      	mov	r1, r3
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f006 ff97 	bl	800bcaa <HAL_GPIO_TogglePin>
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40022000 	.word	0x40022000

08004d88 <BSP_PB_Init>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	@ 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	460a      	mov	r2, r1
 8004d92:	71fb      	strb	r3, [r7, #7]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10c      	bne.n	8004db8 <BSP_PB_Init+0x30>
 8004d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e8c <BSP_PB_Init+0x104>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	4a3a      	ldr	r2, [pc, #232]	@ (8004e8c <BSP_PB_Init+0x104>)
 8004da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004daa:	4b38      	ldr	r3, [pc, #224]	@ (8004e8c <BSP_PB_Init+0x104>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	e01b      	b.n	8004df0 <BSP_PB_Init+0x68>
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d10c      	bne.n	8004dd8 <BSP_PB_Init+0x50>
 8004dbe:	4b33      	ldr	r3, [pc, #204]	@ (8004e8c <BSP_PB_Init+0x104>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc2:	4a32      	ldr	r2, [pc, #200]	@ (8004e8c <BSP_PB_Init+0x104>)
 8004dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dca:	4b30      	ldr	r3, [pc, #192]	@ (8004e8c <BSP_PB_Init+0x104>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	e00b      	b.n	8004df0 <BSP_PB_Init+0x68>
 8004dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8004e8c <BSP_PB_Init+0x104>)
 8004dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8004e8c <BSP_PB_Init+0x104>)
 8004dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004de4:	4b29      	ldr	r3, [pc, #164]	@ (8004e8c <BSP_PB_Init+0x104>)
 8004de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004df0:	79bb      	ldrb	r3, [r7, #6]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d114      	bne.n	8004e20 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	4a25      	ldr	r2, [pc, #148]	@ (8004e90 <BSP_PB_Init+0x108>)
 8004dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dfe:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	4a21      	ldr	r2, [pc, #132]	@ (8004e94 <BSP_PB_Init+0x10c>)
 8004e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e14:	f107 0214 	add.w	r2, r7, #20
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f006 fc74 	bl	800b708 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004e20:	79bb      	ldrb	r3, [r7, #6]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d12e      	bne.n	8004e84 <BSP_PB_Init+0xfc>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	4a19      	ldr	r2, [pc, #100]	@ (8004e90 <BSP_PB_Init+0x108>)
 8004e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e2e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004e34:	2302      	movs	r3, #2
 8004e36:	623b      	str	r3, [r7, #32]
    
    if(Button != BUTTON_WAKEUP)
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <BSP_PB_Init+0xbe>
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8004e3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	e002      	b.n	8004e4c <BSP_PB_Init+0xc4>
    }
    else
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8004e46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004e4a:	61bb      	str	r3, [r7, #24]
    }
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	4a11      	ldr	r2, [pc, #68]	@ (8004e94 <BSP_PB_Init+0x10c>)
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	f107 0214 	add.w	r2, r7, #20
 8004e58:	4611      	mov	r1, r2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f006 fc54 	bl	800b708 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	4a0d      	ldr	r2, [pc, #52]	@ (8004e98 <BSP_PB_Init+0x110>)
 8004e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e68:	b25b      	sxtb	r3, r3
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	210f      	movs	r1, #15
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f002 fb66 	bl	8007540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	4a08      	ldr	r2, [pc, #32]	@ (8004e98 <BSP_PB_Init+0x110>)
 8004e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e7c:	b25b      	sxtb	r3, r3
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f002 fb7a 	bl	8007578 <HAL_NVIC_EnableIRQ>
  }
}
 8004e84:	bf00      	nop
 8004e86:	3728      	adds	r7, #40	@ 0x28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	0802ba84 	.word	0x0802ba84
 8004e94:	20010038 	.word	0x20010038
 8004e98:	0802ba8c 	.word	0x0802ba8c

08004e9c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08c      	sub	sp, #48	@ 0x30
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a51      	ldr	r2, [pc, #324]	@ (8004fec <I2Cx_MspInit+0x150>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d14d      	bne.n	8004f48 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004eac:	4b50      	ldr	r3, [pc, #320]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb0:	4a4f      	ldr	r2, [pc, #316]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004ec4:	2380      	movs	r3, #128	@ 0x80
 8004ec6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004ec8:	2312      	movs	r3, #18
 8004eca:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004ed8:	f107 031c 	add.w	r3, r7, #28
 8004edc:	4619      	mov	r1, r3
 8004ede:	4845      	ldr	r0, [pc, #276]	@ (8004ff4 <I2Cx_MspInit+0x158>)
 8004ee0:	f006 fc12 	bl	800b708 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004eea:	f107 031c 	add.w	r3, r7, #28
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4840      	ldr	r0, [pc, #256]	@ (8004ff4 <I2Cx_MspInit+0x158>)
 8004ef2:	f006 fc09 	bl	800b708 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	4a3d      	ldr	r2, [pc, #244]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004efc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f02:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8004f0e:	4b38      	ldr	r3, [pc, #224]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	4a37      	ldr	r2, [pc, #220]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004f14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f18:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8004f1a:	4b35      	ldr	r3, [pc, #212]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	4a34      	ldr	r2, [pc, #208]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004f20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004f24:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8004f26:	2200      	movs	r2, #0
 8004f28:	210f      	movs	r1, #15
 8004f2a:	2048      	movs	r0, #72	@ 0x48
 8004f2c:	f002 fb08 	bl	8007540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8004f30:	2048      	movs	r0, #72	@ 0x48
 8004f32:	f002 fb21 	bl	8007578 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8004f36:	2200      	movs	r2, #0
 8004f38:	210f      	movs	r1, #15
 8004f3a:	2049      	movs	r0, #73	@ 0x49
 8004f3c:	f002 fb00 	bl	8007540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8004f40:	2049      	movs	r0, #73	@ 0x49
 8004f42:	f002 fb19 	bl	8007578 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8004f46:	e04d      	b.n	8004fe4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004f48:	4b29      	ldr	r3, [pc, #164]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4c:	4a28      	ldr	r2, [pc, #160]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004f4e:	f043 0302 	orr.w	r3, r3, #2
 8004f52:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f54:	4b26      	ldr	r3, [pc, #152]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f64:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004f66:	2312      	movs	r3, #18
 8004f68:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8004f72:	2304      	movs	r3, #4
 8004f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f76:	f107 031c 	add.w	r3, r7, #28
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	481e      	ldr	r0, [pc, #120]	@ (8004ff8 <I2Cx_MspInit+0x15c>)
 8004f7e:	f006 fbc3 	bl	800b708 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004f82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f88:	f107 031c 	add.w	r3, r7, #28
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	481a      	ldr	r0, [pc, #104]	@ (8004ff8 <I2Cx_MspInit+0x15c>)
 8004f90:	f006 fbba 	bl	800b708 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004f94:	4b16      	ldr	r3, [pc, #88]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f98:	4a15      	ldr	r2, [pc, #84]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004f9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fa0:	4b13      	ldr	r3, [pc, #76]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004fac:	4b10      	ldr	r3, [pc, #64]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004fb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004fb6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8004ff0 <I2Cx_MspInit+0x154>)
 8004fbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fc2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	210f      	movs	r1, #15
 8004fc8:	201f      	movs	r0, #31
 8004fca:	f002 fab9 	bl	8007540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8004fce:	201f      	movs	r0, #31
 8004fd0:	f002 fad2 	bl	8007578 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	210f      	movs	r1, #15
 8004fd8:	2020      	movs	r0, #32
 8004fda:	f002 fab1 	bl	8007540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004fde:	2020      	movs	r0, #32
 8004fe0:	f002 faca 	bl	8007578 <HAL_NVIC_EnableIRQ>
}
 8004fe4:	bf00      	nop
 8004fe6:	3730      	adds	r7, #48	@ 0x30
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20010d2c 	.word	0x20010d2c
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	40021c00 	.word	0x40021c00
 8004ff8:	40020400 	.word	0x40020400

08004ffc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f009 fa7f 	bl	800e508 <HAL_I2C_GetState>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d125      	bne.n	800505c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a14      	ldr	r2, [pc, #80]	@ (8005064 <I2Cx_Init+0x68>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d103      	bne.n	8005020 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a13      	ldr	r2, [pc, #76]	@ (8005068 <I2Cx_Init+0x6c>)
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e002      	b.n	8005026 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a12      	ldr	r2, [pc, #72]	@ (800506c <I2Cx_Init+0x70>)
 8005024:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a11      	ldr	r2, [pc, #68]	@ (8005070 <I2Cx_Init+0x74>)
 800502a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff ff23 	bl	8004e9c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f008 ff5c 	bl	800df14 <HAL_I2C_Init>
  }
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20010d2c 	.word	0x20010d2c
 8005068:	40005c00 	.word	0x40005c00
 800506c:	40005400 	.word	0x40005400
 8005070:	40912732 	.word	0x40912732

08005074 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	@ 0x28
 8005078:	af04      	add	r7, sp, #16
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	4608      	mov	r0, r1
 800507e:	4611      	mov	r1, r2
 8005080:	461a      	mov	r2, r3
 8005082:	4603      	mov	r3, r0
 8005084:	72fb      	strb	r3, [r7, #11]
 8005086:	460b      	mov	r3, r1
 8005088:	813b      	strh	r3, [r7, #8]
 800508a:	4613      	mov	r3, r2
 800508c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005092:	7afb      	ldrb	r3, [r7, #11]
 8005094:	b299      	uxth	r1, r3
 8005096:	88f8      	ldrh	r0, [r7, #6]
 8005098:	893a      	ldrh	r2, [r7, #8]
 800509a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800509e:	9302      	str	r3, [sp, #8]
 80050a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	4603      	mov	r3, r0
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f009 f912 	bl	800e2d4 <HAL_I2C_Mem_Read>
 80050b0:	4603      	mov	r3, r0
 80050b2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80050ba:	7afb      	ldrb	r3, [r7, #11]
 80050bc:	4619      	mov	r1, r3
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f832 	bl	8005128 <I2Cx_Error>
  }
  return status;    
 80050c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b08a      	sub	sp, #40	@ 0x28
 80050d2:	af04      	add	r7, sp, #16
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	4608      	mov	r0, r1
 80050d8:	4611      	mov	r1, r2
 80050da:	461a      	mov	r2, r3
 80050dc:	4603      	mov	r3, r0
 80050de:	72fb      	strb	r3, [r7, #11]
 80050e0:	460b      	mov	r3, r1
 80050e2:	813b      	strh	r3, [r7, #8]
 80050e4:	4613      	mov	r3, r2
 80050e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80050ec:	7afb      	ldrb	r3, [r7, #11]
 80050ee:	b299      	uxth	r1, r3
 80050f0:	88f8      	ldrh	r0, [r7, #6]
 80050f2:	893a      	ldrh	r2, [r7, #8]
 80050f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050f8:	9302      	str	r3, [sp, #8]
 80050fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	4603      	mov	r3, r0
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f008 ffd1 	bl	800e0ac <HAL_I2C_Mem_Write>
 800510a:	4603      	mov	r3, r0
 800510c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800510e:	7dfb      	ldrb	r3, [r7, #23]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005114:	7afb      	ldrb	r3, [r7, #11]
 8005116:	4619      	mov	r1, r3
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f805 	bl	8005128 <I2Cx_Error>
  }
  return status;
 800511e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f008 ff89 	bl	800e04c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff ff5e 	bl	8004ffc <I2Cx_Init>
}
 8005140:	bf00      	nop
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <CAMERA_IO_Init>:
/**
  * @brief  Initializes Camera low level.
  * @retval None
  */
void CAMERA_IO_Init(void) 
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cExtHandler);
 800514c:	4802      	ldr	r0, [pc, #8]	@ (8005158 <CAMERA_IO_Init+0x10>)
 800514e:	f7ff ff55 	bl	8004ffc <I2Cx_Init>
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20010d80 	.word	0x20010d80

0800515c <CAMERA_IO_Write>:
  * @param  Reg: Register address 
  * @param  Value: Data to be written
  * @retval None
  */
void CAMERA_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af02      	add	r7, sp, #8
 8005162:	4603      	mov	r3, r0
 8005164:	71fb      	strb	r3, [r7, #7]
 8005166:	460b      	mov	r3, r1
 8005168:	71bb      	strb	r3, [r7, #6]
 800516a:	4613      	mov	r3, r2
 800516c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cExtHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800516e:	79bb      	ldrb	r3, [r7, #6]
 8005170:	b29a      	uxth	r2, r3
 8005172:	79f9      	ldrb	r1, [r7, #7]
 8005174:	2301      	movs	r3, #1
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	1d7b      	adds	r3, r7, #5
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	2301      	movs	r3, #1
 800517e:	4803      	ldr	r0, [pc, #12]	@ (800518c <CAMERA_IO_Write+0x30>)
 8005180:	f7ff ffa5 	bl	80050ce <I2Cx_WriteMultiple>
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20010d80 	.word	0x20010d80

08005190 <CAMERA_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address 
  * @retval Read data
  */
uint8_t CAMERA_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af02      	add	r7, sp, #8
 8005196:	4603      	mov	r3, r0
 8005198:	460a      	mov	r2, r1
 800519a:	71fb      	strb	r3, [r7, #7]
 800519c:	4613      	mov	r3, r2
 800519e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cExtHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80051a4:	79bb      	ldrb	r3, [r7, #6]
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	79f9      	ldrb	r1, [r7, #7]
 80051aa:	2301      	movs	r3, #1
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	f107 030f 	add.w	r3, r7, #15
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	2301      	movs	r3, #1
 80051b6:	4804      	ldr	r0, [pc, #16]	@ (80051c8 <CAMERA_IO_Read+0x38>)
 80051b8:	f7ff ff5c 	bl	8005074 <I2Cx_ReadMultiple>

  return read_value;
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20010d80 	.word	0x20010d80

080051cc <CAMERA_Delay>:
  * @brief  Camera delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void CAMERA_Delay(uint32_t Delay)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f001 fe37 	bl	8006e48 <HAL_Delay>
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80051e8:	4802      	ldr	r0, [pc, #8]	@ (80051f4 <TS_IO_Init+0x10>)
 80051ea:	f7ff ff07 	bl	8004ffc <I2Cx_Init>
}
 80051ee:	bf00      	nop
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20010d2c 	.word	0x20010d2c

080051f8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	4603      	mov	r3, r0
 8005200:	71fb      	strb	r3, [r7, #7]
 8005202:	460b      	mov	r3, r1
 8005204:	71bb      	strb	r3, [r7, #6]
 8005206:	4613      	mov	r3, r2
 8005208:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800520a:	79bb      	ldrb	r3, [r7, #6]
 800520c:	b29a      	uxth	r2, r3
 800520e:	79f9      	ldrb	r1, [r7, #7]
 8005210:	2301      	movs	r3, #1
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	1d7b      	adds	r3, r7, #5
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	2301      	movs	r3, #1
 800521a:	4803      	ldr	r0, [pc, #12]	@ (8005228 <TS_IO_Write+0x30>)
 800521c:	f7ff ff57 	bl	80050ce <I2Cx_WriteMultiple>
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20010d2c 	.word	0x20010d2c

0800522c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af02      	add	r7, sp, #8
 8005232:	4603      	mov	r3, r0
 8005234:	460a      	mov	r2, r1
 8005236:	71fb      	strb	r3, [r7, #7]
 8005238:	4613      	mov	r3, r2
 800523a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8005240:	79bb      	ldrb	r3, [r7, #6]
 8005242:	b29a      	uxth	r2, r3
 8005244:	79f9      	ldrb	r1, [r7, #7]
 8005246:	2301      	movs	r3, #1
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	f107 030f 	add.w	r3, r7, #15
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	2301      	movs	r3, #1
 8005252:	4804      	ldr	r0, [pc, #16]	@ (8005264 <TS_IO_Read+0x38>)
 8005254:	f7ff ff0e 	bl	8005074 <I2Cx_ReadMultiple>

  return read_value;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20010d2c 	.word	0x20010d2c

08005268 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f001 fde9 	bl	8006e48 <HAL_Delay>
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <BSP_CAMERA_Init>:
  * @param  Resolution : camera sensor requested resolution (x, y) : standard resolution
  *         naming QQVGA, QVGA, VGA ...
  * @retval Camera status
  */
uint8_t BSP_CAMERA_Init(uint32_t Resolution)
{ 
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *phdcmi;
  uint8_t status = CAMERA_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]

  /* Get the DCMI handle structure */
  phdcmi = &hDcmiHandler;
 800528c:	4b2f      	ldr	r3, [pc, #188]	@ (800534c <BSP_CAMERA_Init+0xcc>)
 800528e:	60bb      	str	r3, [r7, #8]

  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  phdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2200      	movs	r2, #0
 8005294:	615a      	str	r2, [r3, #20]
  phdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_LOW;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2200      	movs	r2, #0
 800529a:	611a      	str	r2, [r3, #16]
  phdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2200      	movs	r2, #0
 80052a0:	605a      	str	r2, [r3, #4]
  phdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2280      	movs	r2, #128	@ 0x80
 80052a6:	60da      	str	r2, [r3, #12]
  phdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2200      	movs	r2, #0
 80052ac:	619a      	str	r2, [r3, #24]
  phdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2220      	movs	r2, #32
 80052b2:	609a      	str	r2, [r3, #8]
  phdcmi->Instance              = DCMI;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4a26      	ldr	r2, [pc, #152]	@ (8005350 <BSP_CAMERA_Init+0xd0>)
 80052b8:	601a      	str	r2, [r3, #0]

  /* Power up camera */
  BSP_CAMERA_PwrUp();
 80052ba:	f000 f8c1 	bl	8005440 <BSP_CAMERA_PwrUp>

  /* Read ID of Camera module via I2C */
  if(ov9655_ReadID(CAMERA_I2C_ADDRESS) == OV9655_ID)
 80052be:	2060      	movs	r0, #96	@ 0x60
 80052c0:	f7ff fade 	bl	8004880 <ov9655_ReadID>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b96      	cmp	r3, #150	@ 0x96
 80052c8:	d138      	bne.n	800533c <BSP_CAMERA_Init+0xbc>
  {
    /* Initialize the camera driver structure */
    camera_drv = &ov9655_drv;
 80052ca:	4b22      	ldr	r3, [pc, #136]	@ (8005354 <BSP_CAMERA_Init+0xd4>)
 80052cc:	4a22      	ldr	r2, [pc, #136]	@ (8005358 <BSP_CAMERA_Init+0xd8>)
 80052ce:	601a      	str	r2, [r3, #0]
    CameraHwAddress = CAMERA_I2C_ADDRESS;
 80052d0:	4b22      	ldr	r3, [pc, #136]	@ (800535c <BSP_CAMERA_Init+0xdc>)
 80052d2:	2260      	movs	r2, #96	@ 0x60
 80052d4:	601a      	str	r2, [r3, #0]

    /* DCMI Initialization */
    BSP_CAMERA_MspInit(&hDcmiHandler, NULL);
 80052d6:	2100      	movs	r1, #0
 80052d8:	481c      	ldr	r0, [pc, #112]	@ (800534c <BSP_CAMERA_Init+0xcc>)
 80052da:	f000 f90b 	bl	80054f4 <BSP_CAMERA_MspInit>
    HAL_DCMI_Init(phdcmi);
 80052de:	68b8      	ldr	r0, [r7, #8]
 80052e0:	f002 fac2 	bl	8007868 <HAL_DCMI_Init>

    /* Camera Module Initialization via I2C to the wanted 'Resolution' */
    if (Resolution == CAMERA_R480x272)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d116      	bne.n	8005318 <BSP_CAMERA_Init+0x98>
    {     /* For 480x272 resolution, the OV9655 sensor is set to VGA resolution
           * as OV9655 doesn't supports 480x272 resolution,
           * then DCMI is configured to output a 480x272 cropped window */
      camera_drv->Init(CameraHwAddress, CAMERA_R640x480);
 80052ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005354 <BSP_CAMERA_Init+0xd4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1a      	ldr	r2, [pc, #104]	@ (800535c <BSP_CAMERA_Init+0xdc>)
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	b292      	uxth	r2, r2
 80052f6:	2103      	movs	r1, #3
 80052f8:	4610      	mov	r0, r2
 80052fa:	4798      	blx	r3
      HAL_DCMI_ConfigCROP(phdcmi,           /* Crop in the middle of the VGA picture */
 80052fc:	f240 130f 	movw	r3, #271	@ 0x10f
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	f240 33bf 	movw	r3, #959	@ 0x3bf
 8005306:	2268      	movs	r2, #104	@ 0x68
 8005308:	2150      	movs	r1, #80	@ 0x50
 800530a:	68b8      	ldr	r0, [r7, #8]
 800530c:	f002 fcd4 	bl	8007cb8 <HAL_DCMI_ConfigCrop>
                         (CAMERA_VGA_RES_X - CAMERA_480x272_RES_X)/2,
                         (CAMERA_VGA_RES_Y - CAMERA_480x272_RES_Y)/2,
                         (CAMERA_480x272_RES_X * 2) - 1,
                          CAMERA_480x272_RES_Y - 1);
      HAL_DCMI_EnableCROP(phdcmi);
 8005310:	68b8      	ldr	r0, [r7, #8]
 8005312:	f002 fd2e 	bl	8007d72 <HAL_DCMI_EnableCrop>
 8005316:	e00b      	b.n	8005330 <BSP_CAMERA_Init+0xb0>
    }
    else
    {
      camera_drv->Init(CameraHwAddress, Resolution);
 8005318:	4b0e      	ldr	r3, [pc, #56]	@ (8005354 <BSP_CAMERA_Init+0xd4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a0f      	ldr	r2, [pc, #60]	@ (800535c <BSP_CAMERA_Init+0xdc>)
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	b292      	uxth	r2, r2
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4610      	mov	r0, r2
 8005328:	4798      	blx	r3
      HAL_DCMI_DisableCROP(phdcmi);
 800532a:	68b8      	ldr	r0, [r7, #8]
 800532c:	f002 fcf7 	bl	8007d1e <HAL_DCMI_DisableCrop>
    }

    CameraCurrentResolution = Resolution;
 8005330:	4a0b      	ldr	r2, [pc, #44]	@ (8005360 <BSP_CAMERA_Init+0xe0>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6013      	str	r3, [r2, #0]

    /* Return CAMERA_OK status */
    status = CAMERA_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	73fb      	strb	r3, [r7, #15]
 800533a:	e001      	b.n	8005340 <BSP_CAMERA_Init+0xc0>
  }
  else
  {
    /* Return CAMERA_NOT_SUPPORTED status */
    status = CAMERA_NOT_SUPPORTED;
 800533c:	2304      	movs	r3, #4
 800533e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20010e34 	.word	0x20010e34
 8005350:	50050000 	.word	0x50050000
 8005354:	20010e84 	.word	0x20010e84
 8005358:	2001002c 	.word	0x2001002c
 800535c:	20010e8c 	.word	0x20010e8c
 8005360:	20010e88 	.word	0x20010e88

08005364 <BSP_CAMERA_ContinuousStart>:
  * @brief  Starts the camera capture in continuous mode.
  * @param  buff: pointer to the camera output buffer
  * @retval None
  */
HAL_StatusTypeDef BSP_CAMERA_ContinuousStart(uint8_t *buff)
{ 
 8005364:	b590      	push	{r4, r7, lr}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	HAL_DMA_StateTypeDef stan;

  hDcmiHandler.DMA_Handle->Instance->CR |= DMA_SxCR_CIRC;	//włącz tryb DMA_CIRCULAR
 800536c:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <BSP_CAMERA_ContinuousStart+0x5c>)
 800536e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4b12      	ldr	r3, [pc, #72]	@ (80053c0 <BSP_CAMERA_ContinuousStart+0x5c>)
 8005376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800537e:	601a      	str	r2, [r3, #0]

  stan = HAL_DMA_GetState(hDcmiHandler.DMA_Handle);
 8005380:	4b0f      	ldr	r3, [pc, #60]	@ (80053c0 <BSP_CAMERA_ContinuousStart+0x5c>)
 8005382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005384:	4618      	mov	r0, r3
 8005386:	f003 f957 	bl	8008638 <HAL_DMA_GetState>
 800538a:	4603      	mov	r3, r0
 800538c:	73fb      	strb	r3, [r7, #15]
  if (stan != HAL_DMA_STATE_READY)
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d004      	beq.n	800539e <BSP_CAMERA_ContinuousStart+0x3a>
	  HAL_DMA_Abort(hDcmiHandler.DMA_Handle);
 8005394:	4b0a      	ldr	r3, [pc, #40]	@ (80053c0 <BSP_CAMERA_ContinuousStart+0x5c>)
 8005396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005398:	4618      	mov	r0, r3
 800539a:	f002 ff31 	bl	8008200 <HAL_DMA_Abort>
  return HAL_DCMI_Start_DMA(&hDcmiHandler, DCMI_MODE_CONTINUOUS, (uint32_t)buff, GetSize(CameraCurrentResolution));
 800539e:	687c      	ldr	r4, [r7, #4]
 80053a0:	4b08      	ldr	r3, [pc, #32]	@ (80053c4 <BSP_CAMERA_ContinuousStart+0x60>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 f879 	bl	800549c <GetSize>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4622      	mov	r2, r4
 80053ae:	2100      	movs	r1, #0
 80053b0:	4803      	ldr	r0, [pc, #12]	@ (80053c0 <BSP_CAMERA_ContinuousStart+0x5c>)
 80053b2:	f002 fad3 	bl	800795c <HAL_DCMI_Start_DMA>
 80053b6:	4603      	mov	r3, r0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd90      	pop	{r4, r7, pc}
 80053c0:	20010e34 	.word	0x20010e34
 80053c4:	20010e88 	.word	0x20010e88

080053c8 <BSP_CAMERA_SnapshotStart>:
  * @brief  Starts the camera capture in snapshot mode.
  * @param  buff: pointer to the camera output buffer
  * @retval None
  */
HAL_StatusTypeDef BSP_CAMERA_SnapshotStart(uint8_t *buff)
{ 
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	HAL_DMA_StateTypeDef stan;

  hDcmiHandler.DMA_Handle->Instance->CR &= ~DMA_SxCR_CIRC;	//wyłącz tryb DMA_CIRCULAR
 80053d0:	4b14      	ldr	r3, [pc, #80]	@ (8005424 <BSP_CAMERA_SnapshotStart+0x5c>)
 80053d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	4b12      	ldr	r3, [pc, #72]	@ (8005424 <BSP_CAMERA_SnapshotStart+0x5c>)
 80053da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053e2:	601a      	str	r2, [r3, #0]
  stan = HAL_DMA_GetState(hDcmiHandler.DMA_Handle);
 80053e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005424 <BSP_CAMERA_SnapshotStart+0x5c>)
 80053e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e8:	4618      	mov	r0, r3
 80053ea:	f003 f925 	bl	8008638 <HAL_DMA_GetState>
 80053ee:	4603      	mov	r3, r0
 80053f0:	73fb      	strb	r3, [r7, #15]
    if (stan != HAL_DMA_STATE_READY)
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d004      	beq.n	8005402 <BSP_CAMERA_SnapshotStart+0x3a>
  	  HAL_DMA_Abort(hDcmiHandler.DMA_Handle);
 80053f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005424 <BSP_CAMERA_SnapshotStart+0x5c>)
 80053fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fc:	4618      	mov	r0, r3
 80053fe:	f002 feff 	bl	8008200 <HAL_DMA_Abort>
  return HAL_DCMI_Start_DMA(&hDcmiHandler, DCMI_MODE_SNAPSHOT, (uint32_t)buff, GetSize(CameraCurrentResolution));
 8005402:	687c      	ldr	r4, [r7, #4]
 8005404:	4b08      	ldr	r3, [pc, #32]	@ (8005428 <BSP_CAMERA_SnapshotStart+0x60>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 f847 	bl	800549c <GetSize>
 800540e:	4603      	mov	r3, r0
 8005410:	4622      	mov	r2, r4
 8005412:	2102      	movs	r1, #2
 8005414:	4803      	ldr	r0, [pc, #12]	@ (8005424 <BSP_CAMERA_SnapshotStart+0x5c>)
 8005416:	f002 faa1 	bl	800795c <HAL_DCMI_Start_DMA>
 800541a:	4603      	mov	r3, r0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	bd90      	pop	{r4, r7, pc}
 8005424:	20010e34 	.word	0x20010e34
 8005428:	20010e88 	.word	0x20010e88

0800542c <BSP_CAMERA_Suspend>:
/**
  * @brief Suspend the CAMERA capture 
  * @retval None
  */
void BSP_CAMERA_Suspend(void) 
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* Suspend the Camera Capture */
  HAL_DCMI_Suspend(&hDcmiHandler);  
 8005430:	4802      	ldr	r0, [pc, #8]	@ (800543c <BSP_CAMERA_Suspend+0x10>)
 8005432:	f002 fb57 	bl	8007ae4 <HAL_DCMI_Suspend>
}
 8005436:	bf00      	nop
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20010e34 	.word	0x20010e34

08005440 <BSP_CAMERA_PwrUp>:
/**
  * @brief  CANERA power up
  * @retval None
  */
void BSP_CAMERA_PwrUp(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005446:	4b13      	ldr	r3, [pc, #76]	@ (8005494 <BSP_CAMERA_PwrUp+0x54>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544a:	4a12      	ldr	r2, [pc, #72]	@ (8005494 <BSP_CAMERA_PwrUp+0x54>)
 800544c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005450:	6313      	str	r3, [r2, #48]	@ 0x30
 8005452:	4b10      	ldr	r3, [pc, #64]	@ (8005494 <BSP_CAMERA_PwrUp+0x54>)
 8005454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	683b      	ldr	r3, [r7, #0]

  /*** Configure the GPIO ***/
  /* Configure DCMI GPIO as alternate function */
  gpio_init_structure.Pin       = GPIO_PIN_13;
 800545e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005462:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005464:	2301      	movs	r3, #1
 8005466:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800546c:	2303      	movs	r3, #3
 800546e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	4619      	mov	r1, r3
 8005474:	4808      	ldr	r0, [pc, #32]	@ (8005498 <BSP_CAMERA_PwrUp+0x58>)
 8005476:	f006 f947 	bl	800b708 <HAL_GPIO_Init>

  /* De-assert the camera POWER_DOWN pin (active high) */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_13, GPIO_PIN_RESET);
 800547a:	2200      	movs	r2, #0
 800547c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005480:	4805      	ldr	r0, [pc, #20]	@ (8005498 <BSP_CAMERA_PwrUp+0x58>)
 8005482:	f006 fbf9 	bl	800bc78 <HAL_GPIO_WritePin>

  HAL_Delay(3);     /* POWER_DOWN de-asserted during 3ms */
 8005486:	2003      	movs	r0, #3
 8005488:	f001 fcde 	bl	8006e48 <HAL_Delay>
}
 800548c:	bf00      	nop
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40023800 	.word	0x40023800
 8005498:	40021c00 	.word	0x40021c00

0800549c <GetSize>:
  * @brief  Get the capture size in pixels unit.
  * @param  resolution: the current resolution.
  * @retval capture size in pixels unit.
  */
static uint32_t GetSize(uint32_t resolution)
{ 
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t size = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
  
  /* Get capture size */
  switch (resolution)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d81a      	bhi.n	80054e4 <GetSize+0x48>
 80054ae:	a201      	add	r2, pc, #4	@ (adr r2, 80054b4 <GetSize+0x18>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054c5 	.word	0x080054c5
 80054b8:	080054cd 	.word	0x080054cd
 80054bc:	080054d5 	.word	0x080054d5
 80054c0:	080054dd 	.word	0x080054dd
  {
  case CAMERA_R160x120:
    {
      size =  0x2580;
 80054c4:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80054c8:	60fb      	str	r3, [r7, #12]
    }
    break;    
 80054ca:	e00c      	b.n	80054e6 <GetSize+0x4a>
  case CAMERA_R320x240:
    {
      size =  0x9600;
 80054cc:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 80054d0:	60fb      	str	r3, [r7, #12]
    }
    break;
 80054d2:	e008      	b.n	80054e6 <GetSize+0x4a>
  case CAMERA_R480x272:
    {
      size =  0xFF00;
 80054d4:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80054d8:	60fb      	str	r3, [r7, #12]
    }
    break;
 80054da:	e004      	b.n	80054e6 <GetSize+0x4a>
  case CAMERA_R640x480:
    {
      size =  0x25800;
 80054dc:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 80054e0:	60fb      	str	r3, [r7, #12]
    }    
    break;
 80054e2:	e000      	b.n	80054e6 <GetSize+0x4a>
  default:
    {
      break;
 80054e4:	bf00      	nop
    }
  }
  
  return size;
 80054e6:	68fb      	ldr	r3, [r7, #12]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <BSP_CAMERA_MspInit>:
  * @param  hdcmi: HDMI handle 
  * @param  Params
  * @retval None
  */
__weak void BSP_CAMERA_MspInit(DCMI_HandleTypeDef *hdcmi, void *Params)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08e      	sub	sp, #56	@ 0x38
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]

  GPIO_InitTypeDef gpio_init_structure;
  
  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 80054fe:	4b79      	ldr	r3, [pc, #484]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005502:	4a78      	ldr	r2, [pc, #480]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	6353      	str	r3, [r2, #52]	@ 0x34
 800550a:	4b76      	ldr	r3, [pc, #472]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 800550c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	623b      	str	r3, [r7, #32]
 8005514:	6a3b      	ldr	r3, [r7, #32]

  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005516:	4b73      	ldr	r3, [pc, #460]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	4a72      	ldr	r2, [pc, #456]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 800551c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005520:	6313      	str	r3, [r2, #48]	@ 0x30
 8005522:	4b70      	ldr	r3, [pc, #448]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800552a:	61fb      	str	r3, [r7, #28]
 800552c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800552e:	4b6d      	ldr	r3, [pc, #436]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	4a6c      	ldr	r2, [pc, #432]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	6313      	str	r3, [r2, #48]	@ 0x30
 800553a:	4b6a      	ldr	r3, [pc, #424]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	61bb      	str	r3, [r7, #24]
 8005544:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005546:	4b67      	ldr	r3, [pc, #412]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554a:	4a66      	ldr	r2, [pc, #408]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 800554c:	f043 0308 	orr.w	r3, r3, #8
 8005550:	6313      	str	r3, [r2, #48]	@ 0x30
 8005552:	4b64      	ldr	r3, [pc, #400]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800555e:	4b61      	ldr	r3, [pc, #388]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005562:	4a60      	ldr	r2, [pc, #384]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005564:	f043 0310 	orr.w	r3, r3, #16
 8005568:	6313      	str	r3, [r2, #48]	@ 0x30
 800556a:	4b5e      	ldr	r3, [pc, #376]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 800556c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005576:	4b5b      	ldr	r3, [pc, #364]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557a:	4a5a      	ldr	r2, [pc, #360]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 800557c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005580:	6313      	str	r3, [r2, #48]	@ 0x30
 8005582:	4b58      	ldr	r3, [pc, #352]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800558e:	4b55      	ldr	r3, [pc, #340]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005592:	4a54      	ldr	r2, [pc, #336]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 8005594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005598:	6313      	str	r3, [r2, #48]	@ 0x30
 800559a:	4b52      	ldr	r3, [pc, #328]	@ (80056e4 <BSP_CAMERA_MspInit+0x1f0>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a2:	60bb      	str	r3, [r7, #8]
 80055a4:	68bb      	ldr	r3, [r7, #8]

  /*** Configure the GPIO ***/
  /* Configure DCMI GPIO as alternate function */
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 80055a6:	2350      	movs	r3, #80	@ 0x50
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80055aa:	2302      	movs	r3, #2
 80055ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80055ae:	2301      	movs	r3, #1
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80055b2:	2303      	movs	r3, #3
 80055b4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80055b6:	230d      	movs	r3, #13
 80055b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80055ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055be:	4619      	mov	r1, r3
 80055c0:	4849      	ldr	r0, [pc, #292]	@ (80056e8 <BSP_CAMERA_MspInit+0x1f4>)
 80055c2:	f006 f8a1 	bl	800b708 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_3;
 80055c6:	2308      	movs	r3, #8
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80055ca:	2302      	movs	r3, #2
 80055cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80055ce:	2301      	movs	r3, #1
 80055d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80055d2:	2303      	movs	r3, #3
 80055d4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80055d6:	230d      	movs	r3, #13
 80055d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80055da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055de:	4619      	mov	r1, r3
 80055e0:	4842      	ldr	r0, [pc, #264]	@ (80056ec <BSP_CAMERA_MspInit+0x1f8>)
 80055e2:	f006 f891 	bl	800b708 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_5 | GPIO_PIN_6;
 80055e6:	2360      	movs	r3, #96	@ 0x60
 80055e8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80055ea:	2302      	movs	r3, #2
 80055ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80055ee:	2301      	movs	r3, #1
 80055f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80055f2:	2303      	movs	r3, #3
 80055f4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80055f6:	230d      	movs	r3, #13
 80055f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80055fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055fe:	4619      	mov	r1, r3
 8005600:	483b      	ldr	r0, [pc, #236]	@ (80056f0 <BSP_CAMERA_MspInit+0x1fc>)
 8005602:	f006 f881 	bl	800b708 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_9;
 8005606:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800560c:	2302      	movs	r3, #2
 800560e:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005610:	2301      	movs	r3, #1
 8005612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8005614:	2303      	movs	r3, #3
 8005616:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8005618:	230d      	movs	r3, #13
 800561a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800561c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005620:	4619      	mov	r1, r3
 8005622:	4834      	ldr	r0, [pc, #208]	@ (80056f4 <BSP_CAMERA_MspInit+0x200>)
 8005624:	f006 f870 	bl	800b708 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10  | GPIO_PIN_11  |\
 8005628:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800562c:	627b      	str	r3, [r7, #36]	@ 0x24
                                  GPIO_PIN_12 | GPIO_PIN_14;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800562e:	2302      	movs	r3, #2
 8005630:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005632:	2301      	movs	r3, #1
 8005634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8005636:	2303      	movs	r3, #3
 8005638:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800563a:	230d      	movs	r3, #13
 800563c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800563e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005642:	4619      	mov	r1, r3
 8005644:	482c      	ldr	r0, [pc, #176]	@ (80056f8 <BSP_CAMERA_MspInit+0x204>)
 8005646:	f006 f85f 	bl	800b708 <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Init.Channel             = DMA_CHANNEL_1;
 800564a:	4b2c      	ldr	r3, [pc, #176]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 800564c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005650:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8005652:	4b2a      	ldr	r3, [pc, #168]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 8005654:	2200      	movs	r2, #0
 8005656:	609a      	str	r2, [r3, #8]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005658:	4b28      	ldr	r3, [pc, #160]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 800565a:	2200      	movs	r2, #0
 800565c:	60da      	str	r2, [r3, #12]
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 800565e:	4b27      	ldr	r3, [pc, #156]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 8005660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005664:	611a      	str	r2, [r3, #16]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005666:	4b25      	ldr	r3, [pc, #148]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 8005668:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800566c:	615a      	str	r2, [r3, #20]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800566e:	4b23      	ldr	r3, [pc, #140]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 8005670:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005674:	619a      	str	r2, [r3, #24]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8005676:	4b21      	ldr	r3, [pc, #132]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 8005678:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800567c:	61da      	str	r2, [r3, #28]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 800567e:	4b1f      	ldr	r3, [pc, #124]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 8005680:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005684:	621a      	str	r2, [r3, #32]
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8005686:	4b1d      	ldr	r3, [pc, #116]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 8005688:	2200      	movs	r2, #0
 800568a:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800568c:	4b1b      	ldr	r3, [pc, #108]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 800568e:	2203      	movs	r2, #3
 8005690:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005692:	4b1a      	ldr	r3, [pc, #104]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 8005694:	2200      	movs	r2, #0
 8005696:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005698:	4b18      	ldr	r3, [pc, #96]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 800569a:	2200      	movs	r2, #0
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30

  hdma_handler.Instance = DMA2_Stream1;
 800569e:	4b17      	ldr	r3, [pc, #92]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 80056a0:	4a17      	ldr	r2, [pc, #92]	@ (8005700 <BSP_CAMERA_MspInit+0x20c>)
 80056a2:	601a      	str	r2, [r3, #0]

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a15      	ldr	r2, [pc, #84]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 80056a8:	649a      	str	r2, [r3, #72]	@ 0x48
 80056aa:	4a14      	ldr	r2, [pc, #80]	@ (80056fc <BSP_CAMERA_MspInit+0x208>)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0x0F, 0);
 80056b0:	2200      	movs	r2, #0
 80056b2:	210f      	movs	r1, #15
 80056b4:	204e      	movs	r0, #78	@ 0x4e
 80056b6:	f001 ff43 	bl	8007540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);  
 80056ba:	204e      	movs	r0, #78	@ 0x4e
 80056bc:	f001 ff5c 	bl	8007578 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0x0F, 0);
 80056c0:	2200      	movs	r2, #0
 80056c2:	210f      	movs	r1, #15
 80056c4:	2039      	movs	r0, #57	@ 0x39
 80056c6:	f001 ff3b 	bl	8007540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80056ca:	2039      	movs	r0, #57	@ 0x39
 80056cc:	f001 ff54 	bl	8007578 <HAL_NVIC_EnableIRQ>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(hdcmi->DMA_Handle);  
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d4:	4618      	mov	r0, r3
 80056d6:	f002 fc27 	bl	8007f28 <HAL_DMA_Init>
}
 80056da:	bf00      	nop
 80056dc:	3738      	adds	r7, #56	@ 0x38
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40023800 	.word	0x40023800
 80056e8:	40020000 	.word	0x40020000
 80056ec:	40020c00 	.word	0x40020c00
 80056f0:	40021000 	.word	0x40021000
 80056f4:	40021800 	.word	0x40021800
 80056f8:	40021c00 	.word	0x40021c00
 80056fc:	20010dd4 	.word	0x20010dd4
 8005700:	40026428 	.word	0x40026428

08005704 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi: pointer to the DCMI handle  
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{        
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_LineEventCallback();
 800570c:	f000 f804 	bl	8005718 <BSP_CAMERA_LineEventCallback>
}
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <BSP_CAMERA_LineEventCallback>:
/**
  * @brief  Line Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <HAL_DCMI_VsyncEventCallback>:
  * @brief  VSYNC event callback
  * @param  hdcmi: pointer to the DCMI handle  
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{        
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_VsyncEventCallback();
 800572e:	f000 f804 	bl	800573a <BSP_CAMERA_VsyncEventCallback>
}
 8005732:	bf00      	nop
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <BSP_CAMERA_VsyncEventCallback>:
/**
  * @brief  VSYNC Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(void)
{
 800573a:	b480      	push	{r7}
 800573c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800573e:	bf00      	nop
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi: pointer to the DCMI handle  
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{        
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_FrameEventCallback();
 8005750:	f000 f804 	bl	800575c <BSP_CAMERA_FrameEventCallback>
}
 8005754:	bf00      	nop
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <BSP_CAMERA_FrameEventCallback>:
/**
  * @brief  Frame Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_FrameEventCallback(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi: pointer to the DCMI handle  
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{        
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_ErrorCallback();
 8005772:	f000 f804 	bl	800577e <BSP_CAMERA_ErrorCallback>
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <BSP_CAMERA_ErrorCallback>:
/**
  * @brief  Error callback.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(void)
{
 800577e:	b480      	push	{r7}
 8005780:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <DCMI_IRQHandler>:



void DCMI_IRQHandler(void)                   // DCMI
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
	HAL_DCMI_IRQHandler(&hDcmiHandler);
 8005790:	4802      	ldr	r0, [pc, #8]	@ (800579c <DCMI_IRQHandler+0x10>)
 8005792:	f002 f9ff 	bl	8007b94 <HAL_DCMI_IRQHandler>
}
 8005796:	bf00      	nop
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20010e34 	.word	0x20010e34

080057a0 <DMA2_Stream1_IRQHandler>:


void DMA2_Stream1_IRQHandler(void)           /* DMA2 Stream 1                */
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_handler);
 80057a4:	4802      	ldr	r0, [pc, #8]	@ (80057b0 <DMA2_Stream1_IRQHandler+0x10>)
 80057a6:	f002 fdbd 	bl	8008324 <HAL_DMA_IRQHandler>
}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20010dd4 	.word	0x20010dd4

080057b4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80057b8:	4b31      	ldr	r3, [pc, #196]	@ (8005880 <BSP_LCD_Init+0xcc>)
 80057ba:	2228      	movs	r2, #40	@ 0x28
 80057bc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80057be:	4b30      	ldr	r3, [pc, #192]	@ (8005880 <BSP_LCD_Init+0xcc>)
 80057c0:	2209      	movs	r2, #9
 80057c2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80057c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005880 <BSP_LCD_Init+0xcc>)
 80057c6:	2235      	movs	r2, #53	@ 0x35
 80057c8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80057ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005880 <BSP_LCD_Init+0xcc>)
 80057cc:	220b      	movs	r2, #11
 80057ce:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80057d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005880 <BSP_LCD_Init+0xcc>)
 80057d2:	f240 121b 	movw	r2, #283	@ 0x11b
 80057d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80057d8:	4b29      	ldr	r3, [pc, #164]	@ (8005880 <BSP_LCD_Init+0xcc>)
 80057da:	f240 2215 	movw	r2, #533	@ 0x215
 80057de:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80057e0:	4b27      	ldr	r3, [pc, #156]	@ (8005880 <BSP_LCD_Init+0xcc>)
 80057e2:	f240 121d 	movw	r2, #285	@ 0x11d
 80057e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80057e8:	4b25      	ldr	r3, [pc, #148]	@ (8005880 <BSP_LCD_Init+0xcc>)
 80057ea:	f240 2235 	movw	r2, #565	@ 0x235
 80057ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80057f0:	2100      	movs	r1, #0
 80057f2:	4823      	ldr	r0, [pc, #140]	@ (8005880 <BSP_LCD_Init+0xcc>)
 80057f4:	f000 fda6 	bl	8006344 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80057f8:	4b21      	ldr	r3, [pc, #132]	@ (8005880 <BSP_LCD_Init+0xcc>)
 80057fa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80057fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8005800:	4b1f      	ldr	r3, [pc, #124]	@ (8005880 <BSP_LCD_Init+0xcc>)
 8005802:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8005806:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8005808:	4b1d      	ldr	r3, [pc, #116]	@ (8005880 <BSP_LCD_Init+0xcc>)
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8005810:	4b1b      	ldr	r3, [pc, #108]	@ (8005880 <BSP_LCD_Init+0xcc>)
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8005818:	4b19      	ldr	r3, [pc, #100]	@ (8005880 <BSP_LCD_Init+0xcc>)
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005820:	4b17      	ldr	r3, [pc, #92]	@ (8005880 <BSP_LCD_Init+0xcc>)
 8005822:	2200      	movs	r2, #0
 8005824:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8005826:	4b16      	ldr	r3, [pc, #88]	@ (8005880 <BSP_LCD_Init+0xcc>)
 8005828:	2200      	movs	r2, #0
 800582a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800582c:	4b14      	ldr	r3, [pc, #80]	@ (8005880 <BSP_LCD_Init+0xcc>)
 800582e:	2200      	movs	r2, #0
 8005830:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005832:	4b13      	ldr	r3, [pc, #76]	@ (8005880 <BSP_LCD_Init+0xcc>)
 8005834:	2200      	movs	r2, #0
 8005836:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8005838:	4b11      	ldr	r3, [pc, #68]	@ (8005880 <BSP_LCD_Init+0xcc>)
 800583a:	4a12      	ldr	r2, [pc, #72]	@ (8005884 <BSP_LCD_Init+0xd0>)
 800583c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800583e:	4810      	ldr	r0, [pc, #64]	@ (8005880 <BSP_LCD_Init+0xcc>)
 8005840:	f009 fc5c 	bl	800f0fc <HAL_LTDC_GetState>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d103      	bne.n	8005852 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800584a:	2100      	movs	r1, #0
 800584c:	480c      	ldr	r0, [pc, #48]	@ (8005880 <BSP_LCD_Init+0xcc>)
 800584e:	f000 fc9f 	bl	8006190 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8005852:	480b      	ldr	r0, [pc, #44]	@ (8005880 <BSP_LCD_Init+0xcc>)
 8005854:	f009 f9c0 	bl	800ebd8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8005858:	2201      	movs	r2, #1
 800585a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800585e:	480a      	ldr	r0, [pc, #40]	@ (8005888 <BSP_LCD_Init+0xd4>)
 8005860:	f006 fa0a 	bl	800bc78 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005864:	2201      	movs	r2, #1
 8005866:	2108      	movs	r1, #8
 8005868:	4808      	ldr	r0, [pc, #32]	@ (800588c <BSP_LCD_Init+0xd8>)
 800586a:	f006 fa05 	bl	800bc78 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800586e:	f000 fe89 	bl	8006584 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8005872:	4807      	ldr	r0, [pc, #28]	@ (8005890 <BSP_LCD_Init+0xdc>)
 8005874:	f000 f96c 	bl	8005b50 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20010e90 	.word	0x20010e90
 8005884:	40016800 	.word	0x40016800
 8005888:	40022000 	.word	0x40022000
 800588c:	40022800 	.word	0x40022800
 8005890:	20010054 	.word	0x20010054

08005894 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8005898:	4b06      	ldr	r3, [pc, #24]	@ (80058b4 <BSP_LCD_GetXSize+0x20>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a06      	ldr	r2, [pc, #24]	@ (80058b8 <BSP_LCD_GetXSize+0x24>)
 800589e:	2134      	movs	r1, #52	@ 0x34
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	3360      	adds	r3, #96	@ 0x60
 80058a8:	681b      	ldr	r3, [r3, #0]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	20010f78 	.word	0x20010f78
 80058b8:	20010e90 	.word	0x20010e90

080058bc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80058c0:	4b06      	ldr	r3, [pc, #24]	@ (80058dc <BSP_LCD_GetYSize+0x20>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a06      	ldr	r2, [pc, #24]	@ (80058e0 <BSP_LCD_GetYSize+0x24>)
 80058c6:	2134      	movs	r1, #52	@ 0x34
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	4413      	add	r3, r2
 80058ce:	3364      	adds	r3, #100	@ 0x64
 80058d0:	681b      	ldr	r3, [r3, #0]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	20010f78 	.word	0x20010f78
 80058e0:	20010e90 	.word	0x20010e90

080058e4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b090      	sub	sp, #64	@ 0x40
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	6039      	str	r1, [r7, #0]
 80058ee:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80058f4:	f7ff ffce 	bl	8005894 <BSP_LCD_GetXSize>
 80058f8:	4603      	mov	r3, r0
 80058fa:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8005900:	f7ff ffdc 	bl	80058bc <BSP_LCD_GetYSize>
 8005904:	4603      	mov	r3, r0
 8005906:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8005910:	23ff      	movs	r3, #255	@ 0xff
 8005912:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800592a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800592e:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005930:	2307      	movs	r3, #7
 8005932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8005934:	f7ff ffae 	bl	8005894 <BSP_LCD_GetXSize>
 8005938:	4603      	mov	r3, r0
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800593c:	f7ff ffbe 	bl	80058bc <BSP_LCD_GetYSize>
 8005940:	4603      	mov	r3, r0
 8005942:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8005944:	88fa      	ldrh	r2, [r7, #6]
 8005946:	f107 030c 	add.w	r3, r7, #12
 800594a:	4619      	mov	r1, r3
 800594c:	4812      	ldr	r0, [pc, #72]	@ (8005998 <BSP_LCD_LayerDefaultInit+0xb4>)
 800594e:	f009 fad5 	bl	800eefc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8005952:	88fa      	ldrh	r2, [r7, #6]
 8005954:	4911      	ldr	r1, [pc, #68]	@ (800599c <BSP_LCD_LayerDefaultInit+0xb8>)
 8005956:	4613      	mov	r3, r2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	440b      	add	r3, r1
 8005960:	3304      	adds	r3, #4
 8005962:	f04f 32ff 	mov.w	r2, #4294967295
 8005966:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font16;
 8005968:	88fa      	ldrh	r2, [r7, #6]
 800596a:	490c      	ldr	r1, [pc, #48]	@ (800599c <BSP_LCD_LayerDefaultInit+0xb8>)
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	3308      	adds	r3, #8
 8005978:	4a09      	ldr	r2, [pc, #36]	@ (80059a0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800597a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800597c:	88fa      	ldrh	r2, [r7, #6]
 800597e:	4907      	ldr	r1, [pc, #28]	@ (800599c <BSP_LCD_LayerDefaultInit+0xb8>)
 8005980:	4613      	mov	r3, r2
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800598e:	601a      	str	r2, [r3, #0]
}
 8005990:	bf00      	nop
 8005992:	3740      	adds	r7, #64	@ 0x40
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20010e90 	.word	0x20010e90
 800599c:	20010f7c 	.word	0x20010f7c
 80059a0:	20010044 	.word	0x20010044

080059a4 <BSP_LCD_LayerRgb565Init>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerRgb565Init(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b090      	sub	sp, #64	@ 0x40
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	6039      	str	r1, [r7, #0]
 80059ae:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80059b4:	f7ff ff6e 	bl	8005894 <BSP_LCD_GetXSize>
 80059b8:	4603      	mov	r3, r0
 80059ba:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80059c0:	f7ff ff7c 	bl	80058bc <BSP_LCD_GetYSize>
 80059c4:	4603      	mov	r3, r0
 80059c6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80059c8:	2302      	movs	r3, #2
 80059ca:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 80059d0:	23ff      	movs	r3, #255	@ 0xff
 80059d2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80059ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80059ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80059f0:	2307      	movs	r3, #7
 80059f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80059f4:	f7ff ff4e 	bl	8005894 <BSP_LCD_GetXSize>
 80059f8:	4603      	mov	r3, r0
 80059fa:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80059fc:	f7ff ff5e 	bl	80058bc <BSP_LCD_GetYSize>
 8005a00:	4603      	mov	r3, r0
 8005a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8005a04:	88fa      	ldrh	r2, [r7, #6]
 8005a06:	f107 030c 	add.w	r3, r7, #12
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4812      	ldr	r0, [pc, #72]	@ (8005a58 <BSP_LCD_LayerRgb565Init+0xb4>)
 8005a0e:	f009 fa75 	bl	800eefc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_BLACK;
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	4911      	ldr	r1, [pc, #68]	@ (8005a5c <BSP_LCD_LayerRgb565Init+0xb8>)
 8005a16:	4613      	mov	r3, r2
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	3304      	adds	r3, #4
 8005a22:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8005a26:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font12;
 8005a28:	88fa      	ldrh	r2, [r7, #6]
 8005a2a:	490c      	ldr	r1, [pc, #48]	@ (8005a5c <BSP_LCD_LayerRgb565Init+0xb8>)
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	3308      	adds	r3, #8
 8005a38:	4a09      	ldr	r2, [pc, #36]	@ (8005a60 <BSP_LCD_LayerRgb565Init+0xbc>)
 8005a3a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_YELLOW;
 8005a3c:	88fa      	ldrh	r2, [r7, #6]
 8005a3e:	4907      	ldr	r1, [pc, #28]	@ (8005a5c <BSP_LCD_LayerRgb565Init+0xb8>)
 8005a40:	4613      	mov	r3, r2
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	f06f 02ff 	mvn.w	r2, #255	@ 0xff
 8005a4e:	601a      	str	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	3740      	adds	r7, #64	@ 0x40
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	20010e90 	.word	0x20010e90
 8005a5c:	20010f7c 	.word	0x20010f7c
 8005a60:	2001004c 	.word	0x2001004c

08005a64 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8005a6c:	4a04      	ldr	r2, [pc, #16]	@ (8005a80 <BSP_LCD_SelectLayer+0x1c>)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6013      	str	r3, [r2, #0]
} 
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20010f78 	.word	0x20010f78

08005a84 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	4619      	mov	r1, r3
 8005a96:	4803      	ldr	r0, [pc, #12]	@ (8005aa4 <BSP_LCD_SetTransparency+0x20>)
 8005a98:	f009 fafa 	bl	800f090 <HAL_LTDC_SetAlpha>
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20010e90 	.word	0x20010e90

08005aa8 <BSP_LCD_SetLayerWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
void BSP_LCD_SetLayerWindow(uint16_t LayerIndex, uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005aa8:	b590      	push	{r4, r7, lr}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	80fb      	strh	r3, [r7, #6]
 8005aba:	4603      	mov	r3, r0
 8005abc:	80bb      	strh	r3, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	807b      	strh	r3, [r7, #2]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	803b      	strh	r3, [r7, #0]
  /* Reconfigure the layer size */
  HAL_LTDC_SetWindowSize(&hLtdcHandler, Width, Height, LayerIndex);
 8005ac6:	8839      	ldrh	r1, [r7, #0]
 8005ac8:	8b3a      	ldrh	r2, [r7, #24]
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	4806      	ldr	r0, [pc, #24]	@ (8005ae8 <BSP_LCD_SetLayerWindow+0x40>)
 8005ace:	f009 fa53 	bl	800ef78 <HAL_LTDC_SetWindowSize>
  
  /* Reconfigure the layer position */
  HAL_LTDC_SetWindowPosition(&hLtdcHandler, Xpos, Ypos, LayerIndex); 
 8005ad2:	88b9      	ldrh	r1, [r7, #4]
 8005ad4:	887a      	ldrh	r2, [r7, #2]
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	4803      	ldr	r0, [pc, #12]	@ (8005ae8 <BSP_LCD_SetLayerWindow+0x40>)
 8005ada:	f009 fa93 	bl	800f004 <HAL_LTDC_SetWindowPosition>
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd90      	pop	{r4, r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20010e90 	.word	0x20010e90

08005aec <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8005af4:	4b07      	ldr	r3, [pc, #28]	@ (8005b14 <BSP_LCD_SetTextColor+0x28>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4907      	ldr	r1, [pc, #28]	@ (8005b18 <BSP_LCD_SetTextColor+0x2c>)
 8005afa:	4613      	mov	r3, r2
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	601a      	str	r2, [r3, #0]
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	20010f78 	.word	0x20010f78
 8005b18:	20010f7c 	.word	0x20010f7c

08005b1c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8005b24:	4b08      	ldr	r3, [pc, #32]	@ (8005b48 <BSP_LCD_SetBackColor+0x2c>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	4908      	ldr	r1, [pc, #32]	@ (8005b4c <BSP_LCD_SetBackColor+0x30>)
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	3304      	adds	r3, #4
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	601a      	str	r2, [r3, #0]
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	20010f78 	.word	0x20010f78
 8005b4c:	20010f7c 	.word	0x20010f7c

08005b50 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8005b58:	4b08      	ldr	r3, [pc, #32]	@ (8005b7c <BSP_LCD_SetFont+0x2c>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	4908      	ldr	r1, [pc, #32]	@ (8005b80 <BSP_LCD_SetFont+0x30>)
 8005b5e:	4613      	mov	r3, r2
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	3308      	adds	r3, #8
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	601a      	str	r2, [r3, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20010f78 	.word	0x20010f78
 8005b80:	20010f7c 	.word	0x20010f7c

08005b84 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8005b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005bcc <BSP_LCD_Clear+0x48>)
 8005b8e:	681c      	ldr	r4, [r3, #0]
 8005b90:	4b0e      	ldr	r3, [pc, #56]	@ (8005bcc <BSP_LCD_Clear+0x48>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd0 <BSP_LCD_Clear+0x4c>)
 8005b96:	2134      	movs	r1, #52	@ 0x34
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	335c      	adds	r3, #92	@ 0x5c
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461e      	mov	r6, r3
 8005ba4:	f7ff fe76 	bl	8005894 <BSP_LCD_GetXSize>
 8005ba8:	4605      	mov	r5, r0
 8005baa:	f7ff fe87 	bl	80058bc <BSP_LCD_GetYSize>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	462a      	mov	r2, r5
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f000 fc94 	bl	80064ec <LL_FillBuffer>
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bcc:	20010f78 	.word	0x20010f78
 8005bd0:	20010e90 	.word	0x20010e90

08005bd4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	80fb      	strh	r3, [r7, #6]
 8005bde:	460b      	mov	r3, r1
 8005be0:	80bb      	strh	r3, [r7, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005be6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c54 <BSP_LCD_DisplayChar+0x80>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	491b      	ldr	r1, [pc, #108]	@ (8005c58 <BSP_LCD_DisplayChar+0x84>)
 8005bec:	4613      	mov	r3, r2
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6819      	ldr	r1, [r3, #0]
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005c02:	4b14      	ldr	r3, [pc, #80]	@ (8005c54 <BSP_LCD_DisplayChar+0x80>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	4c14      	ldr	r4, [pc, #80]	@ (8005c58 <BSP_LCD_DisplayChar+0x84>)
 8005c08:	4613      	mov	r3, r2
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4423      	add	r3, r4
 8005c12:	3308      	adds	r3, #8
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005c18:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c54 <BSP_LCD_DisplayChar+0x80>)
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4c0d      	ldr	r4, [pc, #52]	@ (8005c58 <BSP_LCD_DisplayChar+0x84>)
 8005c22:	4613      	mov	r3, r2
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4423      	add	r3, r4
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	889b      	ldrh	r3, [r3, #4]
 8005c32:	3307      	adds	r3, #7
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	da00      	bge.n	8005c3a <BSP_LCD_DisplayChar+0x66>
 8005c38:	3307      	adds	r3, #7
 8005c3a:	10db      	asrs	r3, r3, #3
 8005c3c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005c40:	18ca      	adds	r2, r1, r3
 8005c42:	88b9      	ldrh	r1, [r7, #4]
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fb98 	bl	800637c <DrawChar>
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd90      	pop	{r4, r7, pc}
 8005c54:	20010f78 	.word	0x20010f78
 8005c58:	20010f7c 	.word	0x20010f7c

08005c5c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8005c5c:	b5b0      	push	{r4, r5, r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60ba      	str	r2, [r7, #8]
 8005c64:	461a      	mov	r2, r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	81fb      	strh	r3, [r7, #14]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	81bb      	strh	r3, [r7, #12]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8005c72:	2301      	movs	r3, #1
 8005c74:	83fb      	strh	r3, [r7, #30]
 8005c76:	2300      	movs	r3, #0
 8005c78:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61bb      	str	r3, [r7, #24]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8005c86:	e002      	b.n	8005c8e <BSP_LCD_DisplayStringAt+0x32>
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	617a      	str	r2, [r7, #20]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f6      	bne.n	8005c88 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8005c9a:	f7ff fdfb 	bl	8005894 <BSP_LCD_GetXSize>
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	4b50      	ldr	r3, [pc, #320]	@ (8005de4 <BSP_LCD_DisplayStringAt+0x188>)
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	4850      	ldr	r0, [pc, #320]	@ (8005de8 <BSP_LCD_DisplayStringAt+0x18c>)
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4403      	add	r3, r0
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	889b      	ldrh	r3, [r3, #4]
 8005cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cba:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d01c      	beq.n	8005cfc <BSP_LCD_DisplayStringAt+0xa0>
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	dc33      	bgt.n	8005d2e <BSP_LCD_DisplayStringAt+0xd2>
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d002      	beq.n	8005cd0 <BSP_LCD_DisplayStringAt+0x74>
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d019      	beq.n	8005d02 <BSP_LCD_DisplayStringAt+0xa6>
 8005cce:	e02e      	b.n	8005d2e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	1ad1      	subs	r1, r2, r3
 8005cd6:	4b43      	ldr	r3, [pc, #268]	@ (8005de4 <BSP_LCD_DisplayStringAt+0x188>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4843      	ldr	r0, [pc, #268]	@ (8005de8 <BSP_LCD_DisplayStringAt+0x18c>)
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4403      	add	r3, r0
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	889b      	ldrh	r3, [r3, #4]
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	89fb      	ldrh	r3, [r7, #14]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	83fb      	strh	r3, [r7, #30]
      break;
 8005cfa:	e01b      	b.n	8005d34 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8005cfc:	89fb      	ldrh	r3, [r7, #14]
 8005cfe:	83fb      	strh	r3, [r7, #30]
      break;
 8005d00:	e018      	b.n	8005d34 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	b299      	uxth	r1, r3
 8005d0a:	4b36      	ldr	r3, [pc, #216]	@ (8005de4 <BSP_LCD_DisplayStringAt+0x188>)
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	4836      	ldr	r0, [pc, #216]	@ (8005de8 <BSP_LCD_DisplayStringAt+0x18c>)
 8005d10:	4613      	mov	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4403      	add	r3, r0
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	889b      	ldrh	r3, [r3, #4]
 8005d20:	fb11 f303 	smulbb	r3, r1, r3
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	89fb      	ldrh	r3, [r7, #14]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	83fb      	strh	r3, [r7, #30]
      break;
 8005d2c:	e002      	b.n	8005d34 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8005d2e:	89fb      	ldrh	r3, [r7, #14]
 8005d30:	83fb      	strh	r3, [r7, #30]
      break;
 8005d32:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8005d34:	8bfb      	ldrh	r3, [r7, #30]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <BSP_LCD_DisplayStringAt+0xe6>
 8005d3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	da1d      	bge.n	8005d7e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8005d42:	2301      	movs	r3, #1
 8005d44:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005d46:	e01a      	b.n	8005d7e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	781a      	ldrb	r2, [r3, #0]
 8005d4c:	89b9      	ldrh	r1, [r7, #12]
 8005d4e:	8bfb      	ldrh	r3, [r7, #30]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff ff3f 	bl	8005bd4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8005d56:	4b23      	ldr	r3, [pc, #140]	@ (8005de4 <BSP_LCD_DisplayStringAt+0x188>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4923      	ldr	r1, [pc, #140]	@ (8005de8 <BSP_LCD_DisplayStringAt+0x18c>)
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	3308      	adds	r3, #8
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	889a      	ldrh	r2, [r3, #4]
 8005d6c:	8bfb      	ldrh	r3, [r7, #30]
 8005d6e:	4413      	add	r3, r2
 8005d70:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60bb      	str	r3, [r7, #8]
    i++;
 8005d78:	8bbb      	ldrh	r3, [r7, #28]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	bf14      	ite	ne
 8005d86:	2301      	movne	r3, #1
 8005d88:	2300      	moveq	r3, #0
 8005d8a:	b2dc      	uxtb	r4, r3
 8005d8c:	f7ff fd82 	bl	8005894 <BSP_LCD_GetXSize>
 8005d90:	8bb9      	ldrh	r1, [r7, #28]
 8005d92:	4b14      	ldr	r3, [pc, #80]	@ (8005de4 <BSP_LCD_DisplayStringAt+0x188>)
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4d14      	ldr	r5, [pc, #80]	@ (8005de8 <BSP_LCD_DisplayStringAt+0x18c>)
 8005d98:	4613      	mov	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	442b      	add	r3, r5
 8005da2:	3308      	adds	r3, #8
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	889b      	ldrh	r3, [r3, #4]
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	1ac3      	subs	r3, r0, r3
 8005dae:	b299      	uxth	r1, r3
 8005db0:	4b0c      	ldr	r3, [pc, #48]	@ (8005de4 <BSP_LCD_DisplayStringAt+0x188>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	480c      	ldr	r0, [pc, #48]	@ (8005de8 <BSP_LCD_DisplayStringAt+0x18c>)
 8005db6:	4613      	mov	r3, r2
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4403      	add	r3, r0
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	889b      	ldrh	r3, [r3, #4]
 8005dc6:	4299      	cmp	r1, r3
 8005dc8:	bf2c      	ite	cs
 8005dca:	2301      	movcs	r3, #1
 8005dcc:	2300      	movcc	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	4023      	ands	r3, r4
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1b7      	bne.n	8005d48 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8005dd8:	bf00      	nop
 8005dda:	bf00      	nop
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bdb0      	pop	{r4, r5, r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20010f78 	.word	0x20010f78
 8005de8:	20010f7c 	.word	0x20010f7c

08005dec <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005dec:	b5b0      	push	{r4, r5, r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	4603      	mov	r3, r0
 8005df4:	80fb      	strh	r3, [r7, #6]
 8005df6:	460b      	mov	r3, r1
 8005df8:	80bb      	strh	r3, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005e02:	4b26      	ldr	r3, [pc, #152]	@ (8005e9c <BSP_LCD_DrawHLine+0xb0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a26      	ldr	r2, [pc, #152]	@ (8005ea0 <BSP_LCD_DrawHLine+0xb4>)
 8005e08:	2134      	movs	r1, #52	@ 0x34
 8005e0a:	fb01 f303 	mul.w	r3, r1, r3
 8005e0e:	4413      	add	r3, r2
 8005e10:	3348      	adds	r3, #72	@ 0x48
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d114      	bne.n	8005e42 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005e18:	4b20      	ldr	r3, [pc, #128]	@ (8005e9c <BSP_LCD_DrawHLine+0xb0>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a20      	ldr	r2, [pc, #128]	@ (8005ea0 <BSP_LCD_DrawHLine+0xb4>)
 8005e1e:	2134      	movs	r1, #52	@ 0x34
 8005e20:	fb01 f303 	mul.w	r3, r1, r3
 8005e24:	4413      	add	r3, r2
 8005e26:	335c      	adds	r3, #92	@ 0x5c
 8005e28:	681c      	ldr	r4, [r3, #0]
 8005e2a:	f7ff fd33 	bl	8005894 <BSP_LCD_GetXSize>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	88bb      	ldrh	r3, [r7, #4]
 8005e32:	fb03 f202 	mul.w	r2, r3, r2
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	4413      	add	r3, r2
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	4423      	add	r3, r4
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	e013      	b.n	8005e6a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005e42:	4b16      	ldr	r3, [pc, #88]	@ (8005e9c <BSP_LCD_DrawHLine+0xb0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a16      	ldr	r2, [pc, #88]	@ (8005ea0 <BSP_LCD_DrawHLine+0xb4>)
 8005e48:	2134      	movs	r1, #52	@ 0x34
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	335c      	adds	r3, #92	@ 0x5c
 8005e52:	681c      	ldr	r4, [r3, #0]
 8005e54:	f7ff fd1e 	bl	8005894 <BSP_LCD_GetXSize>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	88bb      	ldrh	r3, [r7, #4]
 8005e5c:	fb03 f202 	mul.w	r2, r3, r2
 8005e60:	88fb      	ldrh	r3, [r7, #6]
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4423      	add	r3, r4
 8005e68:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e9c <BSP_LCD_DrawHLine+0xb0>)
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	887c      	ldrh	r4, [r7, #2]
 8005e72:	4b0a      	ldr	r3, [pc, #40]	@ (8005e9c <BSP_LCD_DrawHLine+0xb0>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4d0b      	ldr	r5, [pc, #44]	@ (8005ea4 <BSP_LCD_DrawHLine+0xb8>)
 8005e78:	4613      	mov	r3, r2
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	442b      	add	r3, r5
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	2300      	movs	r3, #0
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	f000 fb2d 	bl	80064ec <LL_FillBuffer>
}
 8005e92:	bf00      	nop
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bdb0      	pop	{r4, r5, r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20010f78 	.word	0x20010f78
 8005ea0:	20010e90 	.word	0x20010e90
 8005ea4:	20010f7c 	.word	0x20010f7c

08005ea8 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	4603      	mov	r3, r0
 8005eb0:	80fb      	strh	r3, [r7, #6]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	80bb      	strh	r3, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005ebe:	4b28      	ldr	r3, [pc, #160]	@ (8005f60 <BSP_LCD_DrawVLine+0xb8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a28      	ldr	r2, [pc, #160]	@ (8005f64 <BSP_LCD_DrawVLine+0xbc>)
 8005ec4:	2134      	movs	r1, #52	@ 0x34
 8005ec6:	fb01 f303 	mul.w	r3, r1, r3
 8005eca:	4413      	add	r3, r2
 8005ecc:	3348      	adds	r3, #72	@ 0x48
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d114      	bne.n	8005efe <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005ed4:	4b22      	ldr	r3, [pc, #136]	@ (8005f60 <BSP_LCD_DrawVLine+0xb8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a22      	ldr	r2, [pc, #136]	@ (8005f64 <BSP_LCD_DrawVLine+0xbc>)
 8005eda:	2134      	movs	r1, #52	@ 0x34
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	335c      	adds	r3, #92	@ 0x5c
 8005ee4:	681c      	ldr	r4, [r3, #0]
 8005ee6:	f7ff fcd5 	bl	8005894 <BSP_LCD_GetXSize>
 8005eea:	4602      	mov	r2, r0
 8005eec:	88bb      	ldrh	r3, [r7, #4]
 8005eee:	fb03 f202 	mul.w	r2, r3, r2
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	4423      	add	r3, r4
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	e013      	b.n	8005f26 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005efe:	4b18      	ldr	r3, [pc, #96]	@ (8005f60 <BSP_LCD_DrawVLine+0xb8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a18      	ldr	r2, [pc, #96]	@ (8005f64 <BSP_LCD_DrawVLine+0xbc>)
 8005f04:	2134      	movs	r1, #52	@ 0x34
 8005f06:	fb01 f303 	mul.w	r3, r1, r3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	335c      	adds	r3, #92	@ 0x5c
 8005f0e:	681c      	ldr	r4, [r3, #0]
 8005f10:	f7ff fcc0 	bl	8005894 <BSP_LCD_GetXSize>
 8005f14:	4602      	mov	r2, r0
 8005f16:	88bb      	ldrh	r3, [r7, #4]
 8005f18:	fb03 f202 	mul.w	r2, r3, r2
 8005f1c:	88fb      	ldrh	r3, [r7, #6]
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4423      	add	r3, r4
 8005f24:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8005f26:	4b0e      	ldr	r3, [pc, #56]	@ (8005f60 <BSP_LCD_DrawVLine+0xb8>)
 8005f28:	681c      	ldr	r4, [r3, #0]
 8005f2a:	68fd      	ldr	r5, [r7, #12]
 8005f2c:	887e      	ldrh	r6, [r7, #2]
 8005f2e:	f7ff fcb1 	bl	8005894 <BSP_LCD_GetXSize>
 8005f32:	4603      	mov	r3, r0
 8005f34:	1e59      	subs	r1, r3, #1
 8005f36:	4b0a      	ldr	r3, [pc, #40]	@ (8005f60 <BSP_LCD_DrawVLine+0xb8>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	480b      	ldr	r0, [pc, #44]	@ (8005f68 <BSP_LCD_DrawVLine+0xc0>)
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4403      	add	r3, r0
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	9100      	str	r1, [sp, #0]
 8005f4c:	4633      	mov	r3, r6
 8005f4e:	2201      	movs	r2, #1
 8005f50:	4629      	mov	r1, r5
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 faca 	bl	80064ec <LL_FillBuffer>
}
 8005f58:	bf00      	nop
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f60:	20010f78 	.word	0x20010f78
 8005f64:	20010e90 	.word	0x20010e90
 8005f68:	20010f7c 	.word	0x20010f7c

08005f6c <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4623      	mov	r3, r4
 8005f7c:	80fb      	strh	r3, [r7, #6]
 8005f7e:	4603      	mov	r3, r0
 8005f80:	80bb      	strh	r3, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	807b      	strh	r3, [r7, #2]
 8005f86:	4613      	mov	r3, r2
 8005f88:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8005f8a:	887a      	ldrh	r2, [r7, #2]
 8005f8c:	88b9      	ldrh	r1, [r7, #4]
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff ff2b 	bl	8005dec <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8005f96:	88ba      	ldrh	r2, [r7, #4]
 8005f98:	883b      	ldrh	r3, [r7, #0]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	b299      	uxth	r1, r3
 8005f9e:	887a      	ldrh	r2, [r7, #2]
 8005fa0:	88fb      	ldrh	r3, [r7, #6]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff ff22 	bl	8005dec <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8005fa8:	883a      	ldrh	r2, [r7, #0]
 8005faa:	88b9      	ldrh	r1, [r7, #4]
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff ff7a 	bl	8005ea8 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8005fb4:	88fa      	ldrh	r2, [r7, #6]
 8005fb6:	887b      	ldrh	r3, [r7, #2]
 8005fb8:	4413      	add	r3, r2
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	883a      	ldrh	r2, [r7, #0]
 8005fbe:	88b9      	ldrh	r1, [r7, #4]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff ff71 	bl	8005ea8 <BSP_LCD_DrawVLine>
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd90      	pop	{r4, r7, pc}
	...

08005fd0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8005fd0:	b5b0      	push	{r4, r5, r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	603a      	str	r2, [r7, #0]
 8005fda:	80fb      	strh	r3, [r7, #6]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8006058 <BSP_LCD_DrawPixel+0x88>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800605c <BSP_LCD_DrawPixel+0x8c>)
 8005fe6:	2134      	movs	r1, #52	@ 0x34
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	4413      	add	r3, r2
 8005fee:	3348      	adds	r3, #72	@ 0x48
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d116      	bne.n	8006024 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8005ff6:	4b18      	ldr	r3, [pc, #96]	@ (8006058 <BSP_LCD_DrawPixel+0x88>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a18      	ldr	r2, [pc, #96]	@ (800605c <BSP_LCD_DrawPixel+0x8c>)
 8005ffc:	2134      	movs	r1, #52	@ 0x34
 8005ffe:	fb01 f303 	mul.w	r3, r1, r3
 8006002:	4413      	add	r3, r2
 8006004:	335c      	adds	r3, #92	@ 0x5c
 8006006:	681c      	ldr	r4, [r3, #0]
 8006008:	88bd      	ldrh	r5, [r7, #4]
 800600a:	f7ff fc43 	bl	8005894 <BSP_LCD_GetXSize>
 800600e:	4603      	mov	r3, r0
 8006010:	fb03 f205 	mul.w	r2, r3, r5
 8006014:	88fb      	ldrh	r3, [r7, #6]
 8006016:	4413      	add	r3, r2
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4423      	add	r3, r4
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	b292      	uxth	r2, r2
 8006020:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8006022:	e015      	b.n	8006050 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8006024:	4b0c      	ldr	r3, [pc, #48]	@ (8006058 <BSP_LCD_DrawPixel+0x88>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0c      	ldr	r2, [pc, #48]	@ (800605c <BSP_LCD_DrawPixel+0x8c>)
 800602a:	2134      	movs	r1, #52	@ 0x34
 800602c:	fb01 f303 	mul.w	r3, r1, r3
 8006030:	4413      	add	r3, r2
 8006032:	335c      	adds	r3, #92	@ 0x5c
 8006034:	681c      	ldr	r4, [r3, #0]
 8006036:	88bd      	ldrh	r5, [r7, #4]
 8006038:	f7ff fc2c 	bl	8005894 <BSP_LCD_GetXSize>
 800603c:	4603      	mov	r3, r0
 800603e:	fb03 f205 	mul.w	r2, r3, r5
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4423      	add	r3, r4
 800604a:	461a      	mov	r2, r3
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	6013      	str	r3, [r2, #0]
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bdb0      	pop	{r4, r5, r7, pc}
 8006058:	20010f78 	.word	0x20010f78
 800605c:	20010e90 	.word	0x20010e90

08006060 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8006060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006064:	b086      	sub	sp, #24
 8006066:	af02      	add	r7, sp, #8
 8006068:	4604      	mov	r4, r0
 800606a:	4608      	mov	r0, r1
 800606c:	4611      	mov	r1, r2
 800606e:	461a      	mov	r2, r3
 8006070:	4623      	mov	r3, r4
 8006072:	80fb      	strh	r3, [r7, #6]
 8006074:	4603      	mov	r3, r0
 8006076:	80bb      	strh	r3, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	807b      	strh	r3, [r7, #2]
 800607c:	4613      	mov	r3, r2
 800607e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006084:	4b30      	ldr	r3, [pc, #192]	@ (8006148 <BSP_LCD_FillRect+0xe8>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4930      	ldr	r1, [pc, #192]	@ (800614c <BSP_LCD_FillRect+0xec>)
 800608a:	4613      	mov	r3, r2
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff fd28 	bl	8005aec <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800609c:	4b2a      	ldr	r3, [pc, #168]	@ (8006148 <BSP_LCD_FillRect+0xe8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006150 <BSP_LCD_FillRect+0xf0>)
 80060a2:	2134      	movs	r1, #52	@ 0x34
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	4413      	add	r3, r2
 80060aa:	3348      	adds	r3, #72	@ 0x48
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d114      	bne.n	80060dc <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80060b2:	4b25      	ldr	r3, [pc, #148]	@ (8006148 <BSP_LCD_FillRect+0xe8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a26      	ldr	r2, [pc, #152]	@ (8006150 <BSP_LCD_FillRect+0xf0>)
 80060b8:	2134      	movs	r1, #52	@ 0x34
 80060ba:	fb01 f303 	mul.w	r3, r1, r3
 80060be:	4413      	add	r3, r2
 80060c0:	335c      	adds	r3, #92	@ 0x5c
 80060c2:	681c      	ldr	r4, [r3, #0]
 80060c4:	f7ff fbe6 	bl	8005894 <BSP_LCD_GetXSize>
 80060c8:	4602      	mov	r2, r0
 80060ca:	88bb      	ldrh	r3, [r7, #4]
 80060cc:	fb03 f202 	mul.w	r2, r3, r2
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	4413      	add	r3, r2
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	4423      	add	r3, r4
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	e013      	b.n	8006104 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80060dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006148 <BSP_LCD_FillRect+0xe8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006150 <BSP_LCD_FillRect+0xf0>)
 80060e2:	2134      	movs	r1, #52	@ 0x34
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	4413      	add	r3, r2
 80060ea:	335c      	adds	r3, #92	@ 0x5c
 80060ec:	681c      	ldr	r4, [r3, #0]
 80060ee:	f7ff fbd1 	bl	8005894 <BSP_LCD_GetXSize>
 80060f2:	4602      	mov	r2, r0
 80060f4:	88bb      	ldrh	r3, [r7, #4]
 80060f6:	fb03 f202 	mul.w	r2, r3, r2
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4423      	add	r3, r4
 8006102:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8006104:	4b10      	ldr	r3, [pc, #64]	@ (8006148 <BSP_LCD_FillRect+0xe8>)
 8006106:	681c      	ldr	r4, [r3, #0]
 8006108:	68fd      	ldr	r5, [r7, #12]
 800610a:	887e      	ldrh	r6, [r7, #2]
 800610c:	f8b7 8000 	ldrh.w	r8, [r7]
 8006110:	f7ff fbc0 	bl	8005894 <BSP_LCD_GetXSize>
 8006114:	4602      	mov	r2, r0
 8006116:	887b      	ldrh	r3, [r7, #2]
 8006118:	1ad1      	subs	r1, r2, r3
 800611a:	4b0b      	ldr	r3, [pc, #44]	@ (8006148 <BSP_LCD_FillRect+0xe8>)
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	480b      	ldr	r0, [pc, #44]	@ (800614c <BSP_LCD_FillRect+0xec>)
 8006120:	4613      	mov	r3, r2
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4403      	add	r3, r0
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	9100      	str	r1, [sp, #0]
 8006130:	4643      	mov	r3, r8
 8006132:	4632      	mov	r2, r6
 8006134:	4629      	mov	r1, r5
 8006136:	4620      	mov	r0, r4
 8006138:	f000 f9d8 	bl	80064ec <LL_FillBuffer>
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006146:	bf00      	nop
 8006148:	20010f78 	.word	0x20010f78
 800614c:	20010f7c 	.word	0x20010f7c
 8006150:	20010e90 	.word	0x20010e90

08006154 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8006158:	4b0a      	ldr	r3, [pc, #40]	@ (8006184 <BSP_LCD_DisplayOn+0x30>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	4b09      	ldr	r3, [pc, #36]	@ (8006184 <BSP_LCD_DisplayOn+0x30>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8006168:	2201      	movs	r2, #1
 800616a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800616e:	4806      	ldr	r0, [pc, #24]	@ (8006188 <BSP_LCD_DisplayOn+0x34>)
 8006170:	f005 fd82 	bl	800bc78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8006174:	2201      	movs	r2, #1
 8006176:	2108      	movs	r1, #8
 8006178:	4804      	ldr	r0, [pc, #16]	@ (800618c <BSP_LCD_DisplayOn+0x38>)
 800617a:	f005 fd7d 	bl	800bc78 <HAL_GPIO_WritePin>
}
 800617e:	bf00      	nop
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20010e90 	.word	0x20010e90
 8006188:	40022000 	.word	0x40022000
 800618c:	40022800 	.word	0x40022800

08006190 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b090      	sub	sp, #64	@ 0x40
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800619a:	4b64      	ldr	r3, [pc, #400]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 800619c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619e:	4a63      	ldr	r2, [pc, #396]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 80061a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80061a6:	4b61      	ldr	r3, [pc, #388]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 80061a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80061b2:	4b5e      	ldr	r3, [pc, #376]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 80061b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b6:	4a5d      	ldr	r2, [pc, #372]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 80061b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80061be:	4b5b      	ldr	r3, [pc, #364]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80061ca:	4b58      	ldr	r3, [pc, #352]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ce:	4a57      	ldr	r2, [pc, #348]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 80061d0:	f043 0310 	orr.w	r3, r3, #16
 80061d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80061d6:	4b55      	ldr	r3, [pc, #340]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	623b      	str	r3, [r7, #32]
 80061e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80061e2:	4b52      	ldr	r3, [pc, #328]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 80061e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e6:	4a51      	ldr	r2, [pc, #324]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 80061e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80061ee:	4b4f      	ldr	r3, [pc, #316]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f6:	61fb      	str	r3, [r7, #28]
 80061f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80061fa:	4b4c      	ldr	r3, [pc, #304]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fe:	4a4b      	ldr	r2, [pc, #300]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 8006200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006204:	6313      	str	r3, [r2, #48]	@ 0x30
 8006206:	4b49      	ldr	r3, [pc, #292]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800620e:	61bb      	str	r3, [r7, #24]
 8006210:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006212:	4b46      	ldr	r3, [pc, #280]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006216:	4a45      	ldr	r2, [pc, #276]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 8006218:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800621c:	6313      	str	r3, [r2, #48]	@ 0x30
 800621e:	4b43      	ldr	r3, [pc, #268]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800622a:	4b40      	ldr	r3, [pc, #256]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 800622c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800622e:	4a3f      	ldr	r2, [pc, #252]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 8006230:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006234:	6313      	str	r3, [r2, #48]	@ 0x30
 8006236:	4b3d      	ldr	r3, [pc, #244]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8006242:	4b3a      	ldr	r3, [pc, #232]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 8006244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006246:	4a39      	ldr	r2, [pc, #228]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 8006248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800624c:	6313      	str	r3, [r2, #48]	@ 0x30
 800624e:	4b37      	ldr	r3, [pc, #220]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800625a:	4b34      	ldr	r3, [pc, #208]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 800625c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625e:	4a33      	ldr	r2, [pc, #204]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 8006260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006264:	6313      	str	r3, [r2, #48]	@ 0x30
 8006266:	4b31      	ldr	r3, [pc, #196]	@ (800632c <BSP_LCD_MspInit+0x19c>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800626e:	60bb      	str	r3, [r7, #8]
 8006270:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8006272:	2310      	movs	r3, #16
 8006274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006276:	2302      	movs	r3, #2
 8006278:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800627a:	2300      	movs	r3, #0
 800627c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800627e:	2302      	movs	r3, #2
 8006280:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8006282:	230e      	movs	r3, #14
 8006284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006286:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800628a:	4619      	mov	r1, r3
 800628c:	4828      	ldr	r0, [pc, #160]	@ (8006330 <BSP_LCD_MspInit+0x1a0>)
 800628e:	f005 fa3b 	bl	800b708 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8006292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006298:	2302      	movs	r3, #2
 800629a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800629c:	2309      	movs	r3, #9
 800629e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80062a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80062a4:	4619      	mov	r1, r3
 80062a6:	4823      	ldr	r0, [pc, #140]	@ (8006334 <BSP_LCD_MspInit+0x1a4>)
 80062a8:	f005 fa2e 	bl	800b708 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 80062ac:	f44f 4367 	mov.w	r3, #59136	@ 0xe700
 80062b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80062b2:	2302      	movs	r3, #2
 80062b4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80062b6:	230e      	movs	r3, #14
 80062b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80062ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80062be:	4619      	mov	r1, r3
 80062c0:	481d      	ldr	r0, [pc, #116]	@ (8006338 <BSP_LCD_MspInit+0x1a8>)
 80062c2:	f005 fa21 	bl	800b708 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80062c6:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80062ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80062cc:	2302      	movs	r3, #2
 80062ce:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80062d0:	230e      	movs	r3, #14
 80062d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80062d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80062d8:	4619      	mov	r1, r3
 80062da:	4818      	ldr	r0, [pc, #96]	@ (800633c <BSP_LCD_MspInit+0x1ac>)
 80062dc:	f005 fa14 	bl	800b708 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80062e0:	23f7      	movs	r3, #247	@ 0xf7
 80062e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80062e4:	2302      	movs	r3, #2
 80062e6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80062e8:	230e      	movs	r3, #14
 80062ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80062ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80062f0:	4619      	mov	r1, r3
 80062f2:	4813      	ldr	r0, [pc, #76]	@ (8006340 <BSP_LCD_MspInit+0x1b0>)
 80062f4:	f005 fa08 	bl	800b708 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80062f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80062fe:	2301      	movs	r3, #1
 8006300:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006302:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006306:	4619      	mov	r1, r3
 8006308:	480b      	ldr	r0, [pc, #44]	@ (8006338 <BSP_LCD_MspInit+0x1a8>)
 800630a:	f005 f9fd 	bl	800b708 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800630e:	2308      	movs	r3, #8
 8006310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006312:	2301      	movs	r3, #1
 8006314:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006316:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800631a:	4619      	mov	r1, r3
 800631c:	4808      	ldr	r0, [pc, #32]	@ (8006340 <BSP_LCD_MspInit+0x1b0>)
 800631e:	f005 f9f3 	bl	800b708 <HAL_GPIO_Init>
}
 8006322:	bf00      	nop
 8006324:	3740      	adds	r7, #64	@ 0x40
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40023800 	.word	0x40023800
 8006330:	40021000 	.word	0x40021000
 8006334:	40021800 	.word	0x40021800
 8006338:	40022000 	.word	0x40022000
 800633c:	40022400 	.word	0x40022400
 8006340:	40022800 	.word	0x40022800

08006344 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800634e:	4b0a      	ldr	r3, [pc, #40]	@ (8006378 <BSP_LCD_ClockConfig+0x34>)
 8006350:	2208      	movs	r2, #8
 8006352:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8006354:	4b08      	ldr	r3, [pc, #32]	@ (8006378 <BSP_LCD_ClockConfig+0x34>)
 8006356:	22c0      	movs	r2, #192	@ 0xc0
 8006358:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800635a:	4b07      	ldr	r3, [pc, #28]	@ (8006378 <BSP_LCD_ClockConfig+0x34>)
 800635c:	2205      	movs	r2, #5
 800635e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006360:	4b05      	ldr	r3, [pc, #20]	@ (8006378 <BSP_LCD_ClockConfig+0x34>)
 8006362:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006366:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8006368:	4803      	ldr	r0, [pc, #12]	@ (8006378 <BSP_LCD_ClockConfig+0x34>)
 800636a:	f009 fe4d 	bl	8010008 <HAL_RCCEx_PeriphCLKConfig>
}
 800636e:	bf00      	nop
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20010f94 	.word	0x20010f94

0800637c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	603a      	str	r2, [r7, #0]
 8006386:	80fb      	strh	r3, [r7, #6]
 8006388:	460b      	mov	r3, r1
 800638a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800638c:	2300      	movs	r3, #0
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8006394:	4b53      	ldr	r3, [pc, #332]	@ (80064e4 <DrawChar+0x168>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4953      	ldr	r1, [pc, #332]	@ (80064e8 <DrawChar+0x16c>)
 800639a:	4613      	mov	r3, r2
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	4413      	add	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	440b      	add	r3, r1
 80063a4:	3308      	adds	r3, #8
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	88db      	ldrh	r3, [r3, #6]
 80063aa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80063ac:	4b4d      	ldr	r3, [pc, #308]	@ (80064e4 <DrawChar+0x168>)
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	494d      	ldr	r1, [pc, #308]	@ (80064e8 <DrawChar+0x16c>)
 80063b2:	4613      	mov	r3, r2
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	440b      	add	r3, r1
 80063bc:	3308      	adds	r3, #8
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	889b      	ldrh	r3, [r3, #4]
 80063c2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80063c4:	8a3b      	ldrh	r3, [r7, #16]
 80063c6:	3307      	adds	r3, #7
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	da00      	bge.n	80063ce <DrawChar+0x52>
 80063cc:	3307      	adds	r3, #7
 80063ce:	10db      	asrs	r3, r3, #3
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	8a3b      	ldrh	r3, [r7, #16]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
 80063e2:	e076      	b.n	80064d2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80063e4:	8a3b      	ldrh	r3, [r7, #16]
 80063e6:	3307      	adds	r3, #7
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	da00      	bge.n	80063ee <DrawChar+0x72>
 80063ec:	3307      	adds	r3, #7
 80063ee:	10db      	asrs	r3, r3, #3
 80063f0:	461a      	mov	r2, r3
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	fb02 f303 	mul.w	r3, r2, r3
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	4413      	add	r3, r2
 80063fc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80063fe:	8a3b      	ldrh	r3, [r7, #16]
 8006400:	3307      	adds	r3, #7
 8006402:	2b00      	cmp	r3, #0
 8006404:	da00      	bge.n	8006408 <DrawChar+0x8c>
 8006406:	3307      	adds	r3, #7
 8006408:	10db      	asrs	r3, r3, #3
 800640a:	2b01      	cmp	r3, #1
 800640c:	d002      	beq.n	8006414 <DrawChar+0x98>
 800640e:	2b02      	cmp	r3, #2
 8006410:	d004      	beq.n	800641c <DrawChar+0xa0>
 8006412:	e00c      	b.n	800642e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	617b      	str	r3, [r7, #20]
      break;
 800641a:	e016      	b.n	800644a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	3201      	adds	r2, #1
 8006426:	7812      	ldrb	r2, [r2, #0]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
      break;
 800642c:	e00d      	b.n	800644a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	041a      	lsls	r2, r3, #16
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	3301      	adds	r3, #1
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	021b      	lsls	r3, r3, #8
 800643c:	4313      	orrs	r3, r2
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	3202      	adds	r2, #2
 8006442:	7812      	ldrb	r2, [r2, #0]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]
      break;
 8006448:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	e036      	b.n	80064be <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8006450:	8a3a      	ldrh	r2, [r7, #16]
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	1ad2      	subs	r2, r2, r3
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	4413      	add	r3, r2
 800645a:	3b01      	subs	r3, #1
 800645c:	2201      	movs	r2, #1
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	461a      	mov	r2, r3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4013      	ands	r3, r2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d012      	beq.n	8006492 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	b29a      	uxth	r2, r3
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	4413      	add	r3, r2
 8006474:	b298      	uxth	r0, r3
 8006476:	4b1b      	ldr	r3, [pc, #108]	@ (80064e4 <DrawChar+0x168>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	491b      	ldr	r1, [pc, #108]	@ (80064e8 <DrawChar+0x16c>)
 800647c:	4613      	mov	r3, r2
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	440b      	add	r3, r1
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	88bb      	ldrh	r3, [r7, #4]
 800648a:	4619      	mov	r1, r3
 800648c:	f7ff fda0 	bl	8005fd0 <BSP_LCD_DrawPixel>
 8006490:	e012      	b.n	80064b8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	b29a      	uxth	r2, r3
 8006496:	88fb      	ldrh	r3, [r7, #6]
 8006498:	4413      	add	r3, r2
 800649a:	b298      	uxth	r0, r3
 800649c:	4b11      	ldr	r3, [pc, #68]	@ (80064e4 <DrawChar+0x168>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4911      	ldr	r1, [pc, #68]	@ (80064e8 <DrawChar+0x16c>)
 80064a2:	4613      	mov	r3, r2
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	440b      	add	r3, r1
 80064ac:	3304      	adds	r3, #4
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	88bb      	ldrh	r3, [r7, #4]
 80064b2:	4619      	mov	r1, r3
 80064b4:	f7ff fd8c 	bl	8005fd0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	3301      	adds	r3, #1
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	8a3b      	ldrh	r3, [r7, #16]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d3c4      	bcc.n	8006450 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80064c6:	88bb      	ldrh	r3, [r7, #4]
 80064c8:	3301      	adds	r3, #1
 80064ca:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	3301      	adds	r3, #1
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	8a7b      	ldrh	r3, [r7, #18]
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d384      	bcc.n	80063e4 <DrawChar+0x68>
  }
}
 80064da:	bf00      	nop
 80064dc:	bf00      	nop
 80064de:	3720      	adds	r7, #32
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20010f78 	.word	0x20010f78
 80064e8:	20010f7c 	.word	0x20010f7c

080064ec <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80064fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006574 <LL_FillBuffer+0x88>)
 80064fc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006500:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006502:	4b1d      	ldr	r3, [pc, #116]	@ (8006578 <LL_FillBuffer+0x8c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1d      	ldr	r2, [pc, #116]	@ (800657c <LL_FillBuffer+0x90>)
 8006508:	2134      	movs	r1, #52	@ 0x34
 800650a:	fb01 f303 	mul.w	r3, r1, r3
 800650e:	4413      	add	r3, r2
 8006510:	3348      	adds	r3, #72	@ 0x48
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d103      	bne.n	8006520 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8006518:	4b16      	ldr	r3, [pc, #88]	@ (8006574 <LL_FillBuffer+0x88>)
 800651a:	2202      	movs	r2, #2
 800651c:	609a      	str	r2, [r3, #8]
 800651e:	e002      	b.n	8006526 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8006520:	4b14      	ldr	r3, [pc, #80]	@ (8006574 <LL_FillBuffer+0x88>)
 8006522:	2200      	movs	r2, #0
 8006524:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8006526:	4a13      	ldr	r2, [pc, #76]	@ (8006574 <LL_FillBuffer+0x88>)
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800652c:	4b11      	ldr	r3, [pc, #68]	@ (8006574 <LL_FillBuffer+0x88>)
 800652e:	4a14      	ldr	r2, [pc, #80]	@ (8006580 <LL_FillBuffer+0x94>)
 8006530:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8006532:	4810      	ldr	r0, [pc, #64]	@ (8006574 <LL_FillBuffer+0x88>)
 8006534:	f002 f96e 	bl	8008814 <HAL_DMA2D_Init>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d115      	bne.n	800656a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	480c      	ldr	r0, [pc, #48]	@ (8006574 <LL_FillBuffer+0x88>)
 8006542:	f002 fbd5 	bl	8008cf0 <HAL_DMA2D_ConfigLayer>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10e      	bne.n	800656a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69f9      	ldr	r1, [r7, #28]
 8006556:	4807      	ldr	r0, [pc, #28]	@ (8006574 <LL_FillBuffer+0x88>)
 8006558:	f002 f9a6 	bl	80088a8 <HAL_DMA2D_Start>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8006562:	210a      	movs	r1, #10
 8006564:	4803      	ldr	r0, [pc, #12]	@ (8006574 <LL_FillBuffer+0x88>)
 8006566:	f002 f9ca 	bl	80088fe <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20010f38 	.word	0x20010f38
 8006578:	20010f78 	.word	0x20010f78
 800657c:	20010e90 	.word	0x20010e90
 8006580:	4002b000 	.word	0x4002b000

08006584 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006588:	4b29      	ldr	r3, [pc, #164]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 800658a:	4a2a      	ldr	r2, [pc, #168]	@ (8006634 <BSP_SDRAM_Init+0xb0>)
 800658c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800658e:	4b2a      	ldr	r3, [pc, #168]	@ (8006638 <BSP_SDRAM_Init+0xb4>)
 8006590:	2202      	movs	r2, #2
 8006592:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8006594:	4b28      	ldr	r3, [pc, #160]	@ (8006638 <BSP_SDRAM_Init+0xb4>)
 8006596:	2207      	movs	r2, #7
 8006598:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800659a:	4b27      	ldr	r3, [pc, #156]	@ (8006638 <BSP_SDRAM_Init+0xb4>)
 800659c:	2204      	movs	r2, #4
 800659e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80065a0:	4b25      	ldr	r3, [pc, #148]	@ (8006638 <BSP_SDRAM_Init+0xb4>)
 80065a2:	2207      	movs	r2, #7
 80065a4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80065a6:	4b24      	ldr	r3, [pc, #144]	@ (8006638 <BSP_SDRAM_Init+0xb4>)
 80065a8:	2202      	movs	r2, #2
 80065aa:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80065ac:	4b22      	ldr	r3, [pc, #136]	@ (8006638 <BSP_SDRAM_Init+0xb4>)
 80065ae:	2202      	movs	r2, #2
 80065b0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80065b2:	4b21      	ldr	r3, [pc, #132]	@ (8006638 <BSP_SDRAM_Init+0xb4>)
 80065b4:	2202      	movs	r2, #2
 80065b6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80065b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80065be:	4b1c      	ldr	r3, [pc, #112]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80065c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 80065c6:	2204      	movs	r2, #4
 80065c8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80065ca:	4b19      	ldr	r3, [pc, #100]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 80065cc:	2210      	movs	r2, #16
 80065ce:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80065d0:	4b17      	ldr	r3, [pc, #92]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 80065d2:	2240      	movs	r2, #64	@ 0x40
 80065d4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80065d6:	4b16      	ldr	r3, [pc, #88]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 80065d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065dc:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80065de:	4b14      	ldr	r3, [pc, #80]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80065e4:	4b12      	ldr	r3, [pc, #72]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 80065e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065ea:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80065ec:	4b10      	ldr	r3, [pc, #64]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 80065ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80065f2:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80065f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80065fa:	2100      	movs	r1, #0
 80065fc:	480c      	ldr	r0, [pc, #48]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 80065fe:	f000 f87f 	bl	8006700 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006602:	490d      	ldr	r1, [pc, #52]	@ (8006638 <BSP_SDRAM_Init+0xb4>)
 8006604:	480a      	ldr	r0, [pc, #40]	@ (8006630 <BSP_SDRAM_Init+0xac>)
 8006606:	f00a ffb9 	bl	801157c <HAL_SDRAM_Init>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006610:	4b0a      	ldr	r3, [pc, #40]	@ (800663c <BSP_SDRAM_Init+0xb8>)
 8006612:	2201      	movs	r2, #1
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	e002      	b.n	800661e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006618:	4b08      	ldr	r3, [pc, #32]	@ (800663c <BSP_SDRAM_Init+0xb8>)
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800661e:	f240 6003 	movw	r0, #1539	@ 0x603
 8006622:	f000 f80d 	bl	8006640 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8006626:	4b05      	ldr	r3, [pc, #20]	@ (800663c <BSP_SDRAM_Init+0xb8>)
 8006628:	781b      	ldrb	r3, [r3, #0]
}
 800662a:	4618      	mov	r0, r3
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20011018 	.word	0x20011018
 8006634:	a0000140 	.word	0xa0000140
 8006638:	2001104c 	.word	0x2001104c
 800663c:	2001005c 	.word	0x2001005c

08006640 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800664c:	4b2a      	ldr	r3, [pc, #168]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800664e:	2201      	movs	r2, #1
 8006650:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006652:	4b29      	ldr	r3, [pc, #164]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006654:	2210      	movs	r2, #16
 8006656:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006658:	4b27      	ldr	r3, [pc, #156]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800665a:	2201      	movs	r2, #1
 800665c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800665e:	4b26      	ldr	r3, [pc, #152]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006660:	2200      	movs	r2, #0
 8006662:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006664:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006668:	4923      	ldr	r1, [pc, #140]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800666a:	4824      	ldr	r0, [pc, #144]	@ (80066fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800666c:	f00a ffba 	bl	80115e4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006670:	2001      	movs	r0, #1
 8006672:	f000 fbe9 	bl	8006e48 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006676:	4b20      	ldr	r3, [pc, #128]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006678:	2202      	movs	r2, #2
 800667a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800667c:	4b1e      	ldr	r3, [pc, #120]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800667e:	2210      	movs	r2, #16
 8006680:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006682:	4b1d      	ldr	r3, [pc, #116]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006684:	2201      	movs	r2, #1
 8006686:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006688:	4b1b      	ldr	r3, [pc, #108]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800668a:	2200      	movs	r2, #0
 800668c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800668e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006692:	4919      	ldr	r1, [pc, #100]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006694:	4819      	ldr	r0, [pc, #100]	@ (80066fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006696:	f00a ffa5 	bl	80115e4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800669a:	4b17      	ldr	r3, [pc, #92]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800669c:	2203      	movs	r2, #3
 800669e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80066a0:	4b15      	ldr	r3, [pc, #84]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80066a2:	2210      	movs	r2, #16
 80066a4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80066a6:	4b14      	ldr	r3, [pc, #80]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80066a8:	2208      	movs	r2, #8
 80066aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80066ac:	4b12      	ldr	r3, [pc, #72]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80066b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80066b6:	4910      	ldr	r1, [pc, #64]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80066b8:	4810      	ldr	r0, [pc, #64]	@ (80066fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80066ba:	f00a ff93 	bl	80115e4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80066be:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80066c2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80066c4:	4b0c      	ldr	r3, [pc, #48]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80066c6:	2204      	movs	r2, #4
 80066c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80066ca:	4b0b      	ldr	r3, [pc, #44]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80066cc:	2210      	movs	r2, #16
 80066ce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80066d0:	4b09      	ldr	r3, [pc, #36]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4a07      	ldr	r2, [pc, #28]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80066da:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80066dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80066e0:	4905      	ldr	r1, [pc, #20]	@ (80066f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80066e2:	4806      	ldr	r0, [pc, #24]	@ (80066fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80066e4:	f00a ff7e 	bl	80115e4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	4804      	ldr	r0, [pc, #16]	@ (80066fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80066ec:	f00a ffaf 	bl	801164e <HAL_SDRAM_ProgramRefreshRate>
}
 80066f0:	bf00      	nop
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20011068 	.word	0x20011068
 80066fc:	20011018 	.word	0x20011018

08006700 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006700:	b580      	push	{r7, lr}
 8006702:	b090      	sub	sp, #64	@ 0x40
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800670a:	4b70      	ldr	r3, [pc, #448]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 800670c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670e:	4a6f      	ldr	r2, [pc, #444]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006710:	f043 0301 	orr.w	r3, r3, #1
 8006714:	6393      	str	r3, [r2, #56]	@ 0x38
 8006716:	4b6d      	ldr	r3, [pc, #436]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8006722:	4b6a      	ldr	r3, [pc, #424]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006726:	4a69      	ldr	r2, [pc, #420]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006728:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800672c:	6313      	str	r3, [r2, #48]	@ 0x30
 800672e:	4b67      	ldr	r3, [pc, #412]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006736:	627b      	str	r3, [r7, #36]	@ 0x24
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800673a:	4b64      	ldr	r3, [pc, #400]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 800673c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800673e:	4a63      	ldr	r2, [pc, #396]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006740:	f043 0304 	orr.w	r3, r3, #4
 8006744:	6313      	str	r3, [r2, #48]	@ 0x30
 8006746:	4b61      	ldr	r3, [pc, #388]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	623b      	str	r3, [r7, #32]
 8006750:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006752:	4b5e      	ldr	r3, [pc, #376]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006756:	4a5d      	ldr	r2, [pc, #372]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006758:	f043 0308 	orr.w	r3, r3, #8
 800675c:	6313      	str	r3, [r2, #48]	@ 0x30
 800675e:	4b5b      	ldr	r3, [pc, #364]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006762:	f003 0308 	and.w	r3, r3, #8
 8006766:	61fb      	str	r3, [r7, #28]
 8006768:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800676a:	4b58      	ldr	r3, [pc, #352]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 800676c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676e:	4a57      	ldr	r2, [pc, #348]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006770:	f043 0310 	orr.w	r3, r3, #16
 8006774:	6313      	str	r3, [r2, #48]	@ 0x30
 8006776:	4b55      	ldr	r3, [pc, #340]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	61bb      	str	r3, [r7, #24]
 8006780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006782:	4b52      	ldr	r3, [pc, #328]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006786:	4a51      	ldr	r2, [pc, #324]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006788:	f043 0320 	orr.w	r3, r3, #32
 800678c:	6313      	str	r3, [r2, #48]	@ 0x30
 800678e:	4b4f      	ldr	r3, [pc, #316]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 8006790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800679a:	4b4c      	ldr	r3, [pc, #304]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 800679c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679e:	4a4b      	ldr	r2, [pc, #300]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 80067a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80067a6:	4b49      	ldr	r3, [pc, #292]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 80067a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80067b2:	4b46      	ldr	r3, [pc, #280]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 80067b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b6:	4a45      	ldr	r2, [pc, #276]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 80067b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80067be:	4b43      	ldr	r3, [pc, #268]	@ (80068cc <BSP_SDRAM_MspInit+0x1cc>)
 80067c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80067ca:	2302      	movs	r3, #2
 80067cc:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80067ce:	2301      	movs	r3, #1
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80067d2:	2302      	movs	r3, #2
 80067d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80067d6:	230c      	movs	r3, #12
 80067d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80067da:	2308      	movs	r3, #8
 80067dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80067de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80067e2:	4619      	mov	r1, r3
 80067e4:	483a      	ldr	r0, [pc, #232]	@ (80068d0 <BSP_SDRAM_MspInit+0x1d0>)
 80067e6:	f004 ff8f 	bl	800b708 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80067ea:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80067ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80067f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80067f4:	4619      	mov	r1, r3
 80067f6:	4837      	ldr	r0, [pc, #220]	@ (80068d4 <BSP_SDRAM_MspInit+0x1d4>)
 80067f8:	f004 ff86 	bl	800b708 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80067fc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8006800:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006802:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006806:	4619      	mov	r1, r3
 8006808:	4833      	ldr	r0, [pc, #204]	@ (80068d8 <BSP_SDRAM_MspInit+0x1d8>)
 800680a:	f004 ff7d 	bl	800b708 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800680e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8006812:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006814:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006818:	4619      	mov	r1, r3
 800681a:	4830      	ldr	r0, [pc, #192]	@ (80068dc <BSP_SDRAM_MspInit+0x1dc>)
 800681c:	f004 ff74 	bl	800b708 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006820:	f248 1333 	movw	r3, #33075	@ 0x8133
 8006824:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006826:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800682a:	4619      	mov	r1, r3
 800682c:	482c      	ldr	r0, [pc, #176]	@ (80068e0 <BSP_SDRAM_MspInit+0x1e0>)
 800682e:	f004 ff6b 	bl	800b708 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8006832:	2328      	movs	r3, #40	@ 0x28
 8006834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8006836:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800683a:	4619      	mov	r1, r3
 800683c:	4829      	ldr	r0, [pc, #164]	@ (80068e4 <BSP_SDRAM_MspInit+0x1e4>)
 800683e:	f004 ff63 	bl	800b708 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8006842:	4b29      	ldr	r3, [pc, #164]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 8006844:	2200      	movs	r2, #0
 8006846:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006848:	4b27      	ldr	r3, [pc, #156]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 800684a:	2280      	movs	r2, #128	@ 0x80
 800684c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800684e:	4b26      	ldr	r3, [pc, #152]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 8006850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006854:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8006856:	4b24      	ldr	r3, [pc, #144]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 8006858:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800685c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800685e:	4b22      	ldr	r3, [pc, #136]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 8006860:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006864:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006866:	4b20      	ldr	r3, [pc, #128]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 8006868:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800686c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800686e:	4b1e      	ldr	r3, [pc, #120]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 8006870:	2200      	movs	r2, #0
 8006872:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8006874:	4b1c      	ldr	r3, [pc, #112]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 8006876:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800687a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800687c:	4b1a      	ldr	r3, [pc, #104]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 800687e:	2200      	movs	r2, #0
 8006880:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006882:	4b19      	ldr	r3, [pc, #100]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 8006884:	2203      	movs	r2, #3
 8006886:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006888:	4b17      	ldr	r3, [pc, #92]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 800688a:	2200      	movs	r2, #0
 800688c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800688e:	4b16      	ldr	r3, [pc, #88]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 8006890:	2200      	movs	r2, #0
 8006892:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8006894:	4b14      	ldr	r3, [pc, #80]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 8006896:	4a15      	ldr	r2, [pc, #84]	@ (80068ec <BSP_SDRAM_MspInit+0x1ec>)
 8006898:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a12      	ldr	r2, [pc, #72]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 800689e:	631a      	str	r2, [r3, #48]	@ 0x30
 80068a0:	4a11      	ldr	r2, [pc, #68]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80068a6:	4810      	ldr	r0, [pc, #64]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 80068a8:	f001 fbec 	bl	8008084 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80068ac:	480e      	ldr	r0, [pc, #56]	@ (80068e8 <BSP_SDRAM_MspInit+0x1e8>)
 80068ae:	f001 fb3b 	bl	8007f28 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80068b2:	2200      	movs	r2, #0
 80068b4:	210f      	movs	r1, #15
 80068b6:	2038      	movs	r0, #56	@ 0x38
 80068b8:	f000 fe42 	bl	8007540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80068bc:	2038      	movs	r0, #56	@ 0x38
 80068be:	f000 fe5b 	bl	8007578 <HAL_NVIC_EnableIRQ>
}
 80068c2:	bf00      	nop
 80068c4:	3740      	adds	r7, #64	@ 0x40
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40023800 	.word	0x40023800
 80068d0:	40020800 	.word	0x40020800
 80068d4:	40020c00 	.word	0x40020c00
 80068d8:	40021000 	.word	0x40021000
 80068dc:	40021400 	.word	0x40021400
 80068e0:	40021800 	.word	0x40021800
 80068e4:	40021c00 	.word	0x40021c00
 80068e8:	20011078 	.word	0x20011078
 80068ec:	40026410 	.word	0x40026410

080068f0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	460a      	mov	r2, r1
 80068fa:	80fb      	strh	r3, [r7, #6]
 80068fc:	4613      	mov	r3, r2
 80068fe:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8006904:	4a14      	ldr	r2, [pc, #80]	@ (8006958 <BSP_TS_Init+0x68>)
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800690a:	4a14      	ldr	r2, [pc, #80]	@ (800695c <BSP_TS_Init+0x6c>)
 800690c:	88bb      	ldrh	r3, [r7, #4]
 800690e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8006910:	4b13      	ldr	r3, [pc, #76]	@ (8006960 <BSP_TS_Init+0x70>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2070      	movs	r0, #112	@ 0x70
 8006916:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8006918:	4b11      	ldr	r3, [pc, #68]	@ (8006960 <BSP_TS_Init+0x70>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2070      	movs	r0, #112	@ 0x70
 800691e:	4798      	blx	r3
 8006920:	4603      	mov	r3, r0
 8006922:	2b51      	cmp	r3, #81	@ 0x51
 8006924:	d110      	bne.n	8006948 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8006926:	4b0f      	ldr	r3, [pc, #60]	@ (8006964 <BSP_TS_Init+0x74>)
 8006928:	4a0d      	ldr	r2, [pc, #52]	@ (8006960 <BSP_TS_Init+0x70>)
 800692a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800692c:	4b0e      	ldr	r3, [pc, #56]	@ (8006968 <BSP_TS_Init+0x78>)
 800692e:	2270      	movs	r2, #112	@ 0x70
 8006930:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8006932:	4b0e      	ldr	r3, [pc, #56]	@ (800696c <BSP_TS_Init+0x7c>)
 8006934:	2208      	movs	r2, #8
 8006936:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8006938:	4b0a      	ldr	r3, [pc, #40]	@ (8006964 <BSP_TS_Init+0x74>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	4a0a      	ldr	r2, [pc, #40]	@ (8006968 <BSP_TS_Init+0x78>)
 8006940:	7812      	ldrb	r2, [r2, #0]
 8006942:	4610      	mov	r0, r2
 8006944:	4798      	blx	r3
 8006946:	e001      	b.n	800694c <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8006948:	2303      	movs	r3, #3
 800694a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	200110dc 	.word	0x200110dc
 800695c:	200110de 	.word	0x200110de
 8006960:	20010004 	.word	0x20010004
 8006964:	200110d8 	.word	0x200110d8
 8006968:	200110e1 	.word	0x200110e1
 800696c:	200110e0 	.word	0x200110e0

08006970 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b097      	sub	sp, #92	@ 0x5c
 8006974:	af02      	add	r7, sp, #8
 8006976:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800698a:	4bb8      	ldr	r3, [pc, #736]	@ (8006c6c <BSP_TS_GetState+0x2fc>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	4ab7      	ldr	r2, [pc, #732]	@ (8006c70 <BSP_TS_GetState+0x300>)
 8006992:	7812      	ldrb	r2, [r2, #0]
 8006994:	4610      	mov	r0, r2
 8006996:	4798      	blx	r3
 8006998:	4603      	mov	r3, r0
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8198 	beq.w	8006cda <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80069aa:	2300      	movs	r3, #0
 80069ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ae:	e187      	b.n	8006cc0 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80069b0:	4bae      	ldr	r3, [pc, #696]	@ (8006c6c <BSP_TS_GetState+0x2fc>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	4aae      	ldr	r2, [pc, #696]	@ (8006c70 <BSP_TS_GetState+0x300>)
 80069b8:	7812      	ldrb	r2, [r2, #0]
 80069ba:	4614      	mov	r4, r2
 80069bc:	f107 0120 	add.w	r1, r7, #32
 80069c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069c2:	0052      	lsls	r2, r2, #1
 80069c4:	1888      	adds	r0, r1, r2
 80069c6:	f107 0114 	add.w	r1, r7, #20
 80069ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069cc:	0052      	lsls	r2, r2, #1
 80069ce:	440a      	add	r2, r1
 80069d0:	4601      	mov	r1, r0
 80069d2:	4620      	mov	r0, r4
 80069d4:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80069d6:	4ba7      	ldr	r3, [pc, #668]	@ (8006c74 <BSP_TS_GetState+0x304>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d117      	bne.n	8006a0e <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 80069de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	3350      	adds	r3, #80	@ 0x50
 80069e4:	443b      	add	r3, r7
 80069e6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80069ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	3350      	adds	r3, #80	@ 0x50
 80069f0:	443b      	add	r3, r7
 80069f2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80069f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	3350      	adds	r3, #80	@ 0x50
 80069fc:	443b      	add	r3, r7
 80069fe:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8006a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	3350      	adds	r3, #80	@ 0x50
 8006a08:	443b      	add	r3, r7
 8006a0a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8006a0e:	4b99      	ldr	r3, [pc, #612]	@ (8006c74 <BSP_TS_GetState+0x304>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00e      	beq.n	8006a38 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8006a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	3350      	adds	r3, #80	@ 0x50
 8006a20:	443b      	add	r3, r7
 8006a22:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8006a26:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	3350      	adds	r3, #80	@ 0x50
 8006a32:	443b      	add	r3, r7
 8006a34:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8006a38:	4b8e      	ldr	r3, [pc, #568]	@ (8006c74 <BSP_TS_GetState+0x304>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00e      	beq.n	8006a62 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8006a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	3350      	adds	r3, #80	@ 0x50
 8006a4a:	443b      	add	r3, r7
 8006a4c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8006a50:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	3350      	adds	r3, #80	@ 0x50
 8006a5c:	443b      	add	r3, r7
 8006a5e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8006a62:	4b84      	ldr	r3, [pc, #528]	@ (8006c74 <BSP_TS_GetState+0x304>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d017      	beq.n	8006a9e <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8006a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	3350      	adds	r3, #80	@ 0x50
 8006a74:	443b      	add	r3, r7
 8006a76:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8006a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	3350      	adds	r3, #80	@ 0x50
 8006a80:	443b      	add	r3, r7
 8006a82:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8006a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	3350      	adds	r3, #80	@ 0x50
 8006a8c:	443b      	add	r3, r7
 8006a8e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8006a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	3350      	adds	r3, #80	@ 0x50
 8006a98:	443b      	add	r3, r7
 8006a9a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8006a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	3350      	adds	r3, #80	@ 0x50
 8006aa4:	443b      	add	r3, r7
 8006aa6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4a72      	ldr	r2, [pc, #456]	@ (8006c78 <BSP_TS_GetState+0x308>)
 8006aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ab4:	4299      	cmp	r1, r3
 8006ab6:	d90d      	bls.n	8006ad4 <BSP_TS_GetState+0x164>
 8006ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	3350      	adds	r3, #80	@ 0x50
 8006abe:	443b      	add	r3, r7
 8006ac0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8006ac4:	496c      	ldr	r1, [pc, #432]	@ (8006c78 <BSP_TS_GetState+0x308>)
 8006ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ac8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	e00c      	b.n	8006aee <BSP_TS_GetState+0x17e>
 8006ad4:	4a68      	ldr	r2, [pc, #416]	@ (8006c78 <BSP_TS_GetState+0x308>)
 8006ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	3350      	adds	r3, #80	@ 0x50
 8006ae4:	443b      	add	r3, r7
 8006ae6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8006af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	3350      	adds	r3, #80	@ 0x50
 8006af8:	443b      	add	r3, r7
 8006afa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8006afe:	4619      	mov	r1, r3
 8006b00:	4a5e      	ldr	r2, [pc, #376]	@ (8006c7c <BSP_TS_GetState+0x30c>)
 8006b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b08:	4299      	cmp	r1, r3
 8006b0a:	d90d      	bls.n	8006b28 <BSP_TS_GetState+0x1b8>
 8006b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	3350      	adds	r3, #80	@ 0x50
 8006b12:	443b      	add	r3, r7
 8006b14:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8006b18:	4958      	ldr	r1, [pc, #352]	@ (8006c7c <BSP_TS_GetState+0x30c>)
 8006b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	e00c      	b.n	8006b42 <BSP_TS_GetState+0x1d2>
 8006b28:	4a54      	ldr	r2, [pc, #336]	@ (8006c7c <BSP_TS_GetState+0x30c>)
 8006b2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	3350      	adds	r3, #80	@ 0x50
 8006b38:	443b      	add	r3, r7
 8006b3a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8006b46:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006b4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006b4e:	4413      	add	r3, r2
 8006b50:	2b05      	cmp	r3, #5
 8006b52:	dd15      	ble.n	8006b80 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8006b54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	3350      	adds	r3, #80	@ 0x50
 8006b5a:	443b      	add	r3, r7
 8006b5c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006b60:	4619      	mov	r1, r3
 8006b62:	4a45      	ldr	r2, [pc, #276]	@ (8006c78 <BSP_TS_GetState+0x308>)
 8006b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8006b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	3350      	adds	r3, #80	@ 0x50
 8006b70:	443b      	add	r3, r7
 8006b72:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8006b76:	4619      	mov	r1, r3
 8006b78:	4a40      	ldr	r2, [pc, #256]	@ (8006c7c <BSP_TS_GetState+0x30c>)
 8006b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8006b80:	4b3b      	ldr	r3, [pc, #236]	@ (8006c70 <BSP_TS_GetState+0x300>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b70      	cmp	r3, #112	@ 0x70
 8006b86:	d119      	bne.n	8006bbc <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8006b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	3350      	adds	r3, #80	@ 0x50
 8006b8e:	443b      	add	r3, r7
 8006b90:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	4413      	add	r3, r2
 8006b9c:	460a      	mov	r2, r1
 8006b9e:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8006ba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	3350      	adds	r3, #80	@ 0x50
 8006ba6:	443b      	add	r3, r7
 8006ba8:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	460a      	mov	r2, r1
 8006bb8:	809a      	strh	r2, [r3, #4]
 8006bba:	e022      	b.n	8006c02 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8006bbc:	4b30      	ldr	r3, [pc, #192]	@ (8006c80 <BSP_TS_GetState+0x310>)
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8006c78 <BSP_TS_GetState+0x308>)
 8006bc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bca:	fb01 f303 	mul.w	r3, r1, r3
 8006bce:	0b1b      	lsrs	r3, r3, #12
 8006bd0:	b299      	uxth	r1, r3
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	4413      	add	r3, r2
 8006bda:	460a      	mov	r2, r1
 8006bdc:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8006bde:	4b29      	ldr	r3, [pc, #164]	@ (8006c84 <BSP_TS_GetState+0x314>)
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	4619      	mov	r1, r3
 8006be4:	4a25      	ldr	r2, [pc, #148]	@ (8006c7c <BSP_TS_GetState+0x30c>)
 8006be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bec:	fb01 f303 	mul.w	r3, r1, r3
 8006bf0:	0b1b      	lsrs	r3, r3, #12
 8006bf2:	b299      	uxth	r1, r3
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	4413      	add	r3, r2
 8006bfe:	460a      	mov	r2, r1
 8006c00:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8006c02:	4b1b      	ldr	r3, [pc, #108]	@ (8006c70 <BSP_TS_GetState+0x300>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f107 010c 	add.w	r1, r7, #12
 8006c0c:	f107 0210 	add.w	r2, r7, #16
 8006c10:	f107 0308 	add.w	r3, r7, #8
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	460b      	mov	r3, r1
 8006c18:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006c1a:	f7fd fb27 	bl	800426c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	b2d9      	uxtb	r1, r3
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c26:	4413      	add	r3, r2
 8006c28:	3316      	adds	r3, #22
 8006c2a:	460a      	mov	r2, r1
 8006c2c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	b2d9      	uxtb	r1, r3
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c36:	4413      	add	r3, r2
 8006c38:	3320      	adds	r3, #32
 8006c3a:	460a      	mov	r2, r1
 8006c3c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d836      	bhi.n	8006cb2 <BSP_TS_GetState+0x342>
 8006c44:	a201      	add	r2, pc, #4	@ (adr r2, 8006c4c <BSP_TS_GetState+0x2dc>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c5d 	.word	0x08006c5d
 8006c50:	08006c89 	.word	0x08006c89
 8006c54:	08006c97 	.word	0x08006c97
 8006c58:	08006ca5 	.word	0x08006ca5
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c60:	4413      	add	r3, r2
 8006c62:	331b      	adds	r3, #27
 8006c64:	2201      	movs	r2, #1
 8006c66:	701a      	strb	r2, [r3, #0]
          break;
 8006c68:	e027      	b.n	8006cba <BSP_TS_GetState+0x34a>
 8006c6a:	bf00      	nop
 8006c6c:	200110d8 	.word	0x200110d8
 8006c70:	200110e1 	.word	0x200110e1
 8006c74:	200110e0 	.word	0x200110e0
 8006c78:	200110e4 	.word	0x200110e4
 8006c7c:	200110f8 	.word	0x200110f8
 8006c80:	200110dc 	.word	0x200110dc
 8006c84:	200110de 	.word	0x200110de
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c8c:	4413      	add	r3, r2
 8006c8e:	331b      	adds	r3, #27
 8006c90:	2202      	movs	r2, #2
 8006c92:	701a      	strb	r2, [r3, #0]
          break;
 8006c94:	e011      	b.n	8006cba <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c9a:	4413      	add	r3, r2
 8006c9c:	331b      	adds	r3, #27
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	701a      	strb	r2, [r3, #0]
          break;
 8006ca2:	e00a      	b.n	8006cba <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca8:	4413      	add	r3, r2
 8006caa:	331b      	adds	r3, #27
 8006cac:	2200      	movs	r2, #0
 8006cae:	701a      	strb	r2, [r3, #0]
          break;
 8006cb0:	e003      	b.n	8006cba <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8006cb8:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8006cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	f4ff ae71 	bcc.w	80069b0 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f80a 	bl	8006ce8 <BSP_TS_Get_GestureId>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8006cda:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3754      	adds	r7, #84	@ 0x54
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd90      	pop	{r4, r7, pc}
 8006ce6:	bf00      	nop

08006ce8 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8006cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8006de8 <BSP_TS_Get_GestureId+0x100>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f107 0308 	add.w	r3, r7, #8
 8006d02:	4619      	mov	r1, r3
 8006d04:	4610      	mov	r0, r2
 8006d06:	f7fd fa98 	bl	800423a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b49      	cmp	r3, #73	@ 0x49
 8006d0e:	d05e      	beq.n	8006dce <BSP_TS_Get_GestureId+0xe6>
 8006d10:	2b49      	cmp	r3, #73	@ 0x49
 8006d12:	d860      	bhi.n	8006dd6 <BSP_TS_Get_GestureId+0xee>
 8006d14:	2b1c      	cmp	r3, #28
 8006d16:	d83f      	bhi.n	8006d98 <BSP_TS_Get_GestureId+0xb0>
 8006d18:	2b1c      	cmp	r3, #28
 8006d1a:	d85c      	bhi.n	8006dd6 <BSP_TS_Get_GestureId+0xee>
 8006d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d24 <BSP_TS_Get_GestureId+0x3c>)
 8006d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d22:	bf00      	nop
 8006d24:	08006d9f 	.word	0x08006d9f
 8006d28:	08006dd7 	.word	0x08006dd7
 8006d2c:	08006dd7 	.word	0x08006dd7
 8006d30:	08006dd7 	.word	0x08006dd7
 8006d34:	08006dd7 	.word	0x08006dd7
 8006d38:	08006dd7 	.word	0x08006dd7
 8006d3c:	08006dd7 	.word	0x08006dd7
 8006d40:	08006dd7 	.word	0x08006dd7
 8006d44:	08006dd7 	.word	0x08006dd7
 8006d48:	08006dd7 	.word	0x08006dd7
 8006d4c:	08006dd7 	.word	0x08006dd7
 8006d50:	08006dd7 	.word	0x08006dd7
 8006d54:	08006dd7 	.word	0x08006dd7
 8006d58:	08006dd7 	.word	0x08006dd7
 8006d5c:	08006dd7 	.word	0x08006dd7
 8006d60:	08006dd7 	.word	0x08006dd7
 8006d64:	08006da7 	.word	0x08006da7
 8006d68:	08006dd7 	.word	0x08006dd7
 8006d6c:	08006dd7 	.word	0x08006dd7
 8006d70:	08006dd7 	.word	0x08006dd7
 8006d74:	08006daf 	.word	0x08006daf
 8006d78:	08006dd7 	.word	0x08006dd7
 8006d7c:	08006dd7 	.word	0x08006dd7
 8006d80:	08006dd7 	.word	0x08006dd7
 8006d84:	08006db7 	.word	0x08006db7
 8006d88:	08006dd7 	.word	0x08006dd7
 8006d8c:	08006dd7 	.word	0x08006dd7
 8006d90:	08006dd7 	.word	0x08006dd7
 8006d94:	08006dbf 	.word	0x08006dbf
 8006d98:	2b40      	cmp	r3, #64	@ 0x40
 8006d9a:	d014      	beq.n	8006dc6 <BSP_TS_Get_GestureId+0xde>
 8006d9c:	e01b      	b.n	8006dd6 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8006da4:	e01a      	b.n	8006ddc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8006dac:	e016      	b.n	8006ddc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2202      	movs	r2, #2
 8006db2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8006db4:	e012      	b.n	8006ddc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2203      	movs	r2, #3
 8006dba:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8006dbc:	e00e      	b.n	8006ddc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2204      	movs	r2, #4
 8006dc2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8006dc4:	e00a      	b.n	8006ddc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2205      	movs	r2, #5
 8006dca:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8006dcc:	e006      	b.n	8006ddc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2206      	movs	r2, #6
 8006dd2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8006dd4:	e002      	b.n	8006ddc <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dda:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	200110e1 	.word	0x200110e1

08006dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006df0:	2003      	movs	r0, #3
 8006df2:	f000 fb9a 	bl	800752a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006df6:	200f      	movs	r0, #15
 8006df8:	f7fc fdb2 	bl	8003960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006dfc:	f7fb fdd2 	bl	80029a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006e0c:	4b06      	ldr	r3, [pc, #24]	@ (8006e28 <HAL_IncTick+0x20>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <HAL_IncTick+0x24>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4413      	add	r3, r2
 8006e18:	4a04      	ldr	r2, [pc, #16]	@ (8006e2c <HAL_IncTick+0x24>)
 8006e1a:	6013      	str	r3, [r2, #0]
}
 8006e1c:	bf00      	nop
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	20010064 	.word	0x20010064
 8006e2c:	2001110c 	.word	0x2001110c

08006e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  return uwTick;
 8006e34:	4b03      	ldr	r3, [pc, #12]	@ (8006e44 <HAL_GetTick+0x14>)
 8006e36:	681b      	ldr	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	2001110c 	.word	0x2001110c

08006e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e50:	f7ff ffee 	bl	8006e30 <HAL_GetTick>
 8006e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e60:	d005      	beq.n	8006e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e62:	4b0a      	ldr	r3, [pc, #40]	@ (8006e8c <HAL_Delay+0x44>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006e6e:	bf00      	nop
 8006e70:	f7ff ffde 	bl	8006e30 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d8f7      	bhi.n	8006e70 <HAL_Delay+0x28>
  {
  }
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20010064 	.word	0x20010064

08006e90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8006e94:	4b03      	ldr	r3, [pc, #12]	@ (8006ea4 <HAL_GetREVID+0x14>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	0c1b      	lsrs	r3, r3, #16
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	e0042000 	.word	0xe0042000

08006ea8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e031      	b.n	8006f22 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d109      	bne.n	8006eda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fb fd94 	bl	80029f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ede:	f003 0310 	and.w	r3, r3, #16
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d116      	bne.n	8006f14 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006eea:	4b10      	ldr	r3, [pc, #64]	@ (8006f2c <HAL_ADC_Init+0x84>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	f043 0202 	orr.w	r2, r3, #2
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f970 	bl	80071dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	f043 0201 	orr.w	r2, r3, #1
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	641a      	str	r2, [r3, #64]	@ 0x40
 8006f12:	e001      	b.n	8006f18 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	ffffeefd 	.word	0xffffeefd

08006f30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_ADC_ConfigChannel+0x1c>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e136      	b.n	80071ba <HAL_ADC_ConfigChannel+0x28a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b09      	cmp	r3, #9
 8006f5a:	d93a      	bls.n	8006fd2 <HAL_ADC_ConfigChannel+0xa2>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f64:	d035      	beq.n	8006fd2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68d9      	ldr	r1, [r3, #12]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	4613      	mov	r3, r2
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	4413      	add	r3, r2
 8006f7a:	3b1e      	subs	r3, #30
 8006f7c:	2207      	movs	r2, #7
 8006f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f82:	43da      	mvns	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	400a      	ands	r2, r1
 8006f8a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a8d      	ldr	r2, [pc, #564]	@ (80071c8 <HAL_ADC_ConfigChannel+0x298>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d10a      	bne.n	8006fac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68d9      	ldr	r1, [r3, #12]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	061a      	lsls	r2, r3, #24
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006faa:	e035      	b.n	8007018 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68d9      	ldr	r1, [r3, #12]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	4403      	add	r3, r0
 8006fc4:	3b1e      	subs	r3, #30
 8006fc6:	409a      	lsls	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006fd0:	e022      	b.n	8007018 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6919      	ldr	r1, [r3, #16]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	4413      	add	r3, r2
 8006fe6:	2207      	movs	r2, #7
 8006fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fec:	43da      	mvns	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	400a      	ands	r2, r1
 8006ff4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6919      	ldr	r1, [r3, #16]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	b29b      	uxth	r3, r3
 8007006:	4618      	mov	r0, r3
 8007008:	4603      	mov	r3, r0
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	4403      	add	r3, r0
 800700e:	409a      	lsls	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b06      	cmp	r3, #6
 800701e:	d824      	bhi.n	800706a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	3b05      	subs	r3, #5
 8007032:	221f      	movs	r2, #31
 8007034:	fa02 f303 	lsl.w	r3, r2, r3
 8007038:	43da      	mvns	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	400a      	ands	r2, r1
 8007040:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	b29b      	uxth	r3, r3
 800704e:	4618      	mov	r0, r3
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	4613      	mov	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	3b05      	subs	r3, #5
 800705c:	fa00 f203 	lsl.w	r2, r0, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	635a      	str	r2, [r3, #52]	@ 0x34
 8007068:	e04c      	b.n	8007104 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2b0c      	cmp	r3, #12
 8007070:	d824      	bhi.n	80070bc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	3b23      	subs	r3, #35	@ 0x23
 8007084:	221f      	movs	r2, #31
 8007086:	fa02 f303 	lsl.w	r3, r2, r3
 800708a:	43da      	mvns	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	400a      	ands	r2, r1
 8007092:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4618      	mov	r0, r3
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	3b23      	subs	r3, #35	@ 0x23
 80070ae:	fa00 f203 	lsl.w	r2, r0, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80070ba:	e023      	b.n	8007104 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	3b41      	subs	r3, #65	@ 0x41
 80070ce:	221f      	movs	r2, #31
 80070d0:	fa02 f303 	lsl.w	r3, r2, r3
 80070d4:	43da      	mvns	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	400a      	ands	r2, r1
 80070dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	4618      	mov	r0, r3
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	3b41      	subs	r3, #65	@ 0x41
 80070f8:	fa00 f203 	lsl.w	r2, r0, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a30      	ldr	r2, [pc, #192]	@ (80071cc <HAL_ADC_ConfigChannel+0x29c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d10a      	bne.n	8007124 <HAL_ADC_ConfigChannel+0x1f4>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007116:	d105      	bne.n	8007124 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007118:	4b2d      	ldr	r3, [pc, #180]	@ (80071d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	4a2c      	ldr	r2, [pc, #176]	@ (80071d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800711e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8007122:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a28      	ldr	r2, [pc, #160]	@ (80071cc <HAL_ADC_ConfigChannel+0x29c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d10f      	bne.n	800714e <HAL_ADC_ConfigChannel+0x21e>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b12      	cmp	r3, #18
 8007134:	d10b      	bne.n	800714e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8007136:	4b26      	ldr	r3, [pc, #152]	@ (80071d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	4a25      	ldr	r2, [pc, #148]	@ (80071d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800713c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007140:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007142:	4b23      	ldr	r3, [pc, #140]	@ (80071d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	4a22      	ldr	r2, [pc, #136]	@ (80071d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8007148:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800714c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1e      	ldr	r2, [pc, #120]	@ (80071cc <HAL_ADC_ConfigChannel+0x29c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d12b      	bne.n	80071b0 <HAL_ADC_ConfigChannel+0x280>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1a      	ldr	r2, [pc, #104]	@ (80071c8 <HAL_ADC_ConfigChannel+0x298>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d003      	beq.n	800716a <HAL_ADC_ConfigChannel+0x23a>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b11      	cmp	r3, #17
 8007168:	d122      	bne.n	80071b0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800716a:	4b19      	ldr	r3, [pc, #100]	@ (80071d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	4a18      	ldr	r2, [pc, #96]	@ (80071d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8007170:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8007174:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007176:	4b16      	ldr	r3, [pc, #88]	@ (80071d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4a15      	ldr	r2, [pc, #84]	@ (80071d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800717c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007180:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a10      	ldr	r2, [pc, #64]	@ (80071c8 <HAL_ADC_ConfigChannel+0x298>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d111      	bne.n	80071b0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800718c:	4b11      	ldr	r3, [pc, #68]	@ (80071d4 <HAL_ADC_ConfigChannel+0x2a4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a11      	ldr	r2, [pc, #68]	@ (80071d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	0c9a      	lsrs	r2, r3, #18
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80071a2:	e002      	b.n	80071aa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1f9      	bne.n	80071a4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	10000012 	.word	0x10000012
 80071cc:	40012000 	.word	0x40012000
 80071d0:	40012300 	.word	0x40012300
 80071d4:	20010000 	.word	0x20010000
 80071d8:	431bde83 	.word	0x431bde83

080071dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80071e4:	4b78      	ldr	r3, [pc, #480]	@ (80073c8 <ADC_Init+0x1ec>)
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	4a77      	ldr	r2, [pc, #476]	@ (80073c8 <ADC_Init+0x1ec>)
 80071ea:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80071ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80071f0:	4b75      	ldr	r3, [pc, #468]	@ (80073c8 <ADC_Init+0x1ec>)
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	4973      	ldr	r1, [pc, #460]	@ (80073c8 <ADC_Init+0x1ec>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800720c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6859      	ldr	r1, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	021a      	lsls	r2, r3, #8
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6859      	ldr	r1, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6899      	ldr	r1, [r3, #8]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726a:	4a58      	ldr	r2, [pc, #352]	@ (80073cc <ADC_Init+0x1f0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d022      	beq.n	80072b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800727e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6899      	ldr	r1, [r3, #8]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80072a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6899      	ldr	r1, [r3, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	609a      	str	r2, [r3, #8]
 80072b4:	e00f      	b.n	80072d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80072c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80072d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0202 	bic.w	r2, r2, #2
 80072e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6899      	ldr	r1, [r3, #8]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	005a      	lsls	r2, r3, #1
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01b      	beq.n	800733c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007312:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007322:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6859      	ldr	r1, [r3, #4]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732e:	3b01      	subs	r3, #1
 8007330:	035a      	lsls	r2, r3, #13
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
 800733a:	e007      	b.n	800734c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800734a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800735a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	3b01      	subs	r3, #1
 8007368:	051a      	lsls	r2, r3, #20
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6899      	ldr	r1, [r3, #8]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800738e:	025a      	lsls	r2, r3, #9
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6899      	ldr	r1, [r3, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	029a      	lsls	r2, r3, #10
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	609a      	str	r2, [r3, #8]
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	40012300 	.word	0x40012300
 80073cc:	0f000001 	.word	0x0f000001

080073d0 <__NVIC_SetPriorityGrouping>:
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007410 <__NVIC_SetPriorityGrouping+0x40>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80073ec:	4013      	ands	r3, r2
 80073ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80073f8:	4b06      	ldr	r3, [pc, #24]	@ (8007414 <__NVIC_SetPriorityGrouping+0x44>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073fe:	4a04      	ldr	r2, [pc, #16]	@ (8007410 <__NVIC_SetPriorityGrouping+0x40>)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	60d3      	str	r3, [r2, #12]
}
 8007404:	bf00      	nop
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	e000ed00 	.word	0xe000ed00
 8007414:	05fa0000 	.word	0x05fa0000

08007418 <__NVIC_GetPriorityGrouping>:
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800741c:	4b04      	ldr	r3, [pc, #16]	@ (8007430 <__NVIC_GetPriorityGrouping+0x18>)
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	0a1b      	lsrs	r3, r3, #8
 8007422:	f003 0307 	and.w	r3, r3, #7
}
 8007426:	4618      	mov	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	e000ed00 	.word	0xe000ed00

08007434 <__NVIC_EnableIRQ>:
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800743e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007442:	2b00      	cmp	r3, #0
 8007444:	db0b      	blt.n	800745e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	f003 021f 	and.w	r2, r3, #31
 800744c:	4907      	ldr	r1, [pc, #28]	@ (800746c <__NVIC_EnableIRQ+0x38>)
 800744e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007452:	095b      	lsrs	r3, r3, #5
 8007454:	2001      	movs	r0, #1
 8007456:	fa00 f202 	lsl.w	r2, r0, r2
 800745a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	e000e100 	.word	0xe000e100

08007470 <__NVIC_SetPriority>:
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	6039      	str	r1, [r7, #0]
 800747a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800747c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007480:	2b00      	cmp	r3, #0
 8007482:	db0a      	blt.n	800749a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	b2da      	uxtb	r2, r3
 8007488:	490c      	ldr	r1, [pc, #48]	@ (80074bc <__NVIC_SetPriority+0x4c>)
 800748a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800748e:	0112      	lsls	r2, r2, #4
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	440b      	add	r3, r1
 8007494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007498:	e00a      	b.n	80074b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	b2da      	uxtb	r2, r3
 800749e:	4908      	ldr	r1, [pc, #32]	@ (80074c0 <__NVIC_SetPriority+0x50>)
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	f003 030f 	and.w	r3, r3, #15
 80074a6:	3b04      	subs	r3, #4
 80074a8:	0112      	lsls	r2, r2, #4
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	440b      	add	r3, r1
 80074ae:	761a      	strb	r2, [r3, #24]
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	e000e100 	.word	0xe000e100
 80074c0:	e000ed00 	.word	0xe000ed00

080074c4 <NVIC_EncodePriority>:
{
 80074c4:	b480      	push	{r7}
 80074c6:	b089      	sub	sp, #36	@ 0x24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f003 0307 	and.w	r3, r3, #7
 80074d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f1c3 0307 	rsb	r3, r3, #7
 80074de:	2b04      	cmp	r3, #4
 80074e0:	bf28      	it	cs
 80074e2:	2304      	movcs	r3, #4
 80074e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	3304      	adds	r3, #4
 80074ea:	2b06      	cmp	r3, #6
 80074ec:	d902      	bls.n	80074f4 <NVIC_EncodePriority+0x30>
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	3b03      	subs	r3, #3
 80074f2:	e000      	b.n	80074f6 <NVIC_EncodePriority+0x32>
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074f8:	f04f 32ff 	mov.w	r2, #4294967295
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007502:	43da      	mvns	r2, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	401a      	ands	r2, r3
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800750c:	f04f 31ff 	mov.w	r1, #4294967295
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	fa01 f303 	lsl.w	r3, r1, r3
 8007516:	43d9      	mvns	r1, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800751c:	4313      	orrs	r3, r2
}
 800751e:	4618      	mov	r0, r3
 8007520:	3724      	adds	r7, #36	@ 0x24
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff ff4c 	bl	80073d0 <__NVIC_SetPriorityGrouping>
}
 8007538:	bf00      	nop
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800754e:	2300      	movs	r3, #0
 8007550:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007552:	f7ff ff61 	bl	8007418 <__NVIC_GetPriorityGrouping>
 8007556:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	6978      	ldr	r0, [r7, #20]
 800755e:	f7ff ffb1 	bl	80074c4 <NVIC_EncodePriority>
 8007562:	4602      	mov	r2, r0
 8007564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff ff80 	bl	8007470 <__NVIC_SetPriority>
}
 8007570:	bf00      	nop
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff ff54 	bl	8007434 <__NVIC_EnableIRQ>
}
 800758c:	bf00      	nop
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007594:	b480      	push	{r7}
 8007596:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8007598:	f3bf 8f5f 	dmb	sy
}
 800759c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800759e:	4b07      	ldr	r3, [pc, #28]	@ (80075bc <HAL_MPU_Disable+0x28>)
 80075a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a2:	4a06      	ldr	r2, [pc, #24]	@ (80075bc <HAL_MPU_Disable+0x28>)
 80075a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075a8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80075aa:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <HAL_MPU_Disable+0x2c>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	605a      	str	r2, [r3, #4]
}
 80075b0:	bf00      	nop
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	e000ed00 	.word	0xe000ed00
 80075c0:	e000ed90 	.word	0xe000ed90

080075c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80075cc:	4a0b      	ldr	r2, [pc, #44]	@ (80075fc <HAL_MPU_Enable+0x38>)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f043 0301 	orr.w	r3, r3, #1
 80075d4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80075d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007600 <HAL_MPU_Enable+0x3c>)
 80075d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075da:	4a09      	ldr	r2, [pc, #36]	@ (8007600 <HAL_MPU_Enable+0x3c>)
 80075dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075e0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80075e2:	f3bf 8f4f 	dsb	sy
}
 80075e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80075e8:	f3bf 8f6f 	isb	sy
}
 80075ec:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	e000ed90 	.word	0xe000ed90
 8007600:	e000ed00 	.word	0xe000ed00

08007604 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	785a      	ldrb	r2, [r3, #1]
 8007610:	4b1b      	ldr	r3, [pc, #108]	@ (8007680 <HAL_MPU_ConfigRegion+0x7c>)
 8007612:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007614:	4b1a      	ldr	r3, [pc, #104]	@ (8007680 <HAL_MPU_ConfigRegion+0x7c>)
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	4a19      	ldr	r2, [pc, #100]	@ (8007680 <HAL_MPU_ConfigRegion+0x7c>)
 800761a:	f023 0301 	bic.w	r3, r3, #1
 800761e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8007620:	4a17      	ldr	r2, [pc, #92]	@ (8007680 <HAL_MPU_ConfigRegion+0x7c>)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	7b1b      	ldrb	r3, [r3, #12]
 800762c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	7adb      	ldrb	r3, [r3, #11]
 8007632:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007634:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	7a9b      	ldrb	r3, [r3, #10]
 800763a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800763c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	7b5b      	ldrb	r3, [r3, #13]
 8007642:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007644:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	7b9b      	ldrb	r3, [r3, #14]
 800764a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800764c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	7bdb      	ldrb	r3, [r3, #15]
 8007652:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007654:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7a5b      	ldrb	r3, [r3, #9]
 800765a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800765c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	7a1b      	ldrb	r3, [r3, #8]
 8007662:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007664:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	7812      	ldrb	r2, [r2, #0]
 800766a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800766c:	4a04      	ldr	r2, [pc, #16]	@ (8007680 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800766e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007670:	6113      	str	r3, [r2, #16]
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	e000ed90 	.word	0xe000ed90

08007684 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e054      	b.n	8007740 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	7f5b      	ldrb	r3, [r3, #29]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d105      	bne.n	80076ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7fb f9fe 	bl	8002aa8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	791b      	ldrb	r3, [r3, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10c      	bne.n	80076d4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a22      	ldr	r2, [pc, #136]	@ (8007748 <HAL_CRC_Init+0xc4>)
 80076c0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0218 	bic.w	r2, r2, #24
 80076d0:	609a      	str	r2, [r3, #8]
 80076d2:	e00c      	b.n	80076ee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6899      	ldr	r1, [r3, #8]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	461a      	mov	r2, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f834 	bl	800774c <HAL_CRCEx_Polynomial_Set>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e028      	b.n	8007740 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	795b      	ldrb	r3, [r3, #5]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d105      	bne.n	8007702 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f04f 32ff 	mov.w	r2, #4294967295
 80076fe:	611a      	str	r2, [r3, #16]
 8007700:	e004      	b.n	800770c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6912      	ldr	r2, [r2, #16]
 800770a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	695a      	ldr	r2, [r3, #20]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	699a      	ldr	r2, [r3, #24]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	04c11db7 	.word	0x04c11db7

0800774c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800775c:	231f      	movs	r3, #31
 800775e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d102      	bne.n	8007770 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	75fb      	strb	r3, [r7, #23]
 800776e:	e063      	b.n	8007838 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007770:	bf00      	nop
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	1e5a      	subs	r2, r3, #1
 8007776:	613a      	str	r2, [r7, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d009      	beq.n	8007790 <HAL_CRCEx_Polynomial_Set+0x44>
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	f003 031f 	and.w	r3, r3, #31
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	fa22 f303 	lsr.w	r3, r2, r3
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0f0      	beq.n	8007772 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b18      	cmp	r3, #24
 8007794:	d846      	bhi.n	8007824 <HAL_CRCEx_Polynomial_Set+0xd8>
 8007796:	a201      	add	r2, pc, #4	@ (adr r2, 800779c <HAL_CRCEx_Polynomial_Set+0x50>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	0800782b 	.word	0x0800782b
 80077a0:	08007825 	.word	0x08007825
 80077a4:	08007825 	.word	0x08007825
 80077a8:	08007825 	.word	0x08007825
 80077ac:	08007825 	.word	0x08007825
 80077b0:	08007825 	.word	0x08007825
 80077b4:	08007825 	.word	0x08007825
 80077b8:	08007825 	.word	0x08007825
 80077bc:	08007819 	.word	0x08007819
 80077c0:	08007825 	.word	0x08007825
 80077c4:	08007825 	.word	0x08007825
 80077c8:	08007825 	.word	0x08007825
 80077cc:	08007825 	.word	0x08007825
 80077d0:	08007825 	.word	0x08007825
 80077d4:	08007825 	.word	0x08007825
 80077d8:	08007825 	.word	0x08007825
 80077dc:	0800780d 	.word	0x0800780d
 80077e0:	08007825 	.word	0x08007825
 80077e4:	08007825 	.word	0x08007825
 80077e8:	08007825 	.word	0x08007825
 80077ec:	08007825 	.word	0x08007825
 80077f0:	08007825 	.word	0x08007825
 80077f4:	08007825 	.word	0x08007825
 80077f8:	08007825 	.word	0x08007825
 80077fc:	08007801 	.word	0x08007801
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b06      	cmp	r3, #6
 8007804:	d913      	bls.n	800782e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800780a:	e010      	b.n	800782e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	2b07      	cmp	r3, #7
 8007810:	d90f      	bls.n	8007832 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007816:	e00c      	b.n	8007832 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	2b0f      	cmp	r3, #15
 800781c:	d90b      	bls.n	8007836 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007822:	e008      	b.n	8007836 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	75fb      	strb	r3, [r7, #23]
        break;
 8007828:	e006      	b.n	8007838 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800782a:	bf00      	nop
 800782c:	e004      	b.n	8007838 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800782e:	bf00      	nop
 8007830:	e002      	b.n	8007838 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007836:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007838:	7dfb      	ldrb	r3, [r7, #23]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10d      	bne.n	800785a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f023 0118 	bic.w	r1, r3, #24
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	430a      	orrs	r2, r1
 8007858:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800785a:	7dfb      	ldrb	r3, [r7, #23]
}
 800785c:	4618      	mov	r0, r3
 800785e:	371c      	adds	r7, #28
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e069      	b.n	800794e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7fb f92e 	bl	8002ae8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6819      	ldr	r1, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	4b2a      	ldr	r3, [pc, #168]	@ (8007958 <HAL_DCMI_Init+0xf0>)
 80078ae:	400b      	ands	r3, r1
 80078b0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6819      	ldr	r1, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80078c6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80078d2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80078de:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80078ea:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80078f6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	2b10      	cmp	r3, #16
 8007906:	d112      	bne.n	800792e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	7f1b      	ldrb	r3, [r3, #28]
 800790c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	7f5b      	ldrb	r3, [r3, #29]
 8007912:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007914:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	7f9b      	ldrb	r3, [r3, #30]
 800791a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800791c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7fdb      	ldrb	r3, [r3, #31]
 8007924:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800792a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800792c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 021e 	orr.w	r2, r2, #30
 800793c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	ffe0f007 	.word	0xffe0f007

0800795c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af02      	add	r7, sp, #8
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007974:	2b01      	cmp	r3, #1
 8007976:	d101      	bne.n	800797c <HAL_DCMI_Start_DMA+0x20>
 8007978:	2302      	movs	r3, #2
 800797a:	e0ab      	b.n	8007ad4 <HAL_DCMI_Start_DMA+0x178>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800799a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0202 	bic.w	r2, r2, #2
 80079aa:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6819      	ldr	r1, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c0:	4a46      	ldr	r2, [pc, #280]	@ (8007adc <HAL_DCMI_Start_DMA+0x180>)
 80079c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c8:	4a45      	ldr	r2, [pc, #276]	@ (8007ae0 <HAL_DCMI_Start_DMA+0x184>)
 80079ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079d0:	2200      	movs	r2, #0
 80079d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	645a      	str	r2, [r3, #68]	@ 0x44

  if (tmp_length <= 0xFFFFU)
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f2:	d219      	bcs.n	8007a28 <HAL_DCMI_Start_DMA+0xcc>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length) != HAL_OK)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3328      	adds	r3, #40	@ 0x28
 80079fe:	4619      	mov	r1, r3
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	f000 fb9c 	bl	8008140 <HAL_DMA_Start_IT>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d055      	beq.n	8007aba <HAL_DCMI_Start_DMA+0x15e>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2240      	movs	r2, #64	@ 0x40
 8007a12:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e055      	b.n	8007ad4 <HAL_DCMI_Start_DMA+0x178>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8007adc <HAL_DCMI_Start_DMA+0x180>)
 8007a2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2201      	movs	r2, #1
 8007a34:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = tmp_length;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8007a42:	e009      	b.n	8007a58 <HAL_DCMI_Start_DMA+0xfc>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a48:	085a      	lsrs	r2, r3, #1
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a52:	005a      	lsls	r2, r3, #1
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a60:	d2f0      	bcs.n	8007a44 <HAL_DCMI_Start_DMA+0xe8>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a66:	1e9a      	subs	r2, r3, #2
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3328      	adds	r3, #40	@ 0x28
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	f001 fa59 	bl	8008f4c <HAL_DMAEx_MultiBufferStart_IT>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00c      	beq.n	8007aba <HAL_DCMI_Start_DMA+0x15e>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2240      	movs	r2, #64	@ 0x40
 8007aa4:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e00c      	b.n	8007ad4 <HAL_DCMI_Start_DMA+0x178>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f042 0201 	orr.w	r2, r2, #1
 8007ac8:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	08007dc7 	.word	0x08007dc7
 8007ae0:	08007eed 	.word	0x08007eed

08007ae4 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8007aec:	4b27      	ldr	r3, [pc, #156]	@ (8007b8c <HAL_DCMI_Suspend+0xa8>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a27      	ldr	r2, [pc, #156]	@ (8007b90 <HAL_DCMI_Suspend+0xac>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	0a5b      	lsrs	r3, r3, #9
 8007af8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007afc:	fb02 f303 	mul.w	r3, r2, r3
 8007b00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_DCMI_Suspend+0x30>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e034      	b.n	8007b7e <HAL_DCMI_Suspend+0x9a>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d125      	bne.n	8007b74 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2205      	movs	r2, #5
 8007b2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 0201 	bic.w	r2, r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10c      	bne.n	8007b66 <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b50:	f043 0220 	orr.w	r2, r3, #32
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        status = HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	72fb      	strb	r3, [r7, #11]
        break;
 8007b64:	e006      	b.n	8007b74 <HAL_DCMI_Suspend+0x90>
      }
    } while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e5      	bne.n	8007b40 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8007b7c:	7afb      	ldrb	r3, [r7, #11]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20010000 	.word	0x20010000
 8007b90:	10624dd3 	.word	0x10624dd3

08007b94 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d01e      	beq.n	8007bec <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2204      	movs	r2, #4
 8007bb4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bba:	f043 0202 	orr.w	r2, r3, #2
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bce:	4a39      	ldr	r2, [pc, #228]	@ (8007cb4 <HAL_DCMI_IRQHandler+0x120>)
 8007bd0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fb82 	bl	80082e0 <HAL_DMA_Abort_IT>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 f980 	bl	8007eec <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d01e      	beq.n	8007c34 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c02:	f043 0201 	orr.w	r2, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c16:	4a27      	ldr	r2, [pc, #156]	@ (8007cb4 <HAL_DCMI_IRQHandler+0x120>)
 8007c18:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fb5e 	bl	80082e0 <HAL_DMA_Abort_IT>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d004      	beq.n	8007c34 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 f95c 	bl	8007eec <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d006      	beq.n	8007c4c <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2210      	movs	r2, #16
 8007c44:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fd fd5c 	bl	8005704 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d006      	beq.n	8007c64 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2208      	movs	r2, #8
 8007c5c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7fd fd61 	bl	8005726 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d01d      	beq.n	8007caa <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d107      	bne.n	8007c8c <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 021e 	bic.w	r2, r2, #30
 8007c8a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0201 	bic.w	r2, r2, #1
 8007c9a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7fd fd4f 	bl	8005748 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8007caa:	bf00      	nop
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	08007eed 	.word	0x08007eed

08007cb8 <HAL_DCMI_ConfigCrop>:
  * @param  Y0    DCMI window Y offset
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize,
                                      uint32_t YSize)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <HAL_DCMI_ConfigCrop+0x1c>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e01e      	b.n	8007d12 <HAL_DCMI_ConfigCrop+0x5a>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));

  /* Configure CROP */
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	0419      	lsls	r1, r3, #16
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	0419      	lsls	r1, r3, #16
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	621a      	str	r2, [r3, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d101      	bne.n	8007d34 <HAL_DCMI_DisableCrop+0x16>
 8007d30:	2302      	movs	r3, #2
 8007d32:	e018      	b.n	8007d66 <HAL_DCMI_DisableCrop+0x48>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable DCMI Crop feature */
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f022 0204 	bic.w	r2, r2, #4
 8007d52:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_DCMI_EnableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d101      	bne.n	8007d88 <HAL_DCMI_EnableCrop+0x16>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e018      	b.n	8007dba <HAL_DCMI_EnableCrop+0x48>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI Crop feature */
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0204 	orr.w	r2, r2, #4
 8007da6:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d043      	beq.n	8007e64 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007de8:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d118      	bne.n	8007e28 <DCMI_DMAXferCplt+0x62>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d015      	beq.n	8007e28 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e0e:	00da      	lsls	r2, r3, #3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4413      	add	r3, r2
 8007e14:	2200      	movs	r2, #0
 8007e16:	4619      	mov	r1, r3
 8007e18:	f002 f9ce 	bl	800a1b8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e20:	1e5a      	subs	r2, r3, #1
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e26:	e044      	b.n	8007eb2 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d13c      	bne.n	8007eb2 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e4a:	00da      	lsls	r2, r3, #3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4413      	add	r3, r2
 8007e50:	2201      	movs	r2, #1
 8007e52:	4619      	mov	r1, r3
 8007e54:	f002 f9b0 	bl	800a1b8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5c:	1e5a      	subs	r2, r3, #1
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e62:	e026      	b.n	8007eb2 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d006      	beq.n	8007e82 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007e7e:	60da      	str	r2, [r3, #12]
 8007e80:	e017      	b.n	8007eb2 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10f      	bne.n	8007eb2 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e96:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e9c:	0099      	lsls	r1, r3, #2
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d112      	bne.n	8007ee4 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0201 	orr.w	r2, r2, #1
 8007ecc:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d103      	bne.n	8007ee4 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8007ee4:	bf00      	nop
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d009      	beq.n	8007f18 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f7fd fc26 	bl	800576a <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8007f1e:	bf00      	nop
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
	...

08007f28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007f34:	f7fe ff7c 	bl	8006e30 <HAL_GetTick>
 8007f38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e099      	b.n	8008078 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0201 	bic.w	r2, r2, #1
 8007f62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f64:	e00f      	b.n	8007f86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f66:	f7fe ff63 	bl	8006e30 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b05      	cmp	r3, #5
 8007f72:	d908      	bls.n	8007f86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e078      	b.n	8008078 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e8      	bne.n	8007f66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4b38      	ldr	r3, [pc, #224]	@ (8008080 <HAL_DMA_Init+0x158>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d107      	bne.n	8007ff0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f023 0307 	bic.w	r3, r3, #7
 8008006:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008016:	2b04      	cmp	r3, #4
 8008018:	d117      	bne.n	800804a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00e      	beq.n	800804a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fb75 	bl	800871c <DMA_CheckFifoParam>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d008      	beq.n	800804a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2240      	movs	r2, #64	@ 0x40
 800803c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008046:	2301      	movs	r3, #1
 8008048:	e016      	b.n	8008078 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fb2c 	bl	80086b0 <DMA_CalcBaseAndBitshift>
 8008058:	4603      	mov	r3, r0
 800805a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008060:	223f      	movs	r2, #63	@ 0x3f
 8008062:	409a      	lsls	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3718      	adds	r7, #24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	f010803f 	.word	0xf010803f

08008084 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e050      	b.n	8008138 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d101      	bne.n	80080a6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80080a2:	2302      	movs	r3, #2
 80080a4:	e048      	b.n	8008138 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f022 0201 	bic.w	r2, r2, #1
 80080b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2200      	movs	r2, #0
 80080c4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2200      	movs	r2, #0
 80080cc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2200      	movs	r2, #0
 80080dc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2221      	movs	r2, #33	@ 0x21
 80080e4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fae2 	bl	80086b0 <DMA_CalcBaseAndBitshift>
 80080ec:	4603      	mov	r3, r0
 80080ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080f4:	223f      	movs	r2, #63	@ 0x3f
 80080f6:	409a      	lsls	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008156:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800815e:	2b01      	cmp	r3, #1
 8008160:	d101      	bne.n	8008166 <HAL_DMA_Start_IT+0x26>
 8008162:	2302      	movs	r3, #2
 8008164:	e048      	b.n	80081f8 <HAL_DMA_Start_IT+0xb8>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b01      	cmp	r3, #1
 8008178:	d137      	bne.n	80081ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2202      	movs	r2, #2
 800817e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	68b9      	ldr	r1, [r7, #8]
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 fa60 	bl	8008654 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008198:	223f      	movs	r2, #63	@ 0x3f
 800819a:	409a      	lsls	r2, r3
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0216 	orr.w	r2, r2, #22
 80081ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695a      	ldr	r2, [r3, #20]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80081be:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d007      	beq.n	80081d8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0208 	orr.w	r2, r2, #8
 80081d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0201 	orr.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	e005      	b.n	80081f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80081f2:	2302      	movs	r3, #2
 80081f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800820c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800820e:	f7fe fe0f 	bl	8006e30 <HAL_GetTick>
 8008212:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b02      	cmp	r3, #2
 800821e:	d008      	beq.n	8008232 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2280      	movs	r2, #128	@ 0x80
 8008224:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e052      	b.n	80082d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0216 	bic.w	r2, r2, #22
 8008240:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	695a      	ldr	r2, [r3, #20]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008250:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008256:	2b00      	cmp	r3, #0
 8008258:	d103      	bne.n	8008262 <HAL_DMA_Abort+0x62>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800825e:	2b00      	cmp	r3, #0
 8008260:	d007      	beq.n	8008272 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 0208 	bic.w	r2, r2, #8
 8008270:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0201 	bic.w	r2, r2, #1
 8008280:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008282:	e013      	b.n	80082ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008284:	f7fe fdd4 	bl	8006e30 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b05      	cmp	r3, #5
 8008290:	d90c      	bls.n	80082ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2220      	movs	r2, #32
 8008296:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2203      	movs	r2, #3
 800829c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e015      	b.n	80082d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e4      	bne.n	8008284 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082be:	223f      	movs	r2, #63	@ 0x3f
 80082c0:	409a      	lsls	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d004      	beq.n	80082fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2280      	movs	r2, #128	@ 0x80
 80082f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e00c      	b.n	8008318 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2205      	movs	r2, #5
 8008302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 0201 	bic.w	r2, r2, #1
 8008314:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008330:	4b8e      	ldr	r3, [pc, #568]	@ (800856c <HAL_DMA_IRQHandler+0x248>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a8e      	ldr	r2, [pc, #568]	@ (8008570 <HAL_DMA_IRQHandler+0x24c>)
 8008336:	fba2 2303 	umull	r2, r3, r2, r3
 800833a:	0a9b      	lsrs	r3, r3, #10
 800833c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008342:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800834e:	2208      	movs	r2, #8
 8008350:	409a      	lsls	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	4013      	ands	r3, r2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d01a      	beq.n	8008390 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d013      	beq.n	8008390 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0204 	bic.w	r2, r2, #4
 8008376:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800837c:	2208      	movs	r2, #8
 800837e:	409a      	lsls	r2, r3
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008388:	f043 0201 	orr.w	r2, r3, #1
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008394:	2201      	movs	r2, #1
 8008396:	409a      	lsls	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4013      	ands	r3, r2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d012      	beq.n	80083c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00b      	beq.n	80083c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083b2:	2201      	movs	r2, #1
 80083b4:	409a      	lsls	r2, r3
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083be:	f043 0202 	orr.w	r2, r3, #2
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083ca:	2204      	movs	r2, #4
 80083cc:	409a      	lsls	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	4013      	ands	r3, r2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d012      	beq.n	80083fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083e8:	2204      	movs	r2, #4
 80083ea:	409a      	lsls	r2, r3
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083f4:	f043 0204 	orr.w	r2, r3, #4
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008400:	2210      	movs	r2, #16
 8008402:	409a      	lsls	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4013      	ands	r3, r2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d043      	beq.n	8008494 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0308 	and.w	r3, r3, #8
 8008416:	2b00      	cmp	r3, #0
 8008418:	d03c      	beq.n	8008494 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800841e:	2210      	movs	r2, #16
 8008420:	409a      	lsls	r2, r3
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d018      	beq.n	8008466 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d108      	bne.n	8008454 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008446:	2b00      	cmp	r3, #0
 8008448:	d024      	beq.n	8008494 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	4798      	blx	r3
 8008452:	e01f      	b.n	8008494 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008458:	2b00      	cmp	r3, #0
 800845a:	d01b      	beq.n	8008494 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	4798      	blx	r3
 8008464:	e016      	b.n	8008494 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008470:	2b00      	cmp	r3, #0
 8008472:	d107      	bne.n	8008484 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0208 	bic.w	r2, r2, #8
 8008482:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008498:	2220      	movs	r2, #32
 800849a:	409a      	lsls	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4013      	ands	r3, r2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 808f 	beq.w	80085c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0310 	and.w	r3, r3, #16
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 8087 	beq.w	80085c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084ba:	2220      	movs	r2, #32
 80084bc:	409a      	lsls	r2, r3
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b05      	cmp	r3, #5
 80084cc:	d136      	bne.n	800853c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 0216 	bic.w	r2, r2, #22
 80084dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	695a      	ldr	r2, [r3, #20]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d103      	bne.n	80084fe <HAL_DMA_IRQHandler+0x1da>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 0208 	bic.w	r2, r2, #8
 800850c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008512:	223f      	movs	r2, #63	@ 0x3f
 8008514:	409a      	lsls	r2, r3
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800852e:	2b00      	cmp	r3, #0
 8008530:	d07e      	beq.n	8008630 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	4798      	blx	r3
        }
        return;
 800853a:	e079      	b.n	8008630 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d01d      	beq.n	8008586 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10d      	bne.n	8008574 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800855c:	2b00      	cmp	r3, #0
 800855e:	d031      	beq.n	80085c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	4798      	blx	r3
 8008568:	e02c      	b.n	80085c4 <HAL_DMA_IRQHandler+0x2a0>
 800856a:	bf00      	nop
 800856c:	20010000 	.word	0x20010000
 8008570:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008578:	2b00      	cmp	r3, #0
 800857a:	d023      	beq.n	80085c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	4798      	blx	r3
 8008584:	e01e      	b.n	80085c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10f      	bne.n	80085b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0210 	bic.w	r2, r2, #16
 80085a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d032      	beq.n	8008632 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d022      	beq.n	800861e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2205      	movs	r2, #5
 80085dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0201 	bic.w	r2, r2, #1
 80085ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	3301      	adds	r3, #1
 80085f4:	60bb      	str	r3, [r7, #8]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d307      	bcc.n	800860c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1f2      	bne.n	80085f0 <HAL_DMA_IRQHandler+0x2cc>
 800860a:	e000      	b.n	800860e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800860c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008622:	2b00      	cmp	r3, #0
 8008624:	d005      	beq.n	8008632 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	4798      	blx	r3
 800862e:	e000      	b.n	8008632 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008630:	bf00      	nop
    }
  }
}
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008646:	b2db      	uxtb	r3, r3
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008670:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	2b40      	cmp	r3, #64	@ 0x40
 8008680:	d108      	bne.n	8008694 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008692:	e007      	b.n	80086a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	60da      	str	r2, [r3, #12]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	3b10      	subs	r3, #16
 80086c0:	4a13      	ldr	r2, [pc, #76]	@ (8008710 <DMA_CalcBaseAndBitshift+0x60>)
 80086c2:	fba2 2303 	umull	r2, r3, r2, r3
 80086c6:	091b      	lsrs	r3, r3, #4
 80086c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80086ca:	4a12      	ldr	r2, [pc, #72]	@ (8008714 <DMA_CalcBaseAndBitshift+0x64>)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d908      	bls.n	80086f0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008718 <DMA_CalcBaseAndBitshift+0x68>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	1d1a      	adds	r2, r3, #4
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80086ee:	e006      	b.n	80086fe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	4b08      	ldr	r3, [pc, #32]	@ (8008718 <DMA_CalcBaseAndBitshift+0x68>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	aaaaaaab 	.word	0xaaaaaaab
 8008714:	0802cde0 	.word	0x0802cde0
 8008718:	fffffc00 	.word	0xfffffc00

0800871c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d11f      	bne.n	8008776 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b03      	cmp	r3, #3
 800873a:	d856      	bhi.n	80087ea <DMA_CheckFifoParam+0xce>
 800873c:	a201      	add	r2, pc, #4	@ (adr r2, 8008744 <DMA_CheckFifoParam+0x28>)
 800873e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	08008755 	.word	0x08008755
 8008748:	08008767 	.word	0x08008767
 800874c:	08008755 	.word	0x08008755
 8008750:	080087eb 	.word	0x080087eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008758:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d046      	beq.n	80087ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008764:	e043      	b.n	80087ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800876e:	d140      	bne.n	80087f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008774:	e03d      	b.n	80087f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800877e:	d121      	bne.n	80087c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b03      	cmp	r3, #3
 8008784:	d837      	bhi.n	80087f6 <DMA_CheckFifoParam+0xda>
 8008786:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <DMA_CheckFifoParam+0x70>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	0800879d 	.word	0x0800879d
 8008790:	080087a3 	.word	0x080087a3
 8008794:	0800879d 	.word	0x0800879d
 8008798:	080087b5 	.word	0x080087b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	73fb      	strb	r3, [r7, #15]
      break;
 80087a0:	e030      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d025      	beq.n	80087fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087b2:	e022      	b.n	80087fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80087bc:	d11f      	bne.n	80087fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80087c2:	e01c      	b.n	80087fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d903      	bls.n	80087d2 <DMA_CheckFifoParam+0xb6>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	d003      	beq.n	80087d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80087d0:	e018      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	73fb      	strb	r3, [r7, #15]
      break;
 80087d6:	e015      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00e      	beq.n	8008802 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	73fb      	strb	r3, [r7, #15]
      break;
 80087e8:	e00b      	b.n	8008802 <DMA_CheckFifoParam+0xe6>
      break;
 80087ea:	bf00      	nop
 80087ec:	e00a      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      break;
 80087ee:	bf00      	nop
 80087f0:	e008      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      break;
 80087f2:	bf00      	nop
 80087f4:	e006      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      break;
 80087f6:	bf00      	nop
 80087f8:	e004      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      break;
 80087fa:	bf00      	nop
 80087fc:	e002      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      break;   
 80087fe:	bf00      	nop
 8008800:	e000      	b.n	8008804 <DMA_CheckFifoParam+0xe8>
      break;
 8008802:	bf00      	nop
    }
  } 
  
  return status; 
 8008804:	7bfb      	ldrb	r3, [r7, #15]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop

08008814 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e039      	b.n	800889a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d106      	bne.n	8008840 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7fa fa12 	bl	8002c64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008864:	f023 0107 	bic.w	r1, r3, #7
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800887a:	4b0a      	ldr	r3, [pc, #40]	@ (80088a4 <HAL_DMA2D_Init+0x90>)
 800887c:	4013      	ands	r3, r2
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	68d1      	ldr	r1, [r2, #12]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	430b      	orrs	r3, r1
 8008888:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	ffffc000 	.word	0xffffc000

080088a8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <HAL_DMA2D_Start+0x1c>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e018      	b.n	80088f6 <HAL_DMA2D_Start+0x4e>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	68b9      	ldr	r1, [r7, #8]
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 fa98 	bl	8008e14 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f042 0201 	orr.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b086      	sub	sp, #24
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	d056      	beq.n	80089c8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800891a:	f7fe fa89 	bl	8006e30 <HAL_GetTick>
 800891e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008920:	e04b      	b.n	80089ba <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8008930:	2b00      	cmp	r3, #0
 8008932:	d023      	beq.n	800897c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f003 0320 	and.w	r3, r3, #32
 800893a:	2b00      	cmp	r3, #0
 800893c:	d005      	beq.n	800894a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008942:	f043 0202 	orr.w	r2, r3, #2
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008958:	f043 0201 	orr.w	r2, r3, #1
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2221      	movs	r2, #33	@ 0x21
 8008966:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2204      	movs	r2, #4
 800896c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e0a5      	b.n	8008ac8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008982:	d01a      	beq.n	80089ba <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008984:	f7fe fa54 	bl	8006e30 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	429a      	cmp	r2, r3
 8008992:	d302      	bcc.n	800899a <HAL_DMA2D_PollForTransfer+0x9c>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10f      	bne.n	80089ba <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800899e:	f043 0220 	orr.w	r2, r3, #32
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2203      	movs	r2, #3
 80089aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e086      	b.n	8008ac8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0ac      	beq.n	8008922 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	f003 0320 	and.w	r3, r3, #32
 80089d2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089da:	f003 0320 	and.w	r3, r3, #32
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d061      	beq.n	8008aae <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80089ea:	f7fe fa21 	bl	8006e30 <HAL_GetTick>
 80089ee:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80089f0:	e056      	b.n	8008aa0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d02e      	beq.n	8008a62 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f003 0308 	and.w	r3, r3, #8
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d005      	beq.n	8008a1a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a12:	f043 0204 	orr.w	r2, r3, #4
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f003 0320 	and.w	r3, r3, #32
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d005      	beq.n	8008a30 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a28:	f043 0202 	orr.w	r2, r3, #2
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a3e:	f043 0201 	orr.w	r2, r3, #1
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2229      	movs	r2, #41	@ 0x29
 8008a4c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2204      	movs	r2, #4
 8008a52:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e032      	b.n	8008ac8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a68:	d01a      	beq.n	8008aa0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008a6a:	f7fe f9e1 	bl	8006e30 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d302      	bcc.n	8008a80 <HAL_DMA2D_PollForTransfer+0x182>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10f      	bne.n	8008aa0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a84:	f043 0220 	orr.w	r2, r3, #32
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2203      	movs	r2, #3
 8008a90:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e013      	b.n	8008ac8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f003 0310 	and.w	r3, r3, #16
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d0a1      	beq.n	80089f2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2212      	movs	r2, #18
 8008ab4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d026      	beq.n	8008b40 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d021      	beq.n	8008b40 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b0a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b10:	f043 0201 	orr.w	r2, r3, #1
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2204      	movs	r2, #4
 8008b24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f003 0320 	and.w	r3, r3, #32
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d026      	beq.n	8008b98 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d021      	beq.n	8008b98 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b62:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b70:	f043 0202 	orr.w	r2, r3, #2
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2204      	movs	r2, #4
 8008b7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d003      	beq.n	8008b98 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f003 0308 	and.w	r3, r3, #8
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d026      	beq.n	8008bf0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d021      	beq.n	8008bf0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008bba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2208      	movs	r2, #8
 8008bc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bc8:	f043 0204 	orr.w	r2, r3, #4
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2204      	movs	r2, #4
 8008bd4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 0304 	and.w	r3, r3, #4
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d013      	beq.n	8008c22 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00e      	beq.n	8008c22 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c12:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2204      	movs	r2, #4
 8008c1a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f853 	bl	8008cc8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f003 0302 	and.w	r3, r3, #2
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d024      	beq.n	8008c76 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d01f      	beq.n	8008c76 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008c44:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01f      	beq.n	8008cc0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d01a      	beq.n	8008cc0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c98:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2210      	movs	r2, #16
 8008ca0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f80e 	bl	8008cdc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008cc0:	bf00      	nop
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d101      	bne.n	8008d10 <HAL_DMA2D_ConfigLayer+0x20>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e079      	b.n	8008e04 <HAL_DMA2D_ConfigLayer+0x114>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	011b      	lsls	r3, r3, #4
 8008d24:	3318      	adds	r3, #24
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	4413      	add	r3, r2
 8008d2a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	041b      	lsls	r3, r3, #16
 8008d36:	4313      	orrs	r3, r2
 8008d38:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8008d3a:	4b35      	ldr	r3, [pc, #212]	@ (8008e10 <HAL_DMA2D_ConfigLayer+0x120>)
 8008d3c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	2b0a      	cmp	r3, #10
 8008d44:	d003      	beq.n	8008d4e <HAL_DMA2D_ConfigLayer+0x5e>
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	2b09      	cmp	r3, #9
 8008d4c:	d107      	bne.n	8008d5e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	e005      	b.n	8008d6a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	061b      	lsls	r3, r3, #24
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d120      	bne.n	8008db2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	43db      	mvns	r3, r3
 8008d7a:	ea02 0103 	and.w	r1, r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	2b0a      	cmp	r3, #10
 8008d98:	d003      	beq.n	8008da2 <HAL_DMA2D_ConfigLayer+0xb2>
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2b09      	cmp	r3, #9
 8008da0:	d127      	bne.n	8008df2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	68da      	ldr	r2, [r3, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008dae:	629a      	str	r2, [r3, #40]	@ 0x28
 8008db0:	e01f      	b.n	8008df2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	69da      	ldr	r2, [r3, #28]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	43db      	mvns	r3, r3
 8008dbc:	ea02 0103 	and.w	r1, r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	6812      	ldr	r2, [r2, #0]
 8008dd2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	2b0a      	cmp	r3, #10
 8008dda:	d003      	beq.n	8008de4 <HAL_DMA2D_ConfigLayer+0xf4>
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	2b09      	cmp	r3, #9
 8008de2:	d106      	bne.n	8008df2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008df0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	ff03000f 	.word	0xff03000f

08008e14 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b08b      	sub	sp, #44	@ 0x2c
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e28:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	041a      	lsls	r2, r3, #16
 8008e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e32:	431a      	orrs	r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e4c:	d174      	bne.n	8008f38 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008e54:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e5c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008e64:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d108      	bne.n	8008e86 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e84:	e053      	b.n	8008f2e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d106      	bne.n	8008e9c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e9a:	e048      	b.n	8008f2e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d111      	bne.n	8008ec8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	0cdb      	lsrs	r3, r3, #19
 8008ea8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	0a9b      	lsrs	r3, r3, #10
 8008eae:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	08db      	lsrs	r3, r3, #3
 8008eb4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	02db      	lsls	r3, r3, #11
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ec6:	e032      	b.n	8008f2e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d117      	bne.n	8008f00 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	0fdb      	lsrs	r3, r3, #31
 8008ed4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	0cdb      	lsrs	r3, r3, #19
 8008eda:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	0adb      	lsrs	r3, r3, #11
 8008ee0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	08db      	lsrs	r3, r3, #3
 8008ee6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	029b      	lsls	r3, r3, #10
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	03db      	lsls	r3, r3, #15
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008efe:	e016      	b.n	8008f2e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	0f1b      	lsrs	r3, r3, #28
 8008f04:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	0d1b      	lsrs	r3, r3, #20
 8008f0a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	0b1b      	lsrs	r3, r3, #12
 8008f10:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	091b      	lsrs	r3, r3, #4
 8008f16:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	011a      	lsls	r2, r3, #4
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	021b      	lsls	r3, r3, #8
 8008f20:	431a      	orrs	r2, r3
 8008f22:	6a3b      	ldr	r3, [r7, #32]
 8008f24:	031b      	lsls	r3, r3, #12
 8008f26:	4313      	orrs	r3, r2
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f34:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008f36:	e003      	b.n	8008f40 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	60da      	str	r2, [r3, #12]
}
 8008f40:	bf00      	nop
 8008f42:	372c      	adds	r7, #44	@ 0x2c
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	2b80      	cmp	r3, #128	@ 0x80
 8008f64:	d106      	bne.n	8008f74 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f001 b8ff 	b.w	800a172 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d102      	bne.n	8008f84 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 8008f7e:	2302      	movs	r3, #2
 8008f80:	f001 b8f7 	b.w	800a172 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	f041 80e5 	bne.w	800a164 <HAL_DMAEx_MultiBufferStart_IT+0x1218>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008fb6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	68b9      	ldr	r1, [r7, #8]
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f001 f910 	bl	800a1ec <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4b8d      	ldr	r3, [pc, #564]	@ (8009208 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d960      	bls.n	800909a <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a8b      	ldr	r2, [pc, #556]	@ (800920c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d057      	beq.n	8009092 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a8a      	ldr	r2, [pc, #552]	@ (8009210 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d050      	beq.n	800908e <HAL_DMAEx_MultiBufferStart_IT+0x142>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a88      	ldr	r2, [pc, #544]	@ (8009214 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d049      	beq.n	800908a <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a87      	ldr	r2, [pc, #540]	@ (8009218 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d042      	beq.n	8009086 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a85      	ldr	r2, [pc, #532]	@ (800921c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d03a      	beq.n	8009080 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a84      	ldr	r2, [pc, #528]	@ (8009220 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d032      	beq.n	800907a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a82      	ldr	r2, [pc, #520]	@ (8009224 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d02a      	beq.n	8009074 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a81      	ldr	r2, [pc, #516]	@ (8009228 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d022      	beq.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a7f      	ldr	r2, [pc, #508]	@ (800922c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d01a      	beq.n	8009068 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a7e      	ldr	r2, [pc, #504]	@ (8009230 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d012      	beq.n	8009062 <HAL_DMAEx_MultiBufferStart_IT+0x116>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a7c      	ldr	r2, [pc, #496]	@ (8009234 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00a      	beq.n	800905c <HAL_DMAEx_MultiBufferStart_IT+0x110>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a7b      	ldr	r2, [pc, #492]	@ (8009238 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d102      	bne.n	8009056 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 8009050:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009054:	e01e      	b.n	8009094 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8009056:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800905a:	e01b      	b.n	8009094 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800905c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009060:	e018      	b.n	8009094 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8009062:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009066:	e015      	b.n	8009094 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8009068:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800906c:	e012      	b.n	8009094 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800906e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009072:	e00f      	b.n	8009094 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8009074:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009078:	e00c      	b.n	8009094 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800907a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800907e:	e009      	b.n	8009094 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8009080:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009084:	e006      	b.n	8009094 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8009086:	2320      	movs	r3, #32
 8009088:	e004      	b.n	8009094 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800908a:	2320      	movs	r3, #32
 800908c:	e002      	b.n	8009094 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800908e:	2320      	movs	r3, #32
 8009090:	e000      	b.n	8009094 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8009092:	2320      	movs	r3, #32
 8009094:	4a69      	ldr	r2, [pc, #420]	@ (800923c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8009096:	60d3      	str	r3, [r2, #12]
 8009098:	e14f      	b.n	800933a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	4b67      	ldr	r3, [pc, #412]	@ (8009240 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d960      	bls.n	8009168 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a58      	ldr	r2, [pc, #352]	@ (800920c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d057      	beq.n	8009160 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a56      	ldr	r2, [pc, #344]	@ (8009210 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d050      	beq.n	800915c <HAL_DMAEx_MultiBufferStart_IT+0x210>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a55      	ldr	r2, [pc, #340]	@ (8009214 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d049      	beq.n	8009158 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a53      	ldr	r2, [pc, #332]	@ (8009218 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d042      	beq.n	8009154 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a52      	ldr	r2, [pc, #328]	@ (800921c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d03a      	beq.n	800914e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a50      	ldr	r2, [pc, #320]	@ (8009220 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d032      	beq.n	8009148 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a4f      	ldr	r2, [pc, #316]	@ (8009224 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d02a      	beq.n	8009142 <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a4d      	ldr	r2, [pc, #308]	@ (8009228 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d022      	beq.n	800913c <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a4c      	ldr	r2, [pc, #304]	@ (800922c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d01a      	beq.n	8009136 <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a4a      	ldr	r2, [pc, #296]	@ (8009230 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d012      	beq.n	8009130 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a49      	ldr	r2, [pc, #292]	@ (8009234 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d00a      	beq.n	800912a <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a47      	ldr	r2, [pc, #284]	@ (8009238 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d102      	bne.n	8009124 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 800911e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009122:	e01e      	b.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8009124:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009128:	e01b      	b.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800912a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800912e:	e018      	b.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8009130:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009134:	e015      	b.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8009136:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800913a:	e012      	b.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800913c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009140:	e00f      	b.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8009142:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009146:	e00c      	b.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8009148:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800914c:	e009      	b.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800914e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009152:	e006      	b.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8009154:	2320      	movs	r3, #32
 8009156:	e004      	b.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8009158:	2320      	movs	r3, #32
 800915a:	e002      	b.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800915c:	2320      	movs	r3, #32
 800915e:	e000      	b.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8009160:	2320      	movs	r3, #32
 8009162:	4a36      	ldr	r2, [pc, #216]	@ (800923c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8009164:	6093      	str	r3, [r2, #8]
 8009166:	e0e8      	b.n	800933a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	461a      	mov	r2, r3
 800916e:	4b35      	ldr	r3, [pc, #212]	@ (8009244 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8009170:	429a      	cmp	r2, r3
 8009172:	f240 8082 	bls.w	800927a <HAL_DMAEx_MultiBufferStart_IT+0x32e>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a24      	ldr	r2, [pc, #144]	@ (800920c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d078      	beq.n	8009272 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a22      	ldr	r2, [pc, #136]	@ (8009210 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d071      	beq.n	800926e <HAL_DMAEx_MultiBufferStart_IT+0x322>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a21      	ldr	r2, [pc, #132]	@ (8009214 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d06a      	beq.n	800926a <HAL_DMAEx_MultiBufferStart_IT+0x31e>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a1f      	ldr	r2, [pc, #124]	@ (8009218 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d063      	beq.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0x31a>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a1e      	ldr	r2, [pc, #120]	@ (800921c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d05b      	beq.n	8009260 <HAL_DMAEx_MultiBufferStart_IT+0x314>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a1c      	ldr	r2, [pc, #112]	@ (8009220 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d053      	beq.n	800925a <HAL_DMAEx_MultiBufferStart_IT+0x30e>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a1b      	ldr	r2, [pc, #108]	@ (8009224 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d04b      	beq.n	8009254 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a19      	ldr	r2, [pc, #100]	@ (8009228 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d043      	beq.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x302>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a18      	ldr	r2, [pc, #96]	@ (800922c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d03b      	beq.n	8009248 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a16      	ldr	r2, [pc, #88]	@ (8009230 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d012      	beq.n	8009200 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a15      	ldr	r2, [pc, #84]	@ (8009234 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00a      	beq.n	80091fa <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a13      	ldr	r2, [pc, #76]	@ (8009238 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d102      	bne.n	80091f4 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 80091ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80091f2:	e03f      	b.n	8009274 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80091f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80091f8:	e03c      	b.n	8009274 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80091fa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80091fe:	e039      	b.n	8009274 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8009200:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009204:	e036      	b.n	8009274 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8009206:	bf00      	nop
 8009208:	40026458 	.word	0x40026458
 800920c:	40026010 	.word	0x40026010
 8009210:	40026410 	.word	0x40026410
 8009214:	40026070 	.word	0x40026070
 8009218:	40026470 	.word	0x40026470
 800921c:	40026028 	.word	0x40026028
 8009220:	40026428 	.word	0x40026428
 8009224:	40026088 	.word	0x40026088
 8009228:	40026488 	.word	0x40026488
 800922c:	40026040 	.word	0x40026040
 8009230:	40026440 	.word	0x40026440
 8009234:	400260a0 	.word	0x400260a0
 8009238:	400264a0 	.word	0x400264a0
 800923c:	40026400 	.word	0x40026400
 8009240:	400260b8 	.word	0x400260b8
 8009244:	40026058 	.word	0x40026058
 8009248:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800924c:	e012      	b.n	8009274 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800924e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009252:	e00f      	b.n	8009274 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8009254:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009258:	e00c      	b.n	8009274 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800925a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800925e:	e009      	b.n	8009274 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8009260:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009264:	e006      	b.n	8009274 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8009266:	2320      	movs	r3, #32
 8009268:	e004      	b.n	8009274 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800926a:	2320      	movs	r3, #32
 800926c:	e002      	b.n	8009274 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800926e:	2320      	movs	r3, #32
 8009270:	e000      	b.n	8009274 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8009272:	2320      	movs	r3, #32
 8009274:	4a8c      	ldr	r2, [pc, #560]	@ (80094a8 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8009276:	60d3      	str	r3, [r2, #12]
 8009278:	e05f      	b.n	800933a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a8b      	ldr	r2, [pc, #556]	@ (80094ac <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d057      	beq.n	8009334 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a89      	ldr	r2, [pc, #548]	@ (80094b0 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d050      	beq.n	8009330 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a88      	ldr	r2, [pc, #544]	@ (80094b4 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d049      	beq.n	800932c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a86      	ldr	r2, [pc, #536]	@ (80094b8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d042      	beq.n	8009328 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a85      	ldr	r2, [pc, #532]	@ (80094bc <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d03a      	beq.n	8009322 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a83      	ldr	r2, [pc, #524]	@ (80094c0 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d032      	beq.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a82      	ldr	r2, [pc, #520]	@ (80094c4 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d02a      	beq.n	8009316 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a80      	ldr	r2, [pc, #512]	@ (80094c8 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d022      	beq.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x3c4>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a7f      	ldr	r2, [pc, #508]	@ (80094cc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d01a      	beq.n	800930a <HAL_DMAEx_MultiBufferStart_IT+0x3be>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a7d      	ldr	r2, [pc, #500]	@ (80094d0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d012      	beq.n	8009304 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a7c      	ldr	r2, [pc, #496]	@ (80094d4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d00a      	beq.n	80092fe <HAL_DMAEx_MultiBufferStart_IT+0x3b2>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a7a      	ldr	r2, [pc, #488]	@ (80094d8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d102      	bne.n	80092f8 <HAL_DMAEx_MultiBufferStart_IT+0x3ac>
 80092f2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80092f6:	e01e      	b.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80092f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80092fc:	e01b      	b.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80092fe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009302:	e018      	b.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8009304:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009308:	e015      	b.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800930a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800930e:	e012      	b.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8009310:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009314:	e00f      	b.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8009316:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800931a:	e00c      	b.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800931c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009320:	e009      	b.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8009322:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009326:	e006      	b.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8009328:	2320      	movs	r3, #32
 800932a:	e004      	b.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800932c:	2320      	movs	r3, #32
 800932e:	e002      	b.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8009330:	2320      	movs	r3, #32
 8009332:	e000      	b.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8009334:	2320      	movs	r3, #32
 8009336:	4a5c      	ldr	r2, [pc, #368]	@ (80094a8 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8009338:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	4b66      	ldr	r3, [pc, #408]	@ (80094dc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8009342:	429a      	cmp	r2, r3
 8009344:	d960      	bls.n	8009408 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a58      	ldr	r2, [pc, #352]	@ (80094ac <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d057      	beq.n	8009400 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a56      	ldr	r2, [pc, #344]	@ (80094b0 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d050      	beq.n	80093fc <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a55      	ldr	r2, [pc, #340]	@ (80094b4 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d049      	beq.n	80093f8 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a53      	ldr	r2, [pc, #332]	@ (80094b8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d042      	beq.n	80093f4 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a52      	ldr	r2, [pc, #328]	@ (80094bc <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d03a      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a50      	ldr	r2, [pc, #320]	@ (80094c0 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d032      	beq.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a4f      	ldr	r2, [pc, #316]	@ (80094c4 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d02a      	beq.n	80093e2 <HAL_DMAEx_MultiBufferStart_IT+0x496>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a4d      	ldr	r2, [pc, #308]	@ (80094c8 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d022      	beq.n	80093dc <HAL_DMAEx_MultiBufferStart_IT+0x490>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a4c      	ldr	r2, [pc, #304]	@ (80094cc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d01a      	beq.n	80093d6 <HAL_DMAEx_MultiBufferStart_IT+0x48a>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a4a      	ldr	r2, [pc, #296]	@ (80094d0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d012      	beq.n	80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x484>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a49      	ldr	r2, [pc, #292]	@ (80094d4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d00a      	beq.n	80093ca <HAL_DMAEx_MultiBufferStart_IT+0x47e>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a47      	ldr	r2, [pc, #284]	@ (80094d8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d102      	bne.n	80093c4 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 80093be:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80093c2:	e01e      	b.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80093c4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80093c8:	e01b      	b.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80093ca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80093ce:	e018      	b.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80093d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80093d4:	e015      	b.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80093d6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80093da:	e012      	b.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80093dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093e0:	e00f      	b.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80093e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093e6:	e00c      	b.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80093e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093ec:	e009      	b.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80093ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093f2:	e006      	b.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80093f4:	2310      	movs	r3, #16
 80093f6:	e004      	b.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80093f8:	2310      	movs	r3, #16
 80093fa:	e002      	b.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80093fc:	2310      	movs	r3, #16
 80093fe:	e000      	b.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8009400:	2310      	movs	r3, #16
 8009402:	4a37      	ldr	r2, [pc, #220]	@ (80094e0 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8009404:	60d3      	str	r3, [r2, #12]
 8009406:	e14f      	b.n	80096a8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	4b35      	ldr	r3, [pc, #212]	@ (80094e4 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8009410:	429a      	cmp	r2, r3
 8009412:	f240 8082 	bls.w	800951a <HAL_DMAEx_MultiBufferStart_IT+0x5ce>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a24      	ldr	r2, [pc, #144]	@ (80094ac <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d078      	beq.n	8009512 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a22      	ldr	r2, [pc, #136]	@ (80094b0 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d071      	beq.n	800950e <HAL_DMAEx_MultiBufferStart_IT+0x5c2>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a21      	ldr	r2, [pc, #132]	@ (80094b4 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d06a      	beq.n	800950a <HAL_DMAEx_MultiBufferStart_IT+0x5be>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a1f      	ldr	r2, [pc, #124]	@ (80094b8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d063      	beq.n	8009506 <HAL_DMAEx_MultiBufferStart_IT+0x5ba>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a1e      	ldr	r2, [pc, #120]	@ (80094bc <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d05b      	beq.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a1c      	ldr	r2, [pc, #112]	@ (80094c0 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d053      	beq.n	80094fa <HAL_DMAEx_MultiBufferStart_IT+0x5ae>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a1b      	ldr	r2, [pc, #108]	@ (80094c4 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d04b      	beq.n	80094f4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a19      	ldr	r2, [pc, #100]	@ (80094c8 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d043      	beq.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a18      	ldr	r2, [pc, #96]	@ (80094cc <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d03b      	beq.n	80094e8 <HAL_DMAEx_MultiBufferStart_IT+0x59c>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a16      	ldr	r2, [pc, #88]	@ (80094d0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d012      	beq.n	80094a0 <HAL_DMAEx_MultiBufferStart_IT+0x554>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a15      	ldr	r2, [pc, #84]	@ (80094d4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d00a      	beq.n	800949a <HAL_DMAEx_MultiBufferStart_IT+0x54e>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a13      	ldr	r2, [pc, #76]	@ (80094d8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d102      	bne.n	8009494 <HAL_DMAEx_MultiBufferStart_IT+0x548>
 800948e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009492:	e03f      	b.n	8009514 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8009494:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009498:	e03c      	b.n	8009514 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800949a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800949e:	e039      	b.n	8009514 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80094a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80094a4:	e036      	b.n	8009514 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80094a6:	bf00      	nop
 80094a8:	40026000 	.word	0x40026000
 80094ac:	40026010 	.word	0x40026010
 80094b0:	40026410 	.word	0x40026410
 80094b4:	40026070 	.word	0x40026070
 80094b8:	40026470 	.word	0x40026470
 80094bc:	40026028 	.word	0x40026028
 80094c0:	40026428 	.word	0x40026428
 80094c4:	40026088 	.word	0x40026088
 80094c8:	40026488 	.word	0x40026488
 80094cc:	40026040 	.word	0x40026040
 80094d0:	40026440 	.word	0x40026440
 80094d4:	400260a0 	.word	0x400260a0
 80094d8:	400264a0 	.word	0x400264a0
 80094dc:	40026458 	.word	0x40026458
 80094e0:	40026400 	.word	0x40026400
 80094e4:	400260b8 	.word	0x400260b8
 80094e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80094ec:	e012      	b.n	8009514 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80094ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094f2:	e00f      	b.n	8009514 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80094f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094f8:	e00c      	b.n	8009514 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80094fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094fe:	e009      	b.n	8009514 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8009500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009504:	e006      	b.n	8009514 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8009506:	2310      	movs	r3, #16
 8009508:	e004      	b.n	8009514 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800950a:	2310      	movs	r3, #16
 800950c:	e002      	b.n	8009514 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800950e:	2310      	movs	r3, #16
 8009510:	e000      	b.n	8009514 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8009512:	2310      	movs	r3, #16
 8009514:	4a8c      	ldr	r2, [pc, #560]	@ (8009748 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>)
 8009516:	6093      	str	r3, [r2, #8]
 8009518:	e0c6      	b.n	80096a8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	4b8a      	ldr	r3, [pc, #552]	@ (800974c <HAL_DMAEx_MultiBufferStart_IT+0x800>)
 8009522:	429a      	cmp	r2, r3
 8009524:	d960      	bls.n	80095e8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a89      	ldr	r2, [pc, #548]	@ (8009750 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d057      	beq.n	80095e0 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a87      	ldr	r2, [pc, #540]	@ (8009754 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d050      	beq.n	80095dc <HAL_DMAEx_MultiBufferStart_IT+0x690>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a86      	ldr	r2, [pc, #536]	@ (8009758 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d049      	beq.n	80095d8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a84      	ldr	r2, [pc, #528]	@ (800975c <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d042      	beq.n	80095d4 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a83      	ldr	r2, [pc, #524]	@ (8009760 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d03a      	beq.n	80095ce <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a81      	ldr	r2, [pc, #516]	@ (8009764 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d032      	beq.n	80095c8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a80      	ldr	r2, [pc, #512]	@ (8009768 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d02a      	beq.n	80095c2 <HAL_DMAEx_MultiBufferStart_IT+0x676>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a7e      	ldr	r2, [pc, #504]	@ (800976c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d022      	beq.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a7d      	ldr	r2, [pc, #500]	@ (8009770 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d01a      	beq.n	80095b6 <HAL_DMAEx_MultiBufferStart_IT+0x66a>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a7b      	ldr	r2, [pc, #492]	@ (8009774 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d012      	beq.n	80095b0 <HAL_DMAEx_MultiBufferStart_IT+0x664>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a7a      	ldr	r2, [pc, #488]	@ (8009778 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00a      	beq.n	80095aa <HAL_DMAEx_MultiBufferStart_IT+0x65e>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a78      	ldr	r2, [pc, #480]	@ (800977c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d102      	bne.n	80095a4 <HAL_DMAEx_MultiBufferStart_IT+0x658>
 800959e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80095a2:	e01e      	b.n	80095e2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80095a4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80095a8:	e01b      	b.n	80095e2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80095aa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80095ae:	e018      	b.n	80095e2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80095b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80095b4:	e015      	b.n	80095e2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80095b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80095ba:	e012      	b.n	80095e2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80095bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095c0:	e00f      	b.n	80095e2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80095c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095c6:	e00c      	b.n	80095e2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80095c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095cc:	e009      	b.n	80095e2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80095ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095d2:	e006      	b.n	80095e2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80095d4:	2310      	movs	r3, #16
 80095d6:	e004      	b.n	80095e2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80095d8:	2310      	movs	r3, #16
 80095da:	e002      	b.n	80095e2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80095dc:	2310      	movs	r3, #16
 80095de:	e000      	b.n	80095e2 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80095e0:	2310      	movs	r3, #16
 80095e2:	4a67      	ldr	r2, [pc, #412]	@ (8009780 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80095e4:	60d3      	str	r3, [r2, #12]
 80095e6:	e05f      	b.n	80096a8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a58      	ldr	r2, [pc, #352]	@ (8009750 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d057      	beq.n	80096a2 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a57      	ldr	r2, [pc, #348]	@ (8009754 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d050      	beq.n	800969e <HAL_DMAEx_MultiBufferStart_IT+0x752>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a55      	ldr	r2, [pc, #340]	@ (8009758 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d049      	beq.n	800969a <HAL_DMAEx_MultiBufferStart_IT+0x74e>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a54      	ldr	r2, [pc, #336]	@ (800975c <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d042      	beq.n	8009696 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a52      	ldr	r2, [pc, #328]	@ (8009760 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d03a      	beq.n	8009690 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a51      	ldr	r2, [pc, #324]	@ (8009764 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d032      	beq.n	800968a <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a4f      	ldr	r2, [pc, #316]	@ (8009768 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d02a      	beq.n	8009684 <HAL_DMAEx_MultiBufferStart_IT+0x738>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a4e      	ldr	r2, [pc, #312]	@ (800976c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d022      	beq.n	800967e <HAL_DMAEx_MultiBufferStart_IT+0x732>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a4c      	ldr	r2, [pc, #304]	@ (8009770 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d01a      	beq.n	8009678 <HAL_DMAEx_MultiBufferStart_IT+0x72c>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a4b      	ldr	r2, [pc, #300]	@ (8009774 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d012      	beq.n	8009672 <HAL_DMAEx_MultiBufferStart_IT+0x726>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a49      	ldr	r2, [pc, #292]	@ (8009778 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d00a      	beq.n	800966c <HAL_DMAEx_MultiBufferStart_IT+0x720>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a48      	ldr	r2, [pc, #288]	@ (800977c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d102      	bne.n	8009666 <HAL_DMAEx_MultiBufferStart_IT+0x71a>
 8009660:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009664:	e01e      	b.n	80096a4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8009666:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800966a:	e01b      	b.n	80096a4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800966c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009670:	e018      	b.n	80096a4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8009672:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009676:	e015      	b.n	80096a4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8009678:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800967c:	e012      	b.n	80096a4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800967e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009682:	e00f      	b.n	80096a4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8009684:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009688:	e00c      	b.n	80096a4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800968a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800968e:	e009      	b.n	80096a4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8009690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009694:	e006      	b.n	80096a4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8009696:	2310      	movs	r3, #16
 8009698:	e004      	b.n	80096a4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800969a:	2310      	movs	r3, #16
 800969c:	e002      	b.n	80096a4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800969e:	2310      	movs	r3, #16
 80096a0:	e000      	b.n	80096a4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80096a2:	2310      	movs	r3, #16
 80096a4:	4a36      	ldr	r2, [pc, #216]	@ (8009780 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80096a6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	461a      	mov	r2, r3
 80096ae:	4b35      	ldr	r3, [pc, #212]	@ (8009784 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80096b0:	429a      	cmp	r2, r3
 80096b2:	f240 8082 	bls.w	80097ba <HAL_DMAEx_MultiBufferStart_IT+0x86e>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a25      	ldr	r2, [pc, #148]	@ (8009750 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d078      	beq.n	80097b2 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a23      	ldr	r2, [pc, #140]	@ (8009754 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d071      	beq.n	80097ae <HAL_DMAEx_MultiBufferStart_IT+0x862>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a22      	ldr	r2, [pc, #136]	@ (8009758 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d06a      	beq.n	80097aa <HAL_DMAEx_MultiBufferStart_IT+0x85e>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a20      	ldr	r2, [pc, #128]	@ (800975c <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d063      	beq.n	80097a6 <HAL_DMAEx_MultiBufferStart_IT+0x85a>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009760 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d05b      	beq.n	80097a0 <HAL_DMAEx_MultiBufferStart_IT+0x854>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009764 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d053      	beq.n	800979a <HAL_DMAEx_MultiBufferStart_IT+0x84e>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009768 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d04b      	beq.n	8009794 <HAL_DMAEx_MultiBufferStart_IT+0x848>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a1a      	ldr	r2, [pc, #104]	@ (800976c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d043      	beq.n	800978e <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a19      	ldr	r2, [pc, #100]	@ (8009770 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d03b      	beq.n	8009788 <HAL_DMAEx_MultiBufferStart_IT+0x83c>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a17      	ldr	r2, [pc, #92]	@ (8009774 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d012      	beq.n	8009740 <HAL_DMAEx_MultiBufferStart_IT+0x7f4>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a16      	ldr	r2, [pc, #88]	@ (8009778 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d00a      	beq.n	800973a <HAL_DMAEx_MultiBufferStart_IT+0x7ee>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a14      	ldr	r2, [pc, #80]	@ (800977c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d102      	bne.n	8009734 <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
 800972e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009732:	e03f      	b.n	80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8009734:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009738:	e03c      	b.n	80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 800973a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800973e:	e039      	b.n	80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8009740:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009744:	e036      	b.n	80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8009746:	bf00      	nop
 8009748:	40026400 	.word	0x40026400
 800974c:	40026058 	.word	0x40026058
 8009750:	40026010 	.word	0x40026010
 8009754:	40026410 	.word	0x40026410
 8009758:	40026070 	.word	0x40026070
 800975c:	40026470 	.word	0x40026470
 8009760:	40026028 	.word	0x40026028
 8009764:	40026428 	.word	0x40026428
 8009768:	40026088 	.word	0x40026088
 800976c:	40026488 	.word	0x40026488
 8009770:	40026040 	.word	0x40026040
 8009774:	40026440 	.word	0x40026440
 8009778:	400260a0 	.word	0x400260a0
 800977c:	400264a0 	.word	0x400264a0
 8009780:	40026000 	.word	0x40026000
 8009784:	40026458 	.word	0x40026458
 8009788:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800978c:	e012      	b.n	80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 800978e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009792:	e00f      	b.n	80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8009794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009798:	e00c      	b.n	80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 800979a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800979e:	e009      	b.n	80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80097a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097a4:	e006      	b.n	80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80097a6:	2308      	movs	r3, #8
 80097a8:	e004      	b.n	80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80097aa:	2308      	movs	r3, #8
 80097ac:	e002      	b.n	80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80097ae:	2308      	movs	r3, #8
 80097b0:	e000      	b.n	80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80097b2:	2308      	movs	r3, #8
 80097b4:	4a8c      	ldr	r2, [pc, #560]	@ (80099e8 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 80097b6:	60d3      	str	r3, [r2, #12]
 80097b8:	e14e      	b.n	8009a58 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	4b8a      	ldr	r3, [pc, #552]	@ (80099ec <HAL_DMAEx_MultiBufferStart_IT+0xaa0>)
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d960      	bls.n	8009888 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a89      	ldr	r2, [pc, #548]	@ (80099f0 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d057      	beq.n	8009880 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a87      	ldr	r2, [pc, #540]	@ (80099f4 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d050      	beq.n	800987c <HAL_DMAEx_MultiBufferStart_IT+0x930>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a86      	ldr	r2, [pc, #536]	@ (80099f8 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d049      	beq.n	8009878 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a84      	ldr	r2, [pc, #528]	@ (80099fc <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d042      	beq.n	8009874 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a83      	ldr	r2, [pc, #524]	@ (8009a00 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d03a      	beq.n	800986e <HAL_DMAEx_MultiBufferStart_IT+0x922>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a81      	ldr	r2, [pc, #516]	@ (8009a04 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d032      	beq.n	8009868 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a80      	ldr	r2, [pc, #512]	@ (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d02a      	beq.n	8009862 <HAL_DMAEx_MultiBufferStart_IT+0x916>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a7e      	ldr	r2, [pc, #504]	@ (8009a0c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d022      	beq.n	800985c <HAL_DMAEx_MultiBufferStart_IT+0x910>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a7d      	ldr	r2, [pc, #500]	@ (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d01a      	beq.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x90a>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a7b      	ldr	r2, [pc, #492]	@ (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d012      	beq.n	8009850 <HAL_DMAEx_MultiBufferStart_IT+0x904>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a7a      	ldr	r2, [pc, #488]	@ (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d00a      	beq.n	800984a <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a78      	ldr	r2, [pc, #480]	@ (8009a1c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d102      	bne.n	8009844 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 800983e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009842:	e01e      	b.n	8009882 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8009844:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009848:	e01b      	b.n	8009882 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800984a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800984e:	e018      	b.n	8009882 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8009850:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009854:	e015      	b.n	8009882 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8009856:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800985a:	e012      	b.n	8009882 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800985c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009860:	e00f      	b.n	8009882 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8009862:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009866:	e00c      	b.n	8009882 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8009868:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800986c:	e009      	b.n	8009882 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800986e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009872:	e006      	b.n	8009882 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8009874:	2308      	movs	r3, #8
 8009876:	e004      	b.n	8009882 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8009878:	2308      	movs	r3, #8
 800987a:	e002      	b.n	8009882 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800987c:	2308      	movs	r3, #8
 800987e:	e000      	b.n	8009882 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8009880:	2308      	movs	r3, #8
 8009882:	4a59      	ldr	r2, [pc, #356]	@ (80099e8 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 8009884:	6093      	str	r3, [r2, #8]
 8009886:	e0e7      	b.n	8009a58 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	4b64      	ldr	r3, [pc, #400]	@ (8009a20 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8009890:	429a      	cmp	r2, r3
 8009892:	d960      	bls.n	8009956 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a55      	ldr	r2, [pc, #340]	@ (80099f0 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d057      	beq.n	800994e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a54      	ldr	r2, [pc, #336]	@ (80099f4 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d050      	beq.n	800994a <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a52      	ldr	r2, [pc, #328]	@ (80099f8 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d049      	beq.n	8009946 <HAL_DMAEx_MultiBufferStart_IT+0x9fa>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a51      	ldr	r2, [pc, #324]	@ (80099fc <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d042      	beq.n	8009942 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a4f      	ldr	r2, [pc, #316]	@ (8009a00 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d03a      	beq.n	800993c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a4e      	ldr	r2, [pc, #312]	@ (8009a04 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d032      	beq.n	8009936 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a4c      	ldr	r2, [pc, #304]	@ (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d02a      	beq.n	8009930 <HAL_DMAEx_MultiBufferStart_IT+0x9e4>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a4b      	ldr	r2, [pc, #300]	@ (8009a0c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d022      	beq.n	800992a <HAL_DMAEx_MultiBufferStart_IT+0x9de>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a49      	ldr	r2, [pc, #292]	@ (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d01a      	beq.n	8009924 <HAL_DMAEx_MultiBufferStart_IT+0x9d8>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a48      	ldr	r2, [pc, #288]	@ (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d012      	beq.n	800991e <HAL_DMAEx_MultiBufferStart_IT+0x9d2>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a46      	ldr	r2, [pc, #280]	@ (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d00a      	beq.n	8009918 <HAL_DMAEx_MultiBufferStart_IT+0x9cc>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a45      	ldr	r2, [pc, #276]	@ (8009a1c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d102      	bne.n	8009912 <HAL_DMAEx_MultiBufferStart_IT+0x9c6>
 800990c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009910:	e01e      	b.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8009912:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009916:	e01b      	b.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8009918:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800991c:	e018      	b.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800991e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009922:	e015      	b.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8009924:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009928:	e012      	b.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800992a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800992e:	e00f      	b.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8009930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009934:	e00c      	b.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8009936:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800993a:	e009      	b.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800993c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009940:	e006      	b.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8009942:	2308      	movs	r3, #8
 8009944:	e004      	b.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8009946:	2308      	movs	r3, #8
 8009948:	e002      	b.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800994a:	2308      	movs	r3, #8
 800994c:	e000      	b.n	8009950 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800994e:	2308      	movs	r3, #8
 8009950:	4a34      	ldr	r2, [pc, #208]	@ (8009a24 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8009952:	60d3      	str	r3, [r2, #12]
 8009954:	e080      	b.n	8009a58 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a25      	ldr	r2, [pc, #148]	@ (80099f0 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d078      	beq.n	8009a52 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a23      	ldr	r2, [pc, #140]	@ (80099f4 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d071      	beq.n	8009a4e <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a22      	ldr	r2, [pc, #136]	@ (80099f8 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d06a      	beq.n	8009a4a <HAL_DMAEx_MultiBufferStart_IT+0xafe>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a20      	ldr	r2, [pc, #128]	@ (80099fc <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d063      	beq.n	8009a46 <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a1f      	ldr	r2, [pc, #124]	@ (8009a00 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d05b      	beq.n	8009a40 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a1d      	ldr	r2, [pc, #116]	@ (8009a04 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d053      	beq.n	8009a3a <HAL_DMAEx_MultiBufferStart_IT+0xaee>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a1c      	ldr	r2, [pc, #112]	@ (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d04b      	beq.n	8009a34 <HAL_DMAEx_MultiBufferStart_IT+0xae8>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a1a      	ldr	r2, [pc, #104]	@ (8009a0c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d043      	beq.n	8009a2e <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a19      	ldr	r2, [pc, #100]	@ (8009a10 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d03b      	beq.n	8009a28 <HAL_DMAEx_MultiBufferStart_IT+0xadc>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a17      	ldr	r2, [pc, #92]	@ (8009a14 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d012      	beq.n	80099e0 <HAL_DMAEx_MultiBufferStart_IT+0xa94>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a16      	ldr	r2, [pc, #88]	@ (8009a18 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d00a      	beq.n	80099da <HAL_DMAEx_MultiBufferStart_IT+0xa8e>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a14      	ldr	r2, [pc, #80]	@ (8009a1c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d102      	bne.n	80099d4 <HAL_DMAEx_MultiBufferStart_IT+0xa88>
 80099ce:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80099d2:	e03f      	b.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80099d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80099d8:	e03c      	b.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80099da:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80099de:	e039      	b.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80099e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80099e4:	e036      	b.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 80099e6:	bf00      	nop
 80099e8:	40026400 	.word	0x40026400
 80099ec:	400260b8 	.word	0x400260b8
 80099f0:	40026010 	.word	0x40026010
 80099f4:	40026410 	.word	0x40026410
 80099f8:	40026070 	.word	0x40026070
 80099fc:	40026470 	.word	0x40026470
 8009a00:	40026028 	.word	0x40026028
 8009a04:	40026428 	.word	0x40026428
 8009a08:	40026088 	.word	0x40026088
 8009a0c:	40026488 	.word	0x40026488
 8009a10:	40026040 	.word	0x40026040
 8009a14:	40026440 	.word	0x40026440
 8009a18:	400260a0 	.word	0x400260a0
 8009a1c:	400264a0 	.word	0x400264a0
 8009a20:	40026058 	.word	0x40026058
 8009a24:	40026000 	.word	0x40026000
 8009a28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009a2c:	e012      	b.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8009a2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a32:	e00f      	b.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8009a34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a38:	e00c      	b.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8009a3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a3e:	e009      	b.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8009a40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a44:	e006      	b.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8009a46:	2308      	movs	r3, #8
 8009a48:	e004      	b.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8009a4a:	2308      	movs	r3, #8
 8009a4c:	e002      	b.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8009a4e:	2308      	movs	r3, #8
 8009a50:	e000      	b.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8009a52:	2308      	movs	r3, #8
 8009a54:	4a8a      	ldr	r2, [pc, #552]	@ (8009c80 <HAL_DMAEx_MultiBufferStart_IT+0xd34>)
 8009a56:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	4b89      	ldr	r3, [pc, #548]	@ (8009c84 <HAL_DMAEx_MultiBufferStart_IT+0xd38>)
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d960      	bls.n	8009b26 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a87      	ldr	r2, [pc, #540]	@ (8009c88 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d057      	beq.n	8009b1e <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a86      	ldr	r2, [pc, #536]	@ (8009c8c <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d050      	beq.n	8009b1a <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a84      	ldr	r2, [pc, #528]	@ (8009c90 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d049      	beq.n	8009b16 <HAL_DMAEx_MultiBufferStart_IT+0xbca>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a83      	ldr	r2, [pc, #524]	@ (8009c94 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d042      	beq.n	8009b12 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a81      	ldr	r2, [pc, #516]	@ (8009c98 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d03a      	beq.n	8009b0c <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a80      	ldr	r2, [pc, #512]	@ (8009c9c <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d032      	beq.n	8009b06 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a7e      	ldr	r2, [pc, #504]	@ (8009ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d02a      	beq.n	8009b00 <HAL_DMAEx_MultiBufferStart_IT+0xbb4>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a7d      	ldr	r2, [pc, #500]	@ (8009ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d022      	beq.n	8009afa <HAL_DMAEx_MultiBufferStart_IT+0xbae>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a7b      	ldr	r2, [pc, #492]	@ (8009ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d01a      	beq.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xba8>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a7a      	ldr	r2, [pc, #488]	@ (8009cac <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d012      	beq.n	8009aee <HAL_DMAEx_MultiBufferStart_IT+0xba2>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a78      	ldr	r2, [pc, #480]	@ (8009cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d00a      	beq.n	8009ae8 <HAL_DMAEx_MultiBufferStart_IT+0xb9c>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a77      	ldr	r2, [pc, #476]	@ (8009cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d102      	bne.n	8009ae2 <HAL_DMAEx_MultiBufferStart_IT+0xb96>
 8009adc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009ae0:	e01e      	b.n	8009b20 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8009ae2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ae6:	e01b      	b.n	8009b20 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8009ae8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009aec:	e018      	b.n	8009b20 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8009aee:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009af2:	e015      	b.n	8009b20 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8009af4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009af8:	e012      	b.n	8009b20 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8009afa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009afe:	e00f      	b.n	8009b20 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8009b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b04:	e00c      	b.n	8009b20 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8009b06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b0a:	e009      	b.n	8009b20 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8009b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b10:	e006      	b.n	8009b20 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8009b12:	2304      	movs	r3, #4
 8009b14:	e004      	b.n	8009b20 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8009b16:	2304      	movs	r3, #4
 8009b18:	e002      	b.n	8009b20 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8009b1a:	2304      	movs	r3, #4
 8009b1c:	e000      	b.n	8009b20 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8009b1e:	2304      	movs	r3, #4
 8009b20:	4a65      	ldr	r2, [pc, #404]	@ (8009cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009b22:	60d3      	str	r3, [r2, #12]
 8009b24:	e150      	b.n	8009dc8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	4b63      	ldr	r3, [pc, #396]	@ (8009cbc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d960      	bls.n	8009bf4 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a54      	ldr	r2, [pc, #336]	@ (8009c88 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d057      	beq.n	8009bec <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a52      	ldr	r2, [pc, #328]	@ (8009c8c <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d050      	beq.n	8009be8 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a51      	ldr	r2, [pc, #324]	@ (8009c90 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d049      	beq.n	8009be4 <HAL_DMAEx_MultiBufferStart_IT+0xc98>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a4f      	ldr	r2, [pc, #316]	@ (8009c94 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d042      	beq.n	8009be0 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8009c98 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d03a      	beq.n	8009bda <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a4c      	ldr	r2, [pc, #304]	@ (8009c9c <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d032      	beq.n	8009bd4 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a4b      	ldr	r2, [pc, #300]	@ (8009ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d02a      	beq.n	8009bce <HAL_DMAEx_MultiBufferStart_IT+0xc82>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a49      	ldr	r2, [pc, #292]	@ (8009ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d022      	beq.n	8009bc8 <HAL_DMAEx_MultiBufferStart_IT+0xc7c>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a48      	ldr	r2, [pc, #288]	@ (8009ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d01a      	beq.n	8009bc2 <HAL_DMAEx_MultiBufferStart_IT+0xc76>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a46      	ldr	r2, [pc, #280]	@ (8009cac <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d012      	beq.n	8009bbc <HAL_DMAEx_MultiBufferStart_IT+0xc70>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a45      	ldr	r2, [pc, #276]	@ (8009cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d00a      	beq.n	8009bb6 <HAL_DMAEx_MultiBufferStart_IT+0xc6a>
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a43      	ldr	r2, [pc, #268]	@ (8009cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d102      	bne.n	8009bb0 <HAL_DMAEx_MultiBufferStart_IT+0xc64>
 8009baa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009bae:	e01e      	b.n	8009bee <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8009bb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009bb4:	e01b      	b.n	8009bee <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8009bb6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009bba:	e018      	b.n	8009bee <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8009bbc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009bc0:	e015      	b.n	8009bee <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8009bc2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009bc6:	e012      	b.n	8009bee <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8009bc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bcc:	e00f      	b.n	8009bee <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8009bce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bd2:	e00c      	b.n	8009bee <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8009bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bd8:	e009      	b.n	8009bee <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8009bda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bde:	e006      	b.n	8009bee <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8009be0:	2304      	movs	r3, #4
 8009be2:	e004      	b.n	8009bee <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8009be4:	2304      	movs	r3, #4
 8009be6:	e002      	b.n	8009bee <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8009be8:	2304      	movs	r3, #4
 8009bea:	e000      	b.n	8009bee <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8009bec:	2304      	movs	r3, #4
 8009bee:	4a32      	ldr	r2, [pc, #200]	@ (8009cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009bf0:	6093      	str	r3, [r2, #8]
 8009bf2:	e0e9      	b.n	8009dc8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	4b31      	ldr	r3, [pc, #196]	@ (8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	f240 8083 	bls.w	8009d08 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a20      	ldr	r2, [pc, #128]	@ (8009c88 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d079      	beq.n	8009d00 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a1e      	ldr	r2, [pc, #120]	@ (8009c8c <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d072      	beq.n	8009cfc <HAL_DMAEx_MultiBufferStart_IT+0xdb0>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8009c90 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d06b      	beq.n	8009cf8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a1b      	ldr	r2, [pc, #108]	@ (8009c94 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d064      	beq.n	8009cf4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8009c98 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d05c      	beq.n	8009cee <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a18      	ldr	r2, [pc, #96]	@ (8009c9c <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d054      	beq.n	8009ce8 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a17      	ldr	r2, [pc, #92]	@ (8009ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d04c      	beq.n	8009ce2 <HAL_DMAEx_MultiBufferStart_IT+0xd96>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a15      	ldr	r2, [pc, #84]	@ (8009ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d044      	beq.n	8009cdc <HAL_DMAEx_MultiBufferStart_IT+0xd90>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a14      	ldr	r2, [pc, #80]	@ (8009ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d03c      	beq.n	8009cd6 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a12      	ldr	r2, [pc, #72]	@ (8009cac <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d034      	beq.n	8009cd0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a11      	ldr	r2, [pc, #68]	@ (8009cb0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d02c      	beq.n	8009cca <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a0f      	ldr	r2, [pc, #60]	@ (8009cb4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d124      	bne.n	8009cc4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8009c7a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009c7e:	e040      	b.n	8009d02 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8009c80:	40026000 	.word	0x40026000
 8009c84:	40026458 	.word	0x40026458
 8009c88:	40026010 	.word	0x40026010
 8009c8c:	40026410 	.word	0x40026410
 8009c90:	40026070 	.word	0x40026070
 8009c94:	40026470 	.word	0x40026470
 8009c98:	40026028 	.word	0x40026028
 8009c9c:	40026428 	.word	0x40026428
 8009ca0:	40026088 	.word	0x40026088
 8009ca4:	40026488 	.word	0x40026488
 8009ca8:	40026040 	.word	0x40026040
 8009cac:	40026440 	.word	0x40026440
 8009cb0:	400260a0 	.word	0x400260a0
 8009cb4:	400264a0 	.word	0x400264a0
 8009cb8:	40026400 	.word	0x40026400
 8009cbc:	400260b8 	.word	0x400260b8
 8009cc0:	40026058 	.word	0x40026058
 8009cc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009cc8:	e01b      	b.n	8009d02 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8009cca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009cce:	e018      	b.n	8009d02 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8009cd0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009cd4:	e015      	b.n	8009d02 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8009cd6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009cda:	e012      	b.n	8009d02 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8009cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ce0:	e00f      	b.n	8009d02 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8009ce2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ce6:	e00c      	b.n	8009d02 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8009ce8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cec:	e009      	b.n	8009d02 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8009cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cf2:	e006      	b.n	8009d02 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8009cf4:	2304      	movs	r3, #4
 8009cf6:	e004      	b.n	8009d02 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8009cf8:	2304      	movs	r3, #4
 8009cfa:	e002      	b.n	8009d02 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8009cfc:	2304      	movs	r3, #4
 8009cfe:	e000      	b.n	8009d02 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8009d00:	2304      	movs	r3, #4
 8009d02:	4a8b      	ldr	r2, [pc, #556]	@ (8009f30 <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 8009d04:	60d3      	str	r3, [r2, #12]
 8009d06:	e05f      	b.n	8009dc8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a89      	ldr	r2, [pc, #548]	@ (8009f34 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d057      	beq.n	8009dc2 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a88      	ldr	r2, [pc, #544]	@ (8009f38 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d050      	beq.n	8009dbe <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a86      	ldr	r2, [pc, #536]	@ (8009f3c <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d049      	beq.n	8009dba <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a85      	ldr	r2, [pc, #532]	@ (8009f40 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d042      	beq.n	8009db6 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a83      	ldr	r2, [pc, #524]	@ (8009f44 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d03a      	beq.n	8009db0 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a82      	ldr	r2, [pc, #520]	@ (8009f48 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d032      	beq.n	8009daa <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a80      	ldr	r2, [pc, #512]	@ (8009f4c <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d02a      	beq.n	8009da4 <HAL_DMAEx_MultiBufferStart_IT+0xe58>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a7f      	ldr	r2, [pc, #508]	@ (8009f50 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d022      	beq.n	8009d9e <HAL_DMAEx_MultiBufferStart_IT+0xe52>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a7d      	ldr	r2, [pc, #500]	@ (8009f54 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d01a      	beq.n	8009d98 <HAL_DMAEx_MultiBufferStart_IT+0xe4c>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a7c      	ldr	r2, [pc, #496]	@ (8009f58 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d012      	beq.n	8009d92 <HAL_DMAEx_MultiBufferStart_IT+0xe46>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a7a      	ldr	r2, [pc, #488]	@ (8009f5c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d00a      	beq.n	8009d8c <HAL_DMAEx_MultiBufferStart_IT+0xe40>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a79      	ldr	r2, [pc, #484]	@ (8009f60 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d102      	bne.n	8009d86 <HAL_DMAEx_MultiBufferStart_IT+0xe3a>
 8009d80:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009d84:	e01e      	b.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8009d86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009d8a:	e01b      	b.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8009d8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009d90:	e018      	b.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8009d92:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009d96:	e015      	b.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8009d98:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009d9c:	e012      	b.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8009d9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009da2:	e00f      	b.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8009da4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009da8:	e00c      	b.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8009daa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009dae:	e009      	b.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8009db0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009db4:	e006      	b.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8009db6:	2304      	movs	r3, #4
 8009db8:	e004      	b.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8009dba:	2304      	movs	r3, #4
 8009dbc:	e002      	b.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8009dbe:	2304      	movs	r3, #4
 8009dc0:	e000      	b.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8009dc2:	2304      	movs	r3, #4
 8009dc4:	4a5a      	ldr	r2, [pc, #360]	@ (8009f30 <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 8009dc6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	4b65      	ldr	r3, [pc, #404]	@ (8009f64 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d95c      	bls.n	8009e8e <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a56      	ldr	r2, [pc, #344]	@ (8009f34 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d053      	beq.n	8009e86 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a55      	ldr	r2, [pc, #340]	@ (8009f38 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d04c      	beq.n	8009e82 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a53      	ldr	r2, [pc, #332]	@ (8009f3c <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d045      	beq.n	8009e7e <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a52      	ldr	r2, [pc, #328]	@ (8009f40 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d03e      	beq.n	8009e7a <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a50      	ldr	r2, [pc, #320]	@ (8009f44 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d037      	beq.n	8009e76 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a4f      	ldr	r2, [pc, #316]	@ (8009f48 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d030      	beq.n	8009e72 <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a4d      	ldr	r2, [pc, #308]	@ (8009f4c <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d029      	beq.n	8009e6e <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a4c      	ldr	r2, [pc, #304]	@ (8009f50 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d022      	beq.n	8009e6a <HAL_DMAEx_MultiBufferStart_IT+0xf1e>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a4a      	ldr	r2, [pc, #296]	@ (8009f54 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d01a      	beq.n	8009e64 <HAL_DMAEx_MultiBufferStart_IT+0xf18>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a49      	ldr	r2, [pc, #292]	@ (8009f58 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d012      	beq.n	8009e5e <HAL_DMAEx_MultiBufferStart_IT+0xf12>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a47      	ldr	r2, [pc, #284]	@ (8009f5c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d00a      	beq.n	8009e58 <HAL_DMAEx_MultiBufferStart_IT+0xf0c>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a46      	ldr	r2, [pc, #280]	@ (8009f60 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d102      	bne.n	8009e52 <HAL_DMAEx_MultiBufferStart_IT+0xf06>
 8009e4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009e50:	e01a      	b.n	8009e88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009e56:	e017      	b.n	8009e88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009e5c:	e014      	b.n	8009e88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009e62:	e011      	b.n	8009e88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009e68:	e00e      	b.n	8009e88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e6a:	2340      	movs	r3, #64	@ 0x40
 8009e6c:	e00c      	b.n	8009e88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e6e:	2340      	movs	r3, #64	@ 0x40
 8009e70:	e00a      	b.n	8009e88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e72:	2340      	movs	r3, #64	@ 0x40
 8009e74:	e008      	b.n	8009e88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e76:	2340      	movs	r3, #64	@ 0x40
 8009e78:	e006      	b.n	8009e88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e004      	b.n	8009e88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e002      	b.n	8009e88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e000      	b.n	8009e88 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e86:	2301      	movs	r3, #1
 8009e88:	4a37      	ldr	r2, [pc, #220]	@ (8009f68 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009e8a:	60d3      	str	r3, [r2, #12]
 8009e8c:	e141      	b.n	800a112 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	4b35      	ldr	r3, [pc, #212]	@ (8009f6c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d97c      	bls.n	8009f94 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a25      	ldr	r2, [pc, #148]	@ (8009f34 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d073      	beq.n	8009f8c <HAL_DMAEx_MultiBufferStart_IT+0x1040>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a23      	ldr	r2, [pc, #140]	@ (8009f38 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d06c      	beq.n	8009f88 <HAL_DMAEx_MultiBufferStart_IT+0x103c>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a22      	ldr	r2, [pc, #136]	@ (8009f3c <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d065      	beq.n	8009f84 <HAL_DMAEx_MultiBufferStart_IT+0x1038>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a20      	ldr	r2, [pc, #128]	@ (8009f40 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d05e      	beq.n	8009f80 <HAL_DMAEx_MultiBufferStart_IT+0x1034>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8009f44 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d057      	beq.n	8009f7c <HAL_DMAEx_MultiBufferStart_IT+0x1030>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f48 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d050      	beq.n	8009f78 <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a1c      	ldr	r2, [pc, #112]	@ (8009f4c <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d049      	beq.n	8009f74 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8009f50 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d042      	beq.n	8009f70 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a19      	ldr	r2, [pc, #100]	@ (8009f54 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d01a      	beq.n	8009f2a <HAL_DMAEx_MultiBufferStart_IT+0xfde>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a17      	ldr	r2, [pc, #92]	@ (8009f58 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d012      	beq.n	8009f24 <HAL_DMAEx_MultiBufferStart_IT+0xfd8>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a16      	ldr	r2, [pc, #88]	@ (8009f5c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d00a      	beq.n	8009f1e <HAL_DMAEx_MultiBufferStart_IT+0xfd2>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a14      	ldr	r2, [pc, #80]	@ (8009f60 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d102      	bne.n	8009f18 <HAL_DMAEx_MultiBufferStart_IT+0xfcc>
 8009f12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009f16:	e03a      	b.n	8009f8e <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8009f18:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009f1c:	e037      	b.n	8009f8e <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8009f1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009f22:	e034      	b.n	8009f8e <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8009f24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009f28:	e031      	b.n	8009f8e <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8009f2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009f2e:	e02e      	b.n	8009f8e <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8009f30:	40026000 	.word	0x40026000
 8009f34:	40026010 	.word	0x40026010
 8009f38:	40026410 	.word	0x40026410
 8009f3c:	40026070 	.word	0x40026070
 8009f40:	40026470 	.word	0x40026470
 8009f44:	40026028 	.word	0x40026028
 8009f48:	40026428 	.word	0x40026428
 8009f4c:	40026088 	.word	0x40026088
 8009f50:	40026488 	.word	0x40026488
 8009f54:	40026040 	.word	0x40026040
 8009f58:	40026440 	.word	0x40026440
 8009f5c:	400260a0 	.word	0x400260a0
 8009f60:	400264a0 	.word	0x400264a0
 8009f64:	40026458 	.word	0x40026458
 8009f68:	40026400 	.word	0x40026400
 8009f6c:	400260b8 	.word	0x400260b8
 8009f70:	2340      	movs	r3, #64	@ 0x40
 8009f72:	e00c      	b.n	8009f8e <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8009f74:	2340      	movs	r3, #64	@ 0x40
 8009f76:	e00a      	b.n	8009f8e <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8009f78:	2340      	movs	r3, #64	@ 0x40
 8009f7a:	e008      	b.n	8009f8e <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8009f7c:	2340      	movs	r3, #64	@ 0x40
 8009f7e:	e006      	b.n	8009f8e <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8009f80:	2301      	movs	r3, #1
 8009f82:	e004      	b.n	8009f8e <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8009f84:	2301      	movs	r3, #1
 8009f86:	e002      	b.n	8009f8e <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e000      	b.n	8009f8e <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	4a7b      	ldr	r2, [pc, #492]	@ (800a17c <HAL_DMAEx_MultiBufferStart_IT+0x1230>)
 8009f90:	6093      	str	r3, [r2, #8]
 8009f92:	e0be      	b.n	800a112 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4b79      	ldr	r3, [pc, #484]	@ (800a180 <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d95c      	bls.n	800a05a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a77      	ldr	r2, [pc, #476]	@ (800a184 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d053      	beq.n	800a052 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a76      	ldr	r2, [pc, #472]	@ (800a188 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d04c      	beq.n	800a04e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a74      	ldr	r2, [pc, #464]	@ (800a18c <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d045      	beq.n	800a04a <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a73      	ldr	r2, [pc, #460]	@ (800a190 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d03e      	beq.n	800a046 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a71      	ldr	r2, [pc, #452]	@ (800a194 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d037      	beq.n	800a042 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a70      	ldr	r2, [pc, #448]	@ (800a198 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d030      	beq.n	800a03e <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a6e      	ldr	r2, [pc, #440]	@ (800a19c <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d029      	beq.n	800a03a <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a6d      	ldr	r2, [pc, #436]	@ (800a1a0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d022      	beq.n	800a036 <HAL_DMAEx_MultiBufferStart_IT+0x10ea>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a6b      	ldr	r2, [pc, #428]	@ (800a1a4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d01a      	beq.n	800a030 <HAL_DMAEx_MultiBufferStart_IT+0x10e4>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a6a      	ldr	r2, [pc, #424]	@ (800a1a8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d012      	beq.n	800a02a <HAL_DMAEx_MultiBufferStart_IT+0x10de>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a68      	ldr	r2, [pc, #416]	@ (800a1ac <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d00a      	beq.n	800a024 <HAL_DMAEx_MultiBufferStart_IT+0x10d8>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a67      	ldr	r2, [pc, #412]	@ (800a1b0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d102      	bne.n	800a01e <HAL_DMAEx_MultiBufferStart_IT+0x10d2>
 800a018:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a01c:	e01a      	b.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800a01e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a022:	e017      	b.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800a024:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a028:	e014      	b.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800a02a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a02e:	e011      	b.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800a030:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a034:	e00e      	b.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800a036:	2340      	movs	r3, #64	@ 0x40
 800a038:	e00c      	b.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800a03a:	2340      	movs	r3, #64	@ 0x40
 800a03c:	e00a      	b.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800a03e:	2340      	movs	r3, #64	@ 0x40
 800a040:	e008      	b.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800a042:	2340      	movs	r3, #64	@ 0x40
 800a044:	e006      	b.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800a046:	2301      	movs	r3, #1
 800a048:	e004      	b.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e002      	b.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800a052:	2301      	movs	r3, #1
 800a054:	4a57      	ldr	r2, [pc, #348]	@ (800a1b4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800a056:	60d3      	str	r3, [r2, #12]
 800a058:	e05b      	b.n	800a112 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a49      	ldr	r2, [pc, #292]	@ (800a184 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d053      	beq.n	800a10c <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a47      	ldr	r2, [pc, #284]	@ (800a188 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d04c      	beq.n	800a108 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a46      	ldr	r2, [pc, #280]	@ (800a18c <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d045      	beq.n	800a104 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a44      	ldr	r2, [pc, #272]	@ (800a190 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d03e      	beq.n	800a100 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a43      	ldr	r2, [pc, #268]	@ (800a194 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d037      	beq.n	800a0fc <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a41      	ldr	r2, [pc, #260]	@ (800a198 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d030      	beq.n	800a0f8 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a40      	ldr	r2, [pc, #256]	@ (800a19c <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d029      	beq.n	800a0f4 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a3e      	ldr	r2, [pc, #248]	@ (800a1a0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d022      	beq.n	800a0f0 <HAL_DMAEx_MultiBufferStart_IT+0x11a4>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a3d      	ldr	r2, [pc, #244]	@ (800a1a4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d01a      	beq.n	800a0ea <HAL_DMAEx_MultiBufferStart_IT+0x119e>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a3b      	ldr	r2, [pc, #236]	@ (800a1a8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d012      	beq.n	800a0e4 <HAL_DMAEx_MultiBufferStart_IT+0x1198>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a3a      	ldr	r2, [pc, #232]	@ (800a1ac <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d00a      	beq.n	800a0de <HAL_DMAEx_MultiBufferStart_IT+0x1192>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a38      	ldr	r2, [pc, #224]	@ (800a1b0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d102      	bne.n	800a0d8 <HAL_DMAEx_MultiBufferStart_IT+0x118c>
 800a0d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a0d6:	e01a      	b.n	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a0d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a0dc:	e017      	b.n	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a0de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a0e2:	e014      	b.n	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a0e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a0e8:	e011      	b.n	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a0ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a0ee:	e00e      	b.n	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a0f0:	2340      	movs	r3, #64	@ 0x40
 800a0f2:	e00c      	b.n	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a0f4:	2340      	movs	r3, #64	@ 0x40
 800a0f6:	e00a      	b.n	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a0f8:	2340      	movs	r3, #64	@ 0x40
 800a0fa:	e008      	b.n	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a0fc:	2340      	movs	r3, #64	@ 0x40
 800a0fe:	e006      	b.n	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a100:	2301      	movs	r3, #1
 800a102:	e004      	b.n	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a104:	2301      	movs	r3, #1
 800a106:	e002      	b.n	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a108:	2301      	movs	r3, #1
 800a10a:	e000      	b.n	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a10c:	2301      	movs	r3, #1
 800a10e:	4a29      	ldr	r2, [pc, #164]	@ (800a1b4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800a110:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f042 0216 	orr.w	r2, r2, #22
 800a120:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	695a      	ldr	r2, [r3, #20]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a130:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a136:	2b00      	cmp	r3, #0
 800a138:	d103      	bne.n	800a142 <HAL_DMAEx_MultiBufferStart_IT+0x11f6>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d007      	beq.n	800a152 <HAL_DMAEx_MultiBufferStart_IT+0x1206>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f042 0208 	orr.w	r2, r2, #8
 800a150:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f042 0201 	orr.w	r2, r2, #1
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	e005      	b.n	800a170 <HAL_DMAEx_MultiBufferStart_IT+0x1224>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a16c:	2302      	movs	r3, #2
 800a16e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 800a170:	7dfb      	ldrb	r3, [r7, #23]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3718      	adds	r7, #24
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	40026400 	.word	0x40026400
 800a180:	40026058 	.word	0x40026058
 800a184:	40026010 	.word	0x40026010
 800a188:	40026410 	.word	0x40026410
 800a18c:	40026070 	.word	0x40026070
 800a190:	40026470 	.word	0x40026470
 800a194:	40026028 	.word	0x40026028
 800a198:	40026428 	.word	0x40026428
 800a19c:	40026088 	.word	0x40026088
 800a1a0:	40026488 	.word	0x40026488
 800a1a4:	40026040 	.word	0x40026040
 800a1a8:	40026440 	.word	0x40026440
 800a1ac:	400260a0 	.word	0x400260a0
 800a1b0:	400264a0 	.word	0x400264a0
 800a1b4:	40026000 	.word	0x40026000

0800a1b8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800a1c6:	79fb      	ldrb	r3, [r7, #7]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	60da      	str	r2, [r3, #12]
 800a1d4:	e003      	b.n	800a1de <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
 800a1f8:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	2b40      	cmp	r3, #64	@ 0x40
 800a208:	d108      	bne.n	800a21c <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a21a:	e007      	b.n	800a22c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	60da      	str	r2, [r3, #12]
}
 800a22c:	bf00      	nop
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e086      	b.n	800a358 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a250:	2b00      	cmp	r3, #0
 800a252:	d106      	bne.n	800a262 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2223      	movs	r2, #35	@ 0x23
 800a258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f00a ff3b 	bl	80150d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a262:	4b3f      	ldr	r3, [pc, #252]	@ (800a360 <HAL_ETH_Init+0x128>)
 800a264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a266:	4a3e      	ldr	r2, [pc, #248]	@ (800a360 <HAL_ETH_Init+0x128>)
 800a268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a26c:	6453      	str	r3, [r2, #68]	@ 0x44
 800a26e:	4b3c      	ldr	r3, [pc, #240]	@ (800a360 <HAL_ETH_Init+0x128>)
 800a270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a276:	60bb      	str	r3, [r7, #8]
 800a278:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a27a:	4b3a      	ldr	r3, [pc, #232]	@ (800a364 <HAL_ETH_Init+0x12c>)
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	4a39      	ldr	r2, [pc, #228]	@ (800a364 <HAL_ETH_Init+0x12c>)
 800a280:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a284:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800a286:	4b37      	ldr	r3, [pc, #220]	@ (800a364 <HAL_ETH_Init+0x12c>)
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	4935      	ldr	r1, [pc, #212]	@ (800a364 <HAL_ETH_Init+0x12c>)
 800a290:	4313      	orrs	r3, r2
 800a292:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800a294:	4b33      	ldr	r3, [pc, #204]	@ (800a364 <HAL_ETH_Init+0x12c>)
 800a296:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	6812      	ldr	r2, [r2, #0]
 800a2a6:	f043 0301 	orr.w	r3, r3, #1
 800a2aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a2ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a2b0:	f7fc fdbe 	bl	8006e30 <HAL_GetTick>
 800a2b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800a2b6:	e011      	b.n	800a2dc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800a2b8:	f7fc fdba 	bl	8006e30 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a2c6:	d909      	bls.n	800a2dc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2204      	movs	r2, #4
 800a2cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	22e0      	movs	r2, #224	@ 0xe0
 800a2d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e03d      	b.n	800a358 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e4      	bne.n	800a2b8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 ff4e 	bl	800b190 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fff9 	bl	800b2ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f001 f84f 	bl	800b39e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	461a      	mov	r2, r3
 800a306:	2100      	movs	r1, #0
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 ffb7 	bl	800b27c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800a31c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	4b0f      	ldr	r3, [pc, #60]	@ (800a368 <HAL_ETH_Init+0x130>)
 800a32c:	430b      	orrs	r3, r1
 800a32e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800a342:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2210      	movs	r2, #16
 800a352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	40023800 	.word	0x40023800
 800a364:	40013800 	.word	0x40013800
 800a368:	00020060 	.word	0x00020060

0800a36c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a37a:	2b10      	cmp	r3, #16
 800a37c:	d15f      	bne.n	800a43e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2223      	movs	r2, #35	@ 0x23
 800a382:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2204      	movs	r2, #4
 800a390:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f9f6 	bl	800a784 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	f7fc fd51 	bl	8006e48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	6812      	ldr	r2, [r2, #0]
 800a3bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a3c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a3c4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	6812      	ldr	r2, [r2, #0]
 800a3d4:	f043 0302 	orr.w	r3, r3, #2
 800a3d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a3dc:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 fd73 	bl	800aeca <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f042 0208 	orr.w	r2, r2, #8
 800a3f2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a3fc:	2001      	movs	r0, #1
 800a3fe:	f7fc fd23 	bl	8006e48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f042 0204 	orr.w	r2, r2, #4
 800a418:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a422:	69d9      	ldr	r1, [r3, #28]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	4b07      	ldr	r3, [pc, #28]	@ (800a448 <HAL_ETH_Start_IT+0xdc>)
 800a42a:	430b      	orrs	r3, r1
 800a42c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a430:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2223      	movs	r2, #35	@ 0x23
 800a436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	e000      	b.n	800a440 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
  }
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	0001a0c1 	.word	0x0001a0c1

0800a44c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a45a:	2b23      	cmp	r3, #35	@ 0x23
 800a45c:	d16e      	bne.n	800a53c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2223      	movs	r2, #35	@ 0x23
 800a462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a46e:	69d9      	ldr	r1, [r3, #28]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	4b34      	ldr	r3, [pc, #208]	@ (800a548 <HAL_ETH_Stop_IT+0xfc>)
 800a476:	400b      	ands	r3, r1
 800a478:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a47c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	6812      	ldr	r2, [r2, #0]
 800a48c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a490:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a494:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	6812      	ldr	r2, [r2, #0]
 800a4a4:	f023 0302 	bic.w	r3, r3, #2
 800a4a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a4ac:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 0204 	bic.w	r2, r2, #4
 800a4bc:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a4c6:	2001      	movs	r0, #1
 800a4c8:	f7fc fcbe 	bl	8006e48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fcf8 	bl	800aeca <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f022 0208 	bic.w	r2, r2, #8
 800a4e8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	f7fc fca8 	bl	8006e48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800a500:	2300      	movs	r3, #0
 800a502:	617b      	str	r3, [r7, #20]
 800a504:	e00e      	b.n	800a524 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	3212      	adds	r2, #18
 800a50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a510:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	3301      	adds	r3, #1
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	2b03      	cmp	r3, #3
 800a528:	d9ed      	bls.n	800a506 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2210      	movs	r2, #16
 800a534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	e000      	b.n	800a53e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
  }
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	fffe5f3e 	.word	0xfffe5f3e

0800a54c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d109      	bne.n	800a570 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a562:	f043 0201 	orr.w	r2, r3, #1
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e045      	b.n	800a5fc <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a576:	2b23      	cmp	r3, #35	@ 0x23
 800a578:	d13f      	bne.n	800a5fa <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800a582:	2201      	movs	r2, #1
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 ff78 	bl	800b47c <ETH_Prepare_Tx_Descriptors>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d009      	beq.n	800a5a6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a598:	f043 0202 	orr.w	r2, r3, #2
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e02a      	b.n	800a5fc <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800a5a6:	f3bf 8f4f 	dsb	sy
}
 800a5aa:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b0:	1c5a      	adds	r2, r3, #1
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	629a      	str	r2, [r3, #40]	@ 0x28
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d904      	bls.n	800a5c8 <HAL_ETH_Transmit_IT+0x7c>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c2:	1f1a      	subs	r2, r3, #4
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	f003 0304 	and.w	r3, r3, #4
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00d      	beq.n	800a5f6 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e000      	b.n	800a5fc <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
  }
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b088      	sub	sp, #32
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800a60e:	2300      	movs	r3, #0
 800a610:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800a612:	2300      	movs	r3, #0
 800a614:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d109      	bne.n	800a630 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a622:	f043 0201 	orr.w	r2, r3, #1
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e0a4      	b.n	800a77a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a636:	2b23      	cmp	r3, #35	@ 0x23
 800a638:	d001      	beq.n	800a63e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e09d      	b.n	800a77a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a642:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	69fa      	ldr	r2, [r7, #28]
 800a648:	3212      	adds	r2, #18
 800a64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a64e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a654:	f1c3 0304 	rsb	r3, r3, #4
 800a658:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800a65a:	e066      	b.n	800a72a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a664:	2b00      	cmp	r3, #0
 800a666:	d007      	beq.n	800a678 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	69da      	ldr	r2, [r3, #28]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	699a      	ldr	r2, [r3, #24]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a680:	2b00      	cmp	r3, #0
 800a682:	d103      	bne.n	800a68c <HAL_ETH_ReadData+0x88>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d03c      	beq.n	800a706 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a694:	2b00      	cmp	r3, #0
 800a696:	d005      	beq.n	800a6a4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	0c1b      	lsrs	r3, r3, #16
 800a6aa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a6ae:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d005      	beq.n	800a6c8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	689a      	ldr	r2, [r3, #8]
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	f00a fea5 	bl	8015434 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6ee:	1c5a      	adds	r2, r3, #1
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	441a      	add	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	2200      	movs	r2, #0
 800a704:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	3301      	adds	r3, #1
 800a70a:	61fb      	str	r3, [r7, #28]
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d902      	bls.n	800a718 <HAL_ETH_ReadData+0x114>
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	3b04      	subs	r3, #4
 800a716:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	69fa      	ldr	r2, [r7, #28]
 800a71c:	3212      	adds	r2, #18
 800a71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a722:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	3301      	adds	r3, #1
 800a728:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800a72e:	2b00      	cmp	r3, #0
 800a730:	db06      	blt.n	800a740 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	429a      	cmp	r2, r3
 800a738:	d202      	bcs.n	800a740 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800a73a:	7cfb      	ldrb	r3, [r7, #19]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d08d      	beq.n	800a65c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	441a      	add	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f815 	bl	800a784 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	69fa      	ldr	r2, [r7, #28]
 800a75e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800a760:	7cfb      	ldrb	r3, [r7, #19]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d108      	bne.n	800a778 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	e000      	b.n	800a77a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3720      	adds	r7, #32
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
	...

0800a784 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800a78c:	2300      	movs	r3, #0
 800a78e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800a790:	2301      	movs	r3, #1
 800a792:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a798:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69fa      	ldr	r2, [r7, #28]
 800a79e:	3212      	adds	r2, #18
 800a7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7aa:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800a7ac:	e042      	b.n	800a834 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	6a1b      	ldr	r3, [r3, #32]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d112      	bne.n	800a7dc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800a7b6:	f107 0308 	add.w	r3, r7, #8
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f00a fe0a 	bl	80153d4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d102      	bne.n	800a7cc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	74fb      	strb	r3, [r7, #19]
 800a7ca:	e007      	b.n	800a7dc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800a7dc:	7cfb      	ldrb	r3, [r7, #19]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d028      	beq.n	800a834 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d106      	bne.n	800a7f8 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	695a      	ldr	r2, [r3, #20]
 800a7ee:	4b26      	ldr	r3, [pc, #152]	@ (800a888 <ETH_UpdateDescriptor+0x104>)
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	6053      	str	r3, [r2, #4]
 800a7f6:	e005      	b.n	800a804 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	3301      	adds	r3, #1
 800a814:	61fb      	str	r3, [r7, #28]
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d902      	bls.n	800a822 <ETH_UpdateDescriptor+0x9e>
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	3b04      	subs	r3, #4
 800a820:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	69fa      	ldr	r2, [r7, #28]
 800a826:	3212      	adds	r2, #18
 800a828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a82c:	617b      	str	r3, [r7, #20]
      desccount--;
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	3b01      	subs	r3, #1
 800a832:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d002      	beq.n	800a840 <ETH_UpdateDescriptor+0xbc>
 800a83a:	7cfb      	ldrb	r3, [r7, #19]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1b6      	bne.n	800a7ae <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	429a      	cmp	r2, r3
 800a848:	d01a      	beq.n	800a880 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	3301      	adds	r3, #1
 800a84e:	f003 0303 	and.w	r3, r3, #3
 800a852:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800a854:	f3bf 8f5f 	dmb	sy
}
 800a858:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6919      	ldr	r1, [r3, #16]
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	4613      	mov	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	00db      	lsls	r3, r3, #3
 800a868:	18ca      	adds	r2, r1, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a872:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	69fa      	ldr	r2, [r7, #28]
 800a878:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	69ba      	ldr	r2, [r7, #24]
 800a87e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800a880:	bf00      	nop
 800a882:	3720      	adds	r7, #32
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	80004000 	.word	0x80004000

0800a88c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	3318      	adds	r3, #24
 800a898:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a89e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800a8aa:	e047      	b.n	800a93c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10a      	bne.n	800a8dc <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	613b      	str	r3, [r7, #16]
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d902      	bls.n	800a8d8 <HAL_ETH_ReleaseTxPacket+0x4c>
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	3b04      	subs	r3, #4
 800a8d6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d02c      	beq.n	800a93c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68d9      	ldr	r1, [r3, #12]
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	00db      	lsls	r3, r3, #3
 800a8f0:	440b      	add	r3, r1
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	db1f      	blt.n	800a938 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	4618      	mov	r0, r3
 800a906:	f00a fdd7 	bl	80154b8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	3304      	adds	r3, #4
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	2200      	movs	r2, #0
 800a916:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	3301      	adds	r3, #1
 800a91c:	613b      	str	r3, [r7, #16]
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	2b03      	cmp	r3, #3
 800a922:	d902      	bls.n	800a92a <HAL_ETH_ReleaseTxPacket+0x9e>
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	3b04      	subs	r3, #4
 800a928:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	697a      	ldr	r2, [r7, #20]
 800a92e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a936:	e001      	b.n	800a93c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d002      	beq.n	800a948 <HAL_ETH_ReleaseTxPacket+0xbc>
 800a942:	7bfb      	ldrb	r3, [r7, #15]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1b1      	bne.n	800a8ac <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3718      	adds	r7, #24
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
	...

0800a954 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a962:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800a97c:	4b4b      	ldr	r3, [pc, #300]	@ (800aaac <HAL_ETH_IRQHandler+0x158>)
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00e      	beq.n	800a9aa <HAL_ETH_IRQHandler+0x56>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a992:	2b00      	cmp	r3, #0
 800a994:	d009      	beq.n	800a9aa <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a99e:	461a      	mov	r2, r3
 800a9a0:	4b43      	ldr	r3, [pc, #268]	@ (800aab0 <HAL_ETH_IRQHandler+0x15c>)
 800a9a2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f00a f8c7 	bl	8014b38 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00f      	beq.n	800a9d4 <HAL_ETH_IRQHandler+0x80>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00a      	beq.n	800a9d4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800a9cc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f00a f8c2 	bl	8014b58 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d042      	beq.n	800aa64 <HAL_ETH_IRQHandler+0x110>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d03d      	beq.n	800aa64 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9ee:	f043 0208 	orr.w	r2, r3, #8
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d01a      	beq.n	800aa38 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa0a:	695a      	ldr	r2, [r3, #20]
 800aa0c:	4b29      	ldr	r3, [pc, #164]	@ (800aab4 <HAL_ETH_IRQHandler+0x160>)
 800aa0e:	4013      	ands	r3, r2
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	6812      	ldr	r2, [r2, #0]
 800aa24:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800aa28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800aa2c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	22e0      	movs	r2, #224	@ 0xe0
 800aa32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800aa36:	e012      	b.n	800aa5e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa40:	695a      	ldr	r2, [r3, #20]
 800aa42:	f248 6380 	movw	r3, #34432	@ 0x8680
 800aa46:	4013      	ands	r3, r2
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa56:	461a      	mov	r2, r3
 800aa58:	f248 6380 	movw	r3, #34432	@ 0x8680
 800aa5c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f00a f88a 	bl	8014b78 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	f003 0308 	and.w	r3, r3, #8
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00e      	beq.n	800aa8c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa74:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f81a 	bl	800aab8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d006      	beq.n	800aaa4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800aa96:	4b05      	ldr	r3, [pc, #20]	@ (800aaac <HAL_ETH_IRQHandler+0x158>)
 800aa98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800aa9c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f814 	bl	800aacc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800aaa4:	bf00      	nop
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	40013c00 	.word	0x40013c00
 800aab0:	00010040 	.word	0x00010040
 800aab4:	007e2000 	.word	0x007e2000

0800aab8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800aad4:	bf00      	nop
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
 800aaec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f003 031c 	and.w	r3, r3, #28
 800aafc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	02db      	lsls	r3, r3, #11
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	019b      	lsls	r3, r3, #6
 800ab0e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f023 0302 	bic.w	r3, r3, #2
 800ab1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	f043 0301 	orr.w	r3, r3, #1
 800ab26:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800ab30:	f7fc f97e 	bl	8006e30 <HAL_GetTick>
 800ab34:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ab36:	e00d      	b.n	800ab54 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800ab38:	f7fc f97a 	bl	8006e30 <HAL_GetTick>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab46:	d301      	bcc.n	800ab4c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e010      	b.n	800ab6e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1ec      	bne.n	800ab38 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	695b      	ldr	r3, [r3, #20]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	461a      	mov	r2, r3
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b086      	sub	sp, #24
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	60f8      	str	r0, [r7, #12]
 800ab7e:	60b9      	str	r1, [r7, #8]
 800ab80:	607a      	str	r2, [r7, #4]
 800ab82:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	f003 031c 	and.w	r3, r3, #28
 800ab92:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	02db      	lsls	r3, r3, #11
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	697a      	ldr	r2, [r7, #20]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	019b      	lsls	r3, r3, #6
 800aba4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	4313      	orrs	r3, r2
 800abac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f043 0302 	orr.w	r3, r3, #2
 800abb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	f043 0301 	orr.w	r3, r3, #1
 800abbc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800abd0:	f7fc f92e 	bl	8006e30 <HAL_GetTick>
 800abd4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800abd6:	e00d      	b.n	800abf4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800abd8:	f7fc f92a 	bl	8006e30 <HAL_GetTick>
 800abdc:	4602      	mov	r2, r0
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abe6:	d301      	bcc.n	800abec <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e009      	b.n	800ac00 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1ec      	bne.n	800abd8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e0e6      	b.n	800adea <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0310 	and.w	r3, r3, #16
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	bf14      	ite	ne
 800ac2a:	2301      	movne	r3, #1
 800ac2c:	2300      	moveq	r3, #0
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	461a      	mov	r2, r3
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	bf0c      	ite	eq
 800ac54:	2301      	moveq	r3, #1
 800ac56:	2300      	movne	r3, #0
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	bf14      	ite	ne
 800ac70:	2301      	movne	r3, #1
 800ac72:	2300      	moveq	r3, #0
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	bf0c      	ite	eq
 800ac8a:	2301      	moveq	r3, #1
 800ac8c:	2300      	movne	r3, #0
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	461a      	mov	r2, r3
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	bf14      	ite	ne
 800aca4:	2301      	movne	r3, #1
 800aca6:	2300      	moveq	r3, #0
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	461a      	mov	r2, r3
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	bf0c      	ite	eq
 800acda:	2301      	moveq	r3, #1
 800acdc:	2300      	movne	r3, #0
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	461a      	mov	r2, r3
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	bf0c      	ite	eq
 800acf4:	2301      	moveq	r3, #1
 800acf6:	2300      	movne	r3, #0
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	461a      	mov	r2, r3
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	bf14      	ite	ne
 800ad0e:	2301      	movne	r3, #1
 800ad10:	2300      	moveq	r3, #0
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	461a      	mov	r2, r3
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	bf14      	ite	ne
 800ad36:	2301      	movne	r3, #1
 800ad38:	2300      	moveq	r3, #0
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	bf14      	ite	ne
 800ad50:	2301      	movne	r3, #1
 800ad52:	2300      	moveq	r3, #0
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	461a      	mov	r2, r3
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	bf14      	ite	ne
 800ad6a:	2301      	movne	r3, #1
 800ad6c:	2300      	moveq	r3, #0
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	461a      	mov	r2, r3
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	bf0c      	ite	eq
 800ad86:	2301      	moveq	r3, #1
 800ad88:	2300      	movne	r3, #0
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	0c1b      	lsrs	r3, r3, #16
 800adaa:	b29a      	uxth	r2, r3
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	f003 0304 	and.w	r3, r3, #4
 800adba:	2b00      	cmp	r3, #0
 800adbc:	bf14      	ite	ne
 800adbe:	2301      	movne	r3, #1
 800adc0:	2300      	moveq	r3, #0
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	461a      	mov	r2, r3
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	699b      	ldr	r3, [r3, #24]
 800add2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800add6:	2b00      	cmp	r3, #0
 800add8:	bf14      	ite	ne
 800adda:	2301      	movne	r3, #1
 800addc:	2300      	moveq	r3, #0
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	370c      	adds	r7, #12
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b082      	sub	sp, #8
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e00b      	b.n	800ae22 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae10:	2b10      	cmp	r3, #16
 800ae12:	d105      	bne.n	800ae20 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 f87c 	bl	800af14 <ETH_SetMACConfig>

    return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	e000      	b.n	800ae22 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
  }
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
	...

0800ae2c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f023 031c 	bic.w	r3, r3, #28
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800ae44:	f005 f87a 	bl	800ff3c <HAL_RCC_GetHCLKFreq>
 800ae48:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	4a14      	ldr	r2, [pc, #80]	@ (800aea0 <HAL_ETH_SetMDIOClockRange+0x74>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d804      	bhi.n	800ae5c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f043 0308 	orr.w	r3, r3, #8
 800ae58:	60fb      	str	r3, [r7, #12]
 800ae5a:	e019      	b.n	800ae90 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	4a11      	ldr	r2, [pc, #68]	@ (800aea4 <HAL_ETH_SetMDIOClockRange+0x78>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d204      	bcs.n	800ae6e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f043 030c 	orr.w	r3, r3, #12
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	e010      	b.n	800ae90 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	4a0d      	ldr	r2, [pc, #52]	@ (800aea8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d90c      	bls.n	800ae90 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	4a0c      	ldr	r2, [pc, #48]	@ (800aeac <HAL_ETH_SetMDIOClockRange+0x80>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d804      	bhi.n	800ae88 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f043 0304 	orr.w	r3, r3, #4
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	e003      	b.n	800ae90 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f043 0310 	orr.w	r3, r3, #16
 800ae8e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	611a      	str	r2, [r3, #16]
}
 800ae98:	bf00      	nop
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	02160ebf 	.word	0x02160ebf
 800aea4:	03938700 	.word	0x03938700
 800aea8:	05f5e0ff 	.word	0x05f5e0ff
 800aeac:	08f0d17f 	.word	0x08f0d17f

0800aeb0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b084      	sub	sp, #16
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aede:	699b      	ldr	r3, [r3, #24]
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	6812      	ldr	r2, [r2, #0]
 800aee4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aee8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800aeec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aef6:	699b      	ldr	r3, [r3, #24]
 800aef8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aefa:	2001      	movs	r0, #1
 800aefc:	f7fb ffa4 	bl	8006e48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800af0a:	6193      	str	r3, [r2, #24]
}
 800af0c:	bf00      	nop
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	4b53      	ldr	r3, [pc, #332]	@ (800b078 <ETH_SetMACConfig+0x164>)
 800af2a:	4013      	ands	r3, r2
 800af2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	7b9b      	ldrb	r3, [r3, #14]
 800af32:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	7c12      	ldrb	r2, [r2, #16]
 800af38:	2a00      	cmp	r2, #0
 800af3a:	d102      	bne.n	800af42 <ETH_SetMACConfig+0x2e>
 800af3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800af40:	e000      	b.n	800af44 <ETH_SetMACConfig+0x30>
 800af42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800af44:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	7c52      	ldrb	r2, [r2, #17]
 800af4a:	2a00      	cmp	r2, #0
 800af4c:	d102      	bne.n	800af54 <ETH_SetMACConfig+0x40>
 800af4e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800af52:	e000      	b.n	800af56 <ETH_SetMACConfig+0x42>
 800af54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800af56:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800af5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	7fdb      	ldrb	r3, [r3, #31]
 800af62:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800af64:	431a      	orrs	r2, r3
                        macconf->Speed |
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800af6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	7f92      	ldrb	r2, [r2, #30]
 800af70:	2a00      	cmp	r2, #0
 800af72:	d102      	bne.n	800af7a <ETH_SetMACConfig+0x66>
 800af74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800af78:	e000      	b.n	800af7c <ETH_SetMACConfig+0x68>
 800af7a:	2200      	movs	r2, #0
                        macconf->Speed |
 800af7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	7f1b      	ldrb	r3, [r3, #28]
 800af82:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800af84:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800af8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	791b      	ldrb	r3, [r3, #4]
 800af90:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800af92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	f892 2020 	ldrb.w	r2, [r2, #32]
 800af9a:	2a00      	cmp	r2, #0
 800af9c:	d102      	bne.n	800afa4 <ETH_SetMACConfig+0x90>
 800af9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afa2:	e000      	b.n	800afa6 <ETH_SetMACConfig+0x92>
 800afa4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800afa6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	7bdb      	ldrb	r3, [r3, #15]
 800afac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800afae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800afb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afbc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800afbe:	4313      	orrs	r3, r2
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800afd6:	2001      	movs	r0, #1
 800afd8:	f7fb ff36 	bl	8006e48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800aff2:	4013      	ands	r3, r2
 800aff4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800affa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800b002:	2a00      	cmp	r2, #0
 800b004:	d101      	bne.n	800b00a <ETH_SetMACConfig+0xf6>
 800b006:	2280      	movs	r2, #128	@ 0x80
 800b008:	e000      	b.n	800b00c <ETH_SetMACConfig+0xf8>
 800b00a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800b00c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800b012:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800b01a:	2a01      	cmp	r2, #1
 800b01c:	d101      	bne.n	800b022 <ETH_SetMACConfig+0x10e>
 800b01e:	2208      	movs	r2, #8
 800b020:	e000      	b.n	800b024 <ETH_SetMACConfig+0x110>
 800b022:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800b024:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800b02c:	2a01      	cmp	r2, #1
 800b02e:	d101      	bne.n	800b034 <ETH_SetMACConfig+0x120>
 800b030:	2204      	movs	r2, #4
 800b032:	e000      	b.n	800b036 <ETH_SetMACConfig+0x122>
 800b034:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800b036:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800b03e:	2a01      	cmp	r2, #1
 800b040:	d101      	bne.n	800b046 <ETH_SetMACConfig+0x132>
 800b042:	2202      	movs	r2, #2
 800b044:	e000      	b.n	800b048 <ETH_SetMACConfig+0x134>
 800b046:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800b048:	4313      	orrs	r3, r2
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b060:	2001      	movs	r0, #1
 800b062:	f7fb fef1 	bl	8006e48 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	619a      	str	r2, [r3, #24]
}
 800b06e:	bf00      	nop
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	fd20810f 	.word	0xfd20810f

0800b07c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	4b3d      	ldr	r3, [pc, #244]	@ (800b18c <ETH_SetDMAConfig+0x110>)
 800b096:	4013      	ands	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	7b1b      	ldrb	r3, [r3, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d102      	bne.n	800b0a8 <ETH_SetDMAConfig+0x2c>
 800b0a2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800b0a6:	e000      	b.n	800b0aa <ETH_SetDMAConfig+0x2e>
 800b0a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	7b5b      	ldrb	r3, [r3, #13]
 800b0ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800b0b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800b0b2:	683a      	ldr	r2, [r7, #0]
 800b0b4:	7f52      	ldrb	r2, [r2, #29]
 800b0b6:	2a00      	cmp	r2, #0
 800b0b8:	d102      	bne.n	800b0c0 <ETH_SetDMAConfig+0x44>
 800b0ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b0be:	e000      	b.n	800b0c2 <ETH_SetDMAConfig+0x46>
 800b0c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800b0c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	7b9b      	ldrb	r3, [r3, #14]
 800b0c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800b0ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800b0d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	7f1b      	ldrb	r3, [r3, #28]
 800b0d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800b0d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	7f9b      	ldrb	r3, [r3, #30]
 800b0de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800b0e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800b0e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b0ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b100:	461a      	mov	r2, r3
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b112:	2001      	movs	r0, #1
 800b114:	f7fb fe98 	bl	8006e48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b120:	461a      	mov	r2, r3
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	791b      	ldrb	r3, [r3, #4]
 800b12a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800b130:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800b136:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800b13c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b144:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800b146:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b14c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800b14e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800b154:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	6812      	ldr	r2, [r2, #0]
 800b15a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b15e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b162:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b170:	2001      	movs	r0, #1
 800b172:	f7fb fe69 	bl	8006e48 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b17e:	461a      	mov	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6013      	str	r3, [r2, #0]
}
 800b184:	bf00      	nop
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	f8de3f23 	.word	0xf8de3f23

0800b190 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b0a6      	sub	sp, #152	@ 0x98
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800b198:	2301      	movs	r3, #1
 800b19a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800b1f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b1fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800b1fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b202:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800b204:	2300      	movs	r3, #0
 800b206:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800b20a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff fe7f 	bl	800af14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800b216:	2301      	movs	r3, #1
 800b218:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800b21a:	2301      	movs	r3, #1
 800b21c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800b21e:	2301      	movs	r3, #1
 800b220:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800b224:	2301      	movs	r3, #1
 800b226:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800b228:	2300      	movs	r3, #0
 800b22a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800b22c:	2300      	movs	r3, #0
 800b22e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800b232:	2300      	movs	r3, #0
 800b234:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800b238:	2300      	movs	r3, #0
 800b23a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800b23c:	2301      	movs	r3, #1
 800b23e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800b242:	2301      	movs	r3, #1
 800b244:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800b246:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b24a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800b24c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b250:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800b252:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b256:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800b258:	2301      	movs	r3, #1
 800b25a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800b25e:	2300      	movs	r3, #0
 800b260:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800b262:	2300      	movs	r3, #0
 800b264:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800b266:	f107 0308 	add.w	r3, r7, #8
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff ff05 	bl	800b07c <ETH_SetDMAConfig>
}
 800b272:	bf00      	nop
 800b274:	3798      	adds	r7, #152	@ 0x98
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
	...

0800b27c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b087      	sub	sp, #28
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	3305      	adds	r3, #5
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	021b      	lsls	r3, r3, #8
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	3204      	adds	r2, #4
 800b294:	7812      	ldrb	r2, [r2, #0]
 800b296:	4313      	orrs	r3, r2
 800b298:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	4b11      	ldr	r3, [pc, #68]	@ (800b2e4 <ETH_MACAddressConfig+0x68>)
 800b29e:	4413      	add	r3, r2
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3303      	adds	r3, #3
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	061a      	lsls	r2, r3, #24
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	3302      	adds	r3, #2
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	041b      	lsls	r3, r3, #16
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	021b      	lsls	r3, r3, #8
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	7812      	ldrb	r2, [r2, #0]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	4b06      	ldr	r3, [pc, #24]	@ (800b2e8 <ETH_MACAddressConfig+0x6c>)
 800b2ce:	4413      	add	r3, r2
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	6013      	str	r3, [r2, #0]
}
 800b2d6:	bf00      	nop
 800b2d8:	371c      	adds	r7, #28
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	40028040 	.word	0x40028040
 800b2e8:	40028044 	.word	0x40028044

0800b2ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	e03e      	b.n	800b378 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68d9      	ldr	r1, [r3, #12]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	4613      	mov	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	00db      	lsls	r3, r3, #3
 800b308:	440b      	add	r3, r1
 800b30a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	2200      	movs	r2, #0
 800b310:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	2200      	movs	r2, #0
 800b316:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2200      	movs	r2, #0
 800b31c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2200      	movs	r2, #0
 800b322:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800b324:	68b9      	ldr	r1, [r7, #8]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	3206      	adds	r2, #6
 800b32c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2b02      	cmp	r3, #2
 800b340:	d80c      	bhi.n	800b35c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68d9      	ldr	r1, [r3, #12]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	1c5a      	adds	r2, r3, #1
 800b34a:	4613      	mov	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4413      	add	r3, r2
 800b350:	00db      	lsls	r3, r3, #3
 800b352:	440b      	add	r3, r1
 800b354:	461a      	mov	r2, r3
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	60da      	str	r2, [r3, #12]
 800b35a:	e004      	b.n	800b366 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	461a      	mov	r2, r3
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	3301      	adds	r3, #1
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b03      	cmp	r3, #3
 800b37c:	d9bd      	bls.n	800b2fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	68da      	ldr	r2, [r3, #12]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b390:	611a      	str	r2, [r3, #16]
}
 800b392:	bf00      	nop
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60fb      	str	r3, [r7, #12]
 800b3aa:	e048      	b.n	800b43e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6919      	ldr	r1, [r3, #16]
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	00db      	lsls	r3, r3, #3
 800b3ba:	440b      	add	r3, r1
 800b3bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b3e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800b402:	68b9      	ldr	r1, [r7, #8]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	3212      	adds	r2, #18
 800b40a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2b02      	cmp	r3, #2
 800b412:	d80c      	bhi.n	800b42e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6919      	ldr	r1, [r3, #16]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	4613      	mov	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	00db      	lsls	r3, r3, #3
 800b424:	440b      	add	r3, r1
 800b426:	461a      	mov	r2, r3
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	60da      	str	r2, [r3, #12]
 800b42c:	e004      	b.n	800b438 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	461a      	mov	r2, r3
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3301      	adds	r3, #1
 800b43c:	60fb      	str	r3, [r7, #12]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2b03      	cmp	r3, #3
 800b442:	d9b3      	bls.n	800b3ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	691a      	ldr	r2, [r3, #16]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b46e:	60da      	str	r2, [r3, #12]
}
 800b470:	bf00      	nop
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b091      	sub	sp, #68	@ 0x44
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	3318      	adds	r3, #24
 800b48c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800b48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800b494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800b49a:	2300      	movs	r3, #0
 800b49c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4be:	d007      	beq.n	800b4d0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800b4c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	e111      	b.n	800b6f8 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800b4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800b4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	4b86      	ldr	r3, [pc, #536]	@ (800b704 <ETH_Prepare_Tx_Descriptors+0x288>)
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4ee:	6852      	ldr	r2, [r2, #4]
 800b4f0:	431a      	orrs	r2, r3
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d008      	beq.n	800b514 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800b502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	431a      	orrs	r2, r3
 800b510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b512:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 0320 	and.w	r3, r3, #32
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d008      	beq.n	800b532 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800b520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	431a      	orrs	r2, r3
 800b52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b530:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f003 0304 	and.w	r3, r3, #4
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d005      	beq.n	800b54a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800b53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b548:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800b54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b554:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800b556:	e082      	b.n	800b65e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800b558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b562:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d006      	beq.n	800b578 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800b56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	e005      	b.n	800b584 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800b578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b582:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800b584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b586:	3301      	adds	r3, #1
 800b588:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b58a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d902      	bls.n	800b596 <ETH_Prepare_Tx_Descriptors+0x11a>
 800b590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b592:	3b04      	subs	r3, #4
 800b594:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b598:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b59e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5ac:	d007      	beq.n	800b5be <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800b5ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d029      	beq.n	800b612 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800b5be:	6a3b      	ldr	r3, [r7, #32]
 800b5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b5d0:	e019      	b.n	800b606 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800b5d2:	f3bf 8f5f 	dmb	sy
}
 800b5d6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800b5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ec:	2b03      	cmp	r3, #3
 800b5ee:	d902      	bls.n	800b5f6 <ETH_Prepare_Tx_Descriptors+0x17a>
 800b5f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5f2:	3b04      	subs	r3, #4
 800b5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5fe:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800b600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b602:	3301      	adds	r3, #1
 800b604:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b606:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d3e1      	bcc.n	800b5d2 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800b60e:	2302      	movs	r3, #2
 800b610:	e072      	b.n	800b6f8 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800b612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800b61e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b620:	3301      	adds	r3, #1
 800b622:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800b624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800b62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b632:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800b634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b636:	685a      	ldr	r2, [r3, #4]
 800b638:	4b32      	ldr	r3, [pc, #200]	@ (800b704 <ETH_Prepare_Tx_Descriptors+0x288>)
 800b63a:	4013      	ands	r3, r2
 800b63c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b63e:	6852      	ldr	r2, [r2, #4]
 800b640:	431a      	orrs	r2, r3
 800b642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b644:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800b646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b648:	3301      	adds	r3, #1
 800b64a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800b64c:	f3bf 8f5f 	dmb	sy
}
 800b650:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800b652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800b65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	f47f af78 	bne.w	800b558 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d006      	beq.n	800b67c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800b66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b678:	601a      	str	r2, [r3, #0]
 800b67a:	e005      	b.n	800b688 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800b67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b686:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800b688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b692:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800b694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b696:	6a3a      	ldr	r2, [r7, #32]
 800b698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800b69e:	f3bf 8f5f 	dmb	sy
}
 800b6a2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ae:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b6b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b6b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6b8:	3304      	adds	r3, #4
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	440b      	add	r3, r1
 800b6be:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b6c4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b6ca:	613b      	str	r3, [r7, #16]
  return(result);
 800b6cc:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800b6ce:	61fb      	str	r3, [r7, #28]
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	f383 8810 	msr	PRIMASK, r3
}
 800b6da:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e2:	4413      	add	r3, r2
 800b6e4:	1c5a      	adds	r2, r3, #1
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e8:	629a      	str	r2, [r3, #40]	@ 0x28
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	f383 8810 	msr	PRIMASK, r3
}
 800b6f4:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3744      	adds	r7, #68	@ 0x44
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	ffffe000 	.word	0xffffe000

0800b708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b708:	b480      	push	{r7}
 800b70a:	b089      	sub	sp, #36	@ 0x24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b712:	2300      	movs	r3, #0
 800b714:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800b716:	2300      	movs	r3, #0
 800b718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b71a:	2300      	movs	r3, #0
 800b71c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800b71e:	2300      	movs	r3, #0
 800b720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800b722:	2300      	movs	r3, #0
 800b724:	61fb      	str	r3, [r7, #28]
 800b726:	e175      	b.n	800ba14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b728:	2201      	movs	r2, #1
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	fa02 f303 	lsl.w	r3, r2, r3
 800b730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	4013      	ands	r3, r2
 800b73a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	429a      	cmp	r2, r3
 800b742:	f040 8164 	bne.w	800ba0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	f003 0303 	and.w	r3, r3, #3
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d005      	beq.n	800b75e <HAL_GPIO_Init+0x56>
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	f003 0303 	and.w	r3, r3, #3
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d130      	bne.n	800b7c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	005b      	lsls	r3, r3, #1
 800b768:	2203      	movs	r2, #3
 800b76a:	fa02 f303 	lsl.w	r3, r2, r3
 800b76e:	43db      	mvns	r3, r3
 800b770:	69ba      	ldr	r2, [r7, #24]
 800b772:	4013      	ands	r3, r2
 800b774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	68da      	ldr	r2, [r3, #12]
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	005b      	lsls	r3, r3, #1
 800b77e:	fa02 f303 	lsl.w	r3, r2, r3
 800b782:	69ba      	ldr	r2, [r7, #24]
 800b784:	4313      	orrs	r3, r2
 800b786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	69ba      	ldr	r2, [r7, #24]
 800b78c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b794:	2201      	movs	r2, #1
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	fa02 f303 	lsl.w	r3, r2, r3
 800b79c:	43db      	mvns	r3, r3
 800b79e:	69ba      	ldr	r2, [r7, #24]
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	091b      	lsrs	r3, r3, #4
 800b7aa:	f003 0201 	and.w	r2, r3, #1
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	f003 0303 	and.w	r3, r3, #3
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d017      	beq.n	800b7fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	2203      	movs	r2, #3
 800b7d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7dc:	43db      	mvns	r3, r3
 800b7de:	69ba      	ldr	r2, [r7, #24]
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	689a      	ldr	r2, [r3, #8]
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	005b      	lsls	r3, r3, #1
 800b7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b7f0:	69ba      	ldr	r2, [r7, #24]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	69ba      	ldr	r2, [r7, #24]
 800b7fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	f003 0303 	and.w	r3, r3, #3
 800b804:	2b02      	cmp	r3, #2
 800b806:	d123      	bne.n	800b850 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	08da      	lsrs	r2, r3, #3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3208      	adds	r2, #8
 800b810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	f003 0307 	and.w	r3, r3, #7
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	220f      	movs	r2, #15
 800b820:	fa02 f303 	lsl.w	r3, r2, r3
 800b824:	43db      	mvns	r3, r3
 800b826:	69ba      	ldr	r2, [r7, #24]
 800b828:	4013      	ands	r3, r2
 800b82a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	691a      	ldr	r2, [r3, #16]
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	f003 0307 	and.w	r3, r3, #7
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	fa02 f303 	lsl.w	r3, r2, r3
 800b83c:	69ba      	ldr	r2, [r7, #24]
 800b83e:	4313      	orrs	r3, r2
 800b840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	08da      	lsrs	r2, r3, #3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3208      	adds	r2, #8
 800b84a:	69b9      	ldr	r1, [r7, #24]
 800b84c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	2203      	movs	r2, #3
 800b85c:	fa02 f303 	lsl.w	r3, r2, r3
 800b860:	43db      	mvns	r3, r3
 800b862:	69ba      	ldr	r2, [r7, #24]
 800b864:	4013      	ands	r3, r2
 800b866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	f003 0203 	and.w	r2, r3, #3
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	fa02 f303 	lsl.w	r3, r2, r3
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	69ba      	ldr	r2, [r7, #24]
 800b882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 80be 	beq.w	800ba0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b892:	4b66      	ldr	r3, [pc, #408]	@ (800ba2c <HAL_GPIO_Init+0x324>)
 800b894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b896:	4a65      	ldr	r2, [pc, #404]	@ (800ba2c <HAL_GPIO_Init+0x324>)
 800b898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b89c:	6453      	str	r3, [r2, #68]	@ 0x44
 800b89e:	4b63      	ldr	r3, [pc, #396]	@ (800ba2c <HAL_GPIO_Init+0x324>)
 800b8a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800b8aa:	4a61      	ldr	r2, [pc, #388]	@ (800ba30 <HAL_GPIO_Init+0x328>)
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	089b      	lsrs	r3, r3, #2
 800b8b0:	3302      	adds	r3, #2
 800b8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	f003 0303 	and.w	r3, r3, #3
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	220f      	movs	r2, #15
 800b8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c6:	43db      	mvns	r3, r3
 800b8c8:	69ba      	ldr	r2, [r7, #24]
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4a58      	ldr	r2, [pc, #352]	@ (800ba34 <HAL_GPIO_Init+0x32c>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d037      	beq.n	800b946 <HAL_GPIO_Init+0x23e>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4a57      	ldr	r2, [pc, #348]	@ (800ba38 <HAL_GPIO_Init+0x330>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d031      	beq.n	800b942 <HAL_GPIO_Init+0x23a>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a56      	ldr	r2, [pc, #344]	@ (800ba3c <HAL_GPIO_Init+0x334>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d02b      	beq.n	800b93e <HAL_GPIO_Init+0x236>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4a55      	ldr	r2, [pc, #340]	@ (800ba40 <HAL_GPIO_Init+0x338>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d025      	beq.n	800b93a <HAL_GPIO_Init+0x232>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a54      	ldr	r2, [pc, #336]	@ (800ba44 <HAL_GPIO_Init+0x33c>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d01f      	beq.n	800b936 <HAL_GPIO_Init+0x22e>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a53      	ldr	r2, [pc, #332]	@ (800ba48 <HAL_GPIO_Init+0x340>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d019      	beq.n	800b932 <HAL_GPIO_Init+0x22a>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a52      	ldr	r2, [pc, #328]	@ (800ba4c <HAL_GPIO_Init+0x344>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d013      	beq.n	800b92e <HAL_GPIO_Init+0x226>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a51      	ldr	r2, [pc, #324]	@ (800ba50 <HAL_GPIO_Init+0x348>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d00d      	beq.n	800b92a <HAL_GPIO_Init+0x222>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a50      	ldr	r2, [pc, #320]	@ (800ba54 <HAL_GPIO_Init+0x34c>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d007      	beq.n	800b926 <HAL_GPIO_Init+0x21e>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a4f      	ldr	r2, [pc, #316]	@ (800ba58 <HAL_GPIO_Init+0x350>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d101      	bne.n	800b922 <HAL_GPIO_Init+0x21a>
 800b91e:	2309      	movs	r3, #9
 800b920:	e012      	b.n	800b948 <HAL_GPIO_Init+0x240>
 800b922:	230a      	movs	r3, #10
 800b924:	e010      	b.n	800b948 <HAL_GPIO_Init+0x240>
 800b926:	2308      	movs	r3, #8
 800b928:	e00e      	b.n	800b948 <HAL_GPIO_Init+0x240>
 800b92a:	2307      	movs	r3, #7
 800b92c:	e00c      	b.n	800b948 <HAL_GPIO_Init+0x240>
 800b92e:	2306      	movs	r3, #6
 800b930:	e00a      	b.n	800b948 <HAL_GPIO_Init+0x240>
 800b932:	2305      	movs	r3, #5
 800b934:	e008      	b.n	800b948 <HAL_GPIO_Init+0x240>
 800b936:	2304      	movs	r3, #4
 800b938:	e006      	b.n	800b948 <HAL_GPIO_Init+0x240>
 800b93a:	2303      	movs	r3, #3
 800b93c:	e004      	b.n	800b948 <HAL_GPIO_Init+0x240>
 800b93e:	2302      	movs	r3, #2
 800b940:	e002      	b.n	800b948 <HAL_GPIO_Init+0x240>
 800b942:	2301      	movs	r3, #1
 800b944:	e000      	b.n	800b948 <HAL_GPIO_Init+0x240>
 800b946:	2300      	movs	r3, #0
 800b948:	69fa      	ldr	r2, [r7, #28]
 800b94a:	f002 0203 	and.w	r2, r2, #3
 800b94e:	0092      	lsls	r2, r2, #2
 800b950:	4093      	lsls	r3, r2
 800b952:	69ba      	ldr	r2, [r7, #24]
 800b954:	4313      	orrs	r3, r2
 800b956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b958:	4935      	ldr	r1, [pc, #212]	@ (800ba30 <HAL_GPIO_Init+0x328>)
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	089b      	lsrs	r3, r3, #2
 800b95e:	3302      	adds	r3, #2
 800b960:	69ba      	ldr	r2, [r7, #24]
 800b962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b966:	4b3d      	ldr	r3, [pc, #244]	@ (800ba5c <HAL_GPIO_Init+0x354>)
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	43db      	mvns	r3, r3
 800b970:	69ba      	ldr	r2, [r7, #24]
 800b972:	4013      	ands	r3, r2
 800b974:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d003      	beq.n	800b98a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	4313      	orrs	r3, r2
 800b988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b98a:	4a34      	ldr	r2, [pc, #208]	@ (800ba5c <HAL_GPIO_Init+0x354>)
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b990:	4b32      	ldr	r3, [pc, #200]	@ (800ba5c <HAL_GPIO_Init+0x354>)
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	43db      	mvns	r3, r3
 800b99a:	69ba      	ldr	r2, [r7, #24]
 800b99c:	4013      	ands	r3, r2
 800b99e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d003      	beq.n	800b9b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b9ac:	69ba      	ldr	r2, [r7, #24]
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b9b4:	4a29      	ldr	r2, [pc, #164]	@ (800ba5c <HAL_GPIO_Init+0x354>)
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b9ba:	4b28      	ldr	r3, [pc, #160]	@ (800ba5c <HAL_GPIO_Init+0x354>)
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	43db      	mvns	r3, r3
 800b9c4:	69ba      	ldr	r2, [r7, #24]
 800b9c6:	4013      	ands	r3, r2
 800b9c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b9d6:	69ba      	ldr	r2, [r7, #24]
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b9de:	4a1f      	ldr	r2, [pc, #124]	@ (800ba5c <HAL_GPIO_Init+0x354>)
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b9e4:	4b1d      	ldr	r3, [pc, #116]	@ (800ba5c <HAL_GPIO_Init+0x354>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	43db      	mvns	r3, r3
 800b9ee:	69ba      	ldr	r2, [r7, #24]
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d003      	beq.n	800ba08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ba00:	69ba      	ldr	r2, [r7, #24]
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ba08:	4a14      	ldr	r2, [pc, #80]	@ (800ba5c <HAL_GPIO_Init+0x354>)
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	3301      	adds	r3, #1
 800ba12:	61fb      	str	r3, [r7, #28]
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	2b0f      	cmp	r3, #15
 800ba18:	f67f ae86 	bls.w	800b728 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800ba1c:	bf00      	nop
 800ba1e:	bf00      	nop
 800ba20:	3724      	adds	r7, #36	@ 0x24
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	40023800 	.word	0x40023800
 800ba30:	40013800 	.word	0x40013800
 800ba34:	40020000 	.word	0x40020000
 800ba38:	40020400 	.word	0x40020400
 800ba3c:	40020800 	.word	0x40020800
 800ba40:	40020c00 	.word	0x40020c00
 800ba44:	40021000 	.word	0x40021000
 800ba48:	40021400 	.word	0x40021400
 800ba4c:	40021800 	.word	0x40021800
 800ba50:	40021c00 	.word	0x40021c00
 800ba54:	40022000 	.word	0x40022000
 800ba58:	40022400 	.word	0x40022400
 800ba5c:	40013c00 	.word	0x40013c00

0800ba60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b087      	sub	sp, #28
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800ba72:	2300      	movs	r3, #0
 800ba74:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800ba76:	2300      	movs	r3, #0
 800ba78:	617b      	str	r3, [r7, #20]
 800ba7a:	e0d9      	b.n	800bc30 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	fa02 f303 	lsl.w	r3, r2, r3
 800ba84:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	f040 80c9 	bne.w	800bc2a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800ba98:	4a6b      	ldr	r2, [pc, #428]	@ (800bc48 <HAL_GPIO_DeInit+0x1e8>)
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	089b      	lsrs	r3, r3, #2
 800ba9e:	3302      	adds	r3, #2
 800baa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baa4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	f003 0303 	and.w	r3, r3, #3
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	220f      	movs	r2, #15
 800bab0:	fa02 f303 	lsl.w	r3, r2, r3
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	4013      	ands	r3, r2
 800bab8:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a63      	ldr	r2, [pc, #396]	@ (800bc4c <HAL_GPIO_DeInit+0x1ec>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d037      	beq.n	800bb32 <HAL_GPIO_DeInit+0xd2>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a62      	ldr	r2, [pc, #392]	@ (800bc50 <HAL_GPIO_DeInit+0x1f0>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d031      	beq.n	800bb2e <HAL_GPIO_DeInit+0xce>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a61      	ldr	r2, [pc, #388]	@ (800bc54 <HAL_GPIO_DeInit+0x1f4>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d02b      	beq.n	800bb2a <HAL_GPIO_DeInit+0xca>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a60      	ldr	r2, [pc, #384]	@ (800bc58 <HAL_GPIO_DeInit+0x1f8>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d025      	beq.n	800bb26 <HAL_GPIO_DeInit+0xc6>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a5f      	ldr	r2, [pc, #380]	@ (800bc5c <HAL_GPIO_DeInit+0x1fc>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d01f      	beq.n	800bb22 <HAL_GPIO_DeInit+0xc2>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a5e      	ldr	r2, [pc, #376]	@ (800bc60 <HAL_GPIO_DeInit+0x200>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d019      	beq.n	800bb1e <HAL_GPIO_DeInit+0xbe>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a5d      	ldr	r2, [pc, #372]	@ (800bc64 <HAL_GPIO_DeInit+0x204>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d013      	beq.n	800bb1a <HAL_GPIO_DeInit+0xba>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a5c      	ldr	r2, [pc, #368]	@ (800bc68 <HAL_GPIO_DeInit+0x208>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d00d      	beq.n	800bb16 <HAL_GPIO_DeInit+0xb6>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a5b      	ldr	r2, [pc, #364]	@ (800bc6c <HAL_GPIO_DeInit+0x20c>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d007      	beq.n	800bb12 <HAL_GPIO_DeInit+0xb2>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a5a      	ldr	r2, [pc, #360]	@ (800bc70 <HAL_GPIO_DeInit+0x210>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d101      	bne.n	800bb0e <HAL_GPIO_DeInit+0xae>
 800bb0a:	2309      	movs	r3, #9
 800bb0c:	e012      	b.n	800bb34 <HAL_GPIO_DeInit+0xd4>
 800bb0e:	230a      	movs	r3, #10
 800bb10:	e010      	b.n	800bb34 <HAL_GPIO_DeInit+0xd4>
 800bb12:	2308      	movs	r3, #8
 800bb14:	e00e      	b.n	800bb34 <HAL_GPIO_DeInit+0xd4>
 800bb16:	2307      	movs	r3, #7
 800bb18:	e00c      	b.n	800bb34 <HAL_GPIO_DeInit+0xd4>
 800bb1a:	2306      	movs	r3, #6
 800bb1c:	e00a      	b.n	800bb34 <HAL_GPIO_DeInit+0xd4>
 800bb1e:	2305      	movs	r3, #5
 800bb20:	e008      	b.n	800bb34 <HAL_GPIO_DeInit+0xd4>
 800bb22:	2304      	movs	r3, #4
 800bb24:	e006      	b.n	800bb34 <HAL_GPIO_DeInit+0xd4>
 800bb26:	2303      	movs	r3, #3
 800bb28:	e004      	b.n	800bb34 <HAL_GPIO_DeInit+0xd4>
 800bb2a:	2302      	movs	r3, #2
 800bb2c:	e002      	b.n	800bb34 <HAL_GPIO_DeInit+0xd4>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e000      	b.n	800bb34 <HAL_GPIO_DeInit+0xd4>
 800bb32:	2300      	movs	r3, #0
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	f002 0203 	and.w	r2, r2, #3
 800bb3a:	0092      	lsls	r2, r2, #2
 800bb3c:	4093      	lsls	r3, r2
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d132      	bne.n	800bbaa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800bb44:	4b4b      	ldr	r3, [pc, #300]	@ (800bc74 <HAL_GPIO_DeInit+0x214>)
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	43db      	mvns	r3, r3
 800bb4c:	4949      	ldr	r1, [pc, #292]	@ (800bc74 <HAL_GPIO_DeInit+0x214>)
 800bb4e:	4013      	ands	r3, r2
 800bb50:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800bb52:	4b48      	ldr	r3, [pc, #288]	@ (800bc74 <HAL_GPIO_DeInit+0x214>)
 800bb54:	685a      	ldr	r2, [r3, #4]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	43db      	mvns	r3, r3
 800bb5a:	4946      	ldr	r1, [pc, #280]	@ (800bc74 <HAL_GPIO_DeInit+0x214>)
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800bb60:	4b44      	ldr	r3, [pc, #272]	@ (800bc74 <HAL_GPIO_DeInit+0x214>)
 800bb62:	68da      	ldr	r2, [r3, #12]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	43db      	mvns	r3, r3
 800bb68:	4942      	ldr	r1, [pc, #264]	@ (800bc74 <HAL_GPIO_DeInit+0x214>)
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800bb6e:	4b41      	ldr	r3, [pc, #260]	@ (800bc74 <HAL_GPIO_DeInit+0x214>)
 800bb70:	689a      	ldr	r2, [r3, #8]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	43db      	mvns	r3, r3
 800bb76:	493f      	ldr	r1, [pc, #252]	@ (800bc74 <HAL_GPIO_DeInit+0x214>)
 800bb78:	4013      	ands	r3, r2
 800bb7a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	220f      	movs	r2, #15
 800bb86:	fa02 f303 	lsl.w	r3, r2, r3
 800bb8a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800bb8c:	4a2e      	ldr	r2, [pc, #184]	@ (800bc48 <HAL_GPIO_DeInit+0x1e8>)
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	089b      	lsrs	r3, r3, #2
 800bb92:	3302      	adds	r3, #2
 800bb94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	43da      	mvns	r2, r3
 800bb9c:	482a      	ldr	r0, [pc, #168]	@ (800bc48 <HAL_GPIO_DeInit+0x1e8>)
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	089b      	lsrs	r3, r3, #2
 800bba2:	400a      	ands	r2, r1
 800bba4:	3302      	adds	r3, #2
 800bba6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	2103      	movs	r1, #3
 800bbb4:	fa01 f303 	lsl.w	r3, r1, r3
 800bbb8:	43db      	mvns	r3, r3
 800bbba:	401a      	ands	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	08da      	lsrs	r2, r3, #3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	3208      	adds	r2, #8
 800bbc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f003 0307 	and.w	r3, r3, #7
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	220f      	movs	r2, #15
 800bbd6:	fa02 f303 	lsl.w	r3, r2, r3
 800bbda:	43db      	mvns	r3, r3
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	08d2      	lsrs	r2, r2, #3
 800bbe0:	4019      	ands	r1, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3208      	adds	r2, #8
 800bbe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	68da      	ldr	r2, [r3, #12]
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	005b      	lsls	r3, r3, #1
 800bbf2:	2103      	movs	r1, #3
 800bbf4:	fa01 f303 	lsl.w	r3, r1, r3
 800bbf8:	43db      	mvns	r3, r3
 800bbfa:	401a      	ands	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	2101      	movs	r1, #1
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	fa01 f303 	lsl.w	r3, r1, r3
 800bc0c:	43db      	mvns	r3, r3
 800bc0e:	401a      	ands	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	2103      	movs	r1, #3
 800bc1e:	fa01 f303 	lsl.w	r3, r1, r3
 800bc22:	43db      	mvns	r3, r3
 800bc24:	401a      	ands	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	617b      	str	r3, [r7, #20]
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	2b0f      	cmp	r3, #15
 800bc34:	f67f af22 	bls.w	800ba7c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	40013800 	.word	0x40013800
 800bc4c:	40020000 	.word	0x40020000
 800bc50:	40020400 	.word	0x40020400
 800bc54:	40020800 	.word	0x40020800
 800bc58:	40020c00 	.word	0x40020c00
 800bc5c:	40021000 	.word	0x40021000
 800bc60:	40021400 	.word	0x40021400
 800bc64:	40021800 	.word	0x40021800
 800bc68:	40021c00 	.word	0x40021c00
 800bc6c:	40022000 	.word	0x40022000
 800bc70:	40022400 	.word	0x40022400
 800bc74:	40013c00 	.word	0x40013c00

0800bc78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	807b      	strh	r3, [r7, #2]
 800bc84:	4613      	mov	r3, r2
 800bc86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bc88:	787b      	ldrb	r3, [r7, #1]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d003      	beq.n	800bc96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bc8e:	887a      	ldrh	r2, [r7, #2]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800bc94:	e003      	b.n	800bc9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800bc96:	887b      	ldrh	r3, [r7, #2]
 800bc98:	041a      	lsls	r2, r3, #16
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	619a      	str	r2, [r3, #24]
}
 800bc9e:	bf00      	nop
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bcaa:	b480      	push	{r7}
 800bcac:	b085      	sub	sp, #20
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bcbc:	887a      	ldrh	r2, [r7, #2]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	041a      	lsls	r2, r3, #16
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	43d9      	mvns	r1, r3
 800bcc8:	887b      	ldrh	r3, [r7, #2]
 800bcca:	400b      	ands	r3, r1
 800bccc:	431a      	orrs	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	619a      	str	r2, [r3, #24]
}
 800bcd2:	bf00      	nop
 800bcd4:	3714      	adds	r7, #20
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b086      	sub	sp, #24
 800bce2:	af02      	add	r7, sp, #8
 800bce4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	e059      	b.n	800bda4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d106      	bne.n	800bd10 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f019 fd0a 	bl	8025724 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2203      	movs	r2, #3
 800bd14:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd1e:	d102      	bne.n	800bd26 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f007 fca9 	bl	8013682 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6818      	ldr	r0, [r3, #0]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	7c1a      	ldrb	r2, [r3, #16]
 800bd38:	f88d 2000 	strb.w	r2, [sp]
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd40:	f007 fc34 	bl	80135ac <USB_CoreInit>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d005      	beq.n	800bd56 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e026      	b.n	800bda4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2101      	movs	r1, #1
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f007 fca1 	bl	80136a4 <USB_SetCurrentMode>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d005      	beq.n	800bd74 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2202      	movs	r2, #2
 800bd6c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	e017      	b.n	800bda4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6818      	ldr	r0, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	7c1a      	ldrb	r2, [r3, #16]
 800bd7c:	f88d 2000 	strb.w	r2, [sp]
 800bd80:	3304      	adds	r3, #4
 800bd82:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd84:	f007 fe44 	bl	8013a10 <USB_HostInit>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d005      	beq.n	800bd9a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2202      	movs	r2, #2
 800bd92:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e004      	b.n	800bda4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bdac:	b590      	push	{r4, r7, lr}
 800bdae:	b08b      	sub	sp, #44	@ 0x2c
 800bdb0:	af04      	add	r7, sp, #16
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	4611      	mov	r1, r2
 800bdb8:	461a      	mov	r2, r3
 800bdba:	4603      	mov	r3, r0
 800bdbc:	70fb      	strb	r3, [r7, #3]
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	70bb      	strb	r3, [r7, #2]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800bdc6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800bdc8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d101      	bne.n	800bdd8 <HAL_HCD_HC_Init+0x2c>
 800bdd4:	2302      	movs	r3, #2
 800bdd6:	e09d      	b.n	800bf14 <HAL_HCD_HC_Init+0x168>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800bde0:	78fa      	ldrb	r2, [r7, #3]
 800bde2:	6879      	ldr	r1, [r7, #4]
 800bde4:	4613      	mov	r3, r2
 800bde6:	011b      	lsls	r3, r3, #4
 800bde8:	1a9b      	subs	r3, r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	440b      	add	r3, r1
 800bdee:	3319      	adds	r3, #25
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800bdf4:	78fa      	ldrb	r2, [r7, #3]
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	011b      	lsls	r3, r3, #4
 800bdfc:	1a9b      	subs	r3, r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	440b      	add	r3, r1
 800be02:	3314      	adds	r3, #20
 800be04:	787a      	ldrb	r2, [r7, #1]
 800be06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800be08:	78fa      	ldrb	r2, [r7, #3]
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	4613      	mov	r3, r2
 800be0e:	011b      	lsls	r3, r3, #4
 800be10:	1a9b      	subs	r3, r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	440b      	add	r3, r1
 800be16:	3315      	adds	r3, #21
 800be18:	78fa      	ldrb	r2, [r7, #3]
 800be1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800be1c:	78fa      	ldrb	r2, [r7, #3]
 800be1e:	6879      	ldr	r1, [r7, #4]
 800be20:	4613      	mov	r3, r2
 800be22:	011b      	lsls	r3, r3, #4
 800be24:	1a9b      	subs	r3, r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	440b      	add	r3, r1
 800be2a:	3326      	adds	r3, #38	@ 0x26
 800be2c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800be30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800be32:	78fa      	ldrb	r2, [r7, #3]
 800be34:	78bb      	ldrb	r3, [r7, #2]
 800be36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be3a:	b2d8      	uxtb	r0, r3
 800be3c:	6879      	ldr	r1, [r7, #4]
 800be3e:	4613      	mov	r3, r2
 800be40:	011b      	lsls	r3, r3, #4
 800be42:	1a9b      	subs	r3, r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	440b      	add	r3, r1
 800be48:	3316      	adds	r3, #22
 800be4a:	4602      	mov	r2, r0
 800be4c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800be4e:	78fb      	ldrb	r3, [r7, #3]
 800be50:	4619      	mov	r1, r3
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fbc8 	bl	800c5e8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800be58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	da0a      	bge.n	800be76 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800be60:	78fa      	ldrb	r2, [r7, #3]
 800be62:	6879      	ldr	r1, [r7, #4]
 800be64:	4613      	mov	r3, r2
 800be66:	011b      	lsls	r3, r3, #4
 800be68:	1a9b      	subs	r3, r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	440b      	add	r3, r1
 800be6e:	3317      	adds	r3, #23
 800be70:	2201      	movs	r2, #1
 800be72:	701a      	strb	r2, [r3, #0]
 800be74:	e009      	b.n	800be8a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800be76:	78fa      	ldrb	r2, [r7, #3]
 800be78:	6879      	ldr	r1, [r7, #4]
 800be7a:	4613      	mov	r3, r2
 800be7c:	011b      	lsls	r3, r3, #4
 800be7e:	1a9b      	subs	r3, r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	440b      	add	r3, r1
 800be84:	3317      	adds	r3, #23
 800be86:	2200      	movs	r2, #0
 800be88:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4618      	mov	r0, r3
 800be90:	f007 ff16 	bl	8013cc0 <USB_GetHostSpeed>
 800be94:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800be96:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d10b      	bne.n	800beb6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800be9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d107      	bne.n	800beb6 <HAL_HCD_HC_Init+0x10a>
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d104      	bne.n	800beb6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	2bbc      	cmp	r3, #188	@ 0xbc
 800beb0:	d901      	bls.n	800beb6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800beb2:	23bc      	movs	r3, #188	@ 0xbc
 800beb4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800beb6:	78fa      	ldrb	r2, [r7, #3]
 800beb8:	6879      	ldr	r1, [r7, #4]
 800beba:	4613      	mov	r3, r2
 800bebc:	011b      	lsls	r3, r3, #4
 800bebe:	1a9b      	subs	r3, r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	3318      	adds	r3, #24
 800bec6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800beca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800becc:	78fa      	ldrb	r2, [r7, #3]
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	b298      	uxth	r0, r3
 800bed2:	6879      	ldr	r1, [r7, #4]
 800bed4:	4613      	mov	r3, r2
 800bed6:	011b      	lsls	r3, r3, #4
 800bed8:	1a9b      	subs	r3, r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	440b      	add	r3, r1
 800bede:	3328      	adds	r3, #40	@ 0x28
 800bee0:	4602      	mov	r2, r0
 800bee2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6818      	ldr	r0, [r3, #0]
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	b29b      	uxth	r3, r3
 800beec:	787c      	ldrb	r4, [r7, #1]
 800beee:	78ba      	ldrb	r2, [r7, #2]
 800bef0:	78f9      	ldrb	r1, [r7, #3]
 800bef2:	9302      	str	r3, [sp, #8]
 800bef4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bef8:	9301      	str	r3, [sp, #4]
 800befa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	4623      	mov	r3, r4
 800bf02:	f007 ff05 	bl	8013d10 <USB_HC_Init>
 800bf06:	4603      	mov	r3, r0
 800bf08:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800bf12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	371c      	adds	r7, #28
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd90      	pop	{r4, r7, pc}

0800bf1c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	460b      	mov	r3, r1
 800bf26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d101      	bne.n	800bf3a <HAL_HCD_HC_Halt+0x1e>
 800bf36:	2302      	movs	r3, #2
 800bf38:	e00f      	b.n	800bf5a <HAL_HCD_HC_Halt+0x3e>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	78fa      	ldrb	r2, [r7, #3]
 800bf48:	4611      	mov	r1, r2
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f008 fa97 	bl	801447e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800bf58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
	...

0800bf64 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	4611      	mov	r1, r2
 800bf70:	461a      	mov	r2, r3
 800bf72:	4603      	mov	r3, r0
 800bf74:	70fb      	strb	r3, [r7, #3]
 800bf76:	460b      	mov	r3, r1
 800bf78:	70bb      	strb	r3, [r7, #2]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800bf7e:	78fa      	ldrb	r2, [r7, #3]
 800bf80:	6879      	ldr	r1, [r7, #4]
 800bf82:	4613      	mov	r3, r2
 800bf84:	011b      	lsls	r3, r3, #4
 800bf86:	1a9b      	subs	r3, r3, r2
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	440b      	add	r3, r1
 800bf8c:	3317      	adds	r3, #23
 800bf8e:	78ba      	ldrb	r2, [r7, #2]
 800bf90:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800bf92:	78fa      	ldrb	r2, [r7, #3]
 800bf94:	6879      	ldr	r1, [r7, #4]
 800bf96:	4613      	mov	r3, r2
 800bf98:	011b      	lsls	r3, r3, #4
 800bf9a:	1a9b      	subs	r3, r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	3326      	adds	r3, #38	@ 0x26
 800bfa2:	787a      	ldrb	r2, [r7, #1]
 800bfa4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800bfa6:	7c3b      	ldrb	r3, [r7, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d114      	bne.n	800bfd6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800bfac:	78fa      	ldrb	r2, [r7, #3]
 800bfae:	6879      	ldr	r1, [r7, #4]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	011b      	lsls	r3, r3, #4
 800bfb4:	1a9b      	subs	r3, r3, r2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	440b      	add	r3, r1
 800bfba:	332a      	adds	r3, #42	@ 0x2a
 800bfbc:	2203      	movs	r2, #3
 800bfbe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800bfc0:	78fa      	ldrb	r2, [r7, #3]
 800bfc2:	6879      	ldr	r1, [r7, #4]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	011b      	lsls	r3, r3, #4
 800bfc8:	1a9b      	subs	r3, r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	440b      	add	r3, r1
 800bfce:	3319      	adds	r3, #25
 800bfd0:	7f3a      	ldrb	r2, [r7, #28]
 800bfd2:	701a      	strb	r2, [r3, #0]
 800bfd4:	e009      	b.n	800bfea <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800bfd6:	78fa      	ldrb	r2, [r7, #3]
 800bfd8:	6879      	ldr	r1, [r7, #4]
 800bfda:	4613      	mov	r3, r2
 800bfdc:	011b      	lsls	r3, r3, #4
 800bfde:	1a9b      	subs	r3, r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	440b      	add	r3, r1
 800bfe4:	332a      	adds	r3, #42	@ 0x2a
 800bfe6:	2202      	movs	r2, #2
 800bfe8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800bfea:	787b      	ldrb	r3, [r7, #1]
 800bfec:	2b03      	cmp	r3, #3
 800bfee:	f200 8102 	bhi.w	800c1f6 <HAL_HCD_HC_SubmitRequest+0x292>
 800bff2:	a201      	add	r2, pc, #4	@ (adr r2, 800bff8 <HAL_HCD_HC_SubmitRequest+0x94>)
 800bff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff8:	0800c009 	.word	0x0800c009
 800bffc:	0800c1e1 	.word	0x0800c1e1
 800c000:	0800c0cd 	.word	0x0800c0cd
 800c004:	0800c157 	.word	0x0800c157
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800c008:	7c3b      	ldrb	r3, [r7, #16]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	f040 80f5 	bne.w	800c1fa <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800c010:	78bb      	ldrb	r3, [r7, #2]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d12d      	bne.n	800c072 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800c016:	8b3b      	ldrh	r3, [r7, #24]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d109      	bne.n	800c030 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800c01c:	78fa      	ldrb	r2, [r7, #3]
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	4613      	mov	r3, r2
 800c022:	011b      	lsls	r3, r3, #4
 800c024:	1a9b      	subs	r3, r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	440b      	add	r3, r1
 800c02a:	333d      	adds	r3, #61	@ 0x3d
 800c02c:	2201      	movs	r2, #1
 800c02e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800c030:	78fa      	ldrb	r2, [r7, #3]
 800c032:	6879      	ldr	r1, [r7, #4]
 800c034:	4613      	mov	r3, r2
 800c036:	011b      	lsls	r3, r3, #4
 800c038:	1a9b      	subs	r3, r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	440b      	add	r3, r1
 800c03e:	333d      	adds	r3, #61	@ 0x3d
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d10a      	bne.n	800c05c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c046:	78fa      	ldrb	r2, [r7, #3]
 800c048:	6879      	ldr	r1, [r7, #4]
 800c04a:	4613      	mov	r3, r2
 800c04c:	011b      	lsls	r3, r3, #4
 800c04e:	1a9b      	subs	r3, r3, r2
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	440b      	add	r3, r1
 800c054:	332a      	adds	r3, #42	@ 0x2a
 800c056:	2200      	movs	r2, #0
 800c058:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800c05a:	e0ce      	b.n	800c1fa <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800c05c:	78fa      	ldrb	r2, [r7, #3]
 800c05e:	6879      	ldr	r1, [r7, #4]
 800c060:	4613      	mov	r3, r2
 800c062:	011b      	lsls	r3, r3, #4
 800c064:	1a9b      	subs	r3, r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	440b      	add	r3, r1
 800c06a:	332a      	adds	r3, #42	@ 0x2a
 800c06c:	2202      	movs	r2, #2
 800c06e:	701a      	strb	r2, [r3, #0]
      break;
 800c070:	e0c3      	b.n	800c1fa <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800c072:	78fa      	ldrb	r2, [r7, #3]
 800c074:	6879      	ldr	r1, [r7, #4]
 800c076:	4613      	mov	r3, r2
 800c078:	011b      	lsls	r3, r3, #4
 800c07a:	1a9b      	subs	r3, r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	440b      	add	r3, r1
 800c080:	331a      	adds	r3, #26
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	2b01      	cmp	r3, #1
 800c086:	f040 80b8 	bne.w	800c1fa <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800c08a:	78fa      	ldrb	r2, [r7, #3]
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	4613      	mov	r3, r2
 800c090:	011b      	lsls	r3, r3, #4
 800c092:	1a9b      	subs	r3, r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	440b      	add	r3, r1
 800c098:	333c      	adds	r3, #60	@ 0x3c
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10a      	bne.n	800c0b6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c0a0:	78fa      	ldrb	r2, [r7, #3]
 800c0a2:	6879      	ldr	r1, [r7, #4]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	011b      	lsls	r3, r3, #4
 800c0a8:	1a9b      	subs	r3, r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	440b      	add	r3, r1
 800c0ae:	332a      	adds	r3, #42	@ 0x2a
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	701a      	strb	r2, [r3, #0]
      break;
 800c0b4:	e0a1      	b.n	800c1fa <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800c0b6:	78fa      	ldrb	r2, [r7, #3]
 800c0b8:	6879      	ldr	r1, [r7, #4]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	011b      	lsls	r3, r3, #4
 800c0be:	1a9b      	subs	r3, r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	440b      	add	r3, r1
 800c0c4:	332a      	adds	r3, #42	@ 0x2a
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	701a      	strb	r2, [r3, #0]
      break;
 800c0ca:	e096      	b.n	800c1fa <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800c0cc:	78bb      	ldrb	r3, [r7, #2]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d120      	bne.n	800c114 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800c0d2:	78fa      	ldrb	r2, [r7, #3]
 800c0d4:	6879      	ldr	r1, [r7, #4]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	011b      	lsls	r3, r3, #4
 800c0da:	1a9b      	subs	r3, r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	440b      	add	r3, r1
 800c0e0:	333d      	adds	r3, #61	@ 0x3d
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10a      	bne.n	800c0fe <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c0e8:	78fa      	ldrb	r2, [r7, #3]
 800c0ea:	6879      	ldr	r1, [r7, #4]
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	011b      	lsls	r3, r3, #4
 800c0f0:	1a9b      	subs	r3, r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	440b      	add	r3, r1
 800c0f6:	332a      	adds	r3, #42	@ 0x2a
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800c0fc:	e07e      	b.n	800c1fc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800c0fe:	78fa      	ldrb	r2, [r7, #3]
 800c100:	6879      	ldr	r1, [r7, #4]
 800c102:	4613      	mov	r3, r2
 800c104:	011b      	lsls	r3, r3, #4
 800c106:	1a9b      	subs	r3, r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	440b      	add	r3, r1
 800c10c:	332a      	adds	r3, #42	@ 0x2a
 800c10e:	2202      	movs	r2, #2
 800c110:	701a      	strb	r2, [r3, #0]
      break;
 800c112:	e073      	b.n	800c1fc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800c114:	78fa      	ldrb	r2, [r7, #3]
 800c116:	6879      	ldr	r1, [r7, #4]
 800c118:	4613      	mov	r3, r2
 800c11a:	011b      	lsls	r3, r3, #4
 800c11c:	1a9b      	subs	r3, r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	440b      	add	r3, r1
 800c122:	333c      	adds	r3, #60	@ 0x3c
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10a      	bne.n	800c140 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c12a:	78fa      	ldrb	r2, [r7, #3]
 800c12c:	6879      	ldr	r1, [r7, #4]
 800c12e:	4613      	mov	r3, r2
 800c130:	011b      	lsls	r3, r3, #4
 800c132:	1a9b      	subs	r3, r3, r2
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	440b      	add	r3, r1
 800c138:	332a      	adds	r3, #42	@ 0x2a
 800c13a:	2200      	movs	r2, #0
 800c13c:	701a      	strb	r2, [r3, #0]
      break;
 800c13e:	e05d      	b.n	800c1fc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800c140:	78fa      	ldrb	r2, [r7, #3]
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	4613      	mov	r3, r2
 800c146:	011b      	lsls	r3, r3, #4
 800c148:	1a9b      	subs	r3, r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	440b      	add	r3, r1
 800c14e:	332a      	adds	r3, #42	@ 0x2a
 800c150:	2202      	movs	r2, #2
 800c152:	701a      	strb	r2, [r3, #0]
      break;
 800c154:	e052      	b.n	800c1fc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800c156:	78bb      	ldrb	r3, [r7, #2]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d120      	bne.n	800c19e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800c15c:	78fa      	ldrb	r2, [r7, #3]
 800c15e:	6879      	ldr	r1, [r7, #4]
 800c160:	4613      	mov	r3, r2
 800c162:	011b      	lsls	r3, r3, #4
 800c164:	1a9b      	subs	r3, r3, r2
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	440b      	add	r3, r1
 800c16a:	333d      	adds	r3, #61	@ 0x3d
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10a      	bne.n	800c188 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c172:	78fa      	ldrb	r2, [r7, #3]
 800c174:	6879      	ldr	r1, [r7, #4]
 800c176:	4613      	mov	r3, r2
 800c178:	011b      	lsls	r3, r3, #4
 800c17a:	1a9b      	subs	r3, r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	440b      	add	r3, r1
 800c180:	332a      	adds	r3, #42	@ 0x2a
 800c182:	2200      	movs	r2, #0
 800c184:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800c186:	e039      	b.n	800c1fc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800c188:	78fa      	ldrb	r2, [r7, #3]
 800c18a:	6879      	ldr	r1, [r7, #4]
 800c18c:	4613      	mov	r3, r2
 800c18e:	011b      	lsls	r3, r3, #4
 800c190:	1a9b      	subs	r3, r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	440b      	add	r3, r1
 800c196:	332a      	adds	r3, #42	@ 0x2a
 800c198:	2202      	movs	r2, #2
 800c19a:	701a      	strb	r2, [r3, #0]
      break;
 800c19c:	e02e      	b.n	800c1fc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800c19e:	78fa      	ldrb	r2, [r7, #3]
 800c1a0:	6879      	ldr	r1, [r7, #4]
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	011b      	lsls	r3, r3, #4
 800c1a6:	1a9b      	subs	r3, r3, r2
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	440b      	add	r3, r1
 800c1ac:	333c      	adds	r3, #60	@ 0x3c
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10a      	bne.n	800c1ca <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c1b4:	78fa      	ldrb	r2, [r7, #3]
 800c1b6:	6879      	ldr	r1, [r7, #4]
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	011b      	lsls	r3, r3, #4
 800c1bc:	1a9b      	subs	r3, r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	440b      	add	r3, r1
 800c1c2:	332a      	adds	r3, #42	@ 0x2a
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	701a      	strb	r2, [r3, #0]
      break;
 800c1c8:	e018      	b.n	800c1fc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800c1ca:	78fa      	ldrb	r2, [r7, #3]
 800c1cc:	6879      	ldr	r1, [r7, #4]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	011b      	lsls	r3, r3, #4
 800c1d2:	1a9b      	subs	r3, r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	440b      	add	r3, r1
 800c1d8:	332a      	adds	r3, #42	@ 0x2a
 800c1da:	2202      	movs	r2, #2
 800c1dc:	701a      	strb	r2, [r3, #0]
      break;
 800c1de:	e00d      	b.n	800c1fc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800c1e0:	78fa      	ldrb	r2, [r7, #3]
 800c1e2:	6879      	ldr	r1, [r7, #4]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	011b      	lsls	r3, r3, #4
 800c1e8:	1a9b      	subs	r3, r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	440b      	add	r3, r1
 800c1ee:	332a      	adds	r3, #42	@ 0x2a
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	701a      	strb	r2, [r3, #0]
      break;
 800c1f4:	e002      	b.n	800c1fc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800c1f6:	bf00      	nop
 800c1f8:	e000      	b.n	800c1fc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800c1fa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800c1fc:	78fa      	ldrb	r2, [r7, #3]
 800c1fe:	6879      	ldr	r1, [r7, #4]
 800c200:	4613      	mov	r3, r2
 800c202:	011b      	lsls	r3, r3, #4
 800c204:	1a9b      	subs	r3, r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	440b      	add	r3, r1
 800c20a:	332c      	adds	r3, #44	@ 0x2c
 800c20c:	697a      	ldr	r2, [r7, #20]
 800c20e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800c210:	78fa      	ldrb	r2, [r7, #3]
 800c212:	8b39      	ldrh	r1, [r7, #24]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	4613      	mov	r3, r2
 800c218:	011b      	lsls	r3, r3, #4
 800c21a:	1a9b      	subs	r3, r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	4403      	add	r3, r0
 800c220:	3334      	adds	r3, #52	@ 0x34
 800c222:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800c224:	78fa      	ldrb	r2, [r7, #3]
 800c226:	6879      	ldr	r1, [r7, #4]
 800c228:	4613      	mov	r3, r2
 800c22a:	011b      	lsls	r3, r3, #4
 800c22c:	1a9b      	subs	r3, r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	440b      	add	r3, r1
 800c232:	334c      	adds	r3, #76	@ 0x4c
 800c234:	2200      	movs	r2, #0
 800c236:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800c238:	78fa      	ldrb	r2, [r7, #3]
 800c23a:	6879      	ldr	r1, [r7, #4]
 800c23c:	4613      	mov	r3, r2
 800c23e:	011b      	lsls	r3, r3, #4
 800c240:	1a9b      	subs	r3, r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	440b      	add	r3, r1
 800c246:	3338      	adds	r3, #56	@ 0x38
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800c24c:	78fa      	ldrb	r2, [r7, #3]
 800c24e:	6879      	ldr	r1, [r7, #4]
 800c250:	4613      	mov	r3, r2
 800c252:	011b      	lsls	r3, r3, #4
 800c254:	1a9b      	subs	r3, r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	440b      	add	r3, r1
 800c25a:	3315      	adds	r3, #21
 800c25c:	78fa      	ldrb	r2, [r7, #3]
 800c25e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800c260:	78fa      	ldrb	r2, [r7, #3]
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	4613      	mov	r3, r2
 800c266:	011b      	lsls	r3, r3, #4
 800c268:	1a9b      	subs	r3, r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	440b      	add	r3, r1
 800c26e:	334d      	adds	r3, #77	@ 0x4d
 800c270:	2200      	movs	r2, #0
 800c272:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6818      	ldr	r0, [r3, #0]
 800c278:	78fa      	ldrb	r2, [r7, #3]
 800c27a:	4613      	mov	r3, r2
 800c27c:	011b      	lsls	r3, r3, #4
 800c27e:	1a9b      	subs	r3, r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	3310      	adds	r3, #16
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	4413      	add	r3, r2
 800c288:	1d19      	adds	r1, r3, #4
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	799b      	ldrb	r3, [r3, #6]
 800c28e:	461a      	mov	r2, r3
 800c290:	f007 fe6a 	bl	8013f68 <USB_HC_StartXfer>
 800c294:	4603      	mov	r3, r0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3708      	adds	r7, #8
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop

0800c2a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f007 fb6a 	bl	8013990 <USB_GetMode>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	f040 80fb 	bne.w	800c4ba <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f007 fb2d 	bl	8013928 <USB_ReadInterrupts>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 80f1 	beq.w	800c4b8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f007 fb24 	bl	8013928 <USB_ReadInterrupts>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c2e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2ea:	d104      	bne.n	800c2f6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800c2f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f007 fb14 	bl	8013928 <USB_ReadInterrupts>
 800c300:	4603      	mov	r3, r0
 800c302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c30a:	d104      	bne.n	800c316 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c314:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f007 fb04 	bl	8013928 <USB_ReadInterrupts>
 800c320:	4603      	mov	r3, r0
 800c322:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c326:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c32a:	d104      	bne.n	800c336 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800c334:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f007 faf4 	bl	8013928 <USB_ReadInterrupts>
 800c340:	4603      	mov	r3, r0
 800c342:	f003 0302 	and.w	r3, r3, #2
 800c346:	2b02      	cmp	r3, #2
 800c348:	d103      	bne.n	800c352 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2202      	movs	r2, #2
 800c350:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4618      	mov	r0, r3
 800c358:	f007 fae6 	bl	8013928 <USB_ReadInterrupts>
 800c35c:	4603      	mov	r3, r0
 800c35e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c366:	d120      	bne.n	800c3aa <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800c370:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f003 0301 	and.w	r3, r3, #1
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d113      	bne.n	800c3aa <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800c382:	2110      	movs	r1, #16
 800c384:	6938      	ldr	r0, [r7, #16]
 800c386:	f007 f9d9 	bl	801373c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800c38a:	6938      	ldr	r0, [r7, #16]
 800c38c:	f007 fa08 	bl	80137a0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	7a5b      	ldrb	r3, [r3, #9]
 800c394:	2b02      	cmp	r3, #2
 800c396:	d105      	bne.n	800c3a4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2101      	movs	r1, #1
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f007 fbee 	bl	8013b80 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f019 fa2f 	bl	8025808 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f007 faba 	bl	8013928 <USB_ReadInterrupts>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c3ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3be:	d102      	bne.n	800c3c6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f001 fd33 	bl	800de2c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f007 faac 	bl	8013928 <USB_ReadInterrupts>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f003 0308 	and.w	r3, r3, #8
 800c3d6:	2b08      	cmp	r3, #8
 800c3d8:	d106      	bne.n	800c3e8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f019 f9f8 	bl	80257d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2208      	movs	r2, #8
 800c3e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f007 fa9b 	bl	8013928 <USB_ReadInterrupts>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c3fc:	d139      	bne.n	800c472 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4618      	mov	r0, r3
 800c404:	f008 f82a 	bl	801445c <USB_HC_ReadInterrupt>
 800c408:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800c40a:	2300      	movs	r3, #0
 800c40c:	617b      	str	r3, [r7, #20]
 800c40e:	e025      	b.n	800c45c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	f003 030f 	and.w	r3, r3, #15
 800c416:	68ba      	ldr	r2, [r7, #8]
 800c418:	fa22 f303 	lsr.w	r3, r2, r3
 800c41c:	f003 0301 	and.w	r3, r3, #1
 800c420:	2b00      	cmp	r3, #0
 800c422:	d018      	beq.n	800c456 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c43a:	d106      	bne.n	800c44a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	4619      	mov	r1, r3
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 f905 	bl	800c652 <HCD_HC_IN_IRQHandler>
 800c448:	e005      	b.n	800c456 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	4619      	mov	r1, r3
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 ff67 	bl	800d324 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	3301      	adds	r3, #1
 800c45a:	617b      	str	r3, [r7, #20]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	795b      	ldrb	r3, [r3, #5]
 800c460:	461a      	mov	r2, r3
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	4293      	cmp	r3, r2
 800c466:	d3d3      	bcc.n	800c410 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800c470:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4618      	mov	r0, r3
 800c478:	f007 fa56 	bl	8013928 <USB_ReadInterrupts>
 800c47c:	4603      	mov	r3, r0
 800c47e:	f003 0310 	and.w	r3, r3, #16
 800c482:	2b10      	cmp	r3, #16
 800c484:	d101      	bne.n	800c48a <HAL_HCD_IRQHandler+0x1ea>
 800c486:	2301      	movs	r3, #1
 800c488:	e000      	b.n	800c48c <HAL_HCD_IRQHandler+0x1ec>
 800c48a:	2300      	movs	r3, #0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d014      	beq.n	800c4ba <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	699a      	ldr	r2, [r3, #24]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f022 0210 	bic.w	r2, r2, #16
 800c49e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f001 fbe4 	bl	800dc6e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	699a      	ldr	r2, [r3, #24]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f042 0210 	orr.w	r2, r2, #16
 800c4b4:	619a      	str	r2, [r3, #24]
 800c4b6:	e000      	b.n	800c4ba <HAL_HCD_IRQHandler+0x21a>
      return;
 800c4b8:	bf00      	nop
    }
  }
}
 800c4ba:	3718      	adds	r7, #24
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d101      	bne.n	800c4d6 <HAL_HCD_Start+0x16>
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	e013      	b.n	800c4fe <HAL_HCD_Start+0x3e>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2101      	movs	r1, #1
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f007 fbb2 	bl	8013c4e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f007 f8b6 	bl	8013660 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800c514:	2b01      	cmp	r3, #1
 800c516:	d101      	bne.n	800c51c <HAL_HCD_Stop+0x16>
 800c518:	2302      	movs	r3, #2
 800c51a:	e00d      	b.n	800c538 <HAL_HCD_Stop+0x32>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4618      	mov	r0, r3
 800c52a:	f008 f905 	bl	8014738 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3708      	adds	r7, #8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4618      	mov	r0, r3
 800c54e:	f007 fb54 	bl	8013bfa <USB_ResetPort>
 800c552:	4603      	mov	r3, r0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	460b      	mov	r3, r1
 800c566:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800c568:	78fa      	ldrb	r2, [r7, #3]
 800c56a:	6879      	ldr	r1, [r7, #4]
 800c56c:	4613      	mov	r3, r2
 800c56e:	011b      	lsls	r3, r3, #4
 800c570:	1a9b      	subs	r3, r3, r2
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	440b      	add	r3, r1
 800c576:	334c      	adds	r3, #76	@ 0x4c
 800c578:	781b      	ldrb	r3, [r3, #0]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800c586:	b480      	push	{r7}
 800c588:	b083      	sub	sp, #12
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	460b      	mov	r3, r1
 800c590:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800c592:	78fa      	ldrb	r2, [r7, #3]
 800c594:	6879      	ldr	r1, [r7, #4]
 800c596:	4613      	mov	r3, r2
 800c598:	011b      	lsls	r3, r3, #4
 800c59a:	1a9b      	subs	r3, r3, r2
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	440b      	add	r3, r1
 800c5a0:	3338      	adds	r3, #56	@ 0x38
 800c5a2:	681b      	ldr	r3, [r3, #0]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f007 fb96 	bl	8013cee <USB_GetCurrentFrame>
 800c5c2:	4603      	mov	r3, r0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f007 fb71 	bl	8013cc0 <USB_GetHostSpeed>
 800c5de:	4603      	mov	r3, r0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800c5f4:	78fa      	ldrb	r2, [r7, #3]
 800c5f6:	6879      	ldr	r1, [r7, #4]
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	011b      	lsls	r3, r3, #4
 800c5fc:	1a9b      	subs	r3, r3, r2
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	440b      	add	r3, r1
 800c602:	331a      	adds	r3, #26
 800c604:	2200      	movs	r2, #0
 800c606:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800c608:	78fa      	ldrb	r2, [r7, #3]
 800c60a:	6879      	ldr	r1, [r7, #4]
 800c60c:	4613      	mov	r3, r2
 800c60e:	011b      	lsls	r3, r3, #4
 800c610:	1a9b      	subs	r3, r3, r2
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	440b      	add	r3, r1
 800c616:	331b      	adds	r3, #27
 800c618:	2200      	movs	r2, #0
 800c61a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800c61c:	78fa      	ldrb	r2, [r7, #3]
 800c61e:	6879      	ldr	r1, [r7, #4]
 800c620:	4613      	mov	r3, r2
 800c622:	011b      	lsls	r3, r3, #4
 800c624:	1a9b      	subs	r3, r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	440b      	add	r3, r1
 800c62a:	3325      	adds	r3, #37	@ 0x25
 800c62c:	2200      	movs	r2, #0
 800c62e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800c630:	78fa      	ldrb	r2, [r7, #3]
 800c632:	6879      	ldr	r1, [r7, #4]
 800c634:	4613      	mov	r3, r2
 800c636:	011b      	lsls	r3, r3, #4
 800c638:	1a9b      	subs	r3, r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	440b      	add	r3, r1
 800c63e:	3324      	adds	r3, #36	@ 0x24
 800c640:	2200      	movs	r2, #0
 800c642:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr

0800c652 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b086      	sub	sp, #24
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
 800c65a:	460b      	mov	r3, r1
 800c65c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	78fa      	ldrb	r2, [r7, #3]
 800c66e:	4611      	mov	r1, r2
 800c670:	4618      	mov	r0, r3
 800c672:	f007 f96c 	bl	801394e <USB_ReadChInterrupts>
 800c676:	4603      	mov	r3, r0
 800c678:	f003 0304 	and.w	r3, r3, #4
 800c67c:	2b04      	cmp	r3, #4
 800c67e:	d11a      	bne.n	800c6b6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800c680:	78fb      	ldrb	r3, [r7, #3]
 800c682:	015a      	lsls	r2, r3, #5
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	4413      	add	r3, r2
 800c688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c68c:	461a      	mov	r2, r3
 800c68e:	2304      	movs	r3, #4
 800c690:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800c692:	78fa      	ldrb	r2, [r7, #3]
 800c694:	6879      	ldr	r1, [r7, #4]
 800c696:	4613      	mov	r3, r2
 800c698:	011b      	lsls	r3, r3, #4
 800c69a:	1a9b      	subs	r3, r3, r2
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	440b      	add	r3, r1
 800c6a0:	334d      	adds	r3, #77	@ 0x4d
 800c6a2:	2207      	movs	r2, #7
 800c6a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	78fa      	ldrb	r2, [r7, #3]
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f007 fee5 	bl	801447e <USB_HC_Halt>
 800c6b4:	e09e      	b.n	800c7f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	78fa      	ldrb	r2, [r7, #3]
 800c6bc:	4611      	mov	r1, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f007 f945 	bl	801394e <USB_ReadChInterrupts>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6ce:	d11b      	bne.n	800c708 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800c6d0:	78fb      	ldrb	r3, [r7, #3]
 800c6d2:	015a      	lsls	r2, r3, #5
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c6dc:	461a      	mov	r2, r3
 800c6de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c6e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800c6e4:	78fa      	ldrb	r2, [r7, #3]
 800c6e6:	6879      	ldr	r1, [r7, #4]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	011b      	lsls	r3, r3, #4
 800c6ec:	1a9b      	subs	r3, r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	440b      	add	r3, r1
 800c6f2:	334d      	adds	r3, #77	@ 0x4d
 800c6f4:	2208      	movs	r2, #8
 800c6f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	78fa      	ldrb	r2, [r7, #3]
 800c6fe:	4611      	mov	r1, r2
 800c700:	4618      	mov	r0, r3
 800c702:	f007 febc 	bl	801447e <USB_HC_Halt>
 800c706:	e075      	b.n	800c7f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	78fa      	ldrb	r2, [r7, #3]
 800c70e:	4611      	mov	r1, r2
 800c710:	4618      	mov	r0, r3
 800c712:	f007 f91c 	bl	801394e <USB_ReadChInterrupts>
 800c716:	4603      	mov	r3, r0
 800c718:	f003 0308 	and.w	r3, r3, #8
 800c71c:	2b08      	cmp	r3, #8
 800c71e:	d11a      	bne.n	800c756 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	015a      	lsls	r2, r3, #5
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	4413      	add	r3, r2
 800c728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c72c:	461a      	mov	r2, r3
 800c72e:	2308      	movs	r3, #8
 800c730:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800c732:	78fa      	ldrb	r2, [r7, #3]
 800c734:	6879      	ldr	r1, [r7, #4]
 800c736:	4613      	mov	r3, r2
 800c738:	011b      	lsls	r3, r3, #4
 800c73a:	1a9b      	subs	r3, r3, r2
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	440b      	add	r3, r1
 800c740:	334d      	adds	r3, #77	@ 0x4d
 800c742:	2206      	movs	r2, #6
 800c744:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	78fa      	ldrb	r2, [r7, #3]
 800c74c:	4611      	mov	r1, r2
 800c74e:	4618      	mov	r0, r3
 800c750:	f007 fe95 	bl	801447e <USB_HC_Halt>
 800c754:	e04e      	b.n	800c7f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	78fa      	ldrb	r2, [r7, #3]
 800c75c:	4611      	mov	r1, r2
 800c75e:	4618      	mov	r0, r3
 800c760:	f007 f8f5 	bl	801394e <USB_ReadChInterrupts>
 800c764:	4603      	mov	r3, r0
 800c766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c76a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c76e:	d11b      	bne.n	800c7a8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800c770:	78fb      	ldrb	r3, [r7, #3]
 800c772:	015a      	lsls	r2, r3, #5
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	4413      	add	r3, r2
 800c778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c77c:	461a      	mov	r2, r3
 800c77e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c782:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800c784:	78fa      	ldrb	r2, [r7, #3]
 800c786:	6879      	ldr	r1, [r7, #4]
 800c788:	4613      	mov	r3, r2
 800c78a:	011b      	lsls	r3, r3, #4
 800c78c:	1a9b      	subs	r3, r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	440b      	add	r3, r1
 800c792:	334d      	adds	r3, #77	@ 0x4d
 800c794:	2209      	movs	r2, #9
 800c796:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	78fa      	ldrb	r2, [r7, #3]
 800c79e:	4611      	mov	r1, r2
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f007 fe6c 	bl	801447e <USB_HC_Halt>
 800c7a6:	e025      	b.n	800c7f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	78fa      	ldrb	r2, [r7, #3]
 800c7ae:	4611      	mov	r1, r2
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f007 f8cc 	bl	801394e <USB_ReadChInterrupts>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7bc:	2b80      	cmp	r3, #128	@ 0x80
 800c7be:	d119      	bne.n	800c7f4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800c7c0:	78fb      	ldrb	r3, [r7, #3]
 800c7c2:	015a      	lsls	r2, r3, #5
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	2380      	movs	r3, #128	@ 0x80
 800c7d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800c7d2:	78fa      	ldrb	r2, [r7, #3]
 800c7d4:	6879      	ldr	r1, [r7, #4]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	011b      	lsls	r3, r3, #4
 800c7da:	1a9b      	subs	r3, r3, r2
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	440b      	add	r3, r1
 800c7e0:	334d      	adds	r3, #77	@ 0x4d
 800c7e2:	2207      	movs	r2, #7
 800c7e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	78fa      	ldrb	r2, [r7, #3]
 800c7ec:	4611      	mov	r1, r2
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f007 fe45 	bl	801447e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	78fa      	ldrb	r2, [r7, #3]
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f007 f8a6 	bl	801394e <USB_ReadChInterrupts>
 800c802:	4603      	mov	r3, r0
 800c804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c80c:	d112      	bne.n	800c834 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	78fa      	ldrb	r2, [r7, #3]
 800c814:	4611      	mov	r1, r2
 800c816:	4618      	mov	r0, r3
 800c818:	f007 fe31 	bl	801447e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800c81c:	78fb      	ldrb	r3, [r7, #3]
 800c81e:	015a      	lsls	r2, r3, #5
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	4413      	add	r3, r2
 800c824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c828:	461a      	mov	r2, r3
 800c82a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c82e:	6093      	str	r3, [r2, #8]
 800c830:	f000 bd75 	b.w	800d31e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	78fa      	ldrb	r2, [r7, #3]
 800c83a:	4611      	mov	r1, r2
 800c83c:	4618      	mov	r0, r3
 800c83e:	f007 f886 	bl	801394e <USB_ReadChInterrupts>
 800c842:	4603      	mov	r3, r0
 800c844:	f003 0301 	and.w	r3, r3, #1
 800c848:	2b01      	cmp	r3, #1
 800c84a:	f040 8128 	bne.w	800ca9e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800c84e:	78fb      	ldrb	r3, [r7, #3]
 800c850:	015a      	lsls	r2, r3, #5
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	4413      	add	r3, r2
 800c856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c85a:	461a      	mov	r2, r3
 800c85c:	2320      	movs	r3, #32
 800c85e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800c860:	78fa      	ldrb	r2, [r7, #3]
 800c862:	6879      	ldr	r1, [r7, #4]
 800c864:	4613      	mov	r3, r2
 800c866:	011b      	lsls	r3, r3, #4
 800c868:	1a9b      	subs	r3, r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	440b      	add	r3, r1
 800c86e:	331b      	adds	r3, #27
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	2b01      	cmp	r3, #1
 800c874:	d119      	bne.n	800c8aa <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800c876:	78fa      	ldrb	r2, [r7, #3]
 800c878:	6879      	ldr	r1, [r7, #4]
 800c87a:	4613      	mov	r3, r2
 800c87c:	011b      	lsls	r3, r3, #4
 800c87e:	1a9b      	subs	r3, r3, r2
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	440b      	add	r3, r1
 800c884:	331b      	adds	r3, #27
 800c886:	2200      	movs	r2, #0
 800c888:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800c88a:	78fb      	ldrb	r3, [r7, #3]
 800c88c:	015a      	lsls	r2, r3, #5
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	4413      	add	r3, r2
 800c892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	78fa      	ldrb	r2, [r7, #3]
 800c89a:	0151      	lsls	r1, r2, #5
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	440a      	add	r2, r1
 800c8a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c8a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c8a8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	799b      	ldrb	r3, [r3, #6]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d01b      	beq.n	800c8ea <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800c8b2:	78fa      	ldrb	r2, [r7, #3]
 800c8b4:	6879      	ldr	r1, [r7, #4]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	011b      	lsls	r3, r3, #4
 800c8ba:	1a9b      	subs	r3, r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	440b      	add	r3, r1
 800c8c0:	3330      	adds	r3, #48	@ 0x30
 800c8c2:	6819      	ldr	r1, [r3, #0]
 800c8c4:	78fb      	ldrb	r3, [r7, #3]
 800c8c6:	015a      	lsls	r2, r3, #5
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8d6:	78fa      	ldrb	r2, [r7, #3]
 800c8d8:	1ac9      	subs	r1, r1, r3
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	4613      	mov	r3, r2
 800c8de:	011b      	lsls	r3, r3, #4
 800c8e0:	1a9b      	subs	r3, r3, r2
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4403      	add	r3, r0
 800c8e6:	3338      	adds	r3, #56	@ 0x38
 800c8e8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800c8ea:	78fa      	ldrb	r2, [r7, #3]
 800c8ec:	6879      	ldr	r1, [r7, #4]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	011b      	lsls	r3, r3, #4
 800c8f2:	1a9b      	subs	r3, r3, r2
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	440b      	add	r3, r1
 800c8f8:	334d      	adds	r3, #77	@ 0x4d
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800c8fe:	78fa      	ldrb	r2, [r7, #3]
 800c900:	6879      	ldr	r1, [r7, #4]
 800c902:	4613      	mov	r3, r2
 800c904:	011b      	lsls	r3, r3, #4
 800c906:	1a9b      	subs	r3, r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	440b      	add	r3, r1
 800c90c:	3344      	adds	r3, #68	@ 0x44
 800c90e:	2200      	movs	r2, #0
 800c910:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800c912:	78fb      	ldrb	r3, [r7, #3]
 800c914:	015a      	lsls	r2, r3, #5
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	4413      	add	r3, r2
 800c91a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c91e:	461a      	mov	r2, r3
 800c920:	2301      	movs	r3, #1
 800c922:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800c924:	78fa      	ldrb	r2, [r7, #3]
 800c926:	6879      	ldr	r1, [r7, #4]
 800c928:	4613      	mov	r3, r2
 800c92a:	011b      	lsls	r3, r3, #4
 800c92c:	1a9b      	subs	r3, r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	440b      	add	r3, r1
 800c932:	3326      	adds	r3, #38	@ 0x26
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00a      	beq.n	800c950 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800c93a:	78fa      	ldrb	r2, [r7, #3]
 800c93c:	6879      	ldr	r1, [r7, #4]
 800c93e:	4613      	mov	r3, r2
 800c940:	011b      	lsls	r3, r3, #4
 800c942:	1a9b      	subs	r3, r3, r2
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	440b      	add	r3, r1
 800c948:	3326      	adds	r3, #38	@ 0x26
 800c94a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d110      	bne.n	800c972 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	78fa      	ldrb	r2, [r7, #3]
 800c956:	4611      	mov	r1, r2
 800c958:	4618      	mov	r0, r3
 800c95a:	f007 fd90 	bl	801447e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800c95e:	78fb      	ldrb	r3, [r7, #3]
 800c960:	015a      	lsls	r2, r3, #5
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	4413      	add	r3, r2
 800c966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c96a:	461a      	mov	r2, r3
 800c96c:	2310      	movs	r3, #16
 800c96e:	6093      	str	r3, [r2, #8]
 800c970:	e03d      	b.n	800c9ee <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800c972:	78fa      	ldrb	r2, [r7, #3]
 800c974:	6879      	ldr	r1, [r7, #4]
 800c976:	4613      	mov	r3, r2
 800c978:	011b      	lsls	r3, r3, #4
 800c97a:	1a9b      	subs	r3, r3, r2
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	440b      	add	r3, r1
 800c980:	3326      	adds	r3, #38	@ 0x26
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2b03      	cmp	r3, #3
 800c986:	d00a      	beq.n	800c99e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800c988:	78fa      	ldrb	r2, [r7, #3]
 800c98a:	6879      	ldr	r1, [r7, #4]
 800c98c:	4613      	mov	r3, r2
 800c98e:	011b      	lsls	r3, r3, #4
 800c990:	1a9b      	subs	r3, r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	440b      	add	r3, r1
 800c996:	3326      	adds	r3, #38	@ 0x26
 800c998:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d127      	bne.n	800c9ee <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c99e:	78fb      	ldrb	r3, [r7, #3]
 800c9a0:	015a      	lsls	r2, r3, #5
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	78fa      	ldrb	r2, [r7, #3]
 800c9ae:	0151      	lsls	r1, r2, #5
 800c9b0:	693a      	ldr	r2, [r7, #16]
 800c9b2:	440a      	add	r2, r1
 800c9b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c9b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c9bc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800c9be:	78fa      	ldrb	r2, [r7, #3]
 800c9c0:	6879      	ldr	r1, [r7, #4]
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	011b      	lsls	r3, r3, #4
 800c9c6:	1a9b      	subs	r3, r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	440b      	add	r3, r1
 800c9cc:	334c      	adds	r3, #76	@ 0x4c
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800c9d2:	78fa      	ldrb	r2, [r7, #3]
 800c9d4:	6879      	ldr	r1, [r7, #4]
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	011b      	lsls	r3, r3, #4
 800c9da:	1a9b      	subs	r3, r3, r2
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	440b      	add	r3, r1
 800c9e0:	334c      	adds	r3, #76	@ 0x4c
 800c9e2:	781a      	ldrb	r2, [r3, #0]
 800c9e4:	78fb      	ldrb	r3, [r7, #3]
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f018 ff1b 	bl	8025824 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	799b      	ldrb	r3, [r3, #6]
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d13b      	bne.n	800ca6e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800c9f6:	78fa      	ldrb	r2, [r7, #3]
 800c9f8:	6879      	ldr	r1, [r7, #4]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	011b      	lsls	r3, r3, #4
 800c9fe:	1a9b      	subs	r3, r3, r2
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	440b      	add	r3, r1
 800ca04:	3338      	adds	r3, #56	@ 0x38
 800ca06:	6819      	ldr	r1, [r3, #0]
 800ca08:	78fa      	ldrb	r2, [r7, #3]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	011b      	lsls	r3, r3, #4
 800ca10:	1a9b      	subs	r3, r3, r2
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4403      	add	r3, r0
 800ca16:	3328      	adds	r3, #40	@ 0x28
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	440b      	add	r3, r1
 800ca1c:	1e59      	subs	r1, r3, #1
 800ca1e:	78fa      	ldrb	r2, [r7, #3]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	4613      	mov	r3, r2
 800ca24:	011b      	lsls	r3, r3, #4
 800ca26:	1a9b      	subs	r3, r3, r2
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	4403      	add	r3, r0
 800ca2c:	3328      	adds	r3, #40	@ 0x28
 800ca2e:	881b      	ldrh	r3, [r3, #0]
 800ca30:	fbb1 f3f3 	udiv	r3, r1, r3
 800ca34:	f003 0301 	and.w	r3, r3, #1
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f000 8470 	beq.w	800d31e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800ca3e:	78fa      	ldrb	r2, [r7, #3]
 800ca40:	6879      	ldr	r1, [r7, #4]
 800ca42:	4613      	mov	r3, r2
 800ca44:	011b      	lsls	r3, r3, #4
 800ca46:	1a9b      	subs	r3, r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	440b      	add	r3, r1
 800ca4c:	333c      	adds	r3, #60	@ 0x3c
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	78fa      	ldrb	r2, [r7, #3]
 800ca52:	f083 0301 	eor.w	r3, r3, #1
 800ca56:	b2d8      	uxtb	r0, r3
 800ca58:	6879      	ldr	r1, [r7, #4]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	011b      	lsls	r3, r3, #4
 800ca5e:	1a9b      	subs	r3, r3, r2
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	440b      	add	r3, r1
 800ca64:	333c      	adds	r3, #60	@ 0x3c
 800ca66:	4602      	mov	r2, r0
 800ca68:	701a      	strb	r2, [r3, #0]
 800ca6a:	f000 bc58 	b.w	800d31e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800ca6e:	78fa      	ldrb	r2, [r7, #3]
 800ca70:	6879      	ldr	r1, [r7, #4]
 800ca72:	4613      	mov	r3, r2
 800ca74:	011b      	lsls	r3, r3, #4
 800ca76:	1a9b      	subs	r3, r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	440b      	add	r3, r1
 800ca7c:	333c      	adds	r3, #60	@ 0x3c
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	78fa      	ldrb	r2, [r7, #3]
 800ca82:	f083 0301 	eor.w	r3, r3, #1
 800ca86:	b2d8      	uxtb	r0, r3
 800ca88:	6879      	ldr	r1, [r7, #4]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	011b      	lsls	r3, r3, #4
 800ca8e:	1a9b      	subs	r3, r3, r2
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	440b      	add	r3, r1
 800ca94:	333c      	adds	r3, #60	@ 0x3c
 800ca96:	4602      	mov	r2, r0
 800ca98:	701a      	strb	r2, [r3, #0]
 800ca9a:	f000 bc40 	b.w	800d31e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	78fa      	ldrb	r2, [r7, #3]
 800caa4:	4611      	mov	r1, r2
 800caa6:	4618      	mov	r0, r3
 800caa8:	f006 ff51 	bl	801394e <USB_ReadChInterrupts>
 800caac:	4603      	mov	r3, r0
 800caae:	f003 0320 	and.w	r3, r3, #32
 800cab2:	2b20      	cmp	r3, #32
 800cab4:	d131      	bne.n	800cb1a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800cab6:	78fb      	ldrb	r3, [r7, #3]
 800cab8:	015a      	lsls	r2, r3, #5
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	4413      	add	r3, r2
 800cabe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cac2:	461a      	mov	r2, r3
 800cac4:	2320      	movs	r3, #32
 800cac6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800cac8:	78fa      	ldrb	r2, [r7, #3]
 800caca:	6879      	ldr	r1, [r7, #4]
 800cacc:	4613      	mov	r3, r2
 800cace:	011b      	lsls	r3, r3, #4
 800cad0:	1a9b      	subs	r3, r3, r2
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	440b      	add	r3, r1
 800cad6:	331a      	adds	r3, #26
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	2b01      	cmp	r3, #1
 800cadc:	f040 841f 	bne.w	800d31e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800cae0:	78fa      	ldrb	r2, [r7, #3]
 800cae2:	6879      	ldr	r1, [r7, #4]
 800cae4:	4613      	mov	r3, r2
 800cae6:	011b      	lsls	r3, r3, #4
 800cae8:	1a9b      	subs	r3, r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	440b      	add	r3, r1
 800caee:	331b      	adds	r3, #27
 800caf0:	2201      	movs	r2, #1
 800caf2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800caf4:	78fa      	ldrb	r2, [r7, #3]
 800caf6:	6879      	ldr	r1, [r7, #4]
 800caf8:	4613      	mov	r3, r2
 800cafa:	011b      	lsls	r3, r3, #4
 800cafc:	1a9b      	subs	r3, r3, r2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	440b      	add	r3, r1
 800cb02:	334d      	adds	r3, #77	@ 0x4d
 800cb04:	2203      	movs	r2, #3
 800cb06:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	78fa      	ldrb	r2, [r7, #3]
 800cb0e:	4611      	mov	r1, r2
 800cb10:	4618      	mov	r0, r3
 800cb12:	f007 fcb4 	bl	801447e <USB_HC_Halt>
 800cb16:	f000 bc02 	b.w	800d31e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	78fa      	ldrb	r2, [r7, #3]
 800cb20:	4611      	mov	r1, r2
 800cb22:	4618      	mov	r0, r3
 800cb24:	f006 ff13 	bl	801394e <USB_ReadChInterrupts>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	f003 0302 	and.w	r3, r3, #2
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	f040 8305 	bne.w	800d13e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800cb34:	78fb      	ldrb	r3, [r7, #3]
 800cb36:	015a      	lsls	r2, r3, #5
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb40:	461a      	mov	r2, r3
 800cb42:	2302      	movs	r3, #2
 800cb44:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800cb46:	78fa      	ldrb	r2, [r7, #3]
 800cb48:	6879      	ldr	r1, [r7, #4]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	011b      	lsls	r3, r3, #4
 800cb4e:	1a9b      	subs	r3, r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	440b      	add	r3, r1
 800cb54:	334d      	adds	r3, #77	@ 0x4d
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d114      	bne.n	800cb86 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800cb5c:	78fa      	ldrb	r2, [r7, #3]
 800cb5e:	6879      	ldr	r1, [r7, #4]
 800cb60:	4613      	mov	r3, r2
 800cb62:	011b      	lsls	r3, r3, #4
 800cb64:	1a9b      	subs	r3, r3, r2
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	440b      	add	r3, r1
 800cb6a:	334d      	adds	r3, #77	@ 0x4d
 800cb6c:	2202      	movs	r2, #2
 800cb6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800cb70:	78fa      	ldrb	r2, [r7, #3]
 800cb72:	6879      	ldr	r1, [r7, #4]
 800cb74:	4613      	mov	r3, r2
 800cb76:	011b      	lsls	r3, r3, #4
 800cb78:	1a9b      	subs	r3, r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	440b      	add	r3, r1
 800cb7e:	334c      	adds	r3, #76	@ 0x4c
 800cb80:	2201      	movs	r2, #1
 800cb82:	701a      	strb	r2, [r3, #0]
 800cb84:	e2cc      	b.n	800d120 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800cb86:	78fa      	ldrb	r2, [r7, #3]
 800cb88:	6879      	ldr	r1, [r7, #4]
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	011b      	lsls	r3, r3, #4
 800cb8e:	1a9b      	subs	r3, r3, r2
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	440b      	add	r3, r1
 800cb94:	334d      	adds	r3, #77	@ 0x4d
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	2b06      	cmp	r3, #6
 800cb9a:	d114      	bne.n	800cbc6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800cb9c:	78fa      	ldrb	r2, [r7, #3]
 800cb9e:	6879      	ldr	r1, [r7, #4]
 800cba0:	4613      	mov	r3, r2
 800cba2:	011b      	lsls	r3, r3, #4
 800cba4:	1a9b      	subs	r3, r3, r2
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	440b      	add	r3, r1
 800cbaa:	334d      	adds	r3, #77	@ 0x4d
 800cbac:	2202      	movs	r2, #2
 800cbae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800cbb0:	78fa      	ldrb	r2, [r7, #3]
 800cbb2:	6879      	ldr	r1, [r7, #4]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	011b      	lsls	r3, r3, #4
 800cbb8:	1a9b      	subs	r3, r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	440b      	add	r3, r1
 800cbbe:	334c      	adds	r3, #76	@ 0x4c
 800cbc0:	2205      	movs	r2, #5
 800cbc2:	701a      	strb	r2, [r3, #0]
 800cbc4:	e2ac      	b.n	800d120 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800cbc6:	78fa      	ldrb	r2, [r7, #3]
 800cbc8:	6879      	ldr	r1, [r7, #4]
 800cbca:	4613      	mov	r3, r2
 800cbcc:	011b      	lsls	r3, r3, #4
 800cbce:	1a9b      	subs	r3, r3, r2
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	440b      	add	r3, r1
 800cbd4:	334d      	adds	r3, #77	@ 0x4d
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	2b07      	cmp	r3, #7
 800cbda:	d00b      	beq.n	800cbf4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800cbdc:	78fa      	ldrb	r2, [r7, #3]
 800cbde:	6879      	ldr	r1, [r7, #4]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	011b      	lsls	r3, r3, #4
 800cbe4:	1a9b      	subs	r3, r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	440b      	add	r3, r1
 800cbea:	334d      	adds	r3, #77	@ 0x4d
 800cbec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800cbee:	2b09      	cmp	r3, #9
 800cbf0:	f040 80a6 	bne.w	800cd40 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800cbf4:	78fa      	ldrb	r2, [r7, #3]
 800cbf6:	6879      	ldr	r1, [r7, #4]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	011b      	lsls	r3, r3, #4
 800cbfc:	1a9b      	subs	r3, r3, r2
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	440b      	add	r3, r1
 800cc02:	334d      	adds	r3, #77	@ 0x4d
 800cc04:	2202      	movs	r2, #2
 800cc06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800cc08:	78fa      	ldrb	r2, [r7, #3]
 800cc0a:	6879      	ldr	r1, [r7, #4]
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	011b      	lsls	r3, r3, #4
 800cc10:	1a9b      	subs	r3, r3, r2
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	440b      	add	r3, r1
 800cc16:	3344      	adds	r3, #68	@ 0x44
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	1c59      	adds	r1, r3, #1
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	011b      	lsls	r3, r3, #4
 800cc22:	1a9b      	subs	r3, r3, r2
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4403      	add	r3, r0
 800cc28:	3344      	adds	r3, #68	@ 0x44
 800cc2a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800cc2c:	78fa      	ldrb	r2, [r7, #3]
 800cc2e:	6879      	ldr	r1, [r7, #4]
 800cc30:	4613      	mov	r3, r2
 800cc32:	011b      	lsls	r3, r3, #4
 800cc34:	1a9b      	subs	r3, r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	440b      	add	r3, r1
 800cc3a:	3344      	adds	r3, #68	@ 0x44
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d943      	bls.n	800ccca <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800cc42:	78fa      	ldrb	r2, [r7, #3]
 800cc44:	6879      	ldr	r1, [r7, #4]
 800cc46:	4613      	mov	r3, r2
 800cc48:	011b      	lsls	r3, r3, #4
 800cc4a:	1a9b      	subs	r3, r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	440b      	add	r3, r1
 800cc50:	3344      	adds	r3, #68	@ 0x44
 800cc52:	2200      	movs	r2, #0
 800cc54:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800cc56:	78fa      	ldrb	r2, [r7, #3]
 800cc58:	6879      	ldr	r1, [r7, #4]
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	011b      	lsls	r3, r3, #4
 800cc5e:	1a9b      	subs	r3, r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	440b      	add	r3, r1
 800cc64:	331a      	adds	r3, #26
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d123      	bne.n	800ccb4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800cc6c:	78fa      	ldrb	r2, [r7, #3]
 800cc6e:	6879      	ldr	r1, [r7, #4]
 800cc70:	4613      	mov	r3, r2
 800cc72:	011b      	lsls	r3, r3, #4
 800cc74:	1a9b      	subs	r3, r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	440b      	add	r3, r1
 800cc7a:	331b      	adds	r3, #27
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800cc80:	78fa      	ldrb	r2, [r7, #3]
 800cc82:	6879      	ldr	r1, [r7, #4]
 800cc84:	4613      	mov	r3, r2
 800cc86:	011b      	lsls	r3, r3, #4
 800cc88:	1a9b      	subs	r3, r3, r2
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	440b      	add	r3, r1
 800cc8e:	331c      	adds	r3, #28
 800cc90:	2200      	movs	r2, #0
 800cc92:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800cc94:	78fb      	ldrb	r3, [r7, #3]
 800cc96:	015a      	lsls	r2, r3, #5
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	78fa      	ldrb	r2, [r7, #3]
 800cca4:	0151      	lsls	r1, r2, #5
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	440a      	add	r2, r1
 800ccaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ccae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ccb2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800ccb4:	78fa      	ldrb	r2, [r7, #3]
 800ccb6:	6879      	ldr	r1, [r7, #4]
 800ccb8:	4613      	mov	r3, r2
 800ccba:	011b      	lsls	r3, r3, #4
 800ccbc:	1a9b      	subs	r3, r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	440b      	add	r3, r1
 800ccc2:	334c      	adds	r3, #76	@ 0x4c
 800ccc4:	2204      	movs	r2, #4
 800ccc6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800ccc8:	e229      	b.n	800d11e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800ccca:	78fa      	ldrb	r2, [r7, #3]
 800cccc:	6879      	ldr	r1, [r7, #4]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	011b      	lsls	r3, r3, #4
 800ccd2:	1a9b      	subs	r3, r3, r2
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	440b      	add	r3, r1
 800ccd8:	334c      	adds	r3, #76	@ 0x4c
 800ccda:	2202      	movs	r2, #2
 800ccdc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800ccde:	78fa      	ldrb	r2, [r7, #3]
 800cce0:	6879      	ldr	r1, [r7, #4]
 800cce2:	4613      	mov	r3, r2
 800cce4:	011b      	lsls	r3, r3, #4
 800cce6:	1a9b      	subs	r3, r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	440b      	add	r3, r1
 800ccec:	3326      	adds	r3, #38	@ 0x26
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00b      	beq.n	800cd0c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800ccf4:	78fa      	ldrb	r2, [r7, #3]
 800ccf6:	6879      	ldr	r1, [r7, #4]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	011b      	lsls	r3, r3, #4
 800ccfc:	1a9b      	subs	r3, r3, r2
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	440b      	add	r3, r1
 800cd02:	3326      	adds	r3, #38	@ 0x26
 800cd04:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	f040 8209 	bne.w	800d11e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800cd0c:	78fb      	ldrb	r3, [r7, #3]
 800cd0e:	015a      	lsls	r2, r3, #5
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	4413      	add	r3, r2
 800cd14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cd22:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cd2a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800cd2c:	78fb      	ldrb	r3, [r7, #3]
 800cd2e:	015a      	lsls	r2, r3, #5
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	4413      	add	r3, r2
 800cd34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd38:	461a      	mov	r2, r3
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800cd3e:	e1ee      	b.n	800d11e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800cd40:	78fa      	ldrb	r2, [r7, #3]
 800cd42:	6879      	ldr	r1, [r7, #4]
 800cd44:	4613      	mov	r3, r2
 800cd46:	011b      	lsls	r3, r3, #4
 800cd48:	1a9b      	subs	r3, r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	440b      	add	r3, r1
 800cd4e:	334d      	adds	r3, #77	@ 0x4d
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	2b05      	cmp	r3, #5
 800cd54:	f040 80c8 	bne.w	800cee8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800cd58:	78fa      	ldrb	r2, [r7, #3]
 800cd5a:	6879      	ldr	r1, [r7, #4]
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	011b      	lsls	r3, r3, #4
 800cd60:	1a9b      	subs	r3, r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	440b      	add	r3, r1
 800cd66:	334d      	adds	r3, #77	@ 0x4d
 800cd68:	2202      	movs	r2, #2
 800cd6a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800cd6c:	78fa      	ldrb	r2, [r7, #3]
 800cd6e:	6879      	ldr	r1, [r7, #4]
 800cd70:	4613      	mov	r3, r2
 800cd72:	011b      	lsls	r3, r3, #4
 800cd74:	1a9b      	subs	r3, r3, r2
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	440b      	add	r3, r1
 800cd7a:	331b      	adds	r3, #27
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	f040 81ce 	bne.w	800d120 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800cd84:	78fa      	ldrb	r2, [r7, #3]
 800cd86:	6879      	ldr	r1, [r7, #4]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	011b      	lsls	r3, r3, #4
 800cd8c:	1a9b      	subs	r3, r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	440b      	add	r3, r1
 800cd92:	3326      	adds	r3, #38	@ 0x26
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	2b03      	cmp	r3, #3
 800cd98:	d16b      	bne.n	800ce72 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800cd9a:	78fa      	ldrb	r2, [r7, #3]
 800cd9c:	6879      	ldr	r1, [r7, #4]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	011b      	lsls	r3, r3, #4
 800cda2:	1a9b      	subs	r3, r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	440b      	add	r3, r1
 800cda8:	3348      	adds	r3, #72	@ 0x48
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	1c59      	adds	r1, r3, #1
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	011b      	lsls	r3, r3, #4
 800cdb4:	1a9b      	subs	r3, r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4403      	add	r3, r0
 800cdba:	3348      	adds	r3, #72	@ 0x48
 800cdbc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800cdbe:	78fa      	ldrb	r2, [r7, #3]
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	011b      	lsls	r3, r3, #4
 800cdc6:	1a9b      	subs	r3, r3, r2
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	440b      	add	r3, r1
 800cdcc:	3348      	adds	r3, #72	@ 0x48
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2b02      	cmp	r3, #2
 800cdd2:	d943      	bls.n	800ce5c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800cdd4:	78fa      	ldrb	r2, [r7, #3]
 800cdd6:	6879      	ldr	r1, [r7, #4]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	011b      	lsls	r3, r3, #4
 800cddc:	1a9b      	subs	r3, r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	440b      	add	r3, r1
 800cde2:	3348      	adds	r3, #72	@ 0x48
 800cde4:	2200      	movs	r2, #0
 800cde6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800cde8:	78fa      	ldrb	r2, [r7, #3]
 800cdea:	6879      	ldr	r1, [r7, #4]
 800cdec:	4613      	mov	r3, r2
 800cdee:	011b      	lsls	r3, r3, #4
 800cdf0:	1a9b      	subs	r3, r3, r2
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	440b      	add	r3, r1
 800cdf6:	331b      	adds	r3, #27
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800cdfc:	78fa      	ldrb	r2, [r7, #3]
 800cdfe:	6879      	ldr	r1, [r7, #4]
 800ce00:	4613      	mov	r3, r2
 800ce02:	011b      	lsls	r3, r3, #4
 800ce04:	1a9b      	subs	r3, r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	440b      	add	r3, r1
 800ce0a:	3344      	adds	r3, #68	@ 0x44
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d809      	bhi.n	800ce26 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800ce12:	78fa      	ldrb	r2, [r7, #3]
 800ce14:	6879      	ldr	r1, [r7, #4]
 800ce16:	4613      	mov	r3, r2
 800ce18:	011b      	lsls	r3, r3, #4
 800ce1a:	1a9b      	subs	r3, r3, r2
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	440b      	add	r3, r1
 800ce20:	331c      	adds	r3, #28
 800ce22:	2201      	movs	r2, #1
 800ce24:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800ce26:	78fb      	ldrb	r3, [r7, #3]
 800ce28:	015a      	lsls	r2, r3, #5
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	78fa      	ldrb	r2, [r7, #3]
 800ce36:	0151      	lsls	r1, r2, #5
 800ce38:	693a      	ldr	r2, [r7, #16]
 800ce3a:	440a      	add	r2, r1
 800ce3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ce40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce44:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800ce46:	78fa      	ldrb	r2, [r7, #3]
 800ce48:	6879      	ldr	r1, [r7, #4]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	011b      	lsls	r3, r3, #4
 800ce4e:	1a9b      	subs	r3, r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	440b      	add	r3, r1
 800ce54:	334c      	adds	r3, #76	@ 0x4c
 800ce56:	2204      	movs	r2, #4
 800ce58:	701a      	strb	r2, [r3, #0]
 800ce5a:	e014      	b.n	800ce86 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800ce5c:	78fa      	ldrb	r2, [r7, #3]
 800ce5e:	6879      	ldr	r1, [r7, #4]
 800ce60:	4613      	mov	r3, r2
 800ce62:	011b      	lsls	r3, r3, #4
 800ce64:	1a9b      	subs	r3, r3, r2
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	440b      	add	r3, r1
 800ce6a:	334c      	adds	r3, #76	@ 0x4c
 800ce6c:	2202      	movs	r2, #2
 800ce6e:	701a      	strb	r2, [r3, #0]
 800ce70:	e009      	b.n	800ce86 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800ce72:	78fa      	ldrb	r2, [r7, #3]
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	4613      	mov	r3, r2
 800ce78:	011b      	lsls	r3, r3, #4
 800ce7a:	1a9b      	subs	r3, r3, r2
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	440b      	add	r3, r1
 800ce80:	334c      	adds	r3, #76	@ 0x4c
 800ce82:	2202      	movs	r2, #2
 800ce84:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800ce86:	78fa      	ldrb	r2, [r7, #3]
 800ce88:	6879      	ldr	r1, [r7, #4]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	011b      	lsls	r3, r3, #4
 800ce8e:	1a9b      	subs	r3, r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	440b      	add	r3, r1
 800ce94:	3326      	adds	r3, #38	@ 0x26
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00b      	beq.n	800ceb4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800ce9c:	78fa      	ldrb	r2, [r7, #3]
 800ce9e:	6879      	ldr	r1, [r7, #4]
 800cea0:	4613      	mov	r3, r2
 800cea2:	011b      	lsls	r3, r3, #4
 800cea4:	1a9b      	subs	r3, r3, r2
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	440b      	add	r3, r1
 800ceaa:	3326      	adds	r3, #38	@ 0x26
 800ceac:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	f040 8136 	bne.w	800d120 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800ceb4:	78fb      	ldrb	r3, [r7, #3]
 800ceb6:	015a      	lsls	r2, r3, #5
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	4413      	add	r3, r2
 800cebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ceca:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ced2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800ced4:	78fb      	ldrb	r3, [r7, #3]
 800ced6:	015a      	lsls	r2, r3, #5
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	4413      	add	r3, r2
 800cedc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cee0:	461a      	mov	r2, r3
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6013      	str	r3, [r2, #0]
 800cee6:	e11b      	b.n	800d120 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800cee8:	78fa      	ldrb	r2, [r7, #3]
 800ceea:	6879      	ldr	r1, [r7, #4]
 800ceec:	4613      	mov	r3, r2
 800ceee:	011b      	lsls	r3, r3, #4
 800cef0:	1a9b      	subs	r3, r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	440b      	add	r3, r1
 800cef6:	334d      	adds	r3, #77	@ 0x4d
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	2b03      	cmp	r3, #3
 800cefc:	f040 8081 	bne.w	800d002 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800cf00:	78fa      	ldrb	r2, [r7, #3]
 800cf02:	6879      	ldr	r1, [r7, #4]
 800cf04:	4613      	mov	r3, r2
 800cf06:	011b      	lsls	r3, r3, #4
 800cf08:	1a9b      	subs	r3, r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	440b      	add	r3, r1
 800cf0e:	334d      	adds	r3, #77	@ 0x4d
 800cf10:	2202      	movs	r2, #2
 800cf12:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800cf14:	78fa      	ldrb	r2, [r7, #3]
 800cf16:	6879      	ldr	r1, [r7, #4]
 800cf18:	4613      	mov	r3, r2
 800cf1a:	011b      	lsls	r3, r3, #4
 800cf1c:	1a9b      	subs	r3, r3, r2
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	440b      	add	r3, r1
 800cf22:	331b      	adds	r3, #27
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	f040 80fa 	bne.w	800d120 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800cf2c:	78fa      	ldrb	r2, [r7, #3]
 800cf2e:	6879      	ldr	r1, [r7, #4]
 800cf30:	4613      	mov	r3, r2
 800cf32:	011b      	lsls	r3, r3, #4
 800cf34:	1a9b      	subs	r3, r3, r2
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	440b      	add	r3, r1
 800cf3a:	334c      	adds	r3, #76	@ 0x4c
 800cf3c:	2202      	movs	r2, #2
 800cf3e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800cf40:	78fb      	ldrb	r3, [r7, #3]
 800cf42:	015a      	lsls	r2, r3, #5
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	4413      	add	r3, r2
 800cf48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	78fa      	ldrb	r2, [r7, #3]
 800cf50:	0151      	lsls	r1, r2, #5
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	440a      	add	r2, r1
 800cf56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cf5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cf5e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800cf60:	78fb      	ldrb	r3, [r7, #3]
 800cf62:	015a      	lsls	r2, r3, #5
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	4413      	add	r3, r2
 800cf68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	78fa      	ldrb	r2, [r7, #3]
 800cf70:	0151      	lsls	r1, r2, #5
 800cf72:	693a      	ldr	r2, [r7, #16]
 800cf74:	440a      	add	r2, r1
 800cf76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cf7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf7e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800cf80:	78fb      	ldrb	r3, [r7, #3]
 800cf82:	015a      	lsls	r2, r3, #5
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	4413      	add	r3, r2
 800cf88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	78fa      	ldrb	r2, [r7, #3]
 800cf90:	0151      	lsls	r1, r2, #5
 800cf92:	693a      	ldr	r2, [r7, #16]
 800cf94:	440a      	add	r2, r1
 800cf96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cf9a:	f023 0320 	bic.w	r3, r3, #32
 800cf9e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800cfa0:	78fa      	ldrb	r2, [r7, #3]
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	011b      	lsls	r3, r3, #4
 800cfa8:	1a9b      	subs	r3, r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	440b      	add	r3, r1
 800cfae:	3326      	adds	r3, #38	@ 0x26
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d00b      	beq.n	800cfce <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800cfb6:	78fa      	ldrb	r2, [r7, #3]
 800cfb8:	6879      	ldr	r1, [r7, #4]
 800cfba:	4613      	mov	r3, r2
 800cfbc:	011b      	lsls	r3, r3, #4
 800cfbe:	1a9b      	subs	r3, r3, r2
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	440b      	add	r3, r1
 800cfc4:	3326      	adds	r3, #38	@ 0x26
 800cfc6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	f040 80a9 	bne.w	800d120 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800cfce:	78fb      	ldrb	r3, [r7, #3]
 800cfd0:	015a      	lsls	r2, r3, #5
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cfe4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cfec:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800cfee:	78fb      	ldrb	r3, [r7, #3]
 800cff0:	015a      	lsls	r2, r3, #5
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	4413      	add	r3, r2
 800cff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cffa:	461a      	mov	r2, r3
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	6013      	str	r3, [r2, #0]
 800d000:	e08e      	b.n	800d120 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800d002:	78fa      	ldrb	r2, [r7, #3]
 800d004:	6879      	ldr	r1, [r7, #4]
 800d006:	4613      	mov	r3, r2
 800d008:	011b      	lsls	r3, r3, #4
 800d00a:	1a9b      	subs	r3, r3, r2
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	440b      	add	r3, r1
 800d010:	334d      	adds	r3, #77	@ 0x4d
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	2b04      	cmp	r3, #4
 800d016:	d143      	bne.n	800d0a0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800d018:	78fa      	ldrb	r2, [r7, #3]
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	4613      	mov	r3, r2
 800d01e:	011b      	lsls	r3, r3, #4
 800d020:	1a9b      	subs	r3, r3, r2
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	440b      	add	r3, r1
 800d026:	334d      	adds	r3, #77	@ 0x4d
 800d028:	2202      	movs	r2, #2
 800d02a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800d02c:	78fa      	ldrb	r2, [r7, #3]
 800d02e:	6879      	ldr	r1, [r7, #4]
 800d030:	4613      	mov	r3, r2
 800d032:	011b      	lsls	r3, r3, #4
 800d034:	1a9b      	subs	r3, r3, r2
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	440b      	add	r3, r1
 800d03a:	334c      	adds	r3, #76	@ 0x4c
 800d03c:	2202      	movs	r2, #2
 800d03e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800d040:	78fa      	ldrb	r2, [r7, #3]
 800d042:	6879      	ldr	r1, [r7, #4]
 800d044:	4613      	mov	r3, r2
 800d046:	011b      	lsls	r3, r3, #4
 800d048:	1a9b      	subs	r3, r3, r2
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	440b      	add	r3, r1
 800d04e:	3326      	adds	r3, #38	@ 0x26
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00a      	beq.n	800d06c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800d056:	78fa      	ldrb	r2, [r7, #3]
 800d058:	6879      	ldr	r1, [r7, #4]
 800d05a:	4613      	mov	r3, r2
 800d05c:	011b      	lsls	r3, r3, #4
 800d05e:	1a9b      	subs	r3, r3, r2
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	440b      	add	r3, r1
 800d064:	3326      	adds	r3, #38	@ 0x26
 800d066:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800d068:	2b02      	cmp	r3, #2
 800d06a:	d159      	bne.n	800d120 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800d06c:	78fb      	ldrb	r3, [r7, #3]
 800d06e:	015a      	lsls	r2, r3, #5
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	4413      	add	r3, r2
 800d074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d082:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d08a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800d08c:	78fb      	ldrb	r3, [r7, #3]
 800d08e:	015a      	lsls	r2, r3, #5
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	4413      	add	r3, r2
 800d094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d098:	461a      	mov	r2, r3
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6013      	str	r3, [r2, #0]
 800d09e:	e03f      	b.n	800d120 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800d0a0:	78fa      	ldrb	r2, [r7, #3]
 800d0a2:	6879      	ldr	r1, [r7, #4]
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	011b      	lsls	r3, r3, #4
 800d0a8:	1a9b      	subs	r3, r3, r2
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	440b      	add	r3, r1
 800d0ae:	334d      	adds	r3, #77	@ 0x4d
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	2b08      	cmp	r3, #8
 800d0b4:	d126      	bne.n	800d104 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800d0b6:	78fa      	ldrb	r2, [r7, #3]
 800d0b8:	6879      	ldr	r1, [r7, #4]
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	011b      	lsls	r3, r3, #4
 800d0be:	1a9b      	subs	r3, r3, r2
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	440b      	add	r3, r1
 800d0c4:	334d      	adds	r3, #77	@ 0x4d
 800d0c6:	2202      	movs	r2, #2
 800d0c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800d0ca:	78fa      	ldrb	r2, [r7, #3]
 800d0cc:	6879      	ldr	r1, [r7, #4]
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	011b      	lsls	r3, r3, #4
 800d0d2:	1a9b      	subs	r3, r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	440b      	add	r3, r1
 800d0d8:	3344      	adds	r3, #68	@ 0x44
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	1c59      	adds	r1, r3, #1
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	011b      	lsls	r3, r3, #4
 800d0e4:	1a9b      	subs	r3, r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4403      	add	r3, r0
 800d0ea:	3344      	adds	r3, #68	@ 0x44
 800d0ec:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800d0ee:	78fa      	ldrb	r2, [r7, #3]
 800d0f0:	6879      	ldr	r1, [r7, #4]
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	011b      	lsls	r3, r3, #4
 800d0f6:	1a9b      	subs	r3, r3, r2
 800d0f8:	009b      	lsls	r3, r3, #2
 800d0fa:	440b      	add	r3, r1
 800d0fc:	334c      	adds	r3, #76	@ 0x4c
 800d0fe:	2204      	movs	r2, #4
 800d100:	701a      	strb	r2, [r3, #0]
 800d102:	e00d      	b.n	800d120 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800d104:	78fa      	ldrb	r2, [r7, #3]
 800d106:	6879      	ldr	r1, [r7, #4]
 800d108:	4613      	mov	r3, r2
 800d10a:	011b      	lsls	r3, r3, #4
 800d10c:	1a9b      	subs	r3, r3, r2
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	440b      	add	r3, r1
 800d112:	334d      	adds	r3, #77	@ 0x4d
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	2b02      	cmp	r3, #2
 800d118:	f000 8100 	beq.w	800d31c <HCD_HC_IN_IRQHandler+0xcca>
 800d11c:	e000      	b.n	800d120 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800d11e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800d120:	78fa      	ldrb	r2, [r7, #3]
 800d122:	6879      	ldr	r1, [r7, #4]
 800d124:	4613      	mov	r3, r2
 800d126:	011b      	lsls	r3, r3, #4
 800d128:	1a9b      	subs	r3, r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	440b      	add	r3, r1
 800d12e:	334c      	adds	r3, #76	@ 0x4c
 800d130:	781a      	ldrb	r2, [r3, #0]
 800d132:	78fb      	ldrb	r3, [r7, #3]
 800d134:	4619      	mov	r1, r3
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f018 fb74 	bl	8025824 <HAL_HCD_HC_NotifyURBChange_Callback>
 800d13c:	e0ef      	b.n	800d31e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	78fa      	ldrb	r2, [r7, #3]
 800d144:	4611      	mov	r1, r2
 800d146:	4618      	mov	r0, r3
 800d148:	f006 fc01 	bl	801394e <USB_ReadChInterrupts>
 800d14c:	4603      	mov	r3, r0
 800d14e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d152:	2b40      	cmp	r3, #64	@ 0x40
 800d154:	d12f      	bne.n	800d1b6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800d156:	78fb      	ldrb	r3, [r7, #3]
 800d158:	015a      	lsls	r2, r3, #5
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	4413      	add	r3, r2
 800d15e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d162:	461a      	mov	r2, r3
 800d164:	2340      	movs	r3, #64	@ 0x40
 800d166:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800d168:	78fa      	ldrb	r2, [r7, #3]
 800d16a:	6879      	ldr	r1, [r7, #4]
 800d16c:	4613      	mov	r3, r2
 800d16e:	011b      	lsls	r3, r3, #4
 800d170:	1a9b      	subs	r3, r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	440b      	add	r3, r1
 800d176:	334d      	adds	r3, #77	@ 0x4d
 800d178:	2205      	movs	r2, #5
 800d17a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800d17c:	78fa      	ldrb	r2, [r7, #3]
 800d17e:	6879      	ldr	r1, [r7, #4]
 800d180:	4613      	mov	r3, r2
 800d182:	011b      	lsls	r3, r3, #4
 800d184:	1a9b      	subs	r3, r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	440b      	add	r3, r1
 800d18a:	331a      	adds	r3, #26
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d109      	bne.n	800d1a6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800d192:	78fa      	ldrb	r2, [r7, #3]
 800d194:	6879      	ldr	r1, [r7, #4]
 800d196:	4613      	mov	r3, r2
 800d198:	011b      	lsls	r3, r3, #4
 800d19a:	1a9b      	subs	r3, r3, r2
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	440b      	add	r3, r1
 800d1a0:	3344      	adds	r3, #68	@ 0x44
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	78fa      	ldrb	r2, [r7, #3]
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f007 f965 	bl	801447e <USB_HC_Halt>
 800d1b4:	e0b3      	b.n	800d31e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	78fa      	ldrb	r2, [r7, #3]
 800d1bc:	4611      	mov	r1, r2
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f006 fbc5 	bl	801394e <USB_ReadChInterrupts>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	f003 0310 	and.w	r3, r3, #16
 800d1ca:	2b10      	cmp	r3, #16
 800d1cc:	f040 80a7 	bne.w	800d31e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800d1d0:	78fa      	ldrb	r2, [r7, #3]
 800d1d2:	6879      	ldr	r1, [r7, #4]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	011b      	lsls	r3, r3, #4
 800d1d8:	1a9b      	subs	r3, r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	440b      	add	r3, r1
 800d1de:	3326      	adds	r3, #38	@ 0x26
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	2b03      	cmp	r3, #3
 800d1e4:	d11b      	bne.n	800d21e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800d1e6:	78fa      	ldrb	r2, [r7, #3]
 800d1e8:	6879      	ldr	r1, [r7, #4]
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	011b      	lsls	r3, r3, #4
 800d1ee:	1a9b      	subs	r3, r3, r2
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	440b      	add	r3, r1
 800d1f4:	3344      	adds	r3, #68	@ 0x44
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800d1fa:	78fa      	ldrb	r2, [r7, #3]
 800d1fc:	6879      	ldr	r1, [r7, #4]
 800d1fe:	4613      	mov	r3, r2
 800d200:	011b      	lsls	r3, r3, #4
 800d202:	1a9b      	subs	r3, r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	440b      	add	r3, r1
 800d208:	334d      	adds	r3, #77	@ 0x4d
 800d20a:	2204      	movs	r2, #4
 800d20c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	78fa      	ldrb	r2, [r7, #3]
 800d214:	4611      	mov	r1, r2
 800d216:	4618      	mov	r0, r3
 800d218:	f007 f931 	bl	801447e <USB_HC_Halt>
 800d21c:	e03f      	b.n	800d29e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800d21e:	78fa      	ldrb	r2, [r7, #3]
 800d220:	6879      	ldr	r1, [r7, #4]
 800d222:	4613      	mov	r3, r2
 800d224:	011b      	lsls	r3, r3, #4
 800d226:	1a9b      	subs	r3, r3, r2
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	440b      	add	r3, r1
 800d22c:	3326      	adds	r3, #38	@ 0x26
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00a      	beq.n	800d24a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800d234:	78fa      	ldrb	r2, [r7, #3]
 800d236:	6879      	ldr	r1, [r7, #4]
 800d238:	4613      	mov	r3, r2
 800d23a:	011b      	lsls	r3, r3, #4
 800d23c:	1a9b      	subs	r3, r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	440b      	add	r3, r1
 800d242:	3326      	adds	r3, #38	@ 0x26
 800d244:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800d246:	2b02      	cmp	r3, #2
 800d248:	d129      	bne.n	800d29e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800d24a:	78fa      	ldrb	r2, [r7, #3]
 800d24c:	6879      	ldr	r1, [r7, #4]
 800d24e:	4613      	mov	r3, r2
 800d250:	011b      	lsls	r3, r3, #4
 800d252:	1a9b      	subs	r3, r3, r2
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	440b      	add	r3, r1
 800d258:	3344      	adds	r3, #68	@ 0x44
 800d25a:	2200      	movs	r2, #0
 800d25c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	799b      	ldrb	r3, [r3, #6]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d00a      	beq.n	800d27c <HCD_HC_IN_IRQHandler+0xc2a>
 800d266:	78fa      	ldrb	r2, [r7, #3]
 800d268:	6879      	ldr	r1, [r7, #4]
 800d26a:	4613      	mov	r3, r2
 800d26c:	011b      	lsls	r3, r3, #4
 800d26e:	1a9b      	subs	r3, r3, r2
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	440b      	add	r3, r1
 800d274:	331b      	adds	r3, #27
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d110      	bne.n	800d29e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800d27c:	78fa      	ldrb	r2, [r7, #3]
 800d27e:	6879      	ldr	r1, [r7, #4]
 800d280:	4613      	mov	r3, r2
 800d282:	011b      	lsls	r3, r3, #4
 800d284:	1a9b      	subs	r3, r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	440b      	add	r3, r1
 800d28a:	334d      	adds	r3, #77	@ 0x4d
 800d28c:	2204      	movs	r2, #4
 800d28e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	78fa      	ldrb	r2, [r7, #3]
 800d296:	4611      	mov	r1, r2
 800d298:	4618      	mov	r0, r3
 800d29a:	f007 f8f0 	bl	801447e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800d29e:	78fa      	ldrb	r2, [r7, #3]
 800d2a0:	6879      	ldr	r1, [r7, #4]
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	011b      	lsls	r3, r3, #4
 800d2a6:	1a9b      	subs	r3, r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	440b      	add	r3, r1
 800d2ac:	331b      	adds	r3, #27
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d129      	bne.n	800d308 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800d2b4:	78fa      	ldrb	r2, [r7, #3]
 800d2b6:	6879      	ldr	r1, [r7, #4]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	011b      	lsls	r3, r3, #4
 800d2bc:	1a9b      	subs	r3, r3, r2
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	440b      	add	r3, r1
 800d2c2:	331b      	adds	r3, #27
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800d2c8:	78fb      	ldrb	r3, [r7, #3]
 800d2ca:	015a      	lsls	r2, r3, #5
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	78fa      	ldrb	r2, [r7, #3]
 800d2d8:	0151      	lsls	r1, r2, #5
 800d2da:	693a      	ldr	r2, [r7, #16]
 800d2dc:	440a      	add	r2, r1
 800d2de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d2e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2e6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800d2e8:	78fb      	ldrb	r3, [r7, #3]
 800d2ea:	015a      	lsls	r2, r3, #5
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	78fa      	ldrb	r2, [r7, #3]
 800d2f8:	0151      	lsls	r1, r2, #5
 800d2fa:	693a      	ldr	r2, [r7, #16]
 800d2fc:	440a      	add	r2, r1
 800d2fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d302:	f043 0320 	orr.w	r3, r3, #32
 800d306:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800d308:	78fb      	ldrb	r3, [r7, #3]
 800d30a:	015a      	lsls	r2, r3, #5
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	4413      	add	r3, r2
 800d310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d314:	461a      	mov	r2, r3
 800d316:	2310      	movs	r3, #16
 800d318:	6093      	str	r3, [r2, #8]
 800d31a:	e000      	b.n	800d31e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800d31c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800d31e:	3718      	adds	r7, #24
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b086      	sub	sp, #24
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	460b      	mov	r3, r1
 800d32e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	78fa      	ldrb	r2, [r7, #3]
 800d340:	4611      	mov	r1, r2
 800d342:	4618      	mov	r0, r3
 800d344:	f006 fb03 	bl	801394e <USB_ReadChInterrupts>
 800d348:	4603      	mov	r3, r0
 800d34a:	f003 0304 	and.w	r3, r3, #4
 800d34e:	2b04      	cmp	r3, #4
 800d350:	d11b      	bne.n	800d38a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800d352:	78fb      	ldrb	r3, [r7, #3]
 800d354:	015a      	lsls	r2, r3, #5
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	4413      	add	r3, r2
 800d35a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d35e:	461a      	mov	r2, r3
 800d360:	2304      	movs	r3, #4
 800d362:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800d364:	78fa      	ldrb	r2, [r7, #3]
 800d366:	6879      	ldr	r1, [r7, #4]
 800d368:	4613      	mov	r3, r2
 800d36a:	011b      	lsls	r3, r3, #4
 800d36c:	1a9b      	subs	r3, r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	440b      	add	r3, r1
 800d372:	334d      	adds	r3, #77	@ 0x4d
 800d374:	2207      	movs	r2, #7
 800d376:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	78fa      	ldrb	r2, [r7, #3]
 800d37e:	4611      	mov	r1, r2
 800d380:	4618      	mov	r0, r3
 800d382:	f007 f87c 	bl	801447e <USB_HC_Halt>
 800d386:	f000 bc6f 	b.w	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	78fa      	ldrb	r2, [r7, #3]
 800d390:	4611      	mov	r1, r2
 800d392:	4618      	mov	r0, r3
 800d394:	f006 fadb 	bl	801394e <USB_ReadChInterrupts>
 800d398:	4603      	mov	r3, r0
 800d39a:	f003 0320 	and.w	r3, r3, #32
 800d39e:	2b20      	cmp	r3, #32
 800d3a0:	f040 8082 	bne.w	800d4a8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800d3a4:	78fb      	ldrb	r3, [r7, #3]
 800d3a6:	015a      	lsls	r2, r3, #5
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	2320      	movs	r3, #32
 800d3b4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800d3b6:	78fa      	ldrb	r2, [r7, #3]
 800d3b8:	6879      	ldr	r1, [r7, #4]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	011b      	lsls	r3, r3, #4
 800d3be:	1a9b      	subs	r3, r3, r2
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	440b      	add	r3, r1
 800d3c4:	3319      	adds	r3, #25
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d124      	bne.n	800d416 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800d3cc:	78fa      	ldrb	r2, [r7, #3]
 800d3ce:	6879      	ldr	r1, [r7, #4]
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	011b      	lsls	r3, r3, #4
 800d3d4:	1a9b      	subs	r3, r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	440b      	add	r3, r1
 800d3da:	3319      	adds	r3, #25
 800d3dc:	2200      	movs	r2, #0
 800d3de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800d3e0:	78fa      	ldrb	r2, [r7, #3]
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	011b      	lsls	r3, r3, #4
 800d3e8:	1a9b      	subs	r3, r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	440b      	add	r3, r1
 800d3ee:	334c      	adds	r3, #76	@ 0x4c
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800d3f4:	78fa      	ldrb	r2, [r7, #3]
 800d3f6:	6879      	ldr	r1, [r7, #4]
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	011b      	lsls	r3, r3, #4
 800d3fc:	1a9b      	subs	r3, r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	440b      	add	r3, r1
 800d402:	334d      	adds	r3, #77	@ 0x4d
 800d404:	2203      	movs	r2, #3
 800d406:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	78fa      	ldrb	r2, [r7, #3]
 800d40e:	4611      	mov	r1, r2
 800d410:	4618      	mov	r0, r3
 800d412:	f007 f834 	bl	801447e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800d416:	78fa      	ldrb	r2, [r7, #3]
 800d418:	6879      	ldr	r1, [r7, #4]
 800d41a:	4613      	mov	r3, r2
 800d41c:	011b      	lsls	r3, r3, #4
 800d41e:	1a9b      	subs	r3, r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	440b      	add	r3, r1
 800d424:	331a      	adds	r3, #26
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	2b01      	cmp	r3, #1
 800d42a:	f040 841d 	bne.w	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
 800d42e:	78fa      	ldrb	r2, [r7, #3]
 800d430:	6879      	ldr	r1, [r7, #4]
 800d432:	4613      	mov	r3, r2
 800d434:	011b      	lsls	r3, r3, #4
 800d436:	1a9b      	subs	r3, r3, r2
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	440b      	add	r3, r1
 800d43c:	331b      	adds	r3, #27
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	f040 8411 	bne.w	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800d446:	78fa      	ldrb	r2, [r7, #3]
 800d448:	6879      	ldr	r1, [r7, #4]
 800d44a:	4613      	mov	r3, r2
 800d44c:	011b      	lsls	r3, r3, #4
 800d44e:	1a9b      	subs	r3, r3, r2
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	440b      	add	r3, r1
 800d454:	3326      	adds	r3, #38	@ 0x26
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d009      	beq.n	800d470 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800d45c:	78fa      	ldrb	r2, [r7, #3]
 800d45e:	6879      	ldr	r1, [r7, #4]
 800d460:	4613      	mov	r3, r2
 800d462:	011b      	lsls	r3, r3, #4
 800d464:	1a9b      	subs	r3, r3, r2
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	440b      	add	r3, r1
 800d46a:	331b      	adds	r3, #27
 800d46c:	2201      	movs	r2, #1
 800d46e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800d470:	78fa      	ldrb	r2, [r7, #3]
 800d472:	6879      	ldr	r1, [r7, #4]
 800d474:	4613      	mov	r3, r2
 800d476:	011b      	lsls	r3, r3, #4
 800d478:	1a9b      	subs	r3, r3, r2
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	440b      	add	r3, r1
 800d47e:	334d      	adds	r3, #77	@ 0x4d
 800d480:	2203      	movs	r2, #3
 800d482:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	78fa      	ldrb	r2, [r7, #3]
 800d48a:	4611      	mov	r1, r2
 800d48c:	4618      	mov	r0, r3
 800d48e:	f006 fff6 	bl	801447e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800d492:	78fa      	ldrb	r2, [r7, #3]
 800d494:	6879      	ldr	r1, [r7, #4]
 800d496:	4613      	mov	r3, r2
 800d498:	011b      	lsls	r3, r3, #4
 800d49a:	1a9b      	subs	r3, r3, r2
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	440b      	add	r3, r1
 800d4a0:	3344      	adds	r3, #68	@ 0x44
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	601a      	str	r2, [r3, #0]
 800d4a6:	e3df      	b.n	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	78fa      	ldrb	r2, [r7, #3]
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f006 fa4c 	bl	801394e <USB_ReadChInterrupts>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d4bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4c0:	d111      	bne.n	800d4e6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800d4c2:	78fb      	ldrb	r3, [r7, #3]
 800d4c4:	015a      	lsls	r2, r3, #5
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4d4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	78fa      	ldrb	r2, [r7, #3]
 800d4dc:	4611      	mov	r1, r2
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f006 ffcd 	bl	801447e <USB_HC_Halt>
 800d4e4:	e3c0      	b.n	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	78fa      	ldrb	r2, [r7, #3]
 800d4ec:	4611      	mov	r1, r2
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f006 fa2d 	bl	801394e <USB_ReadChInterrupts>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	f003 0301 	and.w	r3, r3, #1
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d168      	bne.n	800d5d0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800d4fe:	78fa      	ldrb	r2, [r7, #3]
 800d500:	6879      	ldr	r1, [r7, #4]
 800d502:	4613      	mov	r3, r2
 800d504:	011b      	lsls	r3, r3, #4
 800d506:	1a9b      	subs	r3, r3, r2
 800d508:	009b      	lsls	r3, r3, #2
 800d50a:	440b      	add	r3, r1
 800d50c:	3344      	adds	r3, #68	@ 0x44
 800d50e:	2200      	movs	r2, #0
 800d510:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	78fa      	ldrb	r2, [r7, #3]
 800d518:	4611      	mov	r1, r2
 800d51a:	4618      	mov	r0, r3
 800d51c:	f006 fa17 	bl	801394e <USB_ReadChInterrupts>
 800d520:	4603      	mov	r3, r0
 800d522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d526:	2b40      	cmp	r3, #64	@ 0x40
 800d528:	d112      	bne.n	800d550 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800d52a:	78fa      	ldrb	r2, [r7, #3]
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	4613      	mov	r3, r2
 800d530:	011b      	lsls	r3, r3, #4
 800d532:	1a9b      	subs	r3, r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	440b      	add	r3, r1
 800d538:	3319      	adds	r3, #25
 800d53a:	2201      	movs	r2, #1
 800d53c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800d53e:	78fb      	ldrb	r3, [r7, #3]
 800d540:	015a      	lsls	r2, r3, #5
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	4413      	add	r3, r2
 800d546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d54a:	461a      	mov	r2, r3
 800d54c:	2340      	movs	r3, #64	@ 0x40
 800d54e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800d550:	78fa      	ldrb	r2, [r7, #3]
 800d552:	6879      	ldr	r1, [r7, #4]
 800d554:	4613      	mov	r3, r2
 800d556:	011b      	lsls	r3, r3, #4
 800d558:	1a9b      	subs	r3, r3, r2
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	440b      	add	r3, r1
 800d55e:	331b      	adds	r3, #27
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d019      	beq.n	800d59a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800d566:	78fa      	ldrb	r2, [r7, #3]
 800d568:	6879      	ldr	r1, [r7, #4]
 800d56a:	4613      	mov	r3, r2
 800d56c:	011b      	lsls	r3, r3, #4
 800d56e:	1a9b      	subs	r3, r3, r2
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	440b      	add	r3, r1
 800d574:	331b      	adds	r3, #27
 800d576:	2200      	movs	r2, #0
 800d578:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800d57a:	78fb      	ldrb	r3, [r7, #3]
 800d57c:	015a      	lsls	r2, r3, #5
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	4413      	add	r3, r2
 800d582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	78fa      	ldrb	r2, [r7, #3]
 800d58a:	0151      	lsls	r1, r2, #5
 800d58c:	693a      	ldr	r2, [r7, #16]
 800d58e:	440a      	add	r2, r1
 800d590:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d594:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d598:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800d59a:	78fb      	ldrb	r3, [r7, #3]
 800d59c:	015a      	lsls	r2, r3, #5
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800d5ac:	78fa      	ldrb	r2, [r7, #3]
 800d5ae:	6879      	ldr	r1, [r7, #4]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	011b      	lsls	r3, r3, #4
 800d5b4:	1a9b      	subs	r3, r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	440b      	add	r3, r1
 800d5ba:	334d      	adds	r3, #77	@ 0x4d
 800d5bc:	2201      	movs	r2, #1
 800d5be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	78fa      	ldrb	r2, [r7, #3]
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f006 ff58 	bl	801447e <USB_HC_Halt>
 800d5ce:	e34b      	b.n	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	78fa      	ldrb	r2, [r7, #3]
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f006 f9b8 	bl	801394e <USB_ReadChInterrupts>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5e4:	2b40      	cmp	r3, #64	@ 0x40
 800d5e6:	d139      	bne.n	800d65c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800d5e8:	78fa      	ldrb	r2, [r7, #3]
 800d5ea:	6879      	ldr	r1, [r7, #4]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	011b      	lsls	r3, r3, #4
 800d5f0:	1a9b      	subs	r3, r3, r2
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	440b      	add	r3, r1
 800d5f6:	334d      	adds	r3, #77	@ 0x4d
 800d5f8:	2205      	movs	r2, #5
 800d5fa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800d5fc:	78fa      	ldrb	r2, [r7, #3]
 800d5fe:	6879      	ldr	r1, [r7, #4]
 800d600:	4613      	mov	r3, r2
 800d602:	011b      	lsls	r3, r3, #4
 800d604:	1a9b      	subs	r3, r3, r2
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	440b      	add	r3, r1
 800d60a:	331a      	adds	r3, #26
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d109      	bne.n	800d626 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800d612:	78fa      	ldrb	r2, [r7, #3]
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	4613      	mov	r3, r2
 800d618:	011b      	lsls	r3, r3, #4
 800d61a:	1a9b      	subs	r3, r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	440b      	add	r3, r1
 800d620:	3319      	adds	r3, #25
 800d622:	2201      	movs	r2, #1
 800d624:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800d626:	78fa      	ldrb	r2, [r7, #3]
 800d628:	6879      	ldr	r1, [r7, #4]
 800d62a:	4613      	mov	r3, r2
 800d62c:	011b      	lsls	r3, r3, #4
 800d62e:	1a9b      	subs	r3, r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	440b      	add	r3, r1
 800d634:	3344      	adds	r3, #68	@ 0x44
 800d636:	2200      	movs	r2, #0
 800d638:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	78fa      	ldrb	r2, [r7, #3]
 800d640:	4611      	mov	r1, r2
 800d642:	4618      	mov	r0, r3
 800d644:	f006 ff1b 	bl	801447e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800d648:	78fb      	ldrb	r3, [r7, #3]
 800d64a:	015a      	lsls	r2, r3, #5
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	4413      	add	r3, r2
 800d650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d654:	461a      	mov	r2, r3
 800d656:	2340      	movs	r3, #64	@ 0x40
 800d658:	6093      	str	r3, [r2, #8]
 800d65a:	e305      	b.n	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	78fa      	ldrb	r2, [r7, #3]
 800d662:	4611      	mov	r1, r2
 800d664:	4618      	mov	r0, r3
 800d666:	f006 f972 	bl	801394e <USB_ReadChInterrupts>
 800d66a:	4603      	mov	r3, r0
 800d66c:	f003 0308 	and.w	r3, r3, #8
 800d670:	2b08      	cmp	r3, #8
 800d672:	d11a      	bne.n	800d6aa <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800d674:	78fb      	ldrb	r3, [r7, #3]
 800d676:	015a      	lsls	r2, r3, #5
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	4413      	add	r3, r2
 800d67c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d680:	461a      	mov	r2, r3
 800d682:	2308      	movs	r3, #8
 800d684:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800d686:	78fa      	ldrb	r2, [r7, #3]
 800d688:	6879      	ldr	r1, [r7, #4]
 800d68a:	4613      	mov	r3, r2
 800d68c:	011b      	lsls	r3, r3, #4
 800d68e:	1a9b      	subs	r3, r3, r2
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	440b      	add	r3, r1
 800d694:	334d      	adds	r3, #77	@ 0x4d
 800d696:	2206      	movs	r2, #6
 800d698:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	78fa      	ldrb	r2, [r7, #3]
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f006 feeb 	bl	801447e <USB_HC_Halt>
 800d6a8:	e2de      	b.n	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	78fa      	ldrb	r2, [r7, #3]
 800d6b0:	4611      	mov	r1, r2
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f006 f94b 	bl	801394e <USB_ReadChInterrupts>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	f003 0310 	and.w	r3, r3, #16
 800d6be:	2b10      	cmp	r3, #16
 800d6c0:	d144      	bne.n	800d74c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800d6c2:	78fa      	ldrb	r2, [r7, #3]
 800d6c4:	6879      	ldr	r1, [r7, #4]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	011b      	lsls	r3, r3, #4
 800d6ca:	1a9b      	subs	r3, r3, r2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	440b      	add	r3, r1
 800d6d0:	3344      	adds	r3, #68	@ 0x44
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800d6d6:	78fa      	ldrb	r2, [r7, #3]
 800d6d8:	6879      	ldr	r1, [r7, #4]
 800d6da:	4613      	mov	r3, r2
 800d6dc:	011b      	lsls	r3, r3, #4
 800d6de:	1a9b      	subs	r3, r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	440b      	add	r3, r1
 800d6e4:	334d      	adds	r3, #77	@ 0x4d
 800d6e6:	2204      	movs	r2, #4
 800d6e8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800d6ea:	78fa      	ldrb	r2, [r7, #3]
 800d6ec:	6879      	ldr	r1, [r7, #4]
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	011b      	lsls	r3, r3, #4
 800d6f2:	1a9b      	subs	r3, r3, r2
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	440b      	add	r3, r1
 800d6f8:	3319      	adds	r3, #25
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d114      	bne.n	800d72a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800d700:	78fa      	ldrb	r2, [r7, #3]
 800d702:	6879      	ldr	r1, [r7, #4]
 800d704:	4613      	mov	r3, r2
 800d706:	011b      	lsls	r3, r3, #4
 800d708:	1a9b      	subs	r3, r3, r2
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	440b      	add	r3, r1
 800d70e:	3318      	adds	r3, #24
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d109      	bne.n	800d72a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800d716:	78fa      	ldrb	r2, [r7, #3]
 800d718:	6879      	ldr	r1, [r7, #4]
 800d71a:	4613      	mov	r3, r2
 800d71c:	011b      	lsls	r3, r3, #4
 800d71e:	1a9b      	subs	r3, r3, r2
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	440b      	add	r3, r1
 800d724:	3319      	adds	r3, #25
 800d726:	2201      	movs	r2, #1
 800d728:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	78fa      	ldrb	r2, [r7, #3]
 800d730:	4611      	mov	r1, r2
 800d732:	4618      	mov	r0, r3
 800d734:	f006 fea3 	bl	801447e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800d738:	78fb      	ldrb	r3, [r7, #3]
 800d73a:	015a      	lsls	r2, r3, #5
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	4413      	add	r3, r2
 800d740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d744:	461a      	mov	r2, r3
 800d746:	2310      	movs	r3, #16
 800d748:	6093      	str	r3, [r2, #8]
 800d74a:	e28d      	b.n	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	78fa      	ldrb	r2, [r7, #3]
 800d752:	4611      	mov	r1, r2
 800d754:	4618      	mov	r0, r3
 800d756:	f006 f8fa 	bl	801394e <USB_ReadChInterrupts>
 800d75a:	4603      	mov	r3, r0
 800d75c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d760:	2b80      	cmp	r3, #128	@ 0x80
 800d762:	d169      	bne.n	800d838 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	799b      	ldrb	r3, [r3, #6]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d111      	bne.n	800d790 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800d76c:	78fa      	ldrb	r2, [r7, #3]
 800d76e:	6879      	ldr	r1, [r7, #4]
 800d770:	4613      	mov	r3, r2
 800d772:	011b      	lsls	r3, r3, #4
 800d774:	1a9b      	subs	r3, r3, r2
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	440b      	add	r3, r1
 800d77a:	334d      	adds	r3, #77	@ 0x4d
 800d77c:	2207      	movs	r2, #7
 800d77e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	78fa      	ldrb	r2, [r7, #3]
 800d786:	4611      	mov	r1, r2
 800d788:	4618      	mov	r0, r3
 800d78a:	f006 fe78 	bl	801447e <USB_HC_Halt>
 800d78e:	e049      	b.n	800d824 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800d790:	78fa      	ldrb	r2, [r7, #3]
 800d792:	6879      	ldr	r1, [r7, #4]
 800d794:	4613      	mov	r3, r2
 800d796:	011b      	lsls	r3, r3, #4
 800d798:	1a9b      	subs	r3, r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	440b      	add	r3, r1
 800d79e:	3344      	adds	r3, #68	@ 0x44
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	1c59      	adds	r1, r3, #1
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	011b      	lsls	r3, r3, #4
 800d7aa:	1a9b      	subs	r3, r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	4403      	add	r3, r0
 800d7b0:	3344      	adds	r3, #68	@ 0x44
 800d7b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800d7b4:	78fa      	ldrb	r2, [r7, #3]
 800d7b6:	6879      	ldr	r1, [r7, #4]
 800d7b8:	4613      	mov	r3, r2
 800d7ba:	011b      	lsls	r3, r3, #4
 800d7bc:	1a9b      	subs	r3, r3, r2
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	440b      	add	r3, r1
 800d7c2:	3344      	adds	r3, #68	@ 0x44
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2b02      	cmp	r3, #2
 800d7c8:	d922      	bls.n	800d810 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800d7ca:	78fa      	ldrb	r2, [r7, #3]
 800d7cc:	6879      	ldr	r1, [r7, #4]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	011b      	lsls	r3, r3, #4
 800d7d2:	1a9b      	subs	r3, r3, r2
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	440b      	add	r3, r1
 800d7d8:	3344      	adds	r3, #68	@ 0x44
 800d7da:	2200      	movs	r2, #0
 800d7dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800d7de:	78fa      	ldrb	r2, [r7, #3]
 800d7e0:	6879      	ldr	r1, [r7, #4]
 800d7e2:	4613      	mov	r3, r2
 800d7e4:	011b      	lsls	r3, r3, #4
 800d7e6:	1a9b      	subs	r3, r3, r2
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	440b      	add	r3, r1
 800d7ec:	334c      	adds	r3, #76	@ 0x4c
 800d7ee:	2204      	movs	r2, #4
 800d7f0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800d7f2:	78fa      	ldrb	r2, [r7, #3]
 800d7f4:	6879      	ldr	r1, [r7, #4]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	011b      	lsls	r3, r3, #4
 800d7fa:	1a9b      	subs	r3, r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	440b      	add	r3, r1
 800d800:	334c      	adds	r3, #76	@ 0x4c
 800d802:	781a      	ldrb	r2, [r3, #0]
 800d804:	78fb      	ldrb	r3, [r7, #3]
 800d806:	4619      	mov	r1, r3
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f018 f80b 	bl	8025824 <HAL_HCD_HC_NotifyURBChange_Callback>
 800d80e:	e009      	b.n	800d824 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800d810:	78fa      	ldrb	r2, [r7, #3]
 800d812:	6879      	ldr	r1, [r7, #4]
 800d814:	4613      	mov	r3, r2
 800d816:	011b      	lsls	r3, r3, #4
 800d818:	1a9b      	subs	r3, r3, r2
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	440b      	add	r3, r1
 800d81e:	334c      	adds	r3, #76	@ 0x4c
 800d820:	2202      	movs	r2, #2
 800d822:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800d824:	78fb      	ldrb	r3, [r7, #3]
 800d826:	015a      	lsls	r2, r3, #5
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	4413      	add	r3, r2
 800d82c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d830:	461a      	mov	r2, r3
 800d832:	2380      	movs	r3, #128	@ 0x80
 800d834:	6093      	str	r3, [r2, #8]
 800d836:	e217      	b.n	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	78fa      	ldrb	r2, [r7, #3]
 800d83e:	4611      	mov	r1, r2
 800d840:	4618      	mov	r0, r3
 800d842:	f006 f884 	bl	801394e <USB_ReadChInterrupts>
 800d846:	4603      	mov	r3, r0
 800d848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d84c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d850:	d11b      	bne.n	800d88a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800d852:	78fa      	ldrb	r2, [r7, #3]
 800d854:	6879      	ldr	r1, [r7, #4]
 800d856:	4613      	mov	r3, r2
 800d858:	011b      	lsls	r3, r3, #4
 800d85a:	1a9b      	subs	r3, r3, r2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	440b      	add	r3, r1
 800d860:	334d      	adds	r3, #77	@ 0x4d
 800d862:	2209      	movs	r2, #9
 800d864:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	78fa      	ldrb	r2, [r7, #3]
 800d86c:	4611      	mov	r1, r2
 800d86e:	4618      	mov	r0, r3
 800d870:	f006 fe05 	bl	801447e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800d874:	78fb      	ldrb	r3, [r7, #3]
 800d876:	015a      	lsls	r2, r3, #5
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	4413      	add	r3, r2
 800d87c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d880:	461a      	mov	r2, r3
 800d882:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d886:	6093      	str	r3, [r2, #8]
 800d888:	e1ee      	b.n	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	78fa      	ldrb	r2, [r7, #3]
 800d890:	4611      	mov	r1, r2
 800d892:	4618      	mov	r0, r3
 800d894:	f006 f85b 	bl	801394e <USB_ReadChInterrupts>
 800d898:	4603      	mov	r3, r0
 800d89a:	f003 0302 	and.w	r3, r3, #2
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	f040 81df 	bne.w	800dc62 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800d8a4:	78fb      	ldrb	r3, [r7, #3]
 800d8a6:	015a      	lsls	r2, r3, #5
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	2302      	movs	r3, #2
 800d8b4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800d8b6:	78fa      	ldrb	r2, [r7, #3]
 800d8b8:	6879      	ldr	r1, [r7, #4]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	011b      	lsls	r3, r3, #4
 800d8be:	1a9b      	subs	r3, r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	440b      	add	r3, r1
 800d8c4:	334d      	adds	r3, #77	@ 0x4d
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	f040 8093 	bne.w	800d9f4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800d8ce:	78fa      	ldrb	r2, [r7, #3]
 800d8d0:	6879      	ldr	r1, [r7, #4]
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	011b      	lsls	r3, r3, #4
 800d8d6:	1a9b      	subs	r3, r3, r2
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	440b      	add	r3, r1
 800d8dc:	334d      	adds	r3, #77	@ 0x4d
 800d8de:	2202      	movs	r2, #2
 800d8e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800d8e2:	78fa      	ldrb	r2, [r7, #3]
 800d8e4:	6879      	ldr	r1, [r7, #4]
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	011b      	lsls	r3, r3, #4
 800d8ea:	1a9b      	subs	r3, r3, r2
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	440b      	add	r3, r1
 800d8f0:	334c      	adds	r3, #76	@ 0x4c
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800d8f6:	78fa      	ldrb	r2, [r7, #3]
 800d8f8:	6879      	ldr	r1, [r7, #4]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	011b      	lsls	r3, r3, #4
 800d8fe:	1a9b      	subs	r3, r3, r2
 800d900:	009b      	lsls	r3, r3, #2
 800d902:	440b      	add	r3, r1
 800d904:	3326      	adds	r3, #38	@ 0x26
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	2b02      	cmp	r3, #2
 800d90a:	d00b      	beq.n	800d924 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800d90c:	78fa      	ldrb	r2, [r7, #3]
 800d90e:	6879      	ldr	r1, [r7, #4]
 800d910:	4613      	mov	r3, r2
 800d912:	011b      	lsls	r3, r3, #4
 800d914:	1a9b      	subs	r3, r3, r2
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	440b      	add	r3, r1
 800d91a:	3326      	adds	r3, #38	@ 0x26
 800d91c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800d91e:	2b03      	cmp	r3, #3
 800d920:	f040 8190 	bne.w	800dc44 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	799b      	ldrb	r3, [r3, #6]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d115      	bne.n	800d958 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800d92c:	78fa      	ldrb	r2, [r7, #3]
 800d92e:	6879      	ldr	r1, [r7, #4]
 800d930:	4613      	mov	r3, r2
 800d932:	011b      	lsls	r3, r3, #4
 800d934:	1a9b      	subs	r3, r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	440b      	add	r3, r1
 800d93a:	333d      	adds	r3, #61	@ 0x3d
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	78fa      	ldrb	r2, [r7, #3]
 800d940:	f083 0301 	eor.w	r3, r3, #1
 800d944:	b2d8      	uxtb	r0, r3
 800d946:	6879      	ldr	r1, [r7, #4]
 800d948:	4613      	mov	r3, r2
 800d94a:	011b      	lsls	r3, r3, #4
 800d94c:	1a9b      	subs	r3, r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	440b      	add	r3, r1
 800d952:	333d      	adds	r3, #61	@ 0x3d
 800d954:	4602      	mov	r2, r0
 800d956:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	799b      	ldrb	r3, [r3, #6]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	f040 8171 	bne.w	800dc44 <HCD_HC_OUT_IRQHandler+0x920>
 800d962:	78fa      	ldrb	r2, [r7, #3]
 800d964:	6879      	ldr	r1, [r7, #4]
 800d966:	4613      	mov	r3, r2
 800d968:	011b      	lsls	r3, r3, #4
 800d96a:	1a9b      	subs	r3, r3, r2
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	440b      	add	r3, r1
 800d970:	3334      	adds	r3, #52	@ 0x34
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	f000 8165 	beq.w	800dc44 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800d97a:	78fa      	ldrb	r2, [r7, #3]
 800d97c:	6879      	ldr	r1, [r7, #4]
 800d97e:	4613      	mov	r3, r2
 800d980:	011b      	lsls	r3, r3, #4
 800d982:	1a9b      	subs	r3, r3, r2
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	440b      	add	r3, r1
 800d988:	3334      	adds	r3, #52	@ 0x34
 800d98a:	6819      	ldr	r1, [r3, #0]
 800d98c:	78fa      	ldrb	r2, [r7, #3]
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	4613      	mov	r3, r2
 800d992:	011b      	lsls	r3, r3, #4
 800d994:	1a9b      	subs	r3, r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	4403      	add	r3, r0
 800d99a:	3328      	adds	r3, #40	@ 0x28
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	440b      	add	r3, r1
 800d9a0:	1e59      	subs	r1, r3, #1
 800d9a2:	78fa      	ldrb	r2, [r7, #3]
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	011b      	lsls	r3, r3, #4
 800d9aa:	1a9b      	subs	r3, r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4403      	add	r3, r0
 800d9b0:	3328      	adds	r3, #40	@ 0x28
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	fbb1 f3f3 	udiv	r3, r1, r3
 800d9b8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	f003 0301 	and.w	r3, r3, #1
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	f000 813f 	beq.w	800dc44 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800d9c6:	78fa      	ldrb	r2, [r7, #3]
 800d9c8:	6879      	ldr	r1, [r7, #4]
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	011b      	lsls	r3, r3, #4
 800d9ce:	1a9b      	subs	r3, r3, r2
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	440b      	add	r3, r1
 800d9d4:	333d      	adds	r3, #61	@ 0x3d
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	78fa      	ldrb	r2, [r7, #3]
 800d9da:	f083 0301 	eor.w	r3, r3, #1
 800d9de:	b2d8      	uxtb	r0, r3
 800d9e0:	6879      	ldr	r1, [r7, #4]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	011b      	lsls	r3, r3, #4
 800d9e6:	1a9b      	subs	r3, r3, r2
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	440b      	add	r3, r1
 800d9ec:	333d      	adds	r3, #61	@ 0x3d
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	701a      	strb	r2, [r3, #0]
 800d9f2:	e127      	b.n	800dc44 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800d9f4:	78fa      	ldrb	r2, [r7, #3]
 800d9f6:	6879      	ldr	r1, [r7, #4]
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	011b      	lsls	r3, r3, #4
 800d9fc:	1a9b      	subs	r3, r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	440b      	add	r3, r1
 800da02:	334d      	adds	r3, #77	@ 0x4d
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	2b03      	cmp	r3, #3
 800da08:	d120      	bne.n	800da4c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800da0a:	78fa      	ldrb	r2, [r7, #3]
 800da0c:	6879      	ldr	r1, [r7, #4]
 800da0e:	4613      	mov	r3, r2
 800da10:	011b      	lsls	r3, r3, #4
 800da12:	1a9b      	subs	r3, r3, r2
 800da14:	009b      	lsls	r3, r3, #2
 800da16:	440b      	add	r3, r1
 800da18:	334d      	adds	r3, #77	@ 0x4d
 800da1a:	2202      	movs	r2, #2
 800da1c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800da1e:	78fa      	ldrb	r2, [r7, #3]
 800da20:	6879      	ldr	r1, [r7, #4]
 800da22:	4613      	mov	r3, r2
 800da24:	011b      	lsls	r3, r3, #4
 800da26:	1a9b      	subs	r3, r3, r2
 800da28:	009b      	lsls	r3, r3, #2
 800da2a:	440b      	add	r3, r1
 800da2c:	331b      	adds	r3, #27
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	2b01      	cmp	r3, #1
 800da32:	f040 8107 	bne.w	800dc44 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800da36:	78fa      	ldrb	r2, [r7, #3]
 800da38:	6879      	ldr	r1, [r7, #4]
 800da3a:	4613      	mov	r3, r2
 800da3c:	011b      	lsls	r3, r3, #4
 800da3e:	1a9b      	subs	r3, r3, r2
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	440b      	add	r3, r1
 800da44:	334c      	adds	r3, #76	@ 0x4c
 800da46:	2202      	movs	r2, #2
 800da48:	701a      	strb	r2, [r3, #0]
 800da4a:	e0fb      	b.n	800dc44 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800da4c:	78fa      	ldrb	r2, [r7, #3]
 800da4e:	6879      	ldr	r1, [r7, #4]
 800da50:	4613      	mov	r3, r2
 800da52:	011b      	lsls	r3, r3, #4
 800da54:	1a9b      	subs	r3, r3, r2
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	440b      	add	r3, r1
 800da5a:	334d      	adds	r3, #77	@ 0x4d
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	2b04      	cmp	r3, #4
 800da60:	d13a      	bne.n	800dad8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800da62:	78fa      	ldrb	r2, [r7, #3]
 800da64:	6879      	ldr	r1, [r7, #4]
 800da66:	4613      	mov	r3, r2
 800da68:	011b      	lsls	r3, r3, #4
 800da6a:	1a9b      	subs	r3, r3, r2
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	440b      	add	r3, r1
 800da70:	334d      	adds	r3, #77	@ 0x4d
 800da72:	2202      	movs	r2, #2
 800da74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800da76:	78fa      	ldrb	r2, [r7, #3]
 800da78:	6879      	ldr	r1, [r7, #4]
 800da7a:	4613      	mov	r3, r2
 800da7c:	011b      	lsls	r3, r3, #4
 800da7e:	1a9b      	subs	r3, r3, r2
 800da80:	009b      	lsls	r3, r3, #2
 800da82:	440b      	add	r3, r1
 800da84:	334c      	adds	r3, #76	@ 0x4c
 800da86:	2202      	movs	r2, #2
 800da88:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800da8a:	78fa      	ldrb	r2, [r7, #3]
 800da8c:	6879      	ldr	r1, [r7, #4]
 800da8e:	4613      	mov	r3, r2
 800da90:	011b      	lsls	r3, r3, #4
 800da92:	1a9b      	subs	r3, r3, r2
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	440b      	add	r3, r1
 800da98:	331b      	adds	r3, #27
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	f040 80d1 	bne.w	800dc44 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800daa2:	78fa      	ldrb	r2, [r7, #3]
 800daa4:	6879      	ldr	r1, [r7, #4]
 800daa6:	4613      	mov	r3, r2
 800daa8:	011b      	lsls	r3, r3, #4
 800daaa:	1a9b      	subs	r3, r3, r2
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	440b      	add	r3, r1
 800dab0:	331b      	adds	r3, #27
 800dab2:	2200      	movs	r2, #0
 800dab4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800dab6:	78fb      	ldrb	r3, [r7, #3]
 800dab8:	015a      	lsls	r2, r3, #5
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	4413      	add	r3, r2
 800dabe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	78fa      	ldrb	r2, [r7, #3]
 800dac6:	0151      	lsls	r1, r2, #5
 800dac8:	693a      	ldr	r2, [r7, #16]
 800daca:	440a      	add	r2, r1
 800dacc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dad4:	6053      	str	r3, [r2, #4]
 800dad6:	e0b5      	b.n	800dc44 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800dad8:	78fa      	ldrb	r2, [r7, #3]
 800dada:	6879      	ldr	r1, [r7, #4]
 800dadc:	4613      	mov	r3, r2
 800dade:	011b      	lsls	r3, r3, #4
 800dae0:	1a9b      	subs	r3, r3, r2
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	440b      	add	r3, r1
 800dae6:	334d      	adds	r3, #77	@ 0x4d
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	2b05      	cmp	r3, #5
 800daec:	d114      	bne.n	800db18 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800daee:	78fa      	ldrb	r2, [r7, #3]
 800daf0:	6879      	ldr	r1, [r7, #4]
 800daf2:	4613      	mov	r3, r2
 800daf4:	011b      	lsls	r3, r3, #4
 800daf6:	1a9b      	subs	r3, r3, r2
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	440b      	add	r3, r1
 800dafc:	334d      	adds	r3, #77	@ 0x4d
 800dafe:	2202      	movs	r2, #2
 800db00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800db02:	78fa      	ldrb	r2, [r7, #3]
 800db04:	6879      	ldr	r1, [r7, #4]
 800db06:	4613      	mov	r3, r2
 800db08:	011b      	lsls	r3, r3, #4
 800db0a:	1a9b      	subs	r3, r3, r2
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	440b      	add	r3, r1
 800db10:	334c      	adds	r3, #76	@ 0x4c
 800db12:	2202      	movs	r2, #2
 800db14:	701a      	strb	r2, [r3, #0]
 800db16:	e095      	b.n	800dc44 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800db18:	78fa      	ldrb	r2, [r7, #3]
 800db1a:	6879      	ldr	r1, [r7, #4]
 800db1c:	4613      	mov	r3, r2
 800db1e:	011b      	lsls	r3, r3, #4
 800db20:	1a9b      	subs	r3, r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	440b      	add	r3, r1
 800db26:	334d      	adds	r3, #77	@ 0x4d
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	2b06      	cmp	r3, #6
 800db2c:	d114      	bne.n	800db58 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800db2e:	78fa      	ldrb	r2, [r7, #3]
 800db30:	6879      	ldr	r1, [r7, #4]
 800db32:	4613      	mov	r3, r2
 800db34:	011b      	lsls	r3, r3, #4
 800db36:	1a9b      	subs	r3, r3, r2
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	440b      	add	r3, r1
 800db3c:	334d      	adds	r3, #77	@ 0x4d
 800db3e:	2202      	movs	r2, #2
 800db40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800db42:	78fa      	ldrb	r2, [r7, #3]
 800db44:	6879      	ldr	r1, [r7, #4]
 800db46:	4613      	mov	r3, r2
 800db48:	011b      	lsls	r3, r3, #4
 800db4a:	1a9b      	subs	r3, r3, r2
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	440b      	add	r3, r1
 800db50:	334c      	adds	r3, #76	@ 0x4c
 800db52:	2205      	movs	r2, #5
 800db54:	701a      	strb	r2, [r3, #0]
 800db56:	e075      	b.n	800dc44 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800db58:	78fa      	ldrb	r2, [r7, #3]
 800db5a:	6879      	ldr	r1, [r7, #4]
 800db5c:	4613      	mov	r3, r2
 800db5e:	011b      	lsls	r3, r3, #4
 800db60:	1a9b      	subs	r3, r3, r2
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	440b      	add	r3, r1
 800db66:	334d      	adds	r3, #77	@ 0x4d
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	2b07      	cmp	r3, #7
 800db6c:	d00a      	beq.n	800db84 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800db6e:	78fa      	ldrb	r2, [r7, #3]
 800db70:	6879      	ldr	r1, [r7, #4]
 800db72:	4613      	mov	r3, r2
 800db74:	011b      	lsls	r3, r3, #4
 800db76:	1a9b      	subs	r3, r3, r2
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	440b      	add	r3, r1
 800db7c:	334d      	adds	r3, #77	@ 0x4d
 800db7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800db80:	2b09      	cmp	r3, #9
 800db82:	d170      	bne.n	800dc66 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800db84:	78fa      	ldrb	r2, [r7, #3]
 800db86:	6879      	ldr	r1, [r7, #4]
 800db88:	4613      	mov	r3, r2
 800db8a:	011b      	lsls	r3, r3, #4
 800db8c:	1a9b      	subs	r3, r3, r2
 800db8e:	009b      	lsls	r3, r3, #2
 800db90:	440b      	add	r3, r1
 800db92:	334d      	adds	r3, #77	@ 0x4d
 800db94:	2202      	movs	r2, #2
 800db96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800db98:	78fa      	ldrb	r2, [r7, #3]
 800db9a:	6879      	ldr	r1, [r7, #4]
 800db9c:	4613      	mov	r3, r2
 800db9e:	011b      	lsls	r3, r3, #4
 800dba0:	1a9b      	subs	r3, r3, r2
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	440b      	add	r3, r1
 800dba6:	3344      	adds	r3, #68	@ 0x44
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	1c59      	adds	r1, r3, #1
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	4613      	mov	r3, r2
 800dbb0:	011b      	lsls	r3, r3, #4
 800dbb2:	1a9b      	subs	r3, r3, r2
 800dbb4:	009b      	lsls	r3, r3, #2
 800dbb6:	4403      	add	r3, r0
 800dbb8:	3344      	adds	r3, #68	@ 0x44
 800dbba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800dbbc:	78fa      	ldrb	r2, [r7, #3]
 800dbbe:	6879      	ldr	r1, [r7, #4]
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	011b      	lsls	r3, r3, #4
 800dbc4:	1a9b      	subs	r3, r3, r2
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	440b      	add	r3, r1
 800dbca:	3344      	adds	r3, #68	@ 0x44
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b02      	cmp	r3, #2
 800dbd0:	d914      	bls.n	800dbfc <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800dbd2:	78fa      	ldrb	r2, [r7, #3]
 800dbd4:	6879      	ldr	r1, [r7, #4]
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	011b      	lsls	r3, r3, #4
 800dbda:	1a9b      	subs	r3, r3, r2
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	440b      	add	r3, r1
 800dbe0:	3344      	adds	r3, #68	@ 0x44
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800dbe6:	78fa      	ldrb	r2, [r7, #3]
 800dbe8:	6879      	ldr	r1, [r7, #4]
 800dbea:	4613      	mov	r3, r2
 800dbec:	011b      	lsls	r3, r3, #4
 800dbee:	1a9b      	subs	r3, r3, r2
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	440b      	add	r3, r1
 800dbf4:	334c      	adds	r3, #76	@ 0x4c
 800dbf6:	2204      	movs	r2, #4
 800dbf8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800dbfa:	e022      	b.n	800dc42 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800dbfc:	78fa      	ldrb	r2, [r7, #3]
 800dbfe:	6879      	ldr	r1, [r7, #4]
 800dc00:	4613      	mov	r3, r2
 800dc02:	011b      	lsls	r3, r3, #4
 800dc04:	1a9b      	subs	r3, r3, r2
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	440b      	add	r3, r1
 800dc0a:	334c      	adds	r3, #76	@ 0x4c
 800dc0c:	2202      	movs	r2, #2
 800dc0e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800dc10:	78fb      	ldrb	r3, [r7, #3]
 800dc12:	015a      	lsls	r2, r3, #5
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	4413      	add	r3, r2
 800dc18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800dc26:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dc2e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800dc30:	78fb      	ldrb	r3, [r7, #3]
 800dc32:	015a      	lsls	r2, r3, #5
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	4413      	add	r3, r2
 800dc38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800dc42:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800dc44:	78fa      	ldrb	r2, [r7, #3]
 800dc46:	6879      	ldr	r1, [r7, #4]
 800dc48:	4613      	mov	r3, r2
 800dc4a:	011b      	lsls	r3, r3, #4
 800dc4c:	1a9b      	subs	r3, r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	440b      	add	r3, r1
 800dc52:	334c      	adds	r3, #76	@ 0x4c
 800dc54:	781a      	ldrb	r2, [r3, #0]
 800dc56:	78fb      	ldrb	r3, [r7, #3]
 800dc58:	4619      	mov	r1, r3
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f017 fde2 	bl	8025824 <HAL_HCD_HC_NotifyURBChange_Callback>
 800dc60:	e002      	b.n	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800dc62:	bf00      	nop
 800dc64:	e000      	b.n	800dc68 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800dc66:	bf00      	nop
  }
}
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b08a      	sub	sp, #40	@ 0x28
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc7e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	6a1b      	ldr	r3, [r3, #32]
 800dc86:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	f003 030f 	and.w	r3, r3, #15
 800dc8e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	0c5b      	lsrs	r3, r3, #17
 800dc94:	f003 030f 	and.w	r3, r3, #15
 800dc98:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	091b      	lsrs	r3, r3, #4
 800dc9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dca2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d004      	beq.n	800dcb4 <HCD_RXQLVL_IRQHandler+0x46>
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	2b05      	cmp	r3, #5
 800dcae:	f000 80b6 	beq.w	800de1e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800dcb2:	e0b7      	b.n	800de24 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	f000 80b3 	beq.w	800de22 <HCD_RXQLVL_IRQHandler+0x1b4>
 800dcbc:	6879      	ldr	r1, [r7, #4]
 800dcbe:	69ba      	ldr	r2, [r7, #24]
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	011b      	lsls	r3, r3, #4
 800dcc4:	1a9b      	subs	r3, r3, r2
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	440b      	add	r3, r1
 800dcca:	332c      	adds	r3, #44	@ 0x2c
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	f000 80a7 	beq.w	800de22 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800dcd4:	6879      	ldr	r1, [r7, #4]
 800dcd6:	69ba      	ldr	r2, [r7, #24]
 800dcd8:	4613      	mov	r3, r2
 800dcda:	011b      	lsls	r3, r3, #4
 800dcdc:	1a9b      	subs	r3, r3, r2
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	440b      	add	r3, r1
 800dce2:	3338      	adds	r3, #56	@ 0x38
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	18d1      	adds	r1, r2, r3
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	69ba      	ldr	r2, [r7, #24]
 800dcee:	4613      	mov	r3, r2
 800dcf0:	011b      	lsls	r3, r3, #4
 800dcf2:	1a9b      	subs	r3, r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	4403      	add	r3, r0
 800dcf8:	3334      	adds	r3, #52	@ 0x34
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4299      	cmp	r1, r3
 800dcfe:	f200 8083 	bhi.w	800de08 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6818      	ldr	r0, [r3, #0]
 800dd06:	6879      	ldr	r1, [r7, #4]
 800dd08:	69ba      	ldr	r2, [r7, #24]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	011b      	lsls	r3, r3, #4
 800dd0e:	1a9b      	subs	r3, r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	440b      	add	r3, r1
 800dd14:	332c      	adds	r3, #44	@ 0x2c
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	693a      	ldr	r2, [r7, #16]
 800dd1a:	b292      	uxth	r2, r2
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	f005 fdab 	bl	8013878 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800dd22:	6879      	ldr	r1, [r7, #4]
 800dd24:	69ba      	ldr	r2, [r7, #24]
 800dd26:	4613      	mov	r3, r2
 800dd28:	011b      	lsls	r3, r3, #4
 800dd2a:	1a9b      	subs	r3, r3, r2
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	440b      	add	r3, r1
 800dd30:	332c      	adds	r3, #44	@ 0x2c
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	18d1      	adds	r1, r2, r3
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	69ba      	ldr	r2, [r7, #24]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	011b      	lsls	r3, r3, #4
 800dd40:	1a9b      	subs	r3, r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4403      	add	r3, r0
 800dd46:	332c      	adds	r3, #44	@ 0x2c
 800dd48:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800dd4a:	6879      	ldr	r1, [r7, #4]
 800dd4c:	69ba      	ldr	r2, [r7, #24]
 800dd4e:	4613      	mov	r3, r2
 800dd50:	011b      	lsls	r3, r3, #4
 800dd52:	1a9b      	subs	r3, r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	440b      	add	r3, r1
 800dd58:	3338      	adds	r3, #56	@ 0x38
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	18d1      	adds	r1, r2, r3
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	69ba      	ldr	r2, [r7, #24]
 800dd64:	4613      	mov	r3, r2
 800dd66:	011b      	lsls	r3, r3, #4
 800dd68:	1a9b      	subs	r3, r3, r2
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	4403      	add	r3, r0
 800dd6e:	3338      	adds	r3, #56	@ 0x38
 800dd70:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	015a      	lsls	r2, r3, #5
 800dd76:	6a3b      	ldr	r3, [r7, #32]
 800dd78:	4413      	add	r3, r2
 800dd7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd7e:	691b      	ldr	r3, [r3, #16]
 800dd80:	0cdb      	lsrs	r3, r3, #19
 800dd82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd86:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800dd88:	6879      	ldr	r1, [r7, #4]
 800dd8a:	69ba      	ldr	r2, [r7, #24]
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	011b      	lsls	r3, r3, #4
 800dd90:	1a9b      	subs	r3, r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	440b      	add	r3, r1
 800dd96:	3328      	adds	r3, #40	@ 0x28
 800dd98:	881b      	ldrh	r3, [r3, #0]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d13f      	bne.n	800de22 <HCD_RXQLVL_IRQHandler+0x1b4>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d03c      	beq.n	800de22 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	015a      	lsls	r2, r3, #5
 800ddac:	6a3b      	ldr	r3, [r7, #32]
 800ddae:	4413      	add	r3, r2
 800ddb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ddbe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ddc6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	015a      	lsls	r2, r3, #5
 800ddcc:	6a3b      	ldr	r3, [r7, #32]
 800ddce:	4413      	add	r3, r2
 800ddd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800ddda:	6879      	ldr	r1, [r7, #4]
 800dddc:	69ba      	ldr	r2, [r7, #24]
 800ddde:	4613      	mov	r3, r2
 800dde0:	011b      	lsls	r3, r3, #4
 800dde2:	1a9b      	subs	r3, r3, r2
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	440b      	add	r3, r1
 800dde8:	333c      	adds	r3, #60	@ 0x3c
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	f083 0301 	eor.w	r3, r3, #1
 800ddf0:	b2d8      	uxtb	r0, r3
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	69ba      	ldr	r2, [r7, #24]
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	011b      	lsls	r3, r3, #4
 800ddfa:	1a9b      	subs	r3, r3, r2
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	440b      	add	r3, r1
 800de00:	333c      	adds	r3, #60	@ 0x3c
 800de02:	4602      	mov	r2, r0
 800de04:	701a      	strb	r2, [r3, #0]
      break;
 800de06:	e00c      	b.n	800de22 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800de08:	6879      	ldr	r1, [r7, #4]
 800de0a:	69ba      	ldr	r2, [r7, #24]
 800de0c:	4613      	mov	r3, r2
 800de0e:	011b      	lsls	r3, r3, #4
 800de10:	1a9b      	subs	r3, r3, r2
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	440b      	add	r3, r1
 800de16:	334c      	adds	r3, #76	@ 0x4c
 800de18:	2204      	movs	r2, #4
 800de1a:	701a      	strb	r2, [r3, #0]
      break;
 800de1c:	e001      	b.n	800de22 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800de1e:	bf00      	nop
 800de20:	e000      	b.n	800de24 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800de22:	bf00      	nop
  }
}
 800de24:	bf00      	nop
 800de26:	3728      	adds	r7, #40	@ 0x28
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b086      	sub	sp, #24
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800de58:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f003 0302 	and.w	r3, r3, #2
 800de60:	2b02      	cmp	r3, #2
 800de62:	d10b      	bne.n	800de7c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f003 0301 	and.w	r3, r3, #1
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d102      	bne.n	800de74 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f017 fcbc 	bl	80257ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	f043 0302 	orr.w	r3, r3, #2
 800de7a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f003 0308 	and.w	r3, r3, #8
 800de82:	2b08      	cmp	r3, #8
 800de84:	d132      	bne.n	800deec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	f043 0308 	orr.w	r3, r3, #8
 800de8c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f003 0304 	and.w	r3, r3, #4
 800de94:	2b04      	cmp	r3, #4
 800de96:	d126      	bne.n	800dee6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	7a5b      	ldrb	r3, [r3, #9]
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d113      	bne.n	800dec8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800dea6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800deaa:	d106      	bne.n	800deba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2102      	movs	r1, #2
 800deb2:	4618      	mov	r0, r3
 800deb4:	f005 fe64 	bl	8013b80 <USB_InitFSLSPClkSel>
 800deb8:	e011      	b.n	800dede <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2101      	movs	r1, #1
 800dec0:	4618      	mov	r0, r3
 800dec2:	f005 fe5d 	bl	8013b80 <USB_InitFSLSPClkSel>
 800dec6:	e00a      	b.n	800dede <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	79db      	ldrb	r3, [r3, #7]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d106      	bne.n	800dede <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ded6:	461a      	mov	r2, r3
 800ded8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800dedc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f017 fcb2 	bl	8025848 <HAL_HCD_PortEnabled_Callback>
 800dee4:	e002      	b.n	800deec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f017 fcbc 	bl	8025864 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f003 0320 	and.w	r3, r3, #32
 800def2:	2b20      	cmp	r3, #32
 800def4:	d103      	bne.n	800defe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	f043 0320 	orr.w	r3, r3, #32
 800defc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800df04:	461a      	mov	r2, r3
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	6013      	str	r3, [r2, #0]
}
 800df0a:	bf00      	nop
 800df0c:	3718      	adds	r7, #24
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
	...

0800df14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d101      	bne.n	800df26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800df22:	2301      	movs	r3, #1
 800df24:	e08b      	b.n	800e03e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d106      	bne.n	800df40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7f4 feb8 	bl	8002cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2224      	movs	r2, #36	@ 0x24
 800df44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f022 0201 	bic.w	r2, r2, #1
 800df56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	685a      	ldr	r2, [r3, #4]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800df64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	689a      	ldr	r2, [r3, #8]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800df74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	d107      	bne.n	800df8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	689a      	ldr	r2, [r3, #8]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800df8a:	609a      	str	r2, [r3, #8]
 800df8c:	e006      	b.n	800df9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	689a      	ldr	r2, [r3, #8]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800df9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	2b02      	cmp	r3, #2
 800dfa2:	d108      	bne.n	800dfb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	685a      	ldr	r2, [r3, #4]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dfb2:	605a      	str	r2, [r3, #4]
 800dfb4:	e007      	b.n	800dfc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	685a      	ldr	r2, [r3, #4]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dfc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	6859      	ldr	r1, [r3, #4]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	4b1d      	ldr	r3, [pc, #116]	@ (800e048 <HAL_I2C_Init+0x134>)
 800dfd2:	430b      	orrs	r3, r1
 800dfd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	68da      	ldr	r2, [r3, #12]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800dfe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	691a      	ldr	r2, [r3, #16]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	695b      	ldr	r3, [r3, #20]
 800dfee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	699b      	ldr	r3, [r3, #24]
 800dff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	430a      	orrs	r2, r1
 800dffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	69d9      	ldr	r1, [r3, #28]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6a1a      	ldr	r2, [r3, #32]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	430a      	orrs	r2, r1
 800e00e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f042 0201 	orr.w	r2, r2, #1
 800e01e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2200      	movs	r2, #0
 800e024:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2220      	movs	r2, #32
 800e02a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e03c:	2300      	movs	r3, #0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3708      	adds	r7, #8
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	02008000 	.word	0x02008000

0800e04c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d101      	bne.n	800e05e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	e021      	b.n	800e0a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2224      	movs	r2, #36	@ 0x24
 800e062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f022 0201 	bic.w	r2, r2, #1
 800e074:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7f4 fec2 	bl	8002e00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2200      	movs	r2, #0
 800e08e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2200      	movs	r2, #0
 800e094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2200      	movs	r2, #0
 800e09c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3708      	adds	r7, #8
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
	...

0800e0ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b088      	sub	sp, #32
 800e0b0:	af02      	add	r7, sp, #8
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	4608      	mov	r0, r1
 800e0b6:	4611      	mov	r1, r2
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	817b      	strh	r3, [r7, #10]
 800e0be:	460b      	mov	r3, r1
 800e0c0:	813b      	strh	r3, [r7, #8]
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	2b20      	cmp	r3, #32
 800e0d0:	f040 80f9 	bne.w	800e2c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0d4:	6a3b      	ldr	r3, [r7, #32]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d002      	beq.n	800e0e0 <HAL_I2C_Mem_Write+0x34>
 800e0da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d105      	bne.n	800e0ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e0ed      	b.n	800e2c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d101      	bne.n	800e0fa <HAL_I2C_Mem_Write+0x4e>
 800e0f6:	2302      	movs	r3, #2
 800e0f8:	e0e6      	b.n	800e2c8 <HAL_I2C_Mem_Write+0x21c>
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e102:	f7f8 fe95 	bl	8006e30 <HAL_GetTick>
 800e106:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	9300      	str	r3, [sp, #0]
 800e10c:	2319      	movs	r3, #25
 800e10e:	2201      	movs	r2, #1
 800e110:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f000 fad1 	bl	800e6bc <I2C_WaitOnFlagUntilTimeout>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d001      	beq.n	800e124 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e120:	2301      	movs	r3, #1
 800e122:	e0d1      	b.n	800e2c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2221      	movs	r2, #33	@ 0x21
 800e128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2240      	movs	r2, #64	@ 0x40
 800e130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2200      	movs	r2, #0
 800e138:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6a3a      	ldr	r2, [r7, #32]
 800e13e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e144:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e14c:	88f8      	ldrh	r0, [r7, #6]
 800e14e:	893a      	ldrh	r2, [r7, #8]
 800e150:	8979      	ldrh	r1, [r7, #10]
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	4603      	mov	r3, r0
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f000 f9e1 	bl	800e524 <I2C_RequestMemoryWrite>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d005      	beq.n	800e174 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e170:	2301      	movs	r3, #1
 800e172:	e0a9      	b.n	800e2c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e178:	b29b      	uxth	r3, r3
 800e17a:	2bff      	cmp	r3, #255	@ 0xff
 800e17c:	d90e      	bls.n	800e19c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	22ff      	movs	r2, #255	@ 0xff
 800e182:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	8979      	ldrh	r1, [r7, #10]
 800e18c:	2300      	movs	r3, #0
 800e18e:	9300      	str	r3, [sp, #0]
 800e190:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f000 fc55 	bl	800ea44 <I2C_TransferConfig>
 800e19a:	e00f      	b.n	800e1bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	8979      	ldrh	r1, [r7, #10]
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f000 fc44 	bl	800ea44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e1bc:	697a      	ldr	r2, [r7, #20]
 800e1be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f000 fad4 	bl	800e76e <I2C_WaitOnTXISFlagUntilTimeout>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d001      	beq.n	800e1d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e07b      	b.n	800e2c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1d4:	781a      	ldrb	r2, [r3, #0]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1e0:	1c5a      	adds	r2, r3, #1
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	3b01      	subs	r3, #1
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1f8:	3b01      	subs	r3, #1
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e204:	b29b      	uxth	r3, r3
 800e206:	2b00      	cmp	r3, #0
 800e208:	d034      	beq.n	800e274 <HAL_I2C_Mem_Write+0x1c8>
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d130      	bne.n	800e274 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	9300      	str	r3, [sp, #0]
 800e216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e218:	2200      	movs	r2, #0
 800e21a:	2180      	movs	r1, #128	@ 0x80
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f000 fa4d 	bl	800e6bc <I2C_WaitOnFlagUntilTimeout>
 800e222:	4603      	mov	r3, r0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d001      	beq.n	800e22c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e228:	2301      	movs	r3, #1
 800e22a:	e04d      	b.n	800e2c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e230:	b29b      	uxth	r3, r3
 800e232:	2bff      	cmp	r3, #255	@ 0xff
 800e234:	d90e      	bls.n	800e254 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	22ff      	movs	r2, #255	@ 0xff
 800e23a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e240:	b2da      	uxtb	r2, r3
 800e242:	8979      	ldrh	r1, [r7, #10]
 800e244:	2300      	movs	r3, #0
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f000 fbf9 	bl	800ea44 <I2C_TransferConfig>
 800e252:	e00f      	b.n	800e274 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e258:	b29a      	uxth	r2, r3
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e262:	b2da      	uxtb	r2, r3
 800e264:	8979      	ldrh	r1, [r7, #10]
 800e266:	2300      	movs	r3, #0
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	f000 fbe8 	bl	800ea44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e278:	b29b      	uxth	r3, r3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d19e      	bne.n	800e1bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e27e:	697a      	ldr	r2, [r7, #20]
 800e280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f000 faba 	bl	800e7fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d001      	beq.n	800e292 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e28e:	2301      	movs	r3, #1
 800e290:	e01a      	b.n	800e2c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2220      	movs	r2, #32
 800e298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	6859      	ldr	r1, [r3, #4]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800e2d0 <HAL_I2C_Mem_Write+0x224>)
 800e2a6:	400b      	ands	r3, r1
 800e2a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2220      	movs	r2, #32
 800e2ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	e000      	b.n	800e2c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e2c6:	2302      	movs	r3, #2
  }
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	fe00e800 	.word	0xfe00e800

0800e2d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b088      	sub	sp, #32
 800e2d8:	af02      	add	r7, sp, #8
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	4608      	mov	r0, r1
 800e2de:	4611      	mov	r1, r2
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	817b      	strh	r3, [r7, #10]
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	813b      	strh	r3, [r7, #8]
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	2b20      	cmp	r3, #32
 800e2f8:	f040 80fd 	bne.w	800e4f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d002      	beq.n	800e308 <HAL_I2C_Mem_Read+0x34>
 800e302:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e304:	2b00      	cmp	r3, #0
 800e306:	d105      	bne.n	800e314 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e30e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e310:	2301      	movs	r3, #1
 800e312:	e0f1      	b.n	800e4f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d101      	bne.n	800e322 <HAL_I2C_Mem_Read+0x4e>
 800e31e:	2302      	movs	r3, #2
 800e320:	e0ea      	b.n	800e4f8 <HAL_I2C_Mem_Read+0x224>
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2201      	movs	r2, #1
 800e326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e32a:	f7f8 fd81 	bl	8006e30 <HAL_GetTick>
 800e32e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	2319      	movs	r3, #25
 800e336:	2201      	movs	r2, #1
 800e338:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	f000 f9bd 	bl	800e6bc <I2C_WaitOnFlagUntilTimeout>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d001      	beq.n	800e34c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e348:	2301      	movs	r3, #1
 800e34a:	e0d5      	b.n	800e4f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2222      	movs	r2, #34	@ 0x22
 800e350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2240      	movs	r2, #64	@ 0x40
 800e358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2200      	movs	r2, #0
 800e360:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	6a3a      	ldr	r2, [r7, #32]
 800e366:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e36c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2200      	movs	r2, #0
 800e372:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e374:	88f8      	ldrh	r0, [r7, #6]
 800e376:	893a      	ldrh	r2, [r7, #8]
 800e378:	8979      	ldrh	r1, [r7, #10]
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	9301      	str	r3, [sp, #4]
 800e37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e380:	9300      	str	r3, [sp, #0]
 800e382:	4603      	mov	r3, r0
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f000 f921 	bl	800e5cc <I2C_RequestMemoryRead>
 800e38a:	4603      	mov	r3, r0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d005      	beq.n	800e39c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2200      	movs	r2, #0
 800e394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e398:	2301      	movs	r3, #1
 800e39a:	e0ad      	b.n	800e4f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	2bff      	cmp	r3, #255	@ 0xff
 800e3a4:	d90e      	bls.n	800e3c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3b0:	b2da      	uxtb	r2, r3
 800e3b2:	8979      	ldrh	r1, [r7, #10]
 800e3b4:	4b52      	ldr	r3, [pc, #328]	@ (800e500 <HAL_I2C_Mem_Read+0x22c>)
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f000 fb41 	bl	800ea44 <I2C_TransferConfig>
 800e3c2:	e00f      	b.n	800e3e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3d2:	b2da      	uxtb	r2, r3
 800e3d4:	8979      	ldrh	r1, [r7, #10]
 800e3d6:	4b4a      	ldr	r3, [pc, #296]	@ (800e500 <HAL_I2C_Mem_Read+0x22c>)
 800e3d8:	9300      	str	r3, [sp, #0]
 800e3da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f000 fb30 	bl	800ea44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	9300      	str	r3, [sp, #0]
 800e3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	2104      	movs	r1, #4
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f000 f964 	bl	800e6bc <I2C_WaitOnFlagUntilTimeout>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d001      	beq.n	800e3fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e07c      	b.n	800e4f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e408:	b2d2      	uxtb	r2, r2
 800e40a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e410:	1c5a      	adds	r2, r3, #1
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e41a:	3b01      	subs	r3, #1
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e426:	b29b      	uxth	r3, r3
 800e428:	3b01      	subs	r3, #1
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e434:	b29b      	uxth	r3, r3
 800e436:	2b00      	cmp	r3, #0
 800e438:	d034      	beq.n	800e4a4 <HAL_I2C_Mem_Read+0x1d0>
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d130      	bne.n	800e4a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e448:	2200      	movs	r2, #0
 800e44a:	2180      	movs	r1, #128	@ 0x80
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f000 f935 	bl	800e6bc <I2C_WaitOnFlagUntilTimeout>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d001      	beq.n	800e45c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e458:	2301      	movs	r3, #1
 800e45a:	e04d      	b.n	800e4f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e460:	b29b      	uxth	r3, r3
 800e462:	2bff      	cmp	r3, #255	@ 0xff
 800e464:	d90e      	bls.n	800e484 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2201      	movs	r2, #1
 800e46a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e470:	b2da      	uxtb	r2, r3
 800e472:	8979      	ldrh	r1, [r7, #10]
 800e474:	2300      	movs	r3, #0
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f000 fae1 	bl	800ea44 <I2C_TransferConfig>
 800e482:	e00f      	b.n	800e4a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e488:	b29a      	uxth	r2, r3
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e492:	b2da      	uxtb	r2, r3
 800e494:	8979      	ldrh	r1, [r7, #10]
 800e496:	2300      	movs	r3, #0
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e49e:	68f8      	ldr	r0, [r7, #12]
 800e4a0:	f000 fad0 	bl	800ea44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d19a      	bne.n	800e3e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e4ae:	697a      	ldr	r2, [r7, #20]
 800e4b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f000 f9a2 	bl	800e7fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d001      	beq.n	800e4c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e01a      	b.n	800e4f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	2220      	movs	r2, #32
 800e4c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	6859      	ldr	r1, [r3, #4]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	4b0b      	ldr	r3, [pc, #44]	@ (800e504 <HAL_I2C_Mem_Read+0x230>)
 800e4d6:	400b      	ands	r3, r1
 800e4d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2220      	movs	r2, #32
 800e4de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	e000      	b.n	800e4f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e4f6:	2302      	movs	r3, #2
  }
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3718      	adds	r7, #24
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	80002400 	.word	0x80002400
 800e504:	fe00e800 	.word	0xfe00e800

0800e508 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e516:	b2db      	uxtb	r3, r3
}
 800e518:	4618      	mov	r0, r3
 800e51a:	370c      	adds	r7, #12
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af02      	add	r7, sp, #8
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	4608      	mov	r0, r1
 800e52e:	4611      	mov	r1, r2
 800e530:	461a      	mov	r2, r3
 800e532:	4603      	mov	r3, r0
 800e534:	817b      	strh	r3, [r7, #10]
 800e536:	460b      	mov	r3, r1
 800e538:	813b      	strh	r3, [r7, #8]
 800e53a:	4613      	mov	r3, r2
 800e53c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e53e:	88fb      	ldrh	r3, [r7, #6]
 800e540:	b2da      	uxtb	r2, r3
 800e542:	8979      	ldrh	r1, [r7, #10]
 800e544:	4b20      	ldr	r3, [pc, #128]	@ (800e5c8 <I2C_RequestMemoryWrite+0xa4>)
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	f000 fa79 	bl	800ea44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e552:	69fa      	ldr	r2, [r7, #28]
 800e554:	69b9      	ldr	r1, [r7, #24]
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f000 f909 	bl	800e76e <I2C_WaitOnTXISFlagUntilTimeout>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e562:	2301      	movs	r3, #1
 800e564:	e02c      	b.n	800e5c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e566:	88fb      	ldrh	r3, [r7, #6]
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d105      	bne.n	800e578 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e56c:	893b      	ldrh	r3, [r7, #8]
 800e56e:	b2da      	uxtb	r2, r3
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	629a      	str	r2, [r3, #40]	@ 0x28
 800e576:	e015      	b.n	800e5a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e578:	893b      	ldrh	r3, [r7, #8]
 800e57a:	0a1b      	lsrs	r3, r3, #8
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	b2da      	uxtb	r2, r3
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e586:	69fa      	ldr	r2, [r7, #28]
 800e588:	69b9      	ldr	r1, [r7, #24]
 800e58a:	68f8      	ldr	r0, [r7, #12]
 800e58c:	f000 f8ef 	bl	800e76e <I2C_WaitOnTXISFlagUntilTimeout>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d001      	beq.n	800e59a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e596:	2301      	movs	r3, #1
 800e598:	e012      	b.n	800e5c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e59a:	893b      	ldrh	r3, [r7, #8]
 800e59c:	b2da      	uxtb	r2, r3
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	9300      	str	r3, [sp, #0]
 800e5a8:	69bb      	ldr	r3, [r7, #24]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	2180      	movs	r1, #128	@ 0x80
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f000 f884 	bl	800e6bc <I2C_WaitOnFlagUntilTimeout>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e000      	b.n	800e5c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	80002000 	.word	0x80002000

0800e5cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b086      	sub	sp, #24
 800e5d0:	af02      	add	r7, sp, #8
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	4608      	mov	r0, r1
 800e5d6:	4611      	mov	r1, r2
 800e5d8:	461a      	mov	r2, r3
 800e5da:	4603      	mov	r3, r0
 800e5dc:	817b      	strh	r3, [r7, #10]
 800e5de:	460b      	mov	r3, r1
 800e5e0:	813b      	strh	r3, [r7, #8]
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e5e6:	88fb      	ldrh	r3, [r7, #6]
 800e5e8:	b2da      	uxtb	r2, r3
 800e5ea:	8979      	ldrh	r1, [r7, #10]
 800e5ec:	4b20      	ldr	r3, [pc, #128]	@ (800e670 <I2C_RequestMemoryRead+0xa4>)
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	68f8      	ldr	r0, [r7, #12]
 800e5f4:	f000 fa26 	bl	800ea44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e5f8:	69fa      	ldr	r2, [r7, #28]
 800e5fa:	69b9      	ldr	r1, [r7, #24]
 800e5fc:	68f8      	ldr	r0, [r7, #12]
 800e5fe:	f000 f8b6 	bl	800e76e <I2C_WaitOnTXISFlagUntilTimeout>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d001      	beq.n	800e60c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e608:	2301      	movs	r3, #1
 800e60a:	e02c      	b.n	800e666 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e60c:	88fb      	ldrh	r3, [r7, #6]
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d105      	bne.n	800e61e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e612:	893b      	ldrh	r3, [r7, #8]
 800e614:	b2da      	uxtb	r2, r3
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	629a      	str	r2, [r3, #40]	@ 0x28
 800e61c:	e015      	b.n	800e64a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e61e:	893b      	ldrh	r3, [r7, #8]
 800e620:	0a1b      	lsrs	r3, r3, #8
 800e622:	b29b      	uxth	r3, r3
 800e624:	b2da      	uxtb	r2, r3
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e62c:	69fa      	ldr	r2, [r7, #28]
 800e62e:	69b9      	ldr	r1, [r7, #24]
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f000 f89c 	bl	800e76e <I2C_WaitOnTXISFlagUntilTimeout>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d001      	beq.n	800e640 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	e012      	b.n	800e666 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e640:	893b      	ldrh	r3, [r7, #8]
 800e642:	b2da      	uxtb	r2, r3
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	9300      	str	r3, [sp, #0]
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	2200      	movs	r2, #0
 800e652:	2140      	movs	r1, #64	@ 0x40
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f000 f831 	bl	800e6bc <I2C_WaitOnFlagUntilTimeout>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e660:	2301      	movs	r3, #1
 800e662:	e000      	b.n	800e666 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	80002000 	.word	0x80002000

0800e674 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	699b      	ldr	r3, [r3, #24]
 800e682:	f003 0302 	and.w	r3, r3, #2
 800e686:	2b02      	cmp	r3, #2
 800e688:	d103      	bne.n	800e692 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2200      	movs	r2, #0
 800e690:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	699b      	ldr	r3, [r3, #24]
 800e698:	f003 0301 	and.w	r3, r3, #1
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d007      	beq.n	800e6b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	699a      	ldr	r2, [r3, #24]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f042 0201 	orr.w	r2, r2, #1
 800e6ae:	619a      	str	r2, [r3, #24]
  }
}
 800e6b0:	bf00      	nop
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	603b      	str	r3, [r7, #0]
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e6cc:	e03b      	b.n	800e746 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e6ce:	69ba      	ldr	r2, [r7, #24]
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f000 f8d6 	bl	800e884 <I2C_IsErrorOccurred>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d001      	beq.n	800e6e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e041      	b.n	800e766 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e8:	d02d      	beq.n	800e746 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6ea:	f7f8 fba1 	bl	8006e30 <HAL_GetTick>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	69bb      	ldr	r3, [r7, #24]
 800e6f2:	1ad3      	subs	r3, r2, r3
 800e6f4:	683a      	ldr	r2, [r7, #0]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d302      	bcc.n	800e700 <I2C_WaitOnFlagUntilTimeout+0x44>
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d122      	bne.n	800e746 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	699a      	ldr	r2, [r3, #24]
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	4013      	ands	r3, r2
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	bf0c      	ite	eq
 800e710:	2301      	moveq	r3, #1
 800e712:	2300      	movne	r3, #0
 800e714:	b2db      	uxtb	r3, r3
 800e716:	461a      	mov	r2, r3
 800e718:	79fb      	ldrb	r3, [r7, #7]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d113      	bne.n	800e746 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e722:	f043 0220 	orr.w	r2, r3, #32
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2220      	movs	r2, #32
 800e72e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2200      	movs	r2, #0
 800e736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2200      	movs	r2, #0
 800e73e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800e742:	2301      	movs	r3, #1
 800e744:	e00f      	b.n	800e766 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	699a      	ldr	r2, [r3, #24]
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	4013      	ands	r3, r2
 800e750:	68ba      	ldr	r2, [r7, #8]
 800e752:	429a      	cmp	r2, r3
 800e754:	bf0c      	ite	eq
 800e756:	2301      	moveq	r3, #1
 800e758:	2300      	movne	r3, #0
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	461a      	mov	r2, r3
 800e75e:	79fb      	ldrb	r3, [r7, #7]
 800e760:	429a      	cmp	r2, r3
 800e762:	d0b4      	beq.n	800e6ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b084      	sub	sp, #16
 800e772:	af00      	add	r7, sp, #0
 800e774:	60f8      	str	r0, [r7, #12]
 800e776:	60b9      	str	r1, [r7, #8]
 800e778:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e77a:	e033      	b.n	800e7e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	68b9      	ldr	r1, [r7, #8]
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f000 f87f 	bl	800e884 <I2C_IsErrorOccurred>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d001      	beq.n	800e790 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e78c:	2301      	movs	r3, #1
 800e78e:	e031      	b.n	800e7f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e796:	d025      	beq.n	800e7e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e798:	f7f8 fb4a 	bl	8006e30 <HAL_GetTick>
 800e79c:	4602      	mov	r2, r0
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d302      	bcc.n	800e7ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d11a      	bne.n	800e7e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	699b      	ldr	r3, [r3, #24]
 800e7b4:	f003 0302 	and.w	r3, r3, #2
 800e7b8:	2b02      	cmp	r3, #2
 800e7ba:	d013      	beq.n	800e7e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7c0:	f043 0220 	orr.w	r2, r3, #32
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2220      	movs	r2, #32
 800e7cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	e007      	b.n	800e7f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	699b      	ldr	r3, [r3, #24]
 800e7ea:	f003 0302 	and.w	r3, r3, #2
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d1c4      	bne.n	800e77c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e7f2:	2300      	movs	r3, #0
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3710      	adds	r7, #16
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e808:	e02f      	b.n	800e86a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	68b9      	ldr	r1, [r7, #8]
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	f000 f838 	bl	800e884 <I2C_IsErrorOccurred>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d001      	beq.n	800e81e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e81a:	2301      	movs	r3, #1
 800e81c:	e02d      	b.n	800e87a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e81e:	f7f8 fb07 	bl	8006e30 <HAL_GetTick>
 800e822:	4602      	mov	r2, r0
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	1ad3      	subs	r3, r2, r3
 800e828:	68ba      	ldr	r2, [r7, #8]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d302      	bcc.n	800e834 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d11a      	bne.n	800e86a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	699b      	ldr	r3, [r3, #24]
 800e83a:	f003 0320 	and.w	r3, r3, #32
 800e83e:	2b20      	cmp	r3, #32
 800e840:	d013      	beq.n	800e86a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e846:	f043 0220 	orr.w	r2, r3, #32
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2220      	movs	r2, #32
 800e852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2200      	movs	r2, #0
 800e85a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2200      	movs	r2, #0
 800e862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800e866:	2301      	movs	r3, #1
 800e868:	e007      	b.n	800e87a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	f003 0320 	and.w	r3, r3, #32
 800e874:	2b20      	cmp	r3, #32
 800e876:	d1c8      	bne.n	800e80a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e878:	2300      	movs	r3, #0
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3710      	adds	r7, #16
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
	...

0800e884 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b08a      	sub	sp, #40	@ 0x28
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e890:	2300      	movs	r3, #0
 800e892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	699b      	ldr	r3, [r3, #24]
 800e89c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	f003 0310 	and.w	r3, r3, #16
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d068      	beq.n	800e982 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2210      	movs	r2, #16
 800e8b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e8b8:	e049      	b.n	800e94e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8c0:	d045      	beq.n	800e94e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e8c2:	f7f8 fab5 	bl	8006e30 <HAL_GetTick>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	68ba      	ldr	r2, [r7, #8]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d302      	bcc.n	800e8d8 <I2C_IsErrorOccurred+0x54>
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d13a      	bne.n	800e94e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e8e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e8ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	699b      	ldr	r3, [r3, #24]
 800e8f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e8f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e8fa:	d121      	bne.n	800e940 <I2C_IsErrorOccurred+0xbc>
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e902:	d01d      	beq.n	800e940 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800e904:	7cfb      	ldrb	r3, [r7, #19]
 800e906:	2b20      	cmp	r3, #32
 800e908:	d01a      	beq.n	800e940 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	685a      	ldr	r2, [r3, #4]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e918:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e91a:	f7f8 fa89 	bl	8006e30 <HAL_GetTick>
 800e91e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e920:	e00e      	b.n	800e940 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e922:	f7f8 fa85 	bl	8006e30 <HAL_GetTick>
 800e926:	4602      	mov	r2, r0
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	2b19      	cmp	r3, #25
 800e92e:	d907      	bls.n	800e940 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800e930:	6a3b      	ldr	r3, [r7, #32]
 800e932:	f043 0320 	orr.w	r3, r3, #32
 800e936:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800e938:	2301      	movs	r3, #1
 800e93a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800e93e:	e006      	b.n	800e94e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	699b      	ldr	r3, [r3, #24]
 800e946:	f003 0320 	and.w	r3, r3, #32
 800e94a:	2b20      	cmp	r3, #32
 800e94c:	d1e9      	bne.n	800e922 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	699b      	ldr	r3, [r3, #24]
 800e954:	f003 0320 	and.w	r3, r3, #32
 800e958:	2b20      	cmp	r3, #32
 800e95a:	d003      	beq.n	800e964 <I2C_IsErrorOccurred+0xe0>
 800e95c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e960:	2b00      	cmp	r3, #0
 800e962:	d0aa      	beq.n	800e8ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d103      	bne.n	800e974 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2220      	movs	r2, #32
 800e972:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e974:	6a3b      	ldr	r3, [r7, #32]
 800e976:	f043 0304 	orr.w	r3, r3, #4
 800e97a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e97c:	2301      	movs	r3, #1
 800e97e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	699b      	ldr	r3, [r3, #24]
 800e988:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00b      	beq.n	800e9ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	f043 0301 	orr.w	r3, r3, #1
 800e99a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e9a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00b      	beq.n	800e9ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e9b6:	6a3b      	ldr	r3, [r7, #32]
 800e9b8:	f043 0308 	orr.w	r3, r3, #8
 800e9bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e9c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d00b      	beq.n	800e9f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e9d8:	6a3b      	ldr	r3, [r7, #32]
 800e9da:	f043 0302 	orr.w	r3, r3, #2
 800e9de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800e9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d01c      	beq.n	800ea32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f7ff fe3b 	bl	800e674 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	6859      	ldr	r1, [r3, #4]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	4b0d      	ldr	r3, [pc, #52]	@ (800ea40 <I2C_IsErrorOccurred+0x1bc>)
 800ea0a:	400b      	ands	r3, r1
 800ea0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea12:	6a3b      	ldr	r3, [r7, #32]
 800ea14:	431a      	orrs	r2, r3
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2220      	movs	r2, #32
 800ea1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ea32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3728      	adds	r7, #40	@ 0x28
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	fe00e800 	.word	0xfe00e800

0800ea44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b087      	sub	sp, #28
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	607b      	str	r3, [r7, #4]
 800ea4e:	460b      	mov	r3, r1
 800ea50:	817b      	strh	r3, [r7, #10]
 800ea52:	4613      	mov	r3, r2
 800ea54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ea56:	897b      	ldrh	r3, [r7, #10]
 800ea58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ea5c:	7a7b      	ldrb	r3, [r7, #9]
 800ea5e:	041b      	lsls	r3, r3, #16
 800ea60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ea64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ea6a:	6a3b      	ldr	r3, [r7, #32]
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	685a      	ldr	r2, [r3, #4]
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	0d5b      	lsrs	r3, r3, #21
 800ea7e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800ea82:	4b08      	ldr	r3, [pc, #32]	@ (800eaa4 <I2C_TransferConfig+0x60>)
 800ea84:	430b      	orrs	r3, r1
 800ea86:	43db      	mvns	r3, r3
 800ea88:	ea02 0103 	and.w	r1, r2, r3
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	697a      	ldr	r2, [r7, #20]
 800ea92:	430a      	orrs	r2, r1
 800ea94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ea96:	bf00      	nop
 800ea98:	371c      	adds	r7, #28
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr
 800eaa2:	bf00      	nop
 800eaa4:	03ff63ff 	.word	0x03ff63ff

0800eaa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b20      	cmp	r3, #32
 800eabc:	d138      	bne.n	800eb30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d101      	bne.n	800eacc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800eac8:	2302      	movs	r3, #2
 800eaca:	e032      	b.n	800eb32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2201      	movs	r2, #1
 800ead0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2224      	movs	r2, #36	@ 0x24
 800ead8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f022 0201 	bic.w	r2, r2, #1
 800eaea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800eafa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	6819      	ldr	r1, [r3, #0]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	683a      	ldr	r2, [r7, #0]
 800eb08:	430a      	orrs	r2, r1
 800eb0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f042 0201 	orr.w	r2, r2, #1
 800eb1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2220      	movs	r2, #32
 800eb20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2200      	movs	r2, #0
 800eb28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	e000      	b.n	800eb32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800eb30:	2302      	movs	r3, #2
  }
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	370c      	adds	r7, #12
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800eb3e:	b480      	push	{r7}
 800eb40:	b085      	sub	sp, #20
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
 800eb46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	2b20      	cmp	r3, #32
 800eb52:	d139      	bne.n	800ebc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d101      	bne.n	800eb62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800eb5e:	2302      	movs	r3, #2
 800eb60:	e033      	b.n	800ebca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2201      	movs	r2, #1
 800eb66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2224      	movs	r2, #36	@ 0x24
 800eb6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f022 0201 	bic.w	r2, r2, #1
 800eb80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800eb90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	021b      	lsls	r3, r3, #8
 800eb96:	68fa      	ldr	r2, [r7, #12]
 800eb98:	4313      	orrs	r3, r2
 800eb9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f042 0201 	orr.w	r2, r2, #1
 800ebb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2220      	movs	r2, #32
 800ebb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	e000      	b.n	800ebca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ebc8:	2302      	movs	r3, #2
  }
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3714      	adds	r7, #20
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
	...

0800ebd8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d101      	bne.n	800ebea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	e0bf      	b.n	800ed6a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d106      	bne.n	800ec04 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f7f4 f93a 	bl	8002e78 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2202      	movs	r2, #2
 800ec08:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	699a      	ldr	r2, [r3, #24]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800ec1a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	6999      	ldr	r1, [r3, #24]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	685a      	ldr	r2, [r3, #4]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ec30:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	691b      	ldr	r3, [r3, #16]
 800ec36:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	430a      	orrs	r2, r1
 800ec3e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	6899      	ldr	r1, [r3, #8]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	4b4a      	ldr	r3, [pc, #296]	@ (800ed74 <HAL_LTDC_Init+0x19c>)
 800ec4c:	400b      	ands	r3, r1
 800ec4e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	695b      	ldr	r3, [r3, #20]
 800ec54:	041b      	lsls	r3, r3, #16
 800ec56:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	6899      	ldr	r1, [r3, #8]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	699a      	ldr	r2, [r3, #24]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	431a      	orrs	r2, r3
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	430a      	orrs	r2, r1
 800ec6c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	68d9      	ldr	r1, [r3, #12]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	4b3e      	ldr	r3, [pc, #248]	@ (800ed74 <HAL_LTDC_Init+0x19c>)
 800ec7a:	400b      	ands	r3, r1
 800ec7c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	69db      	ldr	r3, [r3, #28]
 800ec82:	041b      	lsls	r3, r3, #16
 800ec84:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68d9      	ldr	r1, [r3, #12]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6a1a      	ldr	r2, [r3, #32]
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	431a      	orrs	r2, r3
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	430a      	orrs	r2, r1
 800ec9a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	6919      	ldr	r1, [r3, #16]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	4b33      	ldr	r3, [pc, #204]	@ (800ed74 <HAL_LTDC_Init+0x19c>)
 800eca8:	400b      	ands	r3, r1
 800ecaa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb0:	041b      	lsls	r3, r3, #16
 800ecb2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	6919      	ldr	r1, [r3, #16]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	431a      	orrs	r2, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	430a      	orrs	r2, r1
 800ecc8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	6959      	ldr	r1, [r3, #20]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	4b27      	ldr	r3, [pc, #156]	@ (800ed74 <HAL_LTDC_Init+0x19c>)
 800ecd6:	400b      	ands	r3, r1
 800ecd8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecde:	041b      	lsls	r3, r3, #16
 800ece0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	6959      	ldr	r1, [r3, #20]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	431a      	orrs	r2, r3
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	430a      	orrs	r2, r1
 800ecf6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ecfe:	021b      	lsls	r3, r3, #8
 800ed00:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ed08:	041b      	lsls	r3, r3, #16
 800ed0a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800ed1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ed22:	68ba      	ldr	r2, [r7, #8]
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	4313      	orrs	r3, r2
 800ed28:	687a      	ldr	r2, [r7, #4]
 800ed2a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800ed2e:	431a      	orrs	r2, r3
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	430a      	orrs	r2, r1
 800ed36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f042 0206 	orr.w	r2, r2, #6
 800ed46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	699a      	ldr	r2, [r3, #24]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f042 0201 	orr.w	r2, r2, #1
 800ed56:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	f000f800 	.word	0xf000f800

0800ed78 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed86:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed8e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f003 0304 	and.w	r3, r3, #4
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d023      	beq.n	800ede2 <HAL_LTDC_IRQHandler+0x6a>
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	f003 0304 	and.w	r3, r3, #4
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d01e      	beq.n	800ede2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f022 0204 	bic.w	r2, r2, #4
 800edb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	2204      	movs	r2, #4
 800edba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800edc2:	f043 0201 	orr.w	r2, r3, #1
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2204      	movs	r2, #4
 800edd0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 f86f 	bl	800eec0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f003 0302 	and.w	r3, r3, #2
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d023      	beq.n	800ee34 <HAL_LTDC_IRQHandler+0xbc>
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	f003 0302 	and.w	r3, r3, #2
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d01e      	beq.n	800ee34 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f022 0202 	bic.w	r2, r2, #2
 800ee04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2202      	movs	r2, #2
 800ee0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ee14:	f043 0202 	orr.w	r2, r3, #2
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2204      	movs	r2, #4
 800ee22:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 f846 	bl	800eec0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f003 0301 	and.w	r3, r3, #1
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d01b      	beq.n	800ee76 <HAL_LTDC_IRQHandler+0xfe>
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	f003 0301 	and.w	r3, r3, #1
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d016      	beq.n	800ee76 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f022 0201 	bic.w	r2, r2, #1
 800ee56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2201      	movs	r2, #1
 800ee64:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 f82f 	bl	800eed4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f003 0308 	and.w	r3, r3, #8
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d01b      	beq.n	800eeb8 <HAL_LTDC_IRQHandler+0x140>
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f003 0308 	and.w	r3, r3, #8
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d016      	beq.n	800eeb8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f022 0208 	bic.w	r2, r2, #8
 800ee98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2208      	movs	r2, #8
 800eea0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2201      	movs	r2, #1
 800eea6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2200      	movs	r2, #0
 800eeae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 f818 	bl	800eee8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800eeb8:	bf00      	nop
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800eec8:	bf00      	nop
 800eeca:	370c      	adds	r7, #12
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr

0800eed4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800eedc:	bf00      	nop
 800eede:	370c      	adds	r7, #12
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b083      	sub	sp, #12
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800eef0:	bf00      	nop
 800eef2:	370c      	adds	r7, #12
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr

0800eefc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800eefc:	b5b0      	push	{r4, r5, r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d101      	bne.n	800ef16 <HAL_LTDC_ConfigLayer+0x1a>
 800ef12:	2302      	movs	r3, #2
 800ef14:	e02c      	b.n	800ef70 <HAL_LTDC_ConfigLayer+0x74>
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	2201      	movs	r2, #1
 800ef1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2202      	movs	r2, #2
 800ef22:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ef26:	68fa      	ldr	r2, [r7, #12]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2134      	movs	r1, #52	@ 0x34
 800ef2c:	fb01 f303 	mul.w	r3, r1, r3
 800ef30:	4413      	add	r3, r2
 800ef32:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	4614      	mov	r4, r2
 800ef3a:	461d      	mov	r5, r3
 800ef3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef48:	682b      	ldr	r3, [r5, #0]
 800ef4a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	68b9      	ldr	r1, [r7, #8]
 800ef50:	68f8      	ldr	r0, [r7, #12]
 800ef52:	f000 f8e1 	bl	800f118 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2201      	movs	r2, #1
 800ef62:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bdb0      	pop	{r4, r5, r7, pc}

0800ef78 <HAL_LTDC_SetWindowSize>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowSize(LTDC_HandleTypeDef *hltdc, uint32_t XSize, uint32_t YSize, uint32_t LayerIdx)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b086      	sub	sp, #24
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
 800ef84:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(XSize));
  assert_param(IS_LTDC_CFBLNBR(YSize));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d101      	bne.n	800ef94 <HAL_LTDC_SetWindowSize+0x1c>
 800ef90:	2302      	movs	r3, #2
 800ef92:	e033      	b.n	800effc <HAL_LTDC_SetWindowSize+0x84>
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2202      	movs	r2, #2
 800efa0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	2234      	movs	r2, #52	@ 0x34
 800efa8:	fb02 f303 	mul.w	r3, r2, r3
 800efac:	3338      	adds	r3, #56	@ 0x38
 800efae:	68fa      	ldr	r2, [r7, #12]
 800efb0:	4413      	add	r3, r2
 800efb2:	617b      	str	r3, [r7, #20]

  /* update horizontal stop */
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	441a      	add	r2, r3
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	605a      	str	r2, [r3, #4]

  /* update vertical stop */
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 800efc0:	697b      	ldr	r3, [r7, #20]
 800efc2:	689a      	ldr	r2, [r3, #8]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	441a      	add	r2, r3
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	60da      	str	r2, [r3, #12]

  /* Reconfigures the color frame buffer pitch in byte */
  pLayerCfg->ImageWidth = XSize;
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	68ba      	ldr	r2, [r7, #8]
 800efd0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reconfigures the frame buffer line number */
  pLayerCfg->ImageHeight = YSize;
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800efd8:	683a      	ldr	r2, [r7, #0]
 800efda:	6979      	ldr	r1, [r7, #20]
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f000 f89b 	bl	800f118 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2201      	movs	r2, #1
 800efe8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2201      	movs	r2, #1
 800efee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3718      	adds	r7, #24
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b086      	sub	sp, #24
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
 800f010:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d101      	bne.n	800f020 <HAL_LTDC_SetWindowPosition+0x1c>
 800f01c:	2302      	movs	r3, #2
 800f01e:	e033      	b.n	800f088 <HAL_LTDC_SetWindowPosition+0x84>
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2201      	movs	r2, #1
 800f024:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2202      	movs	r2, #2
 800f02c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	2234      	movs	r2, #52	@ 0x34
 800f034:	fb02 f303 	mul.w	r3, r2, r3
 800f038:	3338      	adds	r3, #56	@ 0x38
 800f03a:	68fa      	ldr	r2, [r7, #12]
 800f03c:	4413      	add	r3, r2
 800f03e:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	68ba      	ldr	r2, [r7, #8]
 800f044:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	441a      	add	r2, r3
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	441a      	add	r2, r3
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800f064:	683a      	ldr	r2, [r7, #0]
 800f066:	6979      	ldr	r1, [r7, #20]
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f000 f855 	bl	800f118 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2201      	movs	r2, #1
 800f074:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2201      	movs	r2, #1
 800f07a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2200      	movs	r2, #0
 800f082:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3718      	adds	r7, #24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b086      	sub	sp, #24
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800f0a2:	2b01      	cmp	r3, #1
 800f0a4:	d101      	bne.n	800f0aa <HAL_LTDC_SetAlpha+0x1a>
 800f0a6:	2302      	movs	r3, #2
 800f0a8:	e024      	b.n	800f0f4 <HAL_LTDC_SetAlpha+0x64>
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2202      	movs	r2, #2
 800f0b6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2234      	movs	r2, #52	@ 0x34
 800f0be:	fb02 f303 	mul.w	r3, r2, r3
 800f0c2:	3338      	adds	r3, #56	@ 0x38
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	4413      	add	r3, r2
 800f0c8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	68ba      	ldr	r2, [r7, #8]
 800f0ce:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	6979      	ldr	r1, [r7, #20]
 800f0d4:	68f8      	ldr	r0, [r7, #12]
 800f0d6:	f000 f81f 	bl	800f118 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3718      	adds	r7, #24
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800f10a:	b2db      	uxtb	r3, r3
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	370c      	adds	r7, #12
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800f118:	b480      	push	{r7}
 800f11a:	b089      	sub	sp, #36	@ 0x24
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	685a      	ldr	r2, [r3, #4]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	0c1b      	lsrs	r3, r3, #16
 800f130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f134:	4413      	add	r3, r2
 800f136:	041b      	lsls	r3, r3, #16
 800f138:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	461a      	mov	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	01db      	lsls	r3, r3, #7
 800f144:	4413      	add	r3, r2
 800f146:	3384      	adds	r3, #132	@ 0x84
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	6812      	ldr	r2, [r2, #0]
 800f14e:	4611      	mov	r1, r2
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	01d2      	lsls	r2, r2, #7
 800f154:	440a      	add	r2, r1
 800f156:	3284      	adds	r2, #132	@ 0x84
 800f158:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800f15c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	0c1b      	lsrs	r3, r3, #16
 800f16a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800f16e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f170:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4619      	mov	r1, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	01db      	lsls	r3, r3, #7
 800f17c:	440b      	add	r3, r1
 800f17e:	3384      	adds	r3, #132	@ 0x84
 800f180:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f182:	69fb      	ldr	r3, [r7, #28]
 800f184:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800f186:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	68da      	ldr	r2, [r3, #12]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f196:	4413      	add	r3, r2
 800f198:	041b      	lsls	r3, r3, #16
 800f19a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	461a      	mov	r2, r3
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	01db      	lsls	r3, r3, #7
 800f1a6:	4413      	add	r3, r2
 800f1a8:	3384      	adds	r3, #132	@ 0x84
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	68fa      	ldr	r2, [r7, #12]
 800f1ae:	6812      	ldr	r2, [r2, #0]
 800f1b0:	4611      	mov	r1, r2
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	01d2      	lsls	r2, r2, #7
 800f1b6:	440a      	add	r2, r1
 800f1b8:	3284      	adds	r2, #132	@ 0x84
 800f1ba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800f1be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	689a      	ldr	r2, [r3, #8]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f1ce:	4413      	add	r3, r2
 800f1d0:	1c5a      	adds	r2, r3, #1
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	01db      	lsls	r3, r3, #7
 800f1dc:	440b      	add	r3, r1
 800f1de:	3384      	adds	r3, #132	@ 0x84
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	01db      	lsls	r3, r3, #7
 800f1f2:	4413      	add	r3, r2
 800f1f4:	3384      	adds	r3, #132	@ 0x84
 800f1f6:	691b      	ldr	r3, [r3, #16]
 800f1f8:	68fa      	ldr	r2, [r7, #12]
 800f1fa:	6812      	ldr	r2, [r2, #0]
 800f1fc:	4611      	mov	r1, r2
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	01d2      	lsls	r2, r2, #7
 800f202:	440a      	add	r2, r1
 800f204:	3284      	adds	r2, #132	@ 0x84
 800f206:	f023 0307 	bic.w	r3, r3, #7
 800f20a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	461a      	mov	r2, r3
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	01db      	lsls	r3, r3, #7
 800f216:	4413      	add	r3, r2
 800f218:	3384      	adds	r3, #132	@ 0x84
 800f21a:	461a      	mov	r2, r3
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	691b      	ldr	r3, [r3, #16]
 800f220:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f228:	021b      	lsls	r3, r3, #8
 800f22a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f232:	041b      	lsls	r3, r3, #16
 800f234:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	699b      	ldr	r3, [r3, #24]
 800f23a:	061b      	lsls	r3, r3, #24
 800f23c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	461a      	mov	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	01db      	lsls	r3, r3, #7
 800f248:	4413      	add	r3, r2
 800f24a:	3384      	adds	r3, #132	@ 0x84
 800f24c:	699b      	ldr	r3, [r3, #24]
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	461a      	mov	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	01db      	lsls	r3, r3, #7
 800f258:	4413      	add	r3, r2
 800f25a:	3384      	adds	r3, #132	@ 0x84
 800f25c:	461a      	mov	r2, r3
 800f25e:	2300      	movs	r3, #0
 800f260:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f268:	461a      	mov	r2, r3
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	431a      	orrs	r2, r3
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	431a      	orrs	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4619      	mov	r1, r3
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	01db      	lsls	r3, r3, #7
 800f27c:	440b      	add	r3, r1
 800f27e:	3384      	adds	r3, #132	@ 0x84
 800f280:	4619      	mov	r1, r3
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	4313      	orrs	r3, r2
 800f286:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	461a      	mov	r2, r3
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	01db      	lsls	r3, r3, #7
 800f292:	4413      	add	r3, r2
 800f294:	3384      	adds	r3, #132	@ 0x84
 800f296:	695b      	ldr	r3, [r3, #20]
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	6812      	ldr	r2, [r2, #0]
 800f29c:	4611      	mov	r1, r2
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	01d2      	lsls	r2, r2, #7
 800f2a2:	440a      	add	r2, r1
 800f2a4:	3284      	adds	r2, #132	@ 0x84
 800f2a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f2aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	01db      	lsls	r3, r3, #7
 800f2b6:	4413      	add	r3, r2
 800f2b8:	3384      	adds	r3, #132	@ 0x84
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	695b      	ldr	r3, [r3, #20]
 800f2c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	01db      	lsls	r3, r3, #7
 800f2cc:	4413      	add	r3, r2
 800f2ce:	3384      	adds	r3, #132	@ 0x84
 800f2d0:	69da      	ldr	r2, [r3, #28]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	01db      	lsls	r3, r3, #7
 800f2dc:	440b      	add	r3, r1
 800f2de:	3384      	adds	r3, #132	@ 0x84
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	4b58      	ldr	r3, [pc, #352]	@ (800f444 <LTDC_SetConfig+0x32c>)
 800f2e4:	4013      	ands	r3, r2
 800f2e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	69da      	ldr	r2, [r3, #28]
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	6a1b      	ldr	r3, [r3, #32]
 800f2f0:	68f9      	ldr	r1, [r7, #12]
 800f2f2:	6809      	ldr	r1, [r1, #0]
 800f2f4:	4608      	mov	r0, r1
 800f2f6:	6879      	ldr	r1, [r7, #4]
 800f2f8:	01c9      	lsls	r1, r1, #7
 800f2fa:	4401      	add	r1, r0
 800f2fc:	3184      	adds	r1, #132	@ 0x84
 800f2fe:	4313      	orrs	r3, r2
 800f300:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	461a      	mov	r2, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	01db      	lsls	r3, r3, #7
 800f30c:	4413      	add	r3, r2
 800f30e:	3384      	adds	r3, #132	@ 0x84
 800f310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	461a      	mov	r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	01db      	lsls	r3, r3, #7
 800f31c:	4413      	add	r3, r2
 800f31e:	3384      	adds	r3, #132	@ 0x84
 800f320:	461a      	mov	r2, r3
 800f322:	2300      	movs	r3, #0
 800f324:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	461a      	mov	r2, r3
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	01db      	lsls	r3, r3, #7
 800f330:	4413      	add	r3, r2
 800f332:	3384      	adds	r3, #132	@ 0x84
 800f334:	461a      	mov	r2, r3
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f33a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	691b      	ldr	r3, [r3, #16]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d102      	bne.n	800f34a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800f344:	2304      	movs	r3, #4
 800f346:	61fb      	str	r3, [r7, #28]
 800f348:	e01b      	b.n	800f382 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	691b      	ldr	r3, [r3, #16]
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d102      	bne.n	800f358 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800f352:	2303      	movs	r3, #3
 800f354:	61fb      	str	r3, [r7, #28]
 800f356:	e014      	b.n	800f382 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	691b      	ldr	r3, [r3, #16]
 800f35c:	2b04      	cmp	r3, #4
 800f35e:	d00b      	beq.n	800f378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800f364:	2b02      	cmp	r3, #2
 800f366:	d007      	beq.n	800f378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800f36c:	2b03      	cmp	r3, #3
 800f36e:	d003      	beq.n	800f378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800f374:	2b07      	cmp	r3, #7
 800f376:	d102      	bne.n	800f37e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800f378:	2302      	movs	r3, #2
 800f37a:	61fb      	str	r3, [r7, #28]
 800f37c:	e001      	b.n	800f382 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800f37e:	2301      	movs	r3, #1
 800f380:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	461a      	mov	r2, r3
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	01db      	lsls	r3, r3, #7
 800f38c:	4413      	add	r3, r2
 800f38e:	3384      	adds	r3, #132	@ 0x84
 800f390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	6812      	ldr	r2, [r2, #0]
 800f396:	4611      	mov	r1, r2
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	01d2      	lsls	r2, r2, #7
 800f39c:	440a      	add	r2, r1
 800f39e:	3284      	adds	r2, #132	@ 0x84
 800f3a0:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800f3a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3aa:	69fa      	ldr	r2, [r7, #28]
 800f3ac:	fb02 f303 	mul.w	r3, r2, r3
 800f3b0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	6859      	ldr	r1, [r3, #4]
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	1acb      	subs	r3, r1, r3
 800f3bc:	69f9      	ldr	r1, [r7, #28]
 800f3be:	fb01 f303 	mul.w	r3, r1, r3
 800f3c2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800f3c4:	68f9      	ldr	r1, [r7, #12]
 800f3c6:	6809      	ldr	r1, [r1, #0]
 800f3c8:	4608      	mov	r0, r1
 800f3ca:	6879      	ldr	r1, [r7, #4]
 800f3cc:	01c9      	lsls	r1, r1, #7
 800f3ce:	4401      	add	r1, r0
 800f3d0:	3184      	adds	r1, #132	@ 0x84
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	461a      	mov	r2, r3
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	01db      	lsls	r3, r3, #7
 800f3e0:	4413      	add	r3, r2
 800f3e2:	3384      	adds	r3, #132	@ 0x84
 800f3e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	01db      	lsls	r3, r3, #7
 800f3f0:	440b      	add	r3, r1
 800f3f2:	3384      	adds	r3, #132	@ 0x84
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	4b14      	ldr	r3, [pc, #80]	@ (800f448 <LTDC_SetConfig+0x330>)
 800f3f8:	4013      	ands	r3, r2
 800f3fa:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	461a      	mov	r2, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	01db      	lsls	r3, r3, #7
 800f406:	4413      	add	r3, r2
 800f408:	3384      	adds	r3, #132	@ 0x84
 800f40a:	461a      	mov	r2, r3
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f410:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	461a      	mov	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	01db      	lsls	r3, r3, #7
 800f41c:	4413      	add	r3, r2
 800f41e:	3384      	adds	r3, #132	@ 0x84
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	68fa      	ldr	r2, [r7, #12]
 800f424:	6812      	ldr	r2, [r2, #0]
 800f426:	4611      	mov	r1, r2
 800f428:	687a      	ldr	r2, [r7, #4]
 800f42a:	01d2      	lsls	r2, r2, #7
 800f42c:	440a      	add	r2, r1
 800f42e:	3284      	adds	r2, #132	@ 0x84
 800f430:	f043 0301 	orr.w	r3, r3, #1
 800f434:	6013      	str	r3, [r2, #0]
}
 800f436:	bf00      	nop
 800f438:	3724      	adds	r7, #36	@ 0x24
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	fffff8f8 	.word	0xfffff8f8
 800f448:	fffff800 	.word	0xfffff800

0800f44c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800f44c:	b480      	push	{r7}
 800f44e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f450:	4b05      	ldr	r3, [pc, #20]	@ (800f468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	4a04      	ldr	r2, [pc, #16]	@ (800f468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f45a:	6013      	str	r3, [r2, #0]
}
 800f45c:	bf00      	nop
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr
 800f466:	bf00      	nop
 800f468:	40007000 	.word	0x40007000

0800f46c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800f472:	2300      	movs	r3, #0
 800f474:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800f476:	4b23      	ldr	r3, [pc, #140]	@ (800f504 <HAL_PWREx_EnableOverDrive+0x98>)
 800f478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f47a:	4a22      	ldr	r2, [pc, #136]	@ (800f504 <HAL_PWREx_EnableOverDrive+0x98>)
 800f47c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f480:	6413      	str	r3, [r2, #64]	@ 0x40
 800f482:	4b20      	ldr	r3, [pc, #128]	@ (800f504 <HAL_PWREx_EnableOverDrive+0x98>)
 800f484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f48a:	603b      	str	r3, [r7, #0]
 800f48c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800f48e:	4b1e      	ldr	r3, [pc, #120]	@ (800f508 <HAL_PWREx_EnableOverDrive+0x9c>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	4a1d      	ldr	r2, [pc, #116]	@ (800f508 <HAL_PWREx_EnableOverDrive+0x9c>)
 800f494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f498:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f49a:	f7f7 fcc9 	bl	8006e30 <HAL_GetTick>
 800f49e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800f4a0:	e009      	b.n	800f4b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800f4a2:	f7f7 fcc5 	bl	8006e30 <HAL_GetTick>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f4b0:	d901      	bls.n	800f4b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800f4b2:	2303      	movs	r3, #3
 800f4b4:	e022      	b.n	800f4fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800f4b6:	4b14      	ldr	r3, [pc, #80]	@ (800f508 <HAL_PWREx_EnableOverDrive+0x9c>)
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f4be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4c2:	d1ee      	bne.n	800f4a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800f4c4:	4b10      	ldr	r3, [pc, #64]	@ (800f508 <HAL_PWREx_EnableOverDrive+0x9c>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4a0f      	ldr	r2, [pc, #60]	@ (800f508 <HAL_PWREx_EnableOverDrive+0x9c>)
 800f4ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f4ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f4d0:	f7f7 fcae 	bl	8006e30 <HAL_GetTick>
 800f4d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800f4d6:	e009      	b.n	800f4ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800f4d8:	f7f7 fcaa 	bl	8006e30 <HAL_GetTick>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	1ad3      	subs	r3, r2, r3
 800f4e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f4e6:	d901      	bls.n	800f4ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800f4e8:	2303      	movs	r3, #3
 800f4ea:	e007      	b.n	800f4fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800f4ec:	4b06      	ldr	r3, [pc, #24]	@ (800f508 <HAL_PWREx_EnableOverDrive+0x9c>)
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f4f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f4f8:	d1ee      	bne.n	800f4d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800f4fa:	2300      	movs	r3, #0
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3708      	adds	r7, #8
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	40023800 	.word	0x40023800
 800f508:	40007000 	.word	0x40007000

0800f50c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b086      	sub	sp, #24
 800f510:	af02      	add	r7, sp, #8
 800f512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f514:	f7f7 fc8c 	bl	8006e30 <HAL_GetTick>
 800f518:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d101      	bne.n	800f524 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f520:	2301      	movs	r3, #1
 800f522:	e067      	b.n	800f5f4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d10b      	bne.n	800f548 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2200      	movs	r2, #0
 800f534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7f3 fd65 	bl	8003008 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f53e:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 f85e 	bl	800f604 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	3b01      	subs	r3, #1
 800f558:	021a      	lsls	r2, r3, #8
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	430a      	orrs	r2, r1
 800f560:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2200      	movs	r2, #0
 800f56c:	2120      	movs	r1, #32
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 f856 	bl	800f620 <QSPI_WaitFlagStateUntilTimeout>
 800f574:	4603      	mov	r3, r0
 800f576:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f578:	7afb      	ldrb	r3, [r7, #11]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d135      	bne.n	800f5ea <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	4b1d      	ldr	r3, [pc, #116]	@ (800f5fc <HAL_QSPI_Init+0xf0>)
 800f586:	4013      	ands	r3, r2
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	6852      	ldr	r2, [r2, #4]
 800f58c:	0611      	lsls	r1, r2, #24
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	68d2      	ldr	r2, [r2, #12]
 800f592:	4311      	orrs	r1, r2
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	69d2      	ldr	r2, [r2, #28]
 800f598:	4311      	orrs	r1, r2
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	6a12      	ldr	r2, [r2, #32]
 800f59e:	4311      	orrs	r1, r2
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	6812      	ldr	r2, [r2, #0]
 800f5a4:	430b      	orrs	r3, r1
 800f5a6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	685a      	ldr	r2, [r3, #4]
 800f5ae:	4b14      	ldr	r3, [pc, #80]	@ (800f600 <HAL_QSPI_Init+0xf4>)
 800f5b0:	4013      	ands	r3, r2
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	6912      	ldr	r2, [r2, #16]
 800f5b6:	0411      	lsls	r1, r2, #16
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	6952      	ldr	r2, [r2, #20]
 800f5bc:	4311      	orrs	r1, r2
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	6992      	ldr	r2, [r2, #24]
 800f5c2:	4311      	orrs	r1, r2
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	6812      	ldr	r2, [r2, #0]
 800f5c8:	430b      	orrs	r3, r1
 800f5ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	681a      	ldr	r2, [r3, #0]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f042 0201 	orr.w	r2, r2, #1
 800f5da:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800f5f2:	7afb      	ldrb	r3, [r7, #11]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3710      	adds	r7, #16
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	00ffff2f 	.word	0x00ffff2f
 800f600:	ffe0f8fe 	.word	0xffe0f8fe

0800f604 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	683a      	ldr	r2, [r7, #0]
 800f612:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800f614:	bf00      	nop
 800f616:	370c      	adds	r7, #12
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	603b      	str	r3, [r7, #0]
 800f62c:	4613      	mov	r3, r2
 800f62e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f630:	e01a      	b.n	800f668 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f638:	d016      	beq.n	800f668 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f63a:	f7f7 fbf9 	bl	8006e30 <HAL_GetTick>
 800f63e:	4602      	mov	r2, r0
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	1ad3      	subs	r3, r2, r3
 800f644:	69ba      	ldr	r2, [r7, #24]
 800f646:	429a      	cmp	r2, r3
 800f648:	d302      	bcc.n	800f650 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d10b      	bne.n	800f668 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2204      	movs	r2, #4
 800f654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f65c:	f043 0201 	orr.w	r2, r3, #1
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800f664:	2301      	movs	r3, #1
 800f666:	e00e      	b.n	800f686 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	689a      	ldr	r2, [r3, #8]
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	4013      	ands	r3, r2
 800f672:	2b00      	cmp	r3, #0
 800f674:	bf14      	ite	ne
 800f676:	2301      	movne	r3, #1
 800f678:	2300      	moveq	r3, #0
 800f67a:	b2db      	uxtb	r3, r3
 800f67c:	461a      	mov	r2, r3
 800f67e:	79fb      	ldrb	r3, [r7, #7]
 800f680:	429a      	cmp	r2, r3
 800f682:	d1d6      	bne.n	800f632 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f684:	2300      	movs	r3, #0
}
 800f686:	4618      	mov	r0, r3
 800f688:	3710      	adds	r7, #16
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
	...

0800f690 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b086      	sub	sp, #24
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800f698:	2300      	movs	r3, #0
 800f69a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d101      	bne.n	800f6a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e291      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f003 0301 	and.w	r3, r3, #1
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	f000 8087 	beq.w	800f7c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f6b4:	4b96      	ldr	r3, [pc, #600]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	f003 030c 	and.w	r3, r3, #12
 800f6bc:	2b04      	cmp	r3, #4
 800f6be:	d00c      	beq.n	800f6da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f6c0:	4b93      	ldr	r3, [pc, #588]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	f003 030c 	and.w	r3, r3, #12
 800f6c8:	2b08      	cmp	r3, #8
 800f6ca:	d112      	bne.n	800f6f2 <HAL_RCC_OscConfig+0x62>
 800f6cc:	4b90      	ldr	r3, [pc, #576]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f6d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f6d8:	d10b      	bne.n	800f6f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f6da:	4b8d      	ldr	r3, [pc, #564]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d06c      	beq.n	800f7c0 <HAL_RCC_OscConfig+0x130>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d168      	bne.n	800f7c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	e26b      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f6fa:	d106      	bne.n	800f70a <HAL_RCC_OscConfig+0x7a>
 800f6fc:	4b84      	ldr	r3, [pc, #528]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4a83      	ldr	r2, [pc, #524]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f706:	6013      	str	r3, [r2, #0]
 800f708:	e02e      	b.n	800f768 <HAL_RCC_OscConfig+0xd8>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d10c      	bne.n	800f72c <HAL_RCC_OscConfig+0x9c>
 800f712:	4b7f      	ldr	r3, [pc, #508]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4a7e      	ldr	r2, [pc, #504]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f71c:	6013      	str	r3, [r2, #0]
 800f71e:	4b7c      	ldr	r3, [pc, #496]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a7b      	ldr	r2, [pc, #492]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f724:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f728:	6013      	str	r3, [r2, #0]
 800f72a:	e01d      	b.n	800f768 <HAL_RCC_OscConfig+0xd8>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f734:	d10c      	bne.n	800f750 <HAL_RCC_OscConfig+0xc0>
 800f736:	4b76      	ldr	r3, [pc, #472]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	4a75      	ldr	r2, [pc, #468]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f73c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f740:	6013      	str	r3, [r2, #0]
 800f742:	4b73      	ldr	r3, [pc, #460]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	4a72      	ldr	r2, [pc, #456]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f74c:	6013      	str	r3, [r2, #0]
 800f74e:	e00b      	b.n	800f768 <HAL_RCC_OscConfig+0xd8>
 800f750:	4b6f      	ldr	r3, [pc, #444]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a6e      	ldr	r2, [pc, #440]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f75a:	6013      	str	r3, [r2, #0]
 800f75c:	4b6c      	ldr	r3, [pc, #432]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a6b      	ldr	r2, [pc, #428]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d013      	beq.n	800f798 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f770:	f7f7 fb5e 	bl	8006e30 <HAL_GetTick>
 800f774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f776:	e008      	b.n	800f78a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f778:	f7f7 fb5a 	bl	8006e30 <HAL_GetTick>
 800f77c:	4602      	mov	r2, r0
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	1ad3      	subs	r3, r2, r3
 800f782:	2b64      	cmp	r3, #100	@ 0x64
 800f784:	d901      	bls.n	800f78a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f786:	2303      	movs	r3, #3
 800f788:	e21f      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f78a:	4b61      	ldr	r3, [pc, #388]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f792:	2b00      	cmp	r3, #0
 800f794:	d0f0      	beq.n	800f778 <HAL_RCC_OscConfig+0xe8>
 800f796:	e014      	b.n	800f7c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f798:	f7f7 fb4a 	bl	8006e30 <HAL_GetTick>
 800f79c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f79e:	e008      	b.n	800f7b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f7a0:	f7f7 fb46 	bl	8006e30 <HAL_GetTick>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	1ad3      	subs	r3, r2, r3
 800f7aa:	2b64      	cmp	r3, #100	@ 0x64
 800f7ac:	d901      	bls.n	800f7b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800f7ae:	2303      	movs	r3, #3
 800f7b0:	e20b      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f7b2:	4b57      	ldr	r3, [pc, #348]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d1f0      	bne.n	800f7a0 <HAL_RCC_OscConfig+0x110>
 800f7be:	e000      	b.n	800f7c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f7c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f003 0302 	and.w	r3, r3, #2
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d069      	beq.n	800f8a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f7ce:	4b50      	ldr	r3, [pc, #320]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	f003 030c 	and.w	r3, r3, #12
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d00b      	beq.n	800f7f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f7da:	4b4d      	ldr	r3, [pc, #308]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f7dc:	689b      	ldr	r3, [r3, #8]
 800f7de:	f003 030c 	and.w	r3, r3, #12
 800f7e2:	2b08      	cmp	r3, #8
 800f7e4:	d11c      	bne.n	800f820 <HAL_RCC_OscConfig+0x190>
 800f7e6:	4b4a      	ldr	r3, [pc, #296]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d116      	bne.n	800f820 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f7f2:	4b47      	ldr	r3, [pc, #284]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f003 0302 	and.w	r3, r3, #2
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d005      	beq.n	800f80a <HAL_RCC_OscConfig+0x17a>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	2b01      	cmp	r3, #1
 800f804:	d001      	beq.n	800f80a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800f806:	2301      	movs	r3, #1
 800f808:	e1df      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f80a:	4b41      	ldr	r3, [pc, #260]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	691b      	ldr	r3, [r3, #16]
 800f816:	00db      	lsls	r3, r3, #3
 800f818:	493d      	ldr	r1, [pc, #244]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f81a:	4313      	orrs	r3, r2
 800f81c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f81e:	e040      	b.n	800f8a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	68db      	ldr	r3, [r3, #12]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d023      	beq.n	800f870 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f828:	4b39      	ldr	r3, [pc, #228]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	4a38      	ldr	r2, [pc, #224]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f82e:	f043 0301 	orr.w	r3, r3, #1
 800f832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f834:	f7f7 fafc 	bl	8006e30 <HAL_GetTick>
 800f838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f83a:	e008      	b.n	800f84e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f83c:	f7f7 faf8 	bl	8006e30 <HAL_GetTick>
 800f840:	4602      	mov	r2, r0
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	1ad3      	subs	r3, r2, r3
 800f846:	2b02      	cmp	r3, #2
 800f848:	d901      	bls.n	800f84e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800f84a:	2303      	movs	r3, #3
 800f84c:	e1bd      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f84e:	4b30      	ldr	r3, [pc, #192]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f003 0302 	and.w	r3, r3, #2
 800f856:	2b00      	cmp	r3, #0
 800f858:	d0f0      	beq.n	800f83c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f85a:	4b2d      	ldr	r3, [pc, #180]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	691b      	ldr	r3, [r3, #16]
 800f866:	00db      	lsls	r3, r3, #3
 800f868:	4929      	ldr	r1, [pc, #164]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f86a:	4313      	orrs	r3, r2
 800f86c:	600b      	str	r3, [r1, #0]
 800f86e:	e018      	b.n	800f8a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f870:	4b27      	ldr	r3, [pc, #156]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4a26      	ldr	r2, [pc, #152]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f876:	f023 0301 	bic.w	r3, r3, #1
 800f87a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f87c:	f7f7 fad8 	bl	8006e30 <HAL_GetTick>
 800f880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f882:	e008      	b.n	800f896 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f884:	f7f7 fad4 	bl	8006e30 <HAL_GetTick>
 800f888:	4602      	mov	r2, r0
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	1ad3      	subs	r3, r2, r3
 800f88e:	2b02      	cmp	r3, #2
 800f890:	d901      	bls.n	800f896 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800f892:	2303      	movs	r3, #3
 800f894:	e199      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f896:	4b1e      	ldr	r3, [pc, #120]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	f003 0302 	and.w	r3, r3, #2
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d1f0      	bne.n	800f884 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f003 0308 	and.w	r3, r3, #8
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d038      	beq.n	800f920 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	695b      	ldr	r3, [r3, #20]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d019      	beq.n	800f8ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f8b6:	4b16      	ldr	r3, [pc, #88]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f8b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f8ba:	4a15      	ldr	r2, [pc, #84]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f8bc:	f043 0301 	orr.w	r3, r3, #1
 800f8c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f8c2:	f7f7 fab5 	bl	8006e30 <HAL_GetTick>
 800f8c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f8c8:	e008      	b.n	800f8dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f8ca:	f7f7 fab1 	bl	8006e30 <HAL_GetTick>
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d901      	bls.n	800f8dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f8d8:	2303      	movs	r3, #3
 800f8da:	e176      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f8dc:	4b0c      	ldr	r3, [pc, #48]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f8de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f8e0:	f003 0302 	and.w	r3, r3, #2
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d0f0      	beq.n	800f8ca <HAL_RCC_OscConfig+0x23a>
 800f8e8:	e01a      	b.n	800f920 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f8ea:	4b09      	ldr	r3, [pc, #36]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f8ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f8ee:	4a08      	ldr	r2, [pc, #32]	@ (800f910 <HAL_RCC_OscConfig+0x280>)
 800f8f0:	f023 0301 	bic.w	r3, r3, #1
 800f8f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f8f6:	f7f7 fa9b 	bl	8006e30 <HAL_GetTick>
 800f8fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f8fc:	e00a      	b.n	800f914 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f8fe:	f7f7 fa97 	bl	8006e30 <HAL_GetTick>
 800f902:	4602      	mov	r2, r0
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	1ad3      	subs	r3, r2, r3
 800f908:	2b02      	cmp	r3, #2
 800f90a:	d903      	bls.n	800f914 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800f90c:	2303      	movs	r3, #3
 800f90e:	e15c      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
 800f910:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f914:	4b91      	ldr	r3, [pc, #580]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f918:	f003 0302 	and.w	r3, r3, #2
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d1ee      	bne.n	800f8fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f003 0304 	and.w	r3, r3, #4
 800f928:	2b00      	cmp	r3, #0
 800f92a:	f000 80a4 	beq.w	800fa76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f92e:	4b8b      	ldr	r3, [pc, #556]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f936:	2b00      	cmp	r3, #0
 800f938:	d10d      	bne.n	800f956 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800f93a:	4b88      	ldr	r3, [pc, #544]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f93c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f93e:	4a87      	ldr	r2, [pc, #540]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f944:	6413      	str	r3, [r2, #64]	@ 0x40
 800f946:	4b85      	ldr	r3, [pc, #532]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f94a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f94e:	60bb      	str	r3, [r7, #8]
 800f950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f952:	2301      	movs	r3, #1
 800f954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f956:	4b82      	ldr	r3, [pc, #520]	@ (800fb60 <HAL_RCC_OscConfig+0x4d0>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d118      	bne.n	800f994 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800f962:	4b7f      	ldr	r3, [pc, #508]	@ (800fb60 <HAL_RCC_OscConfig+0x4d0>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4a7e      	ldr	r2, [pc, #504]	@ (800fb60 <HAL_RCC_OscConfig+0x4d0>)
 800f968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f96c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f96e:	f7f7 fa5f 	bl	8006e30 <HAL_GetTick>
 800f972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f974:	e008      	b.n	800f988 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f976:	f7f7 fa5b 	bl	8006e30 <HAL_GetTick>
 800f97a:	4602      	mov	r2, r0
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	1ad3      	subs	r3, r2, r3
 800f980:	2b64      	cmp	r3, #100	@ 0x64
 800f982:	d901      	bls.n	800f988 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800f984:	2303      	movs	r3, #3
 800f986:	e120      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f988:	4b75      	ldr	r3, [pc, #468]	@ (800fb60 <HAL_RCC_OscConfig+0x4d0>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f990:	2b00      	cmp	r3, #0
 800f992:	d0f0      	beq.n	800f976 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	689b      	ldr	r3, [r3, #8]
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d106      	bne.n	800f9aa <HAL_RCC_OscConfig+0x31a>
 800f99c:	4b6f      	ldr	r3, [pc, #444]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f99e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9a0:	4a6e      	ldr	r2, [pc, #440]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f9a2:	f043 0301 	orr.w	r3, r3, #1
 800f9a6:	6713      	str	r3, [r2, #112]	@ 0x70
 800f9a8:	e02d      	b.n	800fa06 <HAL_RCC_OscConfig+0x376>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	689b      	ldr	r3, [r3, #8]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d10c      	bne.n	800f9cc <HAL_RCC_OscConfig+0x33c>
 800f9b2:	4b6a      	ldr	r3, [pc, #424]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f9b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9b6:	4a69      	ldr	r2, [pc, #420]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f9b8:	f023 0301 	bic.w	r3, r3, #1
 800f9bc:	6713      	str	r3, [r2, #112]	@ 0x70
 800f9be:	4b67      	ldr	r3, [pc, #412]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f9c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9c2:	4a66      	ldr	r2, [pc, #408]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f9c4:	f023 0304 	bic.w	r3, r3, #4
 800f9c8:	6713      	str	r3, [r2, #112]	@ 0x70
 800f9ca:	e01c      	b.n	800fa06 <HAL_RCC_OscConfig+0x376>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	689b      	ldr	r3, [r3, #8]
 800f9d0:	2b05      	cmp	r3, #5
 800f9d2:	d10c      	bne.n	800f9ee <HAL_RCC_OscConfig+0x35e>
 800f9d4:	4b61      	ldr	r3, [pc, #388]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f9d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9d8:	4a60      	ldr	r2, [pc, #384]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f9da:	f043 0304 	orr.w	r3, r3, #4
 800f9de:	6713      	str	r3, [r2, #112]	@ 0x70
 800f9e0:	4b5e      	ldr	r3, [pc, #376]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f9e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9e4:	4a5d      	ldr	r2, [pc, #372]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f9e6:	f043 0301 	orr.w	r3, r3, #1
 800f9ea:	6713      	str	r3, [r2, #112]	@ 0x70
 800f9ec:	e00b      	b.n	800fa06 <HAL_RCC_OscConfig+0x376>
 800f9ee:	4b5b      	ldr	r3, [pc, #364]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f9f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9f2:	4a5a      	ldr	r2, [pc, #360]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f9f4:	f023 0301 	bic.w	r3, r3, #1
 800f9f8:	6713      	str	r3, [r2, #112]	@ 0x70
 800f9fa:	4b58      	ldr	r3, [pc, #352]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800f9fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9fe:	4a57      	ldr	r2, [pc, #348]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fa00:	f023 0304 	bic.w	r3, r3, #4
 800fa04:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	689b      	ldr	r3, [r3, #8]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d015      	beq.n	800fa3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa0e:	f7f7 fa0f 	bl	8006e30 <HAL_GetTick>
 800fa12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fa14:	e00a      	b.n	800fa2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa16:	f7f7 fa0b 	bl	8006e30 <HAL_GetTick>
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	1ad3      	subs	r3, r2, r3
 800fa20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d901      	bls.n	800fa2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800fa28:	2303      	movs	r3, #3
 800fa2a:	e0ce      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fa2c:	4b4b      	ldr	r3, [pc, #300]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fa2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa30:	f003 0302 	and.w	r3, r3, #2
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d0ee      	beq.n	800fa16 <HAL_RCC_OscConfig+0x386>
 800fa38:	e014      	b.n	800fa64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa3a:	f7f7 f9f9 	bl	8006e30 <HAL_GetTick>
 800fa3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fa40:	e00a      	b.n	800fa58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa42:	f7f7 f9f5 	bl	8006e30 <HAL_GetTick>
 800fa46:	4602      	mov	r2, r0
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	1ad3      	subs	r3, r2, r3
 800fa4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d901      	bls.n	800fa58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800fa54:	2303      	movs	r3, #3
 800fa56:	e0b8      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fa58:	4b40      	ldr	r3, [pc, #256]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fa5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa5c:	f003 0302 	and.w	r3, r3, #2
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d1ee      	bne.n	800fa42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800fa64:	7dfb      	ldrb	r3, [r7, #23]
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d105      	bne.n	800fa76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fa6a:	4b3c      	ldr	r3, [pc, #240]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fa6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa6e:	4a3b      	ldr	r2, [pc, #236]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fa70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fa74:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	699b      	ldr	r3, [r3, #24]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	f000 80a4 	beq.w	800fbc8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fa80:	4b36      	ldr	r3, [pc, #216]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fa82:	689b      	ldr	r3, [r3, #8]
 800fa84:	f003 030c 	and.w	r3, r3, #12
 800fa88:	2b08      	cmp	r3, #8
 800fa8a:	d06b      	beq.n	800fb64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	699b      	ldr	r3, [r3, #24]
 800fa90:	2b02      	cmp	r3, #2
 800fa92:	d149      	bne.n	800fb28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fa94:	4b31      	ldr	r3, [pc, #196]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a30      	ldr	r2, [pc, #192]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fa9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fa9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800faa0:	f7f7 f9c6 	bl	8006e30 <HAL_GetTick>
 800faa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800faa6:	e008      	b.n	800faba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800faa8:	f7f7 f9c2 	bl	8006e30 <HAL_GetTick>
 800faac:	4602      	mov	r2, r0
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	1ad3      	subs	r3, r2, r3
 800fab2:	2b02      	cmp	r3, #2
 800fab4:	d901      	bls.n	800faba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800fab6:	2303      	movs	r3, #3
 800fab8:	e087      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800faba:	4b28      	ldr	r3, [pc, #160]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d1f0      	bne.n	800faa8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	69da      	ldr	r2, [r3, #28]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a1b      	ldr	r3, [r3, #32]
 800face:	431a      	orrs	r2, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fad4:	019b      	lsls	r3, r3, #6
 800fad6:	431a      	orrs	r2, r3
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fadc:	085b      	lsrs	r3, r3, #1
 800fade:	3b01      	subs	r3, #1
 800fae0:	041b      	lsls	r3, r3, #16
 800fae2:	431a      	orrs	r2, r3
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fae8:	061b      	lsls	r3, r3, #24
 800faea:	4313      	orrs	r3, r2
 800faec:	4a1b      	ldr	r2, [pc, #108]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800faee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800faf2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800faf4:	4b19      	ldr	r3, [pc, #100]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4a18      	ldr	r2, [pc, #96]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fafa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fafe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb00:	f7f7 f996 	bl	8006e30 <HAL_GetTick>
 800fb04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fb06:	e008      	b.n	800fb1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fb08:	f7f7 f992 	bl	8006e30 <HAL_GetTick>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	2b02      	cmp	r3, #2
 800fb14:	d901      	bls.n	800fb1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800fb16:	2303      	movs	r3, #3
 800fb18:	e057      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fb1a:	4b10      	ldr	r3, [pc, #64]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d0f0      	beq.n	800fb08 <HAL_RCC_OscConfig+0x478>
 800fb26:	e04f      	b.n	800fbc8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fb28:	4b0c      	ldr	r3, [pc, #48]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	4a0b      	ldr	r2, [pc, #44]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fb2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fb32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb34:	f7f7 f97c 	bl	8006e30 <HAL_GetTick>
 800fb38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fb3a:	e008      	b.n	800fb4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fb3c:	f7f7 f978 	bl	8006e30 <HAL_GetTick>
 800fb40:	4602      	mov	r2, r0
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	1ad3      	subs	r3, r2, r3
 800fb46:	2b02      	cmp	r3, #2
 800fb48:	d901      	bls.n	800fb4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800fb4a:	2303      	movs	r3, #3
 800fb4c:	e03d      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fb4e:	4b03      	ldr	r3, [pc, #12]	@ (800fb5c <HAL_RCC_OscConfig+0x4cc>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d1f0      	bne.n	800fb3c <HAL_RCC_OscConfig+0x4ac>
 800fb5a:	e035      	b.n	800fbc8 <HAL_RCC_OscConfig+0x538>
 800fb5c:	40023800 	.word	0x40023800
 800fb60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800fb64:	4b1b      	ldr	r3, [pc, #108]	@ (800fbd4 <HAL_RCC_OscConfig+0x544>)
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	699b      	ldr	r3, [r3, #24]
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	d028      	beq.n	800fbc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d121      	bne.n	800fbc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d11a      	bne.n	800fbc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800fb94:	4013      	ands	r3, r2
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800fb9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d111      	bne.n	800fbc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbaa:	085b      	lsrs	r3, r3, #1
 800fbac:	3b01      	subs	r3, #1
 800fbae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d107      	bne.n	800fbc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d001      	beq.n	800fbc8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	e000      	b.n	800fbca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800fbc8:	2300      	movs	r3, #0
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3718      	adds	r7, #24
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	40023800 	.word	0x40023800

0800fbd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d101      	bne.n	800fbf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800fbec:	2301      	movs	r3, #1
 800fbee:	e0d0      	b.n	800fd92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fbf0:	4b6a      	ldr	r3, [pc, #424]	@ (800fd9c <HAL_RCC_ClockConfig+0x1c4>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f003 030f 	and.w	r3, r3, #15
 800fbf8:	683a      	ldr	r2, [r7, #0]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d910      	bls.n	800fc20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fbfe:	4b67      	ldr	r3, [pc, #412]	@ (800fd9c <HAL_RCC_ClockConfig+0x1c4>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f023 020f 	bic.w	r2, r3, #15
 800fc06:	4965      	ldr	r1, [pc, #404]	@ (800fd9c <HAL_RCC_ClockConfig+0x1c4>)
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	4313      	orrs	r3, r2
 800fc0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc0e:	4b63      	ldr	r3, [pc, #396]	@ (800fd9c <HAL_RCC_ClockConfig+0x1c4>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f003 030f 	and.w	r3, r3, #15
 800fc16:	683a      	ldr	r2, [r7, #0]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d001      	beq.n	800fc20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	e0b8      	b.n	800fd92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f003 0302 	and.w	r3, r3, #2
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d020      	beq.n	800fc6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	f003 0304 	and.w	r3, r3, #4
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d005      	beq.n	800fc44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fc38:	4b59      	ldr	r3, [pc, #356]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fc3a:	689b      	ldr	r3, [r3, #8]
 800fc3c:	4a58      	ldr	r2, [pc, #352]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fc3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800fc42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	f003 0308 	and.w	r3, r3, #8
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d005      	beq.n	800fc5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800fc50:	4b53      	ldr	r3, [pc, #332]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fc52:	689b      	ldr	r3, [r3, #8]
 800fc54:	4a52      	ldr	r2, [pc, #328]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fc56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800fc5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fc5c:	4b50      	ldr	r3, [pc, #320]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	689b      	ldr	r3, [r3, #8]
 800fc68:	494d      	ldr	r1, [pc, #308]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fc6a:	4313      	orrs	r3, r2
 800fc6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f003 0301 	and.w	r3, r3, #1
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d040      	beq.n	800fcfc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d107      	bne.n	800fc92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fc82:	4b47      	ldr	r3, [pc, #284]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d115      	bne.n	800fcba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e07f      	b.n	800fd92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	2b02      	cmp	r3, #2
 800fc98:	d107      	bne.n	800fcaa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fc9a:	4b41      	ldr	r3, [pc, #260]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d109      	bne.n	800fcba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800fca6:	2301      	movs	r3, #1
 800fca8:	e073      	b.n	800fd92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fcaa:	4b3d      	ldr	r3, [pc, #244]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f003 0302 	and.w	r3, r3, #2
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d101      	bne.n	800fcba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e06b      	b.n	800fd92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800fcba:	4b39      	ldr	r3, [pc, #228]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	f023 0203 	bic.w	r2, r3, #3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	4936      	ldr	r1, [pc, #216]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fccc:	f7f7 f8b0 	bl	8006e30 <HAL_GetTick>
 800fcd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fcd2:	e00a      	b.n	800fcea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fcd4:	f7f7 f8ac 	bl	8006e30 <HAL_GetTick>
 800fcd8:	4602      	mov	r2, r0
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	1ad3      	subs	r3, r2, r3
 800fcde:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d901      	bls.n	800fcea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800fce6:	2303      	movs	r3, #3
 800fce8:	e053      	b.n	800fd92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fcea:	4b2d      	ldr	r3, [pc, #180]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fcec:	689b      	ldr	r3, [r3, #8]
 800fcee:	f003 020c 	and.w	r2, r3, #12
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	009b      	lsls	r3, r3, #2
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d1eb      	bne.n	800fcd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fcfc:	4b27      	ldr	r3, [pc, #156]	@ (800fd9c <HAL_RCC_ClockConfig+0x1c4>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f003 030f 	and.w	r3, r3, #15
 800fd04:	683a      	ldr	r2, [r7, #0]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d210      	bcs.n	800fd2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fd0a:	4b24      	ldr	r3, [pc, #144]	@ (800fd9c <HAL_RCC_ClockConfig+0x1c4>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f023 020f 	bic.w	r2, r3, #15
 800fd12:	4922      	ldr	r1, [pc, #136]	@ (800fd9c <HAL_RCC_ClockConfig+0x1c4>)
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	4313      	orrs	r3, r2
 800fd18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fd1a:	4b20      	ldr	r3, [pc, #128]	@ (800fd9c <HAL_RCC_ClockConfig+0x1c4>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f003 030f 	and.w	r3, r3, #15
 800fd22:	683a      	ldr	r2, [r7, #0]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d001      	beq.n	800fd2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800fd28:	2301      	movs	r3, #1
 800fd2a:	e032      	b.n	800fd92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f003 0304 	and.w	r3, r3, #4
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d008      	beq.n	800fd4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fd38:	4b19      	ldr	r3, [pc, #100]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fd3a:	689b      	ldr	r3, [r3, #8]
 800fd3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	68db      	ldr	r3, [r3, #12]
 800fd44:	4916      	ldr	r1, [pc, #88]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fd46:	4313      	orrs	r3, r2
 800fd48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f003 0308 	and.w	r3, r3, #8
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d009      	beq.n	800fd6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800fd56:	4b12      	ldr	r3, [pc, #72]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fd58:	689b      	ldr	r3, [r3, #8]
 800fd5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	691b      	ldr	r3, [r3, #16]
 800fd62:	00db      	lsls	r3, r3, #3
 800fd64:	490e      	ldr	r1, [pc, #56]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fd66:	4313      	orrs	r3, r2
 800fd68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800fd6a:	f000 f821 	bl	800fdb0 <HAL_RCC_GetSysClockFreq>
 800fd6e:	4602      	mov	r2, r0
 800fd70:	4b0b      	ldr	r3, [pc, #44]	@ (800fda0 <HAL_RCC_ClockConfig+0x1c8>)
 800fd72:	689b      	ldr	r3, [r3, #8]
 800fd74:	091b      	lsrs	r3, r3, #4
 800fd76:	f003 030f 	and.w	r3, r3, #15
 800fd7a:	490a      	ldr	r1, [pc, #40]	@ (800fda4 <HAL_RCC_ClockConfig+0x1cc>)
 800fd7c:	5ccb      	ldrb	r3, [r1, r3]
 800fd7e:	fa22 f303 	lsr.w	r3, r2, r3
 800fd82:	4a09      	ldr	r2, [pc, #36]	@ (800fda8 <HAL_RCC_ClockConfig+0x1d0>)
 800fd84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800fd86:	4b09      	ldr	r3, [pc, #36]	@ (800fdac <HAL_RCC_ClockConfig+0x1d4>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7f3 fde8 	bl	8003960 <HAL_InitTick>

  return HAL_OK;
 800fd90:	2300      	movs	r3, #0
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	40023c00 	.word	0x40023c00
 800fda0:	40023800 	.word	0x40023800
 800fda4:	0802b6ec 	.word	0x0802b6ec
 800fda8:	20010000 	.word	0x20010000
 800fdac:	20010060 	.word	0x20010060

0800fdb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fdb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fdb4:	b090      	sub	sp, #64	@ 0x40
 800fdb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	637b      	str	r3, [r7, #52]	@ 0x34
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fdc8:	4b59      	ldr	r3, [pc, #356]	@ (800ff30 <HAL_RCC_GetSysClockFreq+0x180>)
 800fdca:	689b      	ldr	r3, [r3, #8]
 800fdcc:	f003 030c 	and.w	r3, r3, #12
 800fdd0:	2b08      	cmp	r3, #8
 800fdd2:	d00d      	beq.n	800fdf0 <HAL_RCC_GetSysClockFreq+0x40>
 800fdd4:	2b08      	cmp	r3, #8
 800fdd6:	f200 80a1 	bhi.w	800ff1c <HAL_RCC_GetSysClockFreq+0x16c>
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d002      	beq.n	800fde4 <HAL_RCC_GetSysClockFreq+0x34>
 800fdde:	2b04      	cmp	r3, #4
 800fde0:	d003      	beq.n	800fdea <HAL_RCC_GetSysClockFreq+0x3a>
 800fde2:	e09b      	b.n	800ff1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fde4:	4b53      	ldr	r3, [pc, #332]	@ (800ff34 <HAL_RCC_GetSysClockFreq+0x184>)
 800fde6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800fde8:	e09b      	b.n	800ff22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800fdea:	4b53      	ldr	r3, [pc, #332]	@ (800ff38 <HAL_RCC_GetSysClockFreq+0x188>)
 800fdec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800fdee:	e098      	b.n	800ff22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fdf0:	4b4f      	ldr	r3, [pc, #316]	@ (800ff30 <HAL_RCC_GetSysClockFreq+0x180>)
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fdf8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800fdfa:	4b4d      	ldr	r3, [pc, #308]	@ (800ff30 <HAL_RCC_GetSysClockFreq+0x180>)
 800fdfc:	685b      	ldr	r3, [r3, #4]
 800fdfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d028      	beq.n	800fe58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fe06:	4b4a      	ldr	r3, [pc, #296]	@ (800ff30 <HAL_RCC_GetSysClockFreq+0x180>)
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	099b      	lsrs	r3, r3, #6
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	623b      	str	r3, [r7, #32]
 800fe10:	627a      	str	r2, [r7, #36]	@ 0x24
 800fe12:	6a3b      	ldr	r3, [r7, #32]
 800fe14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800fe18:	2100      	movs	r1, #0
 800fe1a:	4b47      	ldr	r3, [pc, #284]	@ (800ff38 <HAL_RCC_GetSysClockFreq+0x188>)
 800fe1c:	fb03 f201 	mul.w	r2, r3, r1
 800fe20:	2300      	movs	r3, #0
 800fe22:	fb00 f303 	mul.w	r3, r0, r3
 800fe26:	4413      	add	r3, r2
 800fe28:	4a43      	ldr	r2, [pc, #268]	@ (800ff38 <HAL_RCC_GetSysClockFreq+0x188>)
 800fe2a:	fba0 1202 	umull	r1, r2, r0, r2
 800fe2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fe30:	460a      	mov	r2, r1
 800fe32:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fe34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe36:	4413      	add	r3, r2
 800fe38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	61bb      	str	r3, [r7, #24]
 800fe40:	61fa      	str	r2, [r7, #28]
 800fe42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fe46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800fe4a:	f7f0 ff1d 	bl	8000c88 <__aeabi_uldivmod>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	460b      	mov	r3, r1
 800fe52:	4613      	mov	r3, r2
 800fe54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe56:	e053      	b.n	800ff00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fe58:	4b35      	ldr	r3, [pc, #212]	@ (800ff30 <HAL_RCC_GetSysClockFreq+0x180>)
 800fe5a:	685b      	ldr	r3, [r3, #4]
 800fe5c:	099b      	lsrs	r3, r3, #6
 800fe5e:	2200      	movs	r2, #0
 800fe60:	613b      	str	r3, [r7, #16]
 800fe62:	617a      	str	r2, [r7, #20]
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800fe6a:	f04f 0b00 	mov.w	fp, #0
 800fe6e:	4652      	mov	r2, sl
 800fe70:	465b      	mov	r3, fp
 800fe72:	f04f 0000 	mov.w	r0, #0
 800fe76:	f04f 0100 	mov.w	r1, #0
 800fe7a:	0159      	lsls	r1, r3, #5
 800fe7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fe80:	0150      	lsls	r0, r2, #5
 800fe82:	4602      	mov	r2, r0
 800fe84:	460b      	mov	r3, r1
 800fe86:	ebb2 080a 	subs.w	r8, r2, sl
 800fe8a:	eb63 090b 	sbc.w	r9, r3, fp
 800fe8e:	f04f 0200 	mov.w	r2, #0
 800fe92:	f04f 0300 	mov.w	r3, #0
 800fe96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800fe9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800fe9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800fea2:	ebb2 0408 	subs.w	r4, r2, r8
 800fea6:	eb63 0509 	sbc.w	r5, r3, r9
 800feaa:	f04f 0200 	mov.w	r2, #0
 800feae:	f04f 0300 	mov.w	r3, #0
 800feb2:	00eb      	lsls	r3, r5, #3
 800feb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800feb8:	00e2      	lsls	r2, r4, #3
 800feba:	4614      	mov	r4, r2
 800febc:	461d      	mov	r5, r3
 800febe:	eb14 030a 	adds.w	r3, r4, sl
 800fec2:	603b      	str	r3, [r7, #0]
 800fec4:	eb45 030b 	adc.w	r3, r5, fp
 800fec8:	607b      	str	r3, [r7, #4]
 800feca:	f04f 0200 	mov.w	r2, #0
 800fece:	f04f 0300 	mov.w	r3, #0
 800fed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800fed6:	4629      	mov	r1, r5
 800fed8:	028b      	lsls	r3, r1, #10
 800feda:	4621      	mov	r1, r4
 800fedc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800fee0:	4621      	mov	r1, r4
 800fee2:	028a      	lsls	r2, r1, #10
 800fee4:	4610      	mov	r0, r2
 800fee6:	4619      	mov	r1, r3
 800fee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800feea:	2200      	movs	r2, #0
 800feec:	60bb      	str	r3, [r7, #8]
 800feee:	60fa      	str	r2, [r7, #12]
 800fef0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fef4:	f7f0 fec8 	bl	8000c88 <__aeabi_uldivmod>
 800fef8:	4602      	mov	r2, r0
 800fefa:	460b      	mov	r3, r1
 800fefc:	4613      	mov	r3, r2
 800fefe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ff00:	4b0b      	ldr	r3, [pc, #44]	@ (800ff30 <HAL_RCC_GetSysClockFreq+0x180>)
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	0c1b      	lsrs	r3, r3, #16
 800ff06:	f003 0303 	and.w	r3, r3, #3
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	005b      	lsls	r3, r3, #1
 800ff0e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ff10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ff12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ff1a:	e002      	b.n	800ff22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ff1c:	4b05      	ldr	r3, [pc, #20]	@ (800ff34 <HAL_RCC_GetSysClockFreq+0x184>)
 800ff1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ff20:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ff22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	3740      	adds	r7, #64	@ 0x40
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ff2e:	bf00      	nop
 800ff30:	40023800 	.word	0x40023800
 800ff34:	00f42400 	.word	0x00f42400
 800ff38:	017d7840 	.word	0x017d7840

0800ff3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ff40:	4b03      	ldr	r3, [pc, #12]	@ (800ff50 <HAL_RCC_GetHCLKFreq+0x14>)
 800ff42:	681b      	ldr	r3, [r3, #0]
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	20010000 	.word	0x20010000

0800ff54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ff58:	f7ff fff0 	bl	800ff3c <HAL_RCC_GetHCLKFreq>
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	4b05      	ldr	r3, [pc, #20]	@ (800ff74 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ff60:	689b      	ldr	r3, [r3, #8]
 800ff62:	0a9b      	lsrs	r3, r3, #10
 800ff64:	f003 0307 	and.w	r3, r3, #7
 800ff68:	4903      	ldr	r1, [pc, #12]	@ (800ff78 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ff6a:	5ccb      	ldrb	r3, [r1, r3]
 800ff6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	40023800 	.word	0x40023800
 800ff78:	0802b6fc 	.word	0x0802b6fc

0800ff7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ff80:	f7ff ffdc 	bl	800ff3c <HAL_RCC_GetHCLKFreq>
 800ff84:	4602      	mov	r2, r0
 800ff86:	4b05      	ldr	r3, [pc, #20]	@ (800ff9c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ff88:	689b      	ldr	r3, [r3, #8]
 800ff8a:	0b5b      	lsrs	r3, r3, #13
 800ff8c:	f003 0307 	and.w	r3, r3, #7
 800ff90:	4903      	ldr	r1, [pc, #12]	@ (800ffa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ff92:	5ccb      	ldrb	r3, [r1, r3]
 800ff94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	40023800 	.word	0x40023800
 800ffa0:	0802b6fc 	.word	0x0802b6fc

0800ffa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b083      	sub	sp, #12
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	220f      	movs	r2, #15
 800ffb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ffb4:	4b12      	ldr	r3, [pc, #72]	@ (8010000 <HAL_RCC_GetClockConfig+0x5c>)
 800ffb6:	689b      	ldr	r3, [r3, #8]
 800ffb8:	f003 0203 	and.w	r2, r3, #3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ffc0:	4b0f      	ldr	r3, [pc, #60]	@ (8010000 <HAL_RCC_GetClockConfig+0x5c>)
 800ffc2:	689b      	ldr	r3, [r3, #8]
 800ffc4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ffcc:	4b0c      	ldr	r3, [pc, #48]	@ (8010000 <HAL_RCC_GetClockConfig+0x5c>)
 800ffce:	689b      	ldr	r3, [r3, #8]
 800ffd0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ffd8:	4b09      	ldr	r3, [pc, #36]	@ (8010000 <HAL_RCC_GetClockConfig+0x5c>)
 800ffda:	689b      	ldr	r3, [r3, #8]
 800ffdc:	08db      	lsrs	r3, r3, #3
 800ffde:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ffe6:	4b07      	ldr	r3, [pc, #28]	@ (8010004 <HAL_RCC_GetClockConfig+0x60>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f003 020f 	and.w	r2, r3, #15
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	601a      	str	r2, [r3, #0]
}
 800fff2:	bf00      	nop
 800fff4:	370c      	adds	r7, #12
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop
 8010000:	40023800 	.word	0x40023800
 8010004:	40023c00 	.word	0x40023c00

08010008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b088      	sub	sp, #32
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8010010:	2300      	movs	r3, #0
 8010012:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8010014:	2300      	movs	r3, #0
 8010016:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8010018:	2300      	movs	r3, #0
 801001a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801001c:	2300      	movs	r3, #0
 801001e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8010020:	2300      	movs	r3, #0
 8010022:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f003 0301 	and.w	r3, r3, #1
 801002c:	2b00      	cmp	r3, #0
 801002e:	d012      	beq.n	8010056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8010030:	4b69      	ldr	r3, [pc, #420]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010032:	689b      	ldr	r3, [r3, #8]
 8010034:	4a68      	ldr	r2, [pc, #416]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010036:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801003a:	6093      	str	r3, [r2, #8]
 801003c:	4b66      	ldr	r3, [pc, #408]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801003e:	689a      	ldr	r2, [r3, #8]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010044:	4964      	ldr	r1, [pc, #400]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010046:	4313      	orrs	r3, r2
 8010048:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801004e:	2b00      	cmp	r3, #0
 8010050:	d101      	bne.n	8010056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8010052:	2301      	movs	r3, #1
 8010054:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801005e:	2b00      	cmp	r3, #0
 8010060:	d017      	beq.n	8010092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010062:	4b5d      	ldr	r3, [pc, #372]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010068:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010070:	4959      	ldr	r1, [pc, #356]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010072:	4313      	orrs	r3, r2
 8010074:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801007c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010080:	d101      	bne.n	8010086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8010082:	2301      	movs	r3, #1
 8010084:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801008a:	2b00      	cmp	r3, #0
 801008c:	d101      	bne.n	8010092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801008e:	2301      	movs	r3, #1
 8010090:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801009a:	2b00      	cmp	r3, #0
 801009c:	d017      	beq.n	80100ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801009e:	4b4e      	ldr	r3, [pc, #312]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80100a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80100a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100ac:	494a      	ldr	r1, [pc, #296]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80100ae:	4313      	orrs	r3, r2
 80100b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80100bc:	d101      	bne.n	80100c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80100be:	2301      	movs	r3, #1
 80100c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d101      	bne.n	80100ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80100ca:	2301      	movs	r3, #1
 80100cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d001      	beq.n	80100de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80100da:	2301      	movs	r3, #1
 80100dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f003 0320 	and.w	r3, r3, #32
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	f000 808b 	beq.w	8010202 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80100ec:	4b3a      	ldr	r3, [pc, #232]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80100ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100f0:	4a39      	ldr	r2, [pc, #228]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80100f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80100f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80100f8:	4b37      	ldr	r3, [pc, #220]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80100fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010100:	60bb      	str	r3, [r7, #8]
 8010102:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010104:	4b35      	ldr	r3, [pc, #212]	@ (80101dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a34      	ldr	r2, [pc, #208]	@ (80101dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801010a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801010e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010110:	f7f6 fe8e 	bl	8006e30 <HAL_GetTick>
 8010114:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8010116:	e008      	b.n	801012a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010118:	f7f6 fe8a 	bl	8006e30 <HAL_GetTick>
 801011c:	4602      	mov	r2, r0
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	1ad3      	subs	r3, r2, r3
 8010122:	2b64      	cmp	r3, #100	@ 0x64
 8010124:	d901      	bls.n	801012a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8010126:	2303      	movs	r3, #3
 8010128:	e357      	b.n	80107da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801012a:	4b2c      	ldr	r3, [pc, #176]	@ (80101dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010132:	2b00      	cmp	r3, #0
 8010134:	d0f0      	beq.n	8010118 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8010136:	4b28      	ldr	r3, [pc, #160]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801013a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801013e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d035      	beq.n	80101b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801014a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801014e:	693a      	ldr	r2, [r7, #16]
 8010150:	429a      	cmp	r2, r3
 8010152:	d02e      	beq.n	80101b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010154:	4b20      	ldr	r3, [pc, #128]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010158:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801015c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801015e:	4b1e      	ldr	r3, [pc, #120]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010162:	4a1d      	ldr	r2, [pc, #116]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010168:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801016a:	4b1b      	ldr	r3, [pc, #108]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801016c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801016e:	4a1a      	ldr	r2, [pc, #104]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010174:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8010176:	4a18      	ldr	r2, [pc, #96]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801017c:	4b16      	ldr	r3, [pc, #88]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801017e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010180:	f003 0301 	and.w	r3, r3, #1
 8010184:	2b01      	cmp	r3, #1
 8010186:	d114      	bne.n	80101b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010188:	f7f6 fe52 	bl	8006e30 <HAL_GetTick>
 801018c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801018e:	e00a      	b.n	80101a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010190:	f7f6 fe4e 	bl	8006e30 <HAL_GetTick>
 8010194:	4602      	mov	r2, r0
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	1ad3      	subs	r3, r2, r3
 801019a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801019e:	4293      	cmp	r3, r2
 80101a0:	d901      	bls.n	80101a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80101a2:	2303      	movs	r3, #3
 80101a4:	e319      	b.n	80107da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80101a6:	4b0c      	ldr	r3, [pc, #48]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80101a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101aa:	f003 0302 	and.w	r3, r3, #2
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d0ee      	beq.n	8010190 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80101ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80101be:	d111      	bne.n	80101e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80101c0:	4b05      	ldr	r3, [pc, #20]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80101c2:	689b      	ldr	r3, [r3, #8]
 80101c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80101cc:	4b04      	ldr	r3, [pc, #16]	@ (80101e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80101ce:	400b      	ands	r3, r1
 80101d0:	4901      	ldr	r1, [pc, #4]	@ (80101d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80101d2:	4313      	orrs	r3, r2
 80101d4:	608b      	str	r3, [r1, #8]
 80101d6:	e00b      	b.n	80101f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80101d8:	40023800 	.word	0x40023800
 80101dc:	40007000 	.word	0x40007000
 80101e0:	0ffffcff 	.word	0x0ffffcff
 80101e4:	4baa      	ldr	r3, [pc, #680]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80101e6:	689b      	ldr	r3, [r3, #8]
 80101e8:	4aa9      	ldr	r2, [pc, #676]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80101ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80101ee:	6093      	str	r3, [r2, #8]
 80101f0:	4ba7      	ldr	r3, [pc, #668]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80101f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80101fc:	49a4      	ldr	r1, [pc, #656]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80101fe:	4313      	orrs	r3, r2
 8010200:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f003 0310 	and.w	r3, r3, #16
 801020a:	2b00      	cmp	r3, #0
 801020c:	d010      	beq.n	8010230 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801020e:	4ba0      	ldr	r3, [pc, #640]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010214:	4a9e      	ldr	r2, [pc, #632]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010216:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801021a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 801021e:	4b9c      	ldr	r3, [pc, #624]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010220:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010228:	4999      	ldr	r1, [pc, #612]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801022a:	4313      	orrs	r3, r2
 801022c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010238:	2b00      	cmp	r3, #0
 801023a:	d00a      	beq.n	8010252 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801023c:	4b94      	ldr	r3, [pc, #592]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801023e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010242:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801024a:	4991      	ldr	r1, [pc, #580]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801024c:	4313      	orrs	r3, r2
 801024e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00a      	beq.n	8010274 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801025e:	4b8c      	ldr	r3, [pc, #560]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010264:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801026c:	4988      	ldr	r1, [pc, #544]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801026e:	4313      	orrs	r3, r2
 8010270:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801027c:	2b00      	cmp	r3, #0
 801027e:	d00a      	beq.n	8010296 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010280:	4b83      	ldr	r3, [pc, #524]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010286:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801028e:	4980      	ldr	r1, [pc, #512]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010290:	4313      	orrs	r3, r2
 8010292:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d00a      	beq.n	80102b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80102a2:	4b7b      	ldr	r3, [pc, #492]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80102a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80102b0:	4977      	ldr	r1, [pc, #476]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80102b2:	4313      	orrs	r3, r2
 80102b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d00a      	beq.n	80102da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80102c4:	4b72      	ldr	r3, [pc, #456]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80102c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102ca:	f023 0203 	bic.w	r2, r3, #3
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102d2:	496f      	ldr	r1, [pc, #444]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80102d4:	4313      	orrs	r3, r2
 80102d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d00a      	beq.n	80102fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80102e6:	4b6a      	ldr	r3, [pc, #424]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80102e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102ec:	f023 020c 	bic.w	r2, r3, #12
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80102f4:	4966      	ldr	r1, [pc, #408]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80102f6:	4313      	orrs	r3, r2
 80102f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00a      	beq.n	801031e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010308:	4b61      	ldr	r3, [pc, #388]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801030a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801030e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010316:	495e      	ldr	r1, [pc, #376]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010318:	4313      	orrs	r3, r2
 801031a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00a      	beq.n	8010340 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801032a:	4b59      	ldr	r3, [pc, #356]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801032c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010330:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010338:	4955      	ldr	r1, [pc, #340]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801033a:	4313      	orrs	r3, r2
 801033c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00a      	beq.n	8010362 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801034c:	4b50      	ldr	r3, [pc, #320]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801034e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010352:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801035a:	494d      	ldr	r1, [pc, #308]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801035c:	4313      	orrs	r3, r2
 801035e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801036a:	2b00      	cmp	r3, #0
 801036c:	d00a      	beq.n	8010384 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801036e:	4b48      	ldr	r3, [pc, #288]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010374:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801037c:	4944      	ldr	r1, [pc, #272]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801037e:	4313      	orrs	r3, r2
 8010380:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00a      	beq.n	80103a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8010390:	4b3f      	ldr	r3, [pc, #252]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010396:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801039e:	493c      	ldr	r1, [pc, #240]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80103a0:	4313      	orrs	r3, r2
 80103a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d00a      	beq.n	80103c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80103b2:	4b37      	ldr	r3, [pc, #220]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80103b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80103c0:	4933      	ldr	r1, [pc, #204]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80103c2:	4313      	orrs	r3, r2
 80103c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00a      	beq.n	80103ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80103d4:	4b2e      	ldr	r3, [pc, #184]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80103d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103e2:	492b      	ldr	r1, [pc, #172]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80103e4:	4313      	orrs	r3, r2
 80103e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d011      	beq.n	801041a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80103f6:	4b26      	ldr	r3, [pc, #152]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80103f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103fc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010404:	4922      	ldr	r1, [pc, #136]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010406:	4313      	orrs	r3, r2
 8010408:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010410:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010414:	d101      	bne.n	801041a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8010416:	2301      	movs	r3, #1
 8010418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	f003 0308 	and.w	r3, r3, #8
 8010422:	2b00      	cmp	r3, #0
 8010424:	d001      	beq.n	801042a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8010426:	2301      	movs	r3, #1
 8010428:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00a      	beq.n	801044c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010436:	4b16      	ldr	r3, [pc, #88]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801043c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010444:	4912      	ldr	r1, [pc, #72]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010446:	4313      	orrs	r3, r2
 8010448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010454:	2b00      	cmp	r3, #0
 8010456:	d00b      	beq.n	8010470 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8010458:	4b0d      	ldr	r3, [pc, #52]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801045a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801045e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010468:	4909      	ldr	r1, [pc, #36]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801046a:	4313      	orrs	r3, r2
 801046c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8010470:	69fb      	ldr	r3, [r7, #28]
 8010472:	2b01      	cmp	r3, #1
 8010474:	d006      	beq.n	8010484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801047e:	2b00      	cmp	r3, #0
 8010480:	f000 80d9 	beq.w	8010636 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8010484:	4b02      	ldr	r3, [pc, #8]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4a01      	ldr	r2, [pc, #4]	@ (8010490 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801048a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801048e:	e001      	b.n	8010494 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8010490:	40023800 	.word	0x40023800
 8010494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010496:	f7f6 fccb 	bl	8006e30 <HAL_GetTick>
 801049a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801049c:	e008      	b.n	80104b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801049e:	f7f6 fcc7 	bl	8006e30 <HAL_GetTick>
 80104a2:	4602      	mov	r2, r0
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	1ad3      	subs	r3, r2, r3
 80104a8:	2b64      	cmp	r3, #100	@ 0x64
 80104aa:	d901      	bls.n	80104b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80104ac:	2303      	movs	r3, #3
 80104ae:	e194      	b.n	80107da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80104b0:	4b6c      	ldr	r3, [pc, #432]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1f0      	bne.n	801049e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f003 0301 	and.w	r3, r3, #1
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d021      	beq.n	801050c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d11d      	bne.n	801050c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80104d0:	4b64      	ldr	r3, [pc, #400]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80104d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80104d6:	0c1b      	lsrs	r3, r3, #16
 80104d8:	f003 0303 	and.w	r3, r3, #3
 80104dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80104de:	4b61      	ldr	r3, [pc, #388]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80104e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80104e4:	0e1b      	lsrs	r3, r3, #24
 80104e6:	f003 030f 	and.w	r3, r3, #15
 80104ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	019a      	lsls	r2, r3, #6
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	041b      	lsls	r3, r3, #16
 80104f6:	431a      	orrs	r2, r3
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	061b      	lsls	r3, r3, #24
 80104fc:	431a      	orrs	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	689b      	ldr	r3, [r3, #8]
 8010502:	071b      	lsls	r3, r3, #28
 8010504:	4957      	ldr	r1, [pc, #348]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8010506:	4313      	orrs	r3, r2
 8010508:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010514:	2b00      	cmp	r3, #0
 8010516:	d004      	beq.n	8010522 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801051c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010520:	d00a      	beq.n	8010538 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801052a:	2b00      	cmp	r3, #0
 801052c:	d02e      	beq.n	801058c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010532:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010536:	d129      	bne.n	801058c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8010538:	4b4a      	ldr	r3, [pc, #296]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801053a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801053e:	0c1b      	lsrs	r3, r3, #16
 8010540:	f003 0303 	and.w	r3, r3, #3
 8010544:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8010546:	4b47      	ldr	r3, [pc, #284]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8010548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801054c:	0f1b      	lsrs	r3, r3, #28
 801054e:	f003 0307 	and.w	r3, r3, #7
 8010552:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	019a      	lsls	r2, r3, #6
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	041b      	lsls	r3, r3, #16
 801055e:	431a      	orrs	r2, r3
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	061b      	lsls	r3, r3, #24
 8010566:	431a      	orrs	r2, r3
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	071b      	lsls	r3, r3, #28
 801056c:	493d      	ldr	r1, [pc, #244]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801056e:	4313      	orrs	r3, r2
 8010570:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8010574:	4b3b      	ldr	r3, [pc, #236]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8010576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801057a:	f023 021f 	bic.w	r2, r3, #31
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010582:	3b01      	subs	r3, #1
 8010584:	4937      	ldr	r1, [pc, #220]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8010586:	4313      	orrs	r3, r2
 8010588:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010594:	2b00      	cmp	r3, #0
 8010596:	d01d      	beq.n	80105d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8010598:	4b32      	ldr	r3, [pc, #200]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801059a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801059e:	0e1b      	lsrs	r3, r3, #24
 80105a0:	f003 030f 	and.w	r3, r3, #15
 80105a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80105a6:	4b2f      	ldr	r3, [pc, #188]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80105a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80105ac:	0f1b      	lsrs	r3, r3, #28
 80105ae:	f003 0307 	and.w	r3, r3, #7
 80105b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	685b      	ldr	r3, [r3, #4]
 80105b8:	019a      	lsls	r2, r3, #6
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	691b      	ldr	r3, [r3, #16]
 80105be:	041b      	lsls	r3, r3, #16
 80105c0:	431a      	orrs	r2, r3
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	061b      	lsls	r3, r3, #24
 80105c6:	431a      	orrs	r2, r3
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	071b      	lsls	r3, r3, #28
 80105cc:	4925      	ldr	r1, [pc, #148]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80105ce:	4313      	orrs	r3, r2
 80105d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d011      	beq.n	8010604 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	019a      	lsls	r2, r3, #6
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	691b      	ldr	r3, [r3, #16]
 80105ea:	041b      	lsls	r3, r3, #16
 80105ec:	431a      	orrs	r2, r3
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	68db      	ldr	r3, [r3, #12]
 80105f2:	061b      	lsls	r3, r3, #24
 80105f4:	431a      	orrs	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	689b      	ldr	r3, [r3, #8]
 80105fa:	071b      	lsls	r3, r3, #28
 80105fc:	4919      	ldr	r1, [pc, #100]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80105fe:	4313      	orrs	r3, r2
 8010600:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8010604:	4b17      	ldr	r3, [pc, #92]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4a16      	ldr	r2, [pc, #88]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801060a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801060e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010610:	f7f6 fc0e 	bl	8006e30 <HAL_GetTick>
 8010614:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8010616:	e008      	b.n	801062a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8010618:	f7f6 fc0a 	bl	8006e30 <HAL_GetTick>
 801061c:	4602      	mov	r2, r0
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	2b64      	cmp	r3, #100	@ 0x64
 8010624:	d901      	bls.n	801062a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8010626:	2303      	movs	r3, #3
 8010628:	e0d7      	b.n	80107da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801062a:	4b0e      	ldr	r3, [pc, #56]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010632:	2b00      	cmp	r3, #0
 8010634:	d0f0      	beq.n	8010618 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8010636:	69bb      	ldr	r3, [r7, #24]
 8010638:	2b01      	cmp	r3, #1
 801063a:	f040 80cd 	bne.w	80107d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801063e:	4b09      	ldr	r3, [pc, #36]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4a08      	ldr	r2, [pc, #32]	@ (8010664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8010644:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010648:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801064a:	f7f6 fbf1 	bl	8006e30 <HAL_GetTick>
 801064e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8010650:	e00a      	b.n	8010668 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8010652:	f7f6 fbed 	bl	8006e30 <HAL_GetTick>
 8010656:	4602      	mov	r2, r0
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	1ad3      	subs	r3, r2, r3
 801065c:	2b64      	cmp	r3, #100	@ 0x64
 801065e:	d903      	bls.n	8010668 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8010660:	2303      	movs	r3, #3
 8010662:	e0ba      	b.n	80107da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8010664:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8010668:	4b5e      	ldr	r3, [pc, #376]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010674:	d0ed      	beq.n	8010652 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801067e:	2b00      	cmp	r3, #0
 8010680:	d003      	beq.n	801068a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010686:	2b00      	cmp	r3, #0
 8010688:	d009      	beq.n	801069e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8010692:	2b00      	cmp	r3, #0
 8010694:	d02e      	beq.n	80106f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801069a:	2b00      	cmp	r3, #0
 801069c:	d12a      	bne.n	80106f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801069e:	4b51      	ldr	r3, [pc, #324]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80106a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106a4:	0c1b      	lsrs	r3, r3, #16
 80106a6:	f003 0303 	and.w	r3, r3, #3
 80106aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80106ac:	4b4d      	ldr	r3, [pc, #308]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80106ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106b2:	0f1b      	lsrs	r3, r3, #28
 80106b4:	f003 0307 	and.w	r3, r3, #7
 80106b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	695b      	ldr	r3, [r3, #20]
 80106be:	019a      	lsls	r2, r3, #6
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	041b      	lsls	r3, r3, #16
 80106c4:	431a      	orrs	r2, r3
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	699b      	ldr	r3, [r3, #24]
 80106ca:	061b      	lsls	r3, r3, #24
 80106cc:	431a      	orrs	r2, r3
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	071b      	lsls	r3, r3, #28
 80106d2:	4944      	ldr	r1, [pc, #272]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80106d4:	4313      	orrs	r3, r2
 80106d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80106da:	4b42      	ldr	r3, [pc, #264]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80106dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80106e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106e8:	3b01      	subs	r3, #1
 80106ea:	021b      	lsls	r3, r3, #8
 80106ec:	493d      	ldr	r1, [pc, #244]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80106ee:	4313      	orrs	r3, r2
 80106f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d022      	beq.n	8010746 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010704:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010708:	d11d      	bne.n	8010746 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801070a:	4b36      	ldr	r3, [pc, #216]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801070c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010710:	0e1b      	lsrs	r3, r3, #24
 8010712:	f003 030f 	and.w	r3, r3, #15
 8010716:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8010718:	4b32      	ldr	r3, [pc, #200]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801071a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801071e:	0f1b      	lsrs	r3, r3, #28
 8010720:	f003 0307 	and.w	r3, r3, #7
 8010724:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	695b      	ldr	r3, [r3, #20]
 801072a:	019a      	lsls	r2, r3, #6
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6a1b      	ldr	r3, [r3, #32]
 8010730:	041b      	lsls	r3, r3, #16
 8010732:	431a      	orrs	r2, r3
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	061b      	lsls	r3, r3, #24
 8010738:	431a      	orrs	r2, r3
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	071b      	lsls	r3, r3, #28
 801073e:	4929      	ldr	r1, [pc, #164]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8010740:	4313      	orrs	r3, r2
 8010742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	f003 0308 	and.w	r3, r3, #8
 801074e:	2b00      	cmp	r3, #0
 8010750:	d028      	beq.n	80107a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8010752:	4b24      	ldr	r3, [pc, #144]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8010754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010758:	0e1b      	lsrs	r3, r3, #24
 801075a:	f003 030f 	and.w	r3, r3, #15
 801075e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8010760:	4b20      	ldr	r3, [pc, #128]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8010762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010766:	0c1b      	lsrs	r3, r3, #16
 8010768:	f003 0303 	and.w	r3, r3, #3
 801076c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	695b      	ldr	r3, [r3, #20]
 8010772:	019a      	lsls	r2, r3, #6
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	041b      	lsls	r3, r3, #16
 8010778:	431a      	orrs	r2, r3
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	061b      	lsls	r3, r3, #24
 801077e:	431a      	orrs	r2, r3
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	69db      	ldr	r3, [r3, #28]
 8010784:	071b      	lsls	r3, r3, #28
 8010786:	4917      	ldr	r1, [pc, #92]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8010788:	4313      	orrs	r3, r2
 801078a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801078e:	4b15      	ldr	r3, [pc, #84]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8010790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010794:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801079c:	4911      	ldr	r1, [pc, #68]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 801079e:	4313      	orrs	r3, r2
 80107a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80107a4:	4b0f      	ldr	r3, [pc, #60]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	4a0e      	ldr	r2, [pc, #56]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80107aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80107ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80107b0:	f7f6 fb3e 	bl	8006e30 <HAL_GetTick>
 80107b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80107b6:	e008      	b.n	80107ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80107b8:	f7f6 fb3a 	bl	8006e30 <HAL_GetTick>
 80107bc:	4602      	mov	r2, r0
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	1ad3      	subs	r3, r2, r3
 80107c2:	2b64      	cmp	r3, #100	@ 0x64
 80107c4:	d901      	bls.n	80107ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80107c6:	2303      	movs	r3, #3
 80107c8:	e007      	b.n	80107da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80107ca:	4b06      	ldr	r3, [pc, #24]	@ (80107e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80107d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80107d6:	d1ef      	bne.n	80107b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80107d8:	2300      	movs	r3, #0
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3720      	adds	r7, #32
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	40023800 	.word	0x40023800

080107e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b087      	sub	sp, #28
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80107f0:	2300      	movs	r3, #0
 80107f2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80107f4:	2300      	movs	r3, #0
 80107f6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80107f8:	2300      	movs	r3, #0
 80107fa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80107fc:	2300      	movs	r3, #0
 80107fe:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8010806:	f040 808d 	bne.w	8010924 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 801080a:	4b93      	ldr	r3, [pc, #588]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801080c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010810:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8010818:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010820:	d07c      	beq.n	801091c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010828:	d87b      	bhi.n	8010922 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d004      	beq.n	801083a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010836:	d039      	beq.n	80108ac <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8010838:	e073      	b.n	8010922 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 801083a:	4b87      	ldr	r3, [pc, #540]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010842:	2b00      	cmp	r3, #0
 8010844:	d108      	bne.n	8010858 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8010846:	4b84      	ldr	r3, [pc, #528]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801084e:	4a83      	ldr	r2, [pc, #524]	@ (8010a5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8010850:	fbb2 f3f3 	udiv	r3, r2, r3
 8010854:	613b      	str	r3, [r7, #16]
 8010856:	e007      	b.n	8010868 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8010858:	4b7f      	ldr	r3, [pc, #508]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010860:	4a7f      	ldr	r2, [pc, #508]	@ (8010a60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8010862:	fbb2 f3f3 	udiv	r3, r2, r3
 8010866:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8010868:	4b7b      	ldr	r3, [pc, #492]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801086e:	0e1b      	lsrs	r3, r3, #24
 8010870:	f003 030f 	and.w	r3, r3, #15
 8010874:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8010876:	4b78      	ldr	r3, [pc, #480]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801087c:	099b      	lsrs	r3, r3, #6
 801087e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010882:	693a      	ldr	r2, [r7, #16]
 8010884:	fb03 f202 	mul.w	r2, r3, r2
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	fbb2 f3f3 	udiv	r3, r2, r3
 801088e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8010890:	4b71      	ldr	r3, [pc, #452]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010896:	0a1b      	lsrs	r3, r3, #8
 8010898:	f003 031f 	and.w	r3, r3, #31
 801089c:	3301      	adds	r3, #1
 801089e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80108a0:	697a      	ldr	r2, [r7, #20]
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80108a8:	617b      	str	r3, [r7, #20]
        break;
 80108aa:	e03b      	b.n	8010924 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80108ac:	4b6a      	ldr	r3, [pc, #424]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d108      	bne.n	80108ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80108b8:	4b67      	ldr	r3, [pc, #412]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80108c0:	4a66      	ldr	r2, [pc, #408]	@ (8010a5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80108c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80108c6:	613b      	str	r3, [r7, #16]
 80108c8:	e007      	b.n	80108da <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80108ca:	4b63      	ldr	r3, [pc, #396]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80108cc:	685b      	ldr	r3, [r3, #4]
 80108ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80108d2:	4a63      	ldr	r2, [pc, #396]	@ (8010a60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80108d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80108d8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80108da:	4b5f      	ldr	r3, [pc, #380]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80108dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108e0:	0e1b      	lsrs	r3, r3, #24
 80108e2:	f003 030f 	and.w	r3, r3, #15
 80108e6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80108e8:	4b5b      	ldr	r3, [pc, #364]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80108ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108ee:	099b      	lsrs	r3, r3, #6
 80108f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108f4:	693a      	ldr	r2, [r7, #16]
 80108f6:	fb03 f202 	mul.w	r2, r3, r2
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8010900:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8010902:	4b55      	ldr	r3, [pc, #340]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010908:	f003 031f 	and.w	r3, r3, #31
 801090c:	3301      	adds	r3, #1
 801090e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8010910:	697a      	ldr	r2, [r7, #20]
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	fbb2 f3f3 	udiv	r3, r2, r3
 8010918:	617b      	str	r3, [r7, #20]
        break;
 801091a:	e003      	b.n	8010924 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 801091c:	4b51      	ldr	r3, [pc, #324]	@ (8010a64 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 801091e:	617b      	str	r3, [r7, #20]
        break;
 8010920:	e000      	b.n	8010924 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8010922:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801092a:	f040 808d 	bne.w	8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 801092e:	4b4a      	ldr	r3, [pc, #296]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010930:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010934:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 801093c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010944:	d07c      	beq.n	8010a40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801094c:	d87b      	bhi.n	8010a46 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d004      	beq.n	801095e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801095a:	d039      	beq.n	80109d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 801095c:	e073      	b.n	8010a46 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 801095e:	4b3e      	ldr	r3, [pc, #248]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010966:	2b00      	cmp	r3, #0
 8010968:	d108      	bne.n	801097c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 801096a:	4b3b      	ldr	r3, [pc, #236]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010972:	4a3a      	ldr	r2, [pc, #232]	@ (8010a5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8010974:	fbb2 f3f3 	udiv	r3, r2, r3
 8010978:	613b      	str	r3, [r7, #16]
 801097a:	e007      	b.n	801098c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 801097c:	4b36      	ldr	r3, [pc, #216]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010984:	4a36      	ldr	r2, [pc, #216]	@ (8010a60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8010986:	fbb2 f3f3 	udiv	r3, r2, r3
 801098a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 801098c:	4b32      	ldr	r3, [pc, #200]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010992:	0e1b      	lsrs	r3, r3, #24
 8010994:	f003 030f 	and.w	r3, r3, #15
 8010998:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 801099a:	4b2f      	ldr	r3, [pc, #188]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801099c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80109a0:	099b      	lsrs	r3, r3, #6
 80109a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109a6:	693a      	ldr	r2, [r7, #16]
 80109a8:	fb03 f202 	mul.w	r2, r3, r2
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80109b2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80109b4:	4b28      	ldr	r3, [pc, #160]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80109b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80109ba:	0a1b      	lsrs	r3, r3, #8
 80109bc:	f003 031f 	and.w	r3, r3, #31
 80109c0:	3301      	adds	r3, #1
 80109c2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80109c4:	697a      	ldr	r2, [r7, #20]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80109cc:	617b      	str	r3, [r7, #20]
        break;
 80109ce:	e03b      	b.n	8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80109d0:	4b21      	ldr	r3, [pc, #132]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d108      	bne.n	80109ee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80109dc:	4b1e      	ldr	r3, [pc, #120]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80109e4:	4a1d      	ldr	r2, [pc, #116]	@ (8010a5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80109e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80109ea:	613b      	str	r3, [r7, #16]
 80109ec:	e007      	b.n	80109fe <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80109ee:	4b1a      	ldr	r3, [pc, #104]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80109f6:	4a1a      	ldr	r2, [pc, #104]	@ (8010a60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80109f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80109fc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80109fe:	4b16      	ldr	r3, [pc, #88]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a04:	0e1b      	lsrs	r3, r3, #24
 8010a06:	f003 030f 	and.w	r3, r3, #15
 8010a0a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8010a0c:	4b12      	ldr	r3, [pc, #72]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a12:	099b      	lsrs	r3, r3, #6
 8010a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a18:	693a      	ldr	r2, [r7, #16]
 8010a1a:	fb03 f202 	mul.w	r2, r3, r2
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a24:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8010a26:	4b0c      	ldr	r3, [pc, #48]	@ (8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a2c:	f003 031f 	and.w	r3, r3, #31
 8010a30:	3301      	adds	r3, #1
 8010a32:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8010a34:	697a      	ldr	r2, [r7, #20]
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a3c:	617b      	str	r3, [r7, #20]
        break;
 8010a3e:	e003      	b.n	8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8010a40:	4b08      	ldr	r3, [pc, #32]	@ (8010a64 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8010a42:	617b      	str	r3, [r7, #20]
        break;
 8010a44:	e000      	b.n	8010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8010a46:	bf00      	nop
      }
    }
  }

  return frequency;
 8010a48:	697b      	ldr	r3, [r7, #20]
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	371c      	adds	r7, #28
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	40023800 	.word	0x40023800
 8010a5c:	00f42400 	.word	0x00f42400
 8010a60:	017d7840 	.word	0x017d7840
 8010a64:	00bb8000 	.word	0x00bb8000

08010a68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010a70:	2301      	movs	r3, #1
 8010a72:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d101      	bne.n	8010a7e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	e071      	b.n	8010b62 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	7f5b      	ldrb	r3, [r3, #29]
 8010a82:	b2db      	uxtb	r3, r3
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d105      	bne.n	8010a94 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f7f2 fb4a 	bl	8003128 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2202      	movs	r2, #2
 8010a98:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	68db      	ldr	r3, [r3, #12]
 8010aa0:	f003 0310 	and.w	r3, r3, #16
 8010aa4:	2b10      	cmp	r3, #16
 8010aa6:	d053      	beq.n	8010b50 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	22ca      	movs	r2, #202	@ 0xca
 8010aae:	625a      	str	r2, [r3, #36]	@ 0x24
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2253      	movs	r2, #83	@ 0x53
 8010ab6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f000 fac7 	bl	801104c <RTC_EnterInitMode>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8010ac2:	7bfb      	ldrb	r3, [r7, #15]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d12a      	bne.n	8010b1e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	6899      	ldr	r1, [r3, #8]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	4b26      	ldr	r3, [pc, #152]	@ (8010b6c <HAL_RTC_Init+0x104>)
 8010ad4:	400b      	ands	r3, r1
 8010ad6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	6899      	ldr	r1, [r3, #8]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	685a      	ldr	r2, [r3, #4]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	691b      	ldr	r3, [r3, #16]
 8010ae6:	431a      	orrs	r2, r3
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	695b      	ldr	r3, [r3, #20]
 8010aec:	431a      	orrs	r2, r3
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	430a      	orrs	r2, r1
 8010af4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	68d2      	ldr	r2, [r2, #12]
 8010afe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	6919      	ldr	r1, [r3, #16]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	689b      	ldr	r3, [r3, #8]
 8010b0a:	041a      	lsls	r2, r3, #16
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	430a      	orrs	r2, r1
 8010b12:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f000 fad0 	bl	80110ba <RTC_ExitInitMode>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010b1e:	7bfb      	ldrb	r3, [r7, #15]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d110      	bne.n	8010b46 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	f022 0208 	bic.w	r2, r2, #8
 8010b32:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	699a      	ldr	r2, [r3, #24]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	430a      	orrs	r2, r1
 8010b44:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	22ff      	movs	r2, #255	@ 0xff
 8010b4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8010b4e:	e001      	b.n	8010b54 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8010b50:	2300      	movs	r3, #0
 8010b52:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8010b54:	7bfb      	ldrb	r3, [r7, #15]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d102      	bne.n	8010b60 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8010b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3710      	adds	r7, #16
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	ff8fffbf 	.word	0xff8fffbf

08010b70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010b70:	b590      	push	{r4, r7, lr}
 8010b72:	b087      	sub	sp, #28
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	60f8      	str	r0, [r7, #12]
 8010b78:	60b9      	str	r1, [r7, #8]
 8010b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	7f1b      	ldrb	r3, [r3, #28]
 8010b84:	2b01      	cmp	r3, #1
 8010b86:	d101      	bne.n	8010b8c <HAL_RTC_SetTime+0x1c>
 8010b88:	2302      	movs	r3, #2
 8010b8a:	e085      	b.n	8010c98 <HAL_RTC_SetTime+0x128>
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2201      	movs	r2, #1
 8010b90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	2202      	movs	r2, #2
 8010b96:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d126      	bne.n	8010bec <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d102      	bne.n	8010bb2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f000 faa4 	bl	8011104 <RTC_ByteToBcd2>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	785b      	ldrb	r3, [r3, #1]
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f000 fa9d 	bl	8011104 <RTC_ByteToBcd2>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010bce:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	789b      	ldrb	r3, [r3, #2]
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f000 fa95 	bl	8011104 <RTC_ByteToBcd2>
 8010bda:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010bdc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	78db      	ldrb	r3, [r3, #3]
 8010be4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010be6:	4313      	orrs	r3, r2
 8010be8:	617b      	str	r3, [r7, #20]
 8010bea:	e018      	b.n	8010c1e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	689b      	ldr	r3, [r3, #8]
 8010bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d102      	bne.n	8010c00 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	785b      	ldrb	r3, [r3, #1]
 8010c0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010c0c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8010c0e:	68ba      	ldr	r2, [r7, #8]
 8010c10:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010c12:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	78db      	ldrb	r3, [r3, #3]
 8010c18:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010c1a:	4313      	orrs	r3, r2
 8010c1c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	22ca      	movs	r2, #202	@ 0xca
 8010c24:	625a      	str	r2, [r3, #36]	@ 0x24
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	2253      	movs	r2, #83	@ 0x53
 8010c2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010c2e:	68f8      	ldr	r0, [r7, #12]
 8010c30:	f000 fa0c 	bl	801104c <RTC_EnterInitMode>
 8010c34:	4603      	mov	r3, r0
 8010c36:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8010c38:	7cfb      	ldrb	r3, [r7, #19]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d11e      	bne.n	8010c7c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	6979      	ldr	r1, [r7, #20]
 8010c44:	4b16      	ldr	r3, [pc, #88]	@ (8010ca0 <HAL_RTC_SetTime+0x130>)
 8010c46:	400b      	ands	r3, r1
 8010c48:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	689a      	ldr	r2, [r3, #8]
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8010c58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	6899      	ldr	r1, [r3, #8]
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	68da      	ldr	r2, [r3, #12]
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	691b      	ldr	r3, [r3, #16]
 8010c68:	431a      	orrs	r2, r3
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	430a      	orrs	r2, r1
 8010c70:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010c72:	68f8      	ldr	r0, [r7, #12]
 8010c74:	f000 fa21 	bl	80110ba <RTC_ExitInitMode>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8010c7c:	7cfb      	ldrb	r3, [r7, #19]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d102      	bne.n	8010c88 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	2201      	movs	r2, #1
 8010c86:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	22ff      	movs	r2, #255	@ 0xff
 8010c8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	2200      	movs	r2, #0
 8010c94:	771a      	strb	r2, [r3, #28]

  return status;
 8010c96:	7cfb      	ldrb	r3, [r7, #19]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	371c      	adds	r7, #28
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd90      	pop	{r4, r7, pc}
 8010ca0:	007f7f7f 	.word	0x007f7f7f

08010ca4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010ca4:	b590      	push	{r4, r7, lr}
 8010ca6:	b087      	sub	sp, #28
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	60f8      	str	r0, [r7, #12]
 8010cac:	60b9      	str	r1, [r7, #8]
 8010cae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	7f1b      	ldrb	r3, [r3, #28]
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d101      	bne.n	8010cc0 <HAL_RTC_SetDate+0x1c>
 8010cbc:	2302      	movs	r3, #2
 8010cbe:	e06f      	b.n	8010da0 <HAL_RTC_SetDate+0xfc>
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2202      	movs	r2, #2
 8010cca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d10e      	bne.n	8010cf0 <HAL_RTC_SetDate+0x4c>
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	785b      	ldrb	r3, [r3, #1]
 8010cd6:	f003 0310 	and.w	r3, r3, #16
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d008      	beq.n	8010cf0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	785b      	ldrb	r3, [r3, #1]
 8010ce2:	f023 0310 	bic.w	r3, r3, #16
 8010ce6:	b2db      	uxtb	r3, r3
 8010ce8:	330a      	adds	r3, #10
 8010cea:	b2da      	uxtb	r2, r3
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d11c      	bne.n	8010d30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	78db      	ldrb	r3, [r3, #3]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f000 fa02 	bl	8011104 <RTC_ByteToBcd2>
 8010d00:	4603      	mov	r3, r0
 8010d02:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	785b      	ldrb	r3, [r3, #1]
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f000 f9fb 	bl	8011104 <RTC_ByteToBcd2>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010d12:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	789b      	ldrb	r3, [r3, #2]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f000 f9f3 	bl	8011104 <RTC_ByteToBcd2>
 8010d1e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010d20:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8010d2a:	4313      	orrs	r3, r2
 8010d2c:	617b      	str	r3, [r7, #20]
 8010d2e:	e00e      	b.n	8010d4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	78db      	ldrb	r3, [r3, #3]
 8010d34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	785b      	ldrb	r3, [r3, #1]
 8010d3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8010d3c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8010d3e:	68ba      	ldr	r2, [r7, #8]
 8010d40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8010d42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8010d4a:	4313      	orrs	r3, r2
 8010d4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	22ca      	movs	r2, #202	@ 0xca
 8010d54:	625a      	str	r2, [r3, #36]	@ 0x24
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	2253      	movs	r2, #83	@ 0x53
 8010d5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f000 f974 	bl	801104c <RTC_EnterInitMode>
 8010d64:	4603      	mov	r3, r0
 8010d66:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8010d68:	7cfb      	ldrb	r3, [r7, #19]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d10a      	bne.n	8010d84 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	6979      	ldr	r1, [r7, #20]
 8010d74:	4b0c      	ldr	r3, [pc, #48]	@ (8010da8 <HAL_RTC_SetDate+0x104>)
 8010d76:	400b      	ands	r3, r1
 8010d78:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010d7a:	68f8      	ldr	r0, [r7, #12]
 8010d7c:	f000 f99d 	bl	80110ba <RTC_ExitInitMode>
 8010d80:	4603      	mov	r3, r0
 8010d82:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8010d84:	7cfb      	ldrb	r3, [r7, #19]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d102      	bne.n	8010d90 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	2201      	movs	r2, #1
 8010d8e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	22ff      	movs	r2, #255	@ 0xff
 8010d96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	771a      	strb	r2, [r3, #28]

  return status;
 8010d9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	371c      	adds	r7, #28
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd90      	pop	{r4, r7, pc}
 8010da8:	00ffff3f 	.word	0x00ffff3f

08010dac <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8010dac:	b590      	push	{r4, r7, lr}
 8010dae:	b089      	sub	sp, #36	@ 0x24
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8010db8:	2300      	movs	r3, #0
 8010dba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	7f1b      	ldrb	r3, [r3, #28]
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d101      	bne.n	8010dd0 <HAL_RTC_SetAlarm+0x24>
 8010dcc:	2302      	movs	r3, #2
 8010dce:	e113      	b.n	8010ff8 <HAL_RTC_SetAlarm+0x24c>
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	2202      	movs	r2, #2
 8010dda:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d137      	bne.n	8010e52 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	689b      	ldr	r3, [r3, #8]
 8010de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d102      	bne.n	8010df6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	2200      	movs	r2, #0
 8010df4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f000 f982 	bl	8011104 <RTC_ByteToBcd2>
 8010e00:	4603      	mov	r3, r0
 8010e02:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	785b      	ldrb	r3, [r3, #1]
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f000 f97b 	bl	8011104 <RTC_ByteToBcd2>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8010e12:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	789b      	ldrb	r3, [r3, #2]
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f000 f973 	bl	8011104 <RTC_ByteToBcd2>
 8010e1e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010e20:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	78db      	ldrb	r3, [r3, #3]
 8010e28:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8010e2a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010e34:	4618      	mov	r0, r3
 8010e36:	f000 f965 	bl	8011104 <RTC_ByteToBcd2>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8010e3e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8010e46:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8010e4c:	4313      	orrs	r3, r2
 8010e4e:	61fb      	str	r3, [r7, #28]
 8010e50:	e023      	b.n	8010e9a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	689b      	ldr	r3, [r3, #8]
 8010e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d102      	bne.n	8010e66 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	2200      	movs	r2, #0
 8010e64:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	785b      	ldrb	r3, [r3, #1]
 8010e70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8010e72:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8010e74:	68ba      	ldr	r2, [r7, #8]
 8010e76:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8010e78:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	78db      	ldrb	r3, [r3, #3]
 8010e7e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8010e80:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010e88:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8010e8a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8010e90:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8010e96:	4313      	orrs	r3, r2
 8010e98:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8010ea2:	4313      	orrs	r3, r2
 8010ea4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	22ca      	movs	r2, #202	@ 0xca
 8010eac:	625a      	str	r2, [r3, #36]	@ 0x24
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2253      	movs	r2, #83	@ 0x53
 8010eb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010ebe:	d148      	bne.n	8010f52 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	689a      	ldr	r2, [r3, #8]
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010ece:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	689a      	ldr	r2, [r3, #8]
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010ede:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	68db      	ldr	r3, [r3, #12]
 8010ee6:	b2da      	uxtb	r2, r3
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8010ef0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010ef2:	f7f5 ff9d 	bl	8006e30 <HAL_GetTick>
 8010ef6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8010ef8:	e013      	b.n	8010f22 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010efa:	f7f5 ff99 	bl	8006e30 <HAL_GetTick>
 8010efe:	4602      	mov	r2, r0
 8010f00:	69bb      	ldr	r3, [r7, #24]
 8010f02:	1ad3      	subs	r3, r2, r3
 8010f04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010f08:	d90b      	bls.n	8010f22 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	22ff      	movs	r2, #255	@ 0xff
 8010f10:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2203      	movs	r2, #3
 8010f16:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8010f1e:	2303      	movs	r3, #3
 8010f20:	e06a      	b.n	8010ff8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	68db      	ldr	r3, [r3, #12]
 8010f28:	f003 0301 	and.w	r3, r3, #1
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d0e4      	beq.n	8010efa <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	69fa      	ldr	r2, [r7, #28]
 8010f36:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	697a      	ldr	r2, [r7, #20]
 8010f3e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	689a      	ldr	r2, [r3, #8]
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010f4e:	609a      	str	r2, [r3, #8]
 8010f50:	e047      	b.n	8010fe2 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	689a      	ldr	r2, [r3, #8]
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8010f60:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	689a      	ldr	r2, [r3, #8]
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010f70:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	68db      	ldr	r3, [r3, #12]
 8010f78:	b2da      	uxtb	r2, r3
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8010f82:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010f84:	f7f5 ff54 	bl	8006e30 <HAL_GetTick>
 8010f88:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8010f8a:	e013      	b.n	8010fb4 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010f8c:	f7f5 ff50 	bl	8006e30 <HAL_GetTick>
 8010f90:	4602      	mov	r2, r0
 8010f92:	69bb      	ldr	r3, [r7, #24]
 8010f94:	1ad3      	subs	r3, r2, r3
 8010f96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010f9a:	d90b      	bls.n	8010fb4 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	22ff      	movs	r2, #255	@ 0xff
 8010fa2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2203      	movs	r2, #3
 8010fa8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2200      	movs	r2, #0
 8010fae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8010fb0:	2303      	movs	r3, #3
 8010fb2:	e021      	b.n	8010ff8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	68db      	ldr	r3, [r3, #12]
 8010fba:	f003 0302 	and.w	r3, r3, #2
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d0e4      	beq.n	8010f8c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	69fa      	ldr	r2, [r7, #28]
 8010fc8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	697a      	ldr	r2, [r7, #20]
 8010fd0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	689a      	ldr	r2, [r3, #8]
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010fe0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	22ff      	movs	r2, #255	@ 0xff
 8010fe8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2201      	movs	r2, #1
 8010fee:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8010ff6:	2300      	movs	r3, #0
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3724      	adds	r7, #36	@ 0x24
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd90      	pop	{r4, r7, pc}

08011000 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b084      	sub	sp, #16
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011008:	2300      	movs	r3, #0
 801100a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	4a0d      	ldr	r2, [pc, #52]	@ (8011048 <HAL_RTC_WaitForSynchro+0x48>)
 8011012:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011014:	f7f5 ff0c 	bl	8006e30 <HAL_GetTick>
 8011018:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801101a:	e009      	b.n	8011030 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801101c:	f7f5 ff08 	bl	8006e30 <HAL_GetTick>
 8011020:	4602      	mov	r2, r0
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801102a:	d901      	bls.n	8011030 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 801102c:	2303      	movs	r3, #3
 801102e:	e007      	b.n	8011040 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	68db      	ldr	r3, [r3, #12]
 8011036:	f003 0320 	and.w	r3, r3, #32
 801103a:	2b00      	cmp	r3, #0
 801103c:	d0ee      	beq.n	801101c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 801103e:	2300      	movs	r3, #0
}
 8011040:	4618      	mov	r0, r3
 8011042:	3710      	adds	r7, #16
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	0001ff5f 	.word	0x0001ff5f

0801104c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011054:	2300      	movs	r3, #0
 8011056:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8011058:	2300      	movs	r3, #0
 801105a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	68db      	ldr	r3, [r3, #12]
 8011062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011066:	2b00      	cmp	r3, #0
 8011068:	d122      	bne.n	80110b0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	68da      	ldr	r2, [r3, #12]
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011078:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801107a:	f7f5 fed9 	bl	8006e30 <HAL_GetTick>
 801107e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8011080:	e00c      	b.n	801109c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011082:	f7f5 fed5 	bl	8006e30 <HAL_GetTick>
 8011086:	4602      	mov	r2, r0
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011090:	d904      	bls.n	801109c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2204      	movs	r2, #4
 8011096:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8011098:	2301      	movs	r3, #1
 801109a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d102      	bne.n	80110b0 <RTC_EnterInitMode+0x64>
 80110aa:	7bfb      	ldrb	r3, [r7, #15]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d1e8      	bne.n	8011082 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80110b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3710      	adds	r7, #16
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}

080110ba <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80110ba:	b580      	push	{r7, lr}
 80110bc:	b084      	sub	sp, #16
 80110be:	af00      	add	r7, sp, #0
 80110c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80110c2:	2300      	movs	r3, #0
 80110c4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	68da      	ldr	r2, [r3, #12]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80110d4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	689b      	ldr	r3, [r3, #8]
 80110dc:	f003 0320 	and.w	r3, r3, #32
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d10a      	bne.n	80110fa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f7ff ff8b 	bl	8011000 <HAL_RTC_WaitForSynchro>
 80110ea:	4603      	mov	r3, r0
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d004      	beq.n	80110fa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2204      	movs	r2, #4
 80110f4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80110f6:	2301      	movs	r3, #1
 80110f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80110fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3710      	adds	r7, #16
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8011104:	b480      	push	{r7}
 8011106:	b085      	sub	sp, #20
 8011108:	af00      	add	r7, sp, #0
 801110a:	4603      	mov	r3, r0
 801110c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801110e:	2300      	movs	r3, #0
 8011110:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8011112:	e005      	b.n	8011120 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	3301      	adds	r3, #1
 8011118:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801111a:	79fb      	ldrb	r3, [r7, #7]
 801111c:	3b0a      	subs	r3, #10
 801111e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8011120:	79fb      	ldrb	r3, [r7, #7]
 8011122:	2b09      	cmp	r3, #9
 8011124:	d8f6      	bhi.n	8011114 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	b2db      	uxtb	r3, r3
 801112a:	011b      	lsls	r3, r3, #4
 801112c:	b2da      	uxtb	r2, r3
 801112e:	79fb      	ldrb	r3, [r7, #7]
 8011130:	4313      	orrs	r3, r2
 8011132:	b2db      	uxtb	r3, r3
}
 8011134:	4618      	mov	r0, r3
 8011136:	3714      	adds	r7, #20
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr

08011140 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8011140:	b480      	push	{r7}
 8011142:	b087      	sub	sp, #28
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801114c:	2300      	movs	r3, #0
 801114e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	7f1b      	ldrb	r3, [r3, #28]
 8011154:	2b01      	cmp	r3, #1
 8011156:	d101      	bne.n	801115c <HAL_RTCEx_SetTimeStamp+0x1c>
 8011158:	2302      	movs	r3, #2
 801115a:	e050      	b.n	80111fe <HAL_RTCEx_SetTimeStamp+0xbe>
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	2201      	movs	r2, #1
 8011160:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2202      	movs	r2, #2
 8011166:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f022 0206 	bic.w	r2, r2, #6
 8011176:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	430a      	orrs	r2, r1
 8011186:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	689a      	ldr	r2, [r3, #8]
 801118e:	4b1f      	ldr	r3, [pc, #124]	@ (801120c <HAL_RTCEx_SetTimeStamp+0xcc>)
 8011190:	4013      	ands	r3, r2
 8011192:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8011194:	697a      	ldr	r2, [r7, #20]
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	4313      	orrs	r3, r2
 801119a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	22ca      	movs	r2, #202	@ 0xca
 80111a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2253      	movs	r2, #83	@ 0x53
 80111aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	697a      	ldr	r2, [r7, #20]
 80111b2:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	b2da      	uxtb	r2, r3
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 80111c4:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	b2da      	uxtb	r2, r3
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 80111d6:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	689a      	ldr	r2, [r3, #8]
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80111e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	22ff      	movs	r2, #255	@ 0xff
 80111ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	2201      	movs	r2, #1
 80111f4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	2200      	movs	r2, #0
 80111fa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80111fc:	2300      	movs	r3, #0
}
 80111fe:	4618      	mov	r0, r3
 8011200:	371c      	adds	r7, #28
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr
 801120a:	bf00      	nop
 801120c:	fffff7f7 	.word	0xfffff7f7

08011210 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b088      	sub	sp, #32
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8011218:	2300      	movs	r3, #0
 801121a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 801121c:	2300      	movs	r3, #0
 801121e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8011220:	2300      	movs	r3, #0
 8011222:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d101      	bne.n	801122e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 801122a:	2301      	movs	r3, #1
 801122c:	e156      	b.n	80114dc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8011234:	b2db      	uxtb	r3, r3
 8011236:	2b00      	cmp	r3, #0
 8011238:	d106      	bne.n	8011248 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2200      	movs	r2, #0
 801123e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f7f2 fb22 	bl	800388c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2202      	movs	r2, #2
 801124c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f000 f95b 	bl	801150c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	2b02      	cmp	r3, #2
 801125c:	d00c      	beq.n	8011278 <HAL_SAI_Init+0x68>
 801125e:	2b02      	cmp	r3, #2
 8011260:	d80d      	bhi.n	801127e <HAL_SAI_Init+0x6e>
 8011262:	2b00      	cmp	r3, #0
 8011264:	d002      	beq.n	801126c <HAL_SAI_Init+0x5c>
 8011266:	2b01      	cmp	r3, #1
 8011268:	d003      	beq.n	8011272 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 801126a:	e008      	b.n	801127e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 801126c:	2300      	movs	r3, #0
 801126e:	61fb      	str	r3, [r7, #28]
      break;
 8011270:	e006      	b.n	8011280 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8011272:	2310      	movs	r3, #16
 8011274:	61fb      	str	r3, [r7, #28]
      break;
 8011276:	e003      	b.n	8011280 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8011278:	2320      	movs	r3, #32
 801127a:	61fb      	str	r3, [r7, #28]
      break;
 801127c:	e000      	b.n	8011280 <HAL_SAI_Init+0x70>
      break;
 801127e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	689b      	ldr	r3, [r3, #8]
 8011284:	2b03      	cmp	r3, #3
 8011286:	d81e      	bhi.n	80112c6 <HAL_SAI_Init+0xb6>
 8011288:	a201      	add	r2, pc, #4	@ (adr r2, 8011290 <HAL_SAI_Init+0x80>)
 801128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801128e:	bf00      	nop
 8011290:	080112a1 	.word	0x080112a1
 8011294:	080112a7 	.word	0x080112a7
 8011298:	080112af 	.word	0x080112af
 801129c:	080112b7 	.word	0x080112b7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80112a0:	2300      	movs	r3, #0
 80112a2:	617b      	str	r3, [r7, #20]
    }
    break;
 80112a4:	e010      	b.n	80112c8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80112a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80112aa:	617b      	str	r3, [r7, #20]
    }
    break;
 80112ac:	e00c      	b.n	80112c8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80112ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80112b2:	617b      	str	r3, [r7, #20]
    }
    break;
 80112b4:	e008      	b.n	80112c8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80112b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80112ba:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	f043 0301 	orr.w	r3, r3, #1
 80112c2:	61fb      	str	r3, [r7, #28]
    }
    break;
 80112c4:	e000      	b.n	80112c8 <HAL_SAI_Init+0xb8>
    default:
      break;
 80112c6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	4a85      	ldr	r2, [pc, #532]	@ (80114e4 <HAL_SAI_Init+0x2d4>)
 80112ce:	4293      	cmp	r3, r2
 80112d0:	d004      	beq.n	80112dc <HAL_SAI_Init+0xcc>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4a84      	ldr	r2, [pc, #528]	@ (80114e8 <HAL_SAI_Init+0x2d8>)
 80112d8:	4293      	cmp	r3, r2
 80112da:	d103      	bne.n	80112e4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80112dc:	4a83      	ldr	r2, [pc, #524]	@ (80114ec <HAL_SAI_Init+0x2dc>)
 80112de:	69fb      	ldr	r3, [r7, #28]
 80112e0:	6013      	str	r3, [r2, #0]
 80112e2:	e002      	b.n	80112ea <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80112e4:	4a82      	ldr	r2, [pc, #520]	@ (80114f0 <HAL_SAI_Init+0x2e0>)
 80112e6:	69fb      	ldr	r3, [r7, #28]
 80112e8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	69db      	ldr	r3, [r3, #28]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d04c      	beq.n	801138c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80112f2:	2300      	movs	r3, #0
 80112f4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	4a7a      	ldr	r2, [pc, #488]	@ (80114e4 <HAL_SAI_Init+0x2d4>)
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d004      	beq.n	801130a <HAL_SAI_Init+0xfa>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4a78      	ldr	r2, [pc, #480]	@ (80114e8 <HAL_SAI_Init+0x2d8>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d104      	bne.n	8011314 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 801130a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 801130e:	f7ff fa6b 	bl	80107e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8011312:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	4a76      	ldr	r2, [pc, #472]	@ (80114f4 <HAL_SAI_Init+0x2e4>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d004      	beq.n	8011328 <HAL_SAI_Init+0x118>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	4a75      	ldr	r2, [pc, #468]	@ (80114f8 <HAL_SAI_Init+0x2e8>)
 8011324:	4293      	cmp	r3, r2
 8011326:	d104      	bne.n	8011332 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8011328:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801132c:	f7ff fa5c 	bl	80107e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8011330:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8011332:	693a      	ldr	r2, [r7, #16]
 8011334:	4613      	mov	r3, r2
 8011336:	009b      	lsls	r3, r3, #2
 8011338:	4413      	add	r3, r2
 801133a:	005b      	lsls	r3, r3, #1
 801133c:	461a      	mov	r2, r3
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	69db      	ldr	r3, [r3, #28]
 8011342:	025b      	lsls	r3, r3, #9
 8011344:	fbb2 f3f3 	udiv	r3, r2, r3
 8011348:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	4a6b      	ldr	r2, [pc, #428]	@ (80114fc <HAL_SAI_Init+0x2ec>)
 801134e:	fba2 2303 	umull	r2, r3, r2, r3
 8011352:	08da      	lsrs	r2, r3, #3
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8011358:	68f9      	ldr	r1, [r7, #12]
 801135a:	4b68      	ldr	r3, [pc, #416]	@ (80114fc <HAL_SAI_Init+0x2ec>)
 801135c:	fba3 2301 	umull	r2, r3, r3, r1
 8011360:	08da      	lsrs	r2, r3, #3
 8011362:	4613      	mov	r3, r2
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	4413      	add	r3, r2
 8011368:	005b      	lsls	r3, r3, #1
 801136a:	1aca      	subs	r2, r1, r3
 801136c:	2a08      	cmp	r2, #8
 801136e:	d904      	bls.n	801137a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6a1b      	ldr	r3, [r3, #32]
 8011374:	1c5a      	adds	r2, r3, #1
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801137e:	2b04      	cmp	r3, #4
 8011380:	d104      	bne.n	801138c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6a1b      	ldr	r3, [r3, #32]
 8011386:	085a      	lsrs	r2, r3, #1
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d003      	beq.n	801139c <HAL_SAI_Init+0x18c>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	2b02      	cmp	r3, #2
 801139a:	d109      	bne.n	80113b0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80113a0:	2b01      	cmp	r3, #1
 80113a2:	d101      	bne.n	80113a8 <HAL_SAI_Init+0x198>
 80113a4:	2300      	movs	r3, #0
 80113a6:	e001      	b.n	80113ac <HAL_SAI_Init+0x19c>
 80113a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80113ac:	61bb      	str	r3, [r7, #24]
 80113ae:	e008      	b.n	80113c2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80113b4:	2b01      	cmp	r3, #1
 80113b6:	d102      	bne.n	80113be <HAL_SAI_Init+0x1ae>
 80113b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80113bc:	e000      	b.n	80113c0 <HAL_SAI_Init+0x1b0>
 80113be:	2300      	movs	r3, #0
 80113c0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	6819      	ldr	r1, [r3, #0]
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	4b4c      	ldr	r3, [pc, #304]	@ (8011500 <HAL_SAI_Init+0x2f0>)
 80113ce:	400b      	ands	r3, r1
 80113d0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	6819      	ldr	r1, [r3, #0]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	685a      	ldr	r2, [r3, #4]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113e0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80113e6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113ec:	431a      	orrs	r2, r3
 80113ee:	69bb      	ldr	r3, [r7, #24]
 80113f0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80113fa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	691b      	ldr	r3, [r3, #16]
 8011400:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011406:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6a1b      	ldr	r3, [r3, #32]
 801140c:	051b      	lsls	r3, r3, #20
 801140e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	430a      	orrs	r2, r1
 8011416:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	6859      	ldr	r1, [r3, #4]
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681a      	ldr	r2, [r3, #0]
 8011422:	4b38      	ldr	r3, [pc, #224]	@ (8011504 <HAL_SAI_Init+0x2f4>)
 8011424:	400b      	ands	r3, r1
 8011426:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	6859      	ldr	r1, [r3, #4]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	699a      	ldr	r2, [r3, #24]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011436:	431a      	orrs	r2, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801143c:	431a      	orrs	r2, r3
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	430a      	orrs	r2, r1
 8011444:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	6899      	ldr	r1, [r3, #8]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	4b2d      	ldr	r3, [pc, #180]	@ (8011508 <HAL_SAI_Init+0x2f8>)
 8011452:	400b      	ands	r3, r1
 8011454:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	6899      	ldr	r1, [r3, #8]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011460:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8011466:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 801146c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8011472:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011478:	3b01      	subs	r3, #1
 801147a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 801147c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	430a      	orrs	r2, r1
 8011484:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	68d9      	ldr	r1, [r3, #12]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681a      	ldr	r2, [r3, #0]
 8011490:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8011494:	400b      	ands	r3, r1
 8011496:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	68d9      	ldr	r1, [r3, #12]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80114a6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80114ac:	041b      	lsls	r3, r3, #16
 80114ae:	431a      	orrs	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80114b4:	3b01      	subs	r3, #1
 80114b6:	021b      	lsls	r3, r3, #8
 80114b8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	430a      	orrs	r2, r1
 80114c0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2200      	movs	r2, #0
 80114c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2201      	movs	r2, #1
 80114ce:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2200      	movs	r2, #0
 80114d6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80114da:	2300      	movs	r3, #0
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3720      	adds	r7, #32
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}
 80114e4:	40015804 	.word	0x40015804
 80114e8:	40015824 	.word	0x40015824
 80114ec:	40015800 	.word	0x40015800
 80114f0:	40015c00 	.word	0x40015c00
 80114f4:	40015c04 	.word	0x40015c04
 80114f8:	40015c24 	.word	0x40015c24
 80114fc:	cccccccd 	.word	0xcccccccd
 8011500:	ff05c010 	.word	0xff05c010
 8011504:	ffff1ff0 	.word	0xffff1ff0
 8011508:	fff88000 	.word	0xfff88000

0801150c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 801150c:	b480      	push	{r7}
 801150e:	b085      	sub	sp, #20
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8011514:	4b17      	ldr	r3, [pc, #92]	@ (8011574 <SAI_Disable+0x68>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4a17      	ldr	r2, [pc, #92]	@ (8011578 <SAI_Disable+0x6c>)
 801151a:	fba2 2303 	umull	r2, r3, r2, r3
 801151e:	0b1b      	lsrs	r3, r3, #12
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8011524:	2300      	movs	r3, #0
 8011526:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	681a      	ldr	r2, [r3, #0]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8011536:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	1e5a      	subs	r2, r3, #1
 801153c:	60fa      	str	r2, [r7, #12]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d10a      	bne.n	8011558 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011548:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8011552:	2303      	movs	r3, #3
 8011554:	72fb      	strb	r3, [r7, #11]
      break;
 8011556:	e006      	b.n	8011566 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011562:	2b00      	cmp	r3, #0
 8011564:	d1e8      	bne.n	8011538 <SAI_Disable+0x2c>

  return status;
 8011566:	7afb      	ldrb	r3, [r7, #11]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3714      	adds	r7, #20
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr
 8011574:	20010000 	.word	0x20010000
 8011578:	95cbec1b 	.word	0x95cbec1b

0801157c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d101      	bne.n	8011590 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 801158c:	2301      	movs	r3, #1
 801158e:	e025      	b.n	80115dc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011596:	b2db      	uxtb	r3, r3
 8011598:	2b00      	cmp	r3, #0
 801159a:	d106      	bne.n	80115aa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2200      	movs	r2, #0
 80115a0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f7f2 f967 	bl	8003878 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2202      	movs	r2, #2
 80115ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	3304      	adds	r3, #4
 80115ba:	4619      	mov	r1, r3
 80115bc:	4610      	mov	r0, r2
 80115be:	f001 fef3 	bl	80133a8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6818      	ldr	r0, [r3, #0]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	685b      	ldr	r3, [r3, #4]
 80115ca:	461a      	mov	r2, r3
 80115cc:	6839      	ldr	r1, [r7, #0]
 80115ce:	f001 ff47 	bl	8013460 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2201      	movs	r2, #1
 80115d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80115da:	2300      	movs	r3, #0
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3708      	adds	r7, #8
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}

080115e4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b086      	sub	sp, #24
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80115f6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80115f8:	7dfb      	ldrb	r3, [r7, #23]
 80115fa:	2b02      	cmp	r3, #2
 80115fc:	d101      	bne.n	8011602 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80115fe:	2302      	movs	r3, #2
 8011600:	e021      	b.n	8011646 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8011602:	7dfb      	ldrb	r3, [r7, #23]
 8011604:	2b01      	cmp	r3, #1
 8011606:	d002      	beq.n	801160e <HAL_SDRAM_SendCommand+0x2a>
 8011608:	7dfb      	ldrb	r3, [r7, #23]
 801160a:	2b05      	cmp	r3, #5
 801160c:	d118      	bne.n	8011640 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2202      	movs	r2, #2
 8011612:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	687a      	ldr	r2, [r7, #4]
 801161c:	68b9      	ldr	r1, [r7, #8]
 801161e:	4618      	mov	r0, r3
 8011620:	f001 ff88 	bl	8013534 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2b02      	cmp	r3, #2
 801162a:	d104      	bne.n	8011636 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	2205      	movs	r2, #5
 8011630:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011634:	e006      	b.n	8011644 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	2201      	movs	r2, #1
 801163a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801163e:	e001      	b.n	8011644 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8011640:	2301      	movs	r3, #1
 8011642:	e000      	b.n	8011646 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8011644:	2300      	movs	r3, #0
}
 8011646:	4618      	mov	r0, r3
 8011648:	3718      	adds	r7, #24
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}

0801164e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801164e:	b580      	push	{r7, lr}
 8011650:	b082      	sub	sp, #8
 8011652:	af00      	add	r7, sp, #0
 8011654:	6078      	str	r0, [r7, #4]
 8011656:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801165e:	b2db      	uxtb	r3, r3
 8011660:	2b02      	cmp	r3, #2
 8011662:	d101      	bne.n	8011668 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8011664:	2302      	movs	r3, #2
 8011666:	e016      	b.n	8011696 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801166e:	b2db      	uxtb	r3, r3
 8011670:	2b01      	cmp	r3, #1
 8011672:	d10f      	bne.n	8011694 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	2202      	movs	r2, #2
 8011678:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	6839      	ldr	r1, [r7, #0]
 8011682:	4618      	mov	r0, r3
 8011684:	f001 ff7a 	bl	801357c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2201      	movs	r2, #1
 801168c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8011690:	2300      	movs	r3, #0
 8011692:	e000      	b.n	8011696 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8011694:	2301      	movs	r3, #1
}
 8011696:	4618      	mov	r0, r3
 8011698:	3708      	adds	r7, #8
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
	...

080116a0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b084      	sub	sp, #16
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d101      	bne.n	80116b2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80116ae:	2301      	movs	r3, #1
 80116b0:	e04c      	b.n	801174c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80116b8:	b2db      	uxtb	r3, r3
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d106      	bne.n	80116cc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2200      	movs	r2, #0
 80116c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f7f1 fd5c 	bl	8003184 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2202      	movs	r2, #2
 80116d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	681a      	ldr	r2, [r3, #0]
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	f022 0203 	bic.w	r2, r2, #3
 80116e2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80116ec:	68fa      	ldr	r2, [r7, #12]
 80116ee:	4b19      	ldr	r3, [pc, #100]	@ (8011754 <HAL_SPDIFRX_Init+0xb4>)
 80116f0:	4013      	ands	r3, r2
 80116f2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80116fc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8011702:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8011708:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 801170e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8011714:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 801171a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8011720:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8011726:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 801172c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 801172e:	68fa      	ldr	r2, [r7, #12]
 8011730:	4313      	orrs	r3, r2
 8011732:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	68fa      	ldr	r2, [r7, #12]
 801173a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2200      	movs	r2, #0
 8011740:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2201      	movs	r2, #1
 8011746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 801174a:	2300      	movs	r3, #0
}
 801174c:	4618      	mov	r0, r3
 801174e:	3710      	adds	r7, #16
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}
 8011754:	fff88407 	.word	0xfff88407

08011758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b084      	sub	sp, #16
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d101      	bne.n	801176a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011766:	2301      	movs	r3, #1
 8011768:	e09d      	b.n	80118a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801176e:	2b00      	cmp	r3, #0
 8011770:	d108      	bne.n	8011784 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801177a:	d009      	beq.n	8011790 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2200      	movs	r2, #0
 8011780:	61da      	str	r2, [r3, #28]
 8011782:	e005      	b.n	8011790 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2200      	movs	r2, #0
 8011788:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2200      	movs	r2, #0
 801178e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2200      	movs	r2, #0
 8011794:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801179c:	b2db      	uxtb	r3, r3
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d106      	bne.n	80117b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2200      	movs	r2, #0
 80117a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f7f1 fd4e 	bl	800324c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2202      	movs	r2, #2
 80117b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80117c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	68db      	ldr	r3, [r3, #12]
 80117cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80117d0:	d902      	bls.n	80117d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80117d2:	2300      	movs	r3, #0
 80117d4:	60fb      	str	r3, [r7, #12]
 80117d6:	e002      	b.n	80117de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80117d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80117dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	68db      	ldr	r3, [r3, #12]
 80117e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80117e6:	d007      	beq.n	80117f8 <HAL_SPI_Init+0xa0>
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	68db      	ldr	r3, [r3, #12]
 80117ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80117f0:	d002      	beq.n	80117f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2200      	movs	r2, #0
 80117f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	685b      	ldr	r3, [r3, #4]
 80117fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	689b      	ldr	r3, [r3, #8]
 8011804:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8011808:	431a      	orrs	r2, r3
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	691b      	ldr	r3, [r3, #16]
 801180e:	f003 0302 	and.w	r3, r3, #2
 8011812:	431a      	orrs	r2, r3
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	695b      	ldr	r3, [r3, #20]
 8011818:	f003 0301 	and.w	r3, r3, #1
 801181c:	431a      	orrs	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	699b      	ldr	r3, [r3, #24]
 8011822:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011826:	431a      	orrs	r2, r3
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	69db      	ldr	r3, [r3, #28]
 801182c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011830:	431a      	orrs	r2, r3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6a1b      	ldr	r3, [r3, #32]
 8011836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801183a:	ea42 0103 	orr.w	r1, r2, r3
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011842:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	430a      	orrs	r2, r1
 801184c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	699b      	ldr	r3, [r3, #24]
 8011852:	0c1b      	lsrs	r3, r3, #16
 8011854:	f003 0204 	and.w	r2, r3, #4
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801185c:	f003 0310 	and.w	r3, r3, #16
 8011860:	431a      	orrs	r2, r3
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011866:	f003 0308 	and.w	r3, r3, #8
 801186a:	431a      	orrs	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8011874:	ea42 0103 	orr.w	r1, r2, r3
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	430a      	orrs	r2, r1
 8011884:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	69da      	ldr	r2, [r3, #28]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011894:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2200      	movs	r2, #0
 801189a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2201      	movs	r2, #1
 80118a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80118a4:	2300      	movs	r3, #0
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3710      	adds	r7, #16
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}

080118ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80118ae:	b580      	push	{r7, lr}
 80118b0:	b082      	sub	sp, #8
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d101      	bne.n	80118c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80118bc:	2301      	movs	r3, #1
 80118be:	e049      	b.n	8011954 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80118c6:	b2db      	uxtb	r3, r3
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d106      	bne.n	80118da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2200      	movs	r2, #0
 80118d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f7f1 fd1b 	bl	8003310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2202      	movs	r2, #2
 80118de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681a      	ldr	r2, [r3, #0]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	3304      	adds	r3, #4
 80118ea:	4619      	mov	r1, r3
 80118ec:	4610      	mov	r0, r2
 80118ee:	f000 fc11 	bl	8012114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2201      	movs	r2, #1
 80118f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2201      	movs	r2, #1
 80118fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2201      	movs	r2, #1
 8011906:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2201      	movs	r2, #1
 801190e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2201      	movs	r2, #1
 8011916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2201      	movs	r2, #1
 801191e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2201      	movs	r2, #1
 8011926:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2201      	movs	r2, #1
 801192e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2201      	movs	r2, #1
 8011936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2201      	movs	r2, #1
 801193e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2201      	movs	r2, #1
 8011946:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2201      	movs	r2, #1
 801194e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011952:	2300      	movs	r3, #0
}
 8011954:	4618      	mov	r0, r3
 8011956:	3708      	adds	r7, #8
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801195c:	b480      	push	{r7}
 801195e:	b085      	sub	sp, #20
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801196a:	b2db      	uxtb	r3, r3
 801196c:	2b01      	cmp	r3, #1
 801196e:	d001      	beq.n	8011974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011970:	2301      	movs	r3, #1
 8011972:	e054      	b.n	8011a1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2202      	movs	r2, #2
 8011978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	68da      	ldr	r2, [r3, #12]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	f042 0201 	orr.w	r2, r2, #1
 801198a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	4a26      	ldr	r2, [pc, #152]	@ (8011a2c <HAL_TIM_Base_Start_IT+0xd0>)
 8011992:	4293      	cmp	r3, r2
 8011994:	d022      	beq.n	80119dc <HAL_TIM_Base_Start_IT+0x80>
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801199e:	d01d      	beq.n	80119dc <HAL_TIM_Base_Start_IT+0x80>
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	4a22      	ldr	r2, [pc, #136]	@ (8011a30 <HAL_TIM_Base_Start_IT+0xd4>)
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d018      	beq.n	80119dc <HAL_TIM_Base_Start_IT+0x80>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	4a21      	ldr	r2, [pc, #132]	@ (8011a34 <HAL_TIM_Base_Start_IT+0xd8>)
 80119b0:	4293      	cmp	r3, r2
 80119b2:	d013      	beq.n	80119dc <HAL_TIM_Base_Start_IT+0x80>
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4a1f      	ldr	r2, [pc, #124]	@ (8011a38 <HAL_TIM_Base_Start_IT+0xdc>)
 80119ba:	4293      	cmp	r3, r2
 80119bc:	d00e      	beq.n	80119dc <HAL_TIM_Base_Start_IT+0x80>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	4a1e      	ldr	r2, [pc, #120]	@ (8011a3c <HAL_TIM_Base_Start_IT+0xe0>)
 80119c4:	4293      	cmp	r3, r2
 80119c6:	d009      	beq.n	80119dc <HAL_TIM_Base_Start_IT+0x80>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4a1c      	ldr	r2, [pc, #112]	@ (8011a40 <HAL_TIM_Base_Start_IT+0xe4>)
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d004      	beq.n	80119dc <HAL_TIM_Base_Start_IT+0x80>
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	4a1b      	ldr	r2, [pc, #108]	@ (8011a44 <HAL_TIM_Base_Start_IT+0xe8>)
 80119d8:	4293      	cmp	r3, r2
 80119da:	d115      	bne.n	8011a08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	689a      	ldr	r2, [r3, #8]
 80119e2:	4b19      	ldr	r3, [pc, #100]	@ (8011a48 <HAL_TIM_Base_Start_IT+0xec>)
 80119e4:	4013      	ands	r3, r2
 80119e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2b06      	cmp	r3, #6
 80119ec:	d015      	beq.n	8011a1a <HAL_TIM_Base_Start_IT+0xbe>
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80119f4:	d011      	beq.n	8011a1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	681a      	ldr	r2, [r3, #0]
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f042 0201 	orr.w	r2, r2, #1
 8011a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011a06:	e008      	b.n	8011a1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	681a      	ldr	r2, [r3, #0]
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	f042 0201 	orr.w	r2, r2, #1
 8011a16:	601a      	str	r2, [r3, #0]
 8011a18:	e000      	b.n	8011a1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011a1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011a1c:	2300      	movs	r3, #0
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3714      	adds	r7, #20
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr
 8011a2a:	bf00      	nop
 8011a2c:	40010000 	.word	0x40010000
 8011a30:	40000400 	.word	0x40000400
 8011a34:	40000800 	.word	0x40000800
 8011a38:	40000c00 	.word	0x40000c00
 8011a3c:	40010400 	.word	0x40010400
 8011a40:	40014000 	.word	0x40014000
 8011a44:	40001800 	.word	0x40001800
 8011a48:	00010007 	.word	0x00010007

08011a4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d101      	bne.n	8011a5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	e049      	b.n	8011af2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d106      	bne.n	8011a78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f7f1 fcba 	bl	80033ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2202      	movs	r2, #2
 8011a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681a      	ldr	r2, [r3, #0]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	3304      	adds	r3, #4
 8011a88:	4619      	mov	r1, r3
 8011a8a:	4610      	mov	r0, r2
 8011a8c:	f000 fb42 	bl	8012114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2201      	movs	r2, #1
 8011a94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2201      	movs	r2, #1
 8011aa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2201      	movs	r2, #1
 8011aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2201      	movs	r2, #1
 8011abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2201      	movs	r2, #1
 8011ac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2201      	movs	r2, #1
 8011acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2201      	movs	r2, #1
 8011adc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2201      	movs	r2, #1
 8011ae4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2201      	movs	r2, #1
 8011aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3708      	adds	r7, #8
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}

08011afa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011afa:	b580      	push	{r7, lr}
 8011afc:	b084      	sub	sp, #16
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	691b      	ldr	r3, [r3, #16]
 8011b10:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	f003 0302 	and.w	r3, r3, #2
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d020      	beq.n	8011b5e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	f003 0302 	and.w	r3, r3, #2
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d01b      	beq.n	8011b5e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f06f 0202 	mvn.w	r2, #2
 8011b2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2201      	movs	r2, #1
 8011b34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	699b      	ldr	r3, [r3, #24]
 8011b3c:	f003 0303 	and.w	r3, r3, #3
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d003      	beq.n	8011b4c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f000 fac7 	bl	80120d8 <HAL_TIM_IC_CaptureCallback>
 8011b4a:	e005      	b.n	8011b58 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f000 fab9 	bl	80120c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f000 faca 	bl	80120ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	f003 0304 	and.w	r3, r3, #4
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d020      	beq.n	8011baa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	f003 0304 	and.w	r3, r3, #4
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d01b      	beq.n	8011baa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	f06f 0204 	mvn.w	r2, #4
 8011b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2202      	movs	r2, #2
 8011b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	699b      	ldr	r3, [r3, #24]
 8011b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d003      	beq.n	8011b98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f000 faa1 	bl	80120d8 <HAL_TIM_IC_CaptureCallback>
 8011b96:	e005      	b.n	8011ba4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f000 fa93 	bl	80120c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f000 faa4 	bl	80120ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	f003 0308 	and.w	r3, r3, #8
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d020      	beq.n	8011bf6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f003 0308 	and.w	r3, r3, #8
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d01b      	beq.n	8011bf6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f06f 0208 	mvn.w	r2, #8
 8011bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2204      	movs	r2, #4
 8011bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	69db      	ldr	r3, [r3, #28]
 8011bd4:	f003 0303 	and.w	r3, r3, #3
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d003      	beq.n	8011be4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f000 fa7b 	bl	80120d8 <HAL_TIM_IC_CaptureCallback>
 8011be2:	e005      	b.n	8011bf0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f000 fa6d 	bl	80120c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f000 fa7e 	bl	80120ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	f003 0310 	and.w	r3, r3, #16
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d020      	beq.n	8011c42 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f003 0310 	and.w	r3, r3, #16
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d01b      	beq.n	8011c42 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	f06f 0210 	mvn.w	r2, #16
 8011c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2208      	movs	r2, #8
 8011c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	69db      	ldr	r3, [r3, #28]
 8011c20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d003      	beq.n	8011c30 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f000 fa55 	bl	80120d8 <HAL_TIM_IC_CaptureCallback>
 8011c2e:	e005      	b.n	8011c3c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f000 fa47 	bl	80120c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f000 fa58 	bl	80120ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	f003 0301 	and.w	r3, r3, #1
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d00c      	beq.n	8011c66 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f003 0301 	and.w	r3, r3, #1
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d007      	beq.n	8011c66 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	f06f 0201 	mvn.w	r2, #1
 8011c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f7f0 fe87 	bl	8002974 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d104      	bne.n	8011c7a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d00c      	beq.n	8011c94 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d007      	beq.n	8011c94 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8011c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f000 fefa 	bl	8012a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00c      	beq.n	8011cb8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d007      	beq.n	8011cb8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8011cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f000 fef2 	bl	8012a9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d00c      	beq.n	8011cdc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d007      	beq.n	8011cdc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f000 fa12 	bl	8012100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	f003 0320 	and.w	r3, r3, #32
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d00c      	beq.n	8011d00 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f003 0320 	and.w	r3, r3, #32
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d007      	beq.n	8011d00 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f06f 0220 	mvn.w	r2, #32
 8011cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f000 feba 	bl	8012a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011d00:	bf00      	nop
 8011d02:	3710      	adds	r7, #16
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}

08011d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b086      	sub	sp, #24
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011d14:	2300      	movs	r3, #0
 8011d16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d101      	bne.n	8011d26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011d22:	2302      	movs	r3, #2
 8011d24:	e0ff      	b.n	8011f26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2201      	movs	r2, #1
 8011d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2b14      	cmp	r3, #20
 8011d32:	f200 80f0 	bhi.w	8011f16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011d36:	a201      	add	r2, pc, #4	@ (adr r2, 8011d3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d3c:	08011d91 	.word	0x08011d91
 8011d40:	08011f17 	.word	0x08011f17
 8011d44:	08011f17 	.word	0x08011f17
 8011d48:	08011f17 	.word	0x08011f17
 8011d4c:	08011dd1 	.word	0x08011dd1
 8011d50:	08011f17 	.word	0x08011f17
 8011d54:	08011f17 	.word	0x08011f17
 8011d58:	08011f17 	.word	0x08011f17
 8011d5c:	08011e13 	.word	0x08011e13
 8011d60:	08011f17 	.word	0x08011f17
 8011d64:	08011f17 	.word	0x08011f17
 8011d68:	08011f17 	.word	0x08011f17
 8011d6c:	08011e53 	.word	0x08011e53
 8011d70:	08011f17 	.word	0x08011f17
 8011d74:	08011f17 	.word	0x08011f17
 8011d78:	08011f17 	.word	0x08011f17
 8011d7c:	08011e95 	.word	0x08011e95
 8011d80:	08011f17 	.word	0x08011f17
 8011d84:	08011f17 	.word	0x08011f17
 8011d88:	08011f17 	.word	0x08011f17
 8011d8c:	08011ed5 	.word	0x08011ed5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	68b9      	ldr	r1, [r7, #8]
 8011d96:	4618      	mov	r0, r3
 8011d98:	f000 fa68 	bl	801226c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	699a      	ldr	r2, [r3, #24]
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f042 0208 	orr.w	r2, r2, #8
 8011daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	699a      	ldr	r2, [r3, #24]
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	f022 0204 	bic.w	r2, r2, #4
 8011dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	6999      	ldr	r1, [r3, #24]
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	691a      	ldr	r2, [r3, #16]
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	430a      	orrs	r2, r1
 8011dcc:	619a      	str	r2, [r3, #24]
      break;
 8011dce:	e0a5      	b.n	8011f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	68b9      	ldr	r1, [r7, #8]
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f000 faba 	bl	8012350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	699a      	ldr	r2, [r3, #24]
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	699a      	ldr	r2, [r3, #24]
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	6999      	ldr	r1, [r3, #24]
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	691b      	ldr	r3, [r3, #16]
 8011e06:	021a      	lsls	r2, r3, #8
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	430a      	orrs	r2, r1
 8011e0e:	619a      	str	r2, [r3, #24]
      break;
 8011e10:	e084      	b.n	8011f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	68b9      	ldr	r1, [r7, #8]
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f000 fb11 	bl	8012440 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	69da      	ldr	r2, [r3, #28]
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	f042 0208 	orr.w	r2, r2, #8
 8011e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	69da      	ldr	r2, [r3, #28]
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f022 0204 	bic.w	r2, r2, #4
 8011e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	69d9      	ldr	r1, [r3, #28]
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	691a      	ldr	r2, [r3, #16]
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	430a      	orrs	r2, r1
 8011e4e:	61da      	str	r2, [r3, #28]
      break;
 8011e50:	e064      	b.n	8011f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	68b9      	ldr	r1, [r7, #8]
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f000 fb67 	bl	801252c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	69da      	ldr	r2, [r3, #28]
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	69da      	ldr	r2, [r3, #28]
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	69d9      	ldr	r1, [r3, #28]
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	691b      	ldr	r3, [r3, #16]
 8011e88:	021a      	lsls	r2, r3, #8
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	430a      	orrs	r2, r1
 8011e90:	61da      	str	r2, [r3, #28]
      break;
 8011e92:	e043      	b.n	8011f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	68b9      	ldr	r1, [r7, #8]
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f000 fb9e 	bl	80125dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f042 0208 	orr.w	r2, r2, #8
 8011eae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	f022 0204 	bic.w	r2, r2, #4
 8011ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	691a      	ldr	r2, [r3, #16]
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	430a      	orrs	r2, r1
 8011ed0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011ed2:	e023      	b.n	8011f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	68b9      	ldr	r1, [r7, #8]
 8011eda:	4618      	mov	r0, r3
 8011edc:	f000 fbd0 	bl	8012680 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011eee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011efe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	691b      	ldr	r3, [r3, #16]
 8011f0a:	021a      	lsls	r2, r3, #8
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	430a      	orrs	r2, r1
 8011f12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011f14:	e002      	b.n	8011f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011f16:	2301      	movs	r3, #1
 8011f18:	75fb      	strb	r3, [r7, #23]
      break;
 8011f1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3718      	adds	r7, #24
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop

08011f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b084      	sub	sp, #16
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011f44:	2b01      	cmp	r3, #1
 8011f46:	d101      	bne.n	8011f4c <HAL_TIM_ConfigClockSource+0x1c>
 8011f48:	2302      	movs	r3, #2
 8011f4a:	e0b4      	b.n	80120b6 <HAL_TIM_ConfigClockSource+0x186>
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2201      	movs	r2, #1
 8011f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2202      	movs	r2, #2
 8011f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	689b      	ldr	r3, [r3, #8]
 8011f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011f64:	68ba      	ldr	r2, [r7, #8]
 8011f66:	4b56      	ldr	r3, [pc, #344]	@ (80120c0 <HAL_TIM_ConfigClockSource+0x190>)
 8011f68:	4013      	ands	r3, r2
 8011f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	68ba      	ldr	r2, [r7, #8]
 8011f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011f84:	d03e      	beq.n	8012004 <HAL_TIM_ConfigClockSource+0xd4>
 8011f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011f8a:	f200 8087 	bhi.w	801209c <HAL_TIM_ConfigClockSource+0x16c>
 8011f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011f92:	f000 8086 	beq.w	80120a2 <HAL_TIM_ConfigClockSource+0x172>
 8011f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011f9a:	d87f      	bhi.n	801209c <HAL_TIM_ConfigClockSource+0x16c>
 8011f9c:	2b70      	cmp	r3, #112	@ 0x70
 8011f9e:	d01a      	beq.n	8011fd6 <HAL_TIM_ConfigClockSource+0xa6>
 8011fa0:	2b70      	cmp	r3, #112	@ 0x70
 8011fa2:	d87b      	bhi.n	801209c <HAL_TIM_ConfigClockSource+0x16c>
 8011fa4:	2b60      	cmp	r3, #96	@ 0x60
 8011fa6:	d050      	beq.n	801204a <HAL_TIM_ConfigClockSource+0x11a>
 8011fa8:	2b60      	cmp	r3, #96	@ 0x60
 8011faa:	d877      	bhi.n	801209c <HAL_TIM_ConfigClockSource+0x16c>
 8011fac:	2b50      	cmp	r3, #80	@ 0x50
 8011fae:	d03c      	beq.n	801202a <HAL_TIM_ConfigClockSource+0xfa>
 8011fb0:	2b50      	cmp	r3, #80	@ 0x50
 8011fb2:	d873      	bhi.n	801209c <HAL_TIM_ConfigClockSource+0x16c>
 8011fb4:	2b40      	cmp	r3, #64	@ 0x40
 8011fb6:	d058      	beq.n	801206a <HAL_TIM_ConfigClockSource+0x13a>
 8011fb8:	2b40      	cmp	r3, #64	@ 0x40
 8011fba:	d86f      	bhi.n	801209c <HAL_TIM_ConfigClockSource+0x16c>
 8011fbc:	2b30      	cmp	r3, #48	@ 0x30
 8011fbe:	d064      	beq.n	801208a <HAL_TIM_ConfigClockSource+0x15a>
 8011fc0:	2b30      	cmp	r3, #48	@ 0x30
 8011fc2:	d86b      	bhi.n	801209c <HAL_TIM_ConfigClockSource+0x16c>
 8011fc4:	2b20      	cmp	r3, #32
 8011fc6:	d060      	beq.n	801208a <HAL_TIM_ConfigClockSource+0x15a>
 8011fc8:	2b20      	cmp	r3, #32
 8011fca:	d867      	bhi.n	801209c <HAL_TIM_ConfigClockSource+0x16c>
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d05c      	beq.n	801208a <HAL_TIM_ConfigClockSource+0x15a>
 8011fd0:	2b10      	cmp	r3, #16
 8011fd2:	d05a      	beq.n	801208a <HAL_TIM_ConfigClockSource+0x15a>
 8011fd4:	e062      	b.n	801209c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011fe6:	f000 fc19 	bl	801281c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	689b      	ldr	r3, [r3, #8]
 8011ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8011ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	68ba      	ldr	r2, [r7, #8]
 8012000:	609a      	str	r2, [r3, #8]
      break;
 8012002:	e04f      	b.n	80120a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012014:	f000 fc02 	bl	801281c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	689a      	ldr	r2, [r3, #8]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012026:	609a      	str	r2, [r3, #8]
      break;
 8012028:	e03c      	b.n	80120a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012036:	461a      	mov	r2, r3
 8012038:	f000 fb76 	bl	8012728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	2150      	movs	r1, #80	@ 0x50
 8012042:	4618      	mov	r0, r3
 8012044:	f000 fbcf 	bl	80127e6 <TIM_ITRx_SetConfig>
      break;
 8012048:	e02c      	b.n	80120a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012056:	461a      	mov	r2, r3
 8012058:	f000 fb95 	bl	8012786 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	2160      	movs	r1, #96	@ 0x60
 8012062:	4618      	mov	r0, r3
 8012064:	f000 fbbf 	bl	80127e6 <TIM_ITRx_SetConfig>
      break;
 8012068:	e01c      	b.n	80120a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012076:	461a      	mov	r2, r3
 8012078:	f000 fb56 	bl	8012728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	2140      	movs	r1, #64	@ 0x40
 8012082:	4618      	mov	r0, r3
 8012084:	f000 fbaf 	bl	80127e6 <TIM_ITRx_SetConfig>
      break;
 8012088:	e00c      	b.n	80120a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681a      	ldr	r2, [r3, #0]
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	4619      	mov	r1, r3
 8012094:	4610      	mov	r0, r2
 8012096:	f000 fba6 	bl	80127e6 <TIM_ITRx_SetConfig>
      break;
 801209a:	e003      	b.n	80120a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801209c:	2301      	movs	r3, #1
 801209e:	73fb      	strb	r3, [r7, #15]
      break;
 80120a0:	e000      	b.n	80120a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80120a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2201      	movs	r2, #1
 80120a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2200      	movs	r2, #0
 80120b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80120b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3710      	adds	r7, #16
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	bf00      	nop
 80120c0:	fffeff88 	.word	0xfffeff88

080120c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80120c4:	b480      	push	{r7}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80120cc:	bf00      	nop
 80120ce:	370c      	adds	r7, #12
 80120d0:	46bd      	mov	sp, r7
 80120d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d6:	4770      	bx	lr

080120d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80120d8:	b480      	push	{r7}
 80120da:	b083      	sub	sp, #12
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80120e0:	bf00      	nop
 80120e2:	370c      	adds	r7, #12
 80120e4:	46bd      	mov	sp, r7
 80120e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ea:	4770      	bx	lr

080120ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80120ec:	b480      	push	{r7}
 80120ee:	b083      	sub	sp, #12
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80120f4:	bf00      	nop
 80120f6:	370c      	adds	r7, #12
 80120f8:	46bd      	mov	sp, r7
 80120fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fe:	4770      	bx	lr

08012100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012100:	b480      	push	{r7}
 8012102:	b083      	sub	sp, #12
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012108:	bf00      	nop
 801210a:	370c      	adds	r7, #12
 801210c:	46bd      	mov	sp, r7
 801210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012112:	4770      	bx	lr

08012114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012114:	b480      	push	{r7}
 8012116:	b085      	sub	sp, #20
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	4a46      	ldr	r2, [pc, #280]	@ (8012240 <TIM_Base_SetConfig+0x12c>)
 8012128:	4293      	cmp	r3, r2
 801212a:	d013      	beq.n	8012154 <TIM_Base_SetConfig+0x40>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012132:	d00f      	beq.n	8012154 <TIM_Base_SetConfig+0x40>
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	4a43      	ldr	r2, [pc, #268]	@ (8012244 <TIM_Base_SetConfig+0x130>)
 8012138:	4293      	cmp	r3, r2
 801213a:	d00b      	beq.n	8012154 <TIM_Base_SetConfig+0x40>
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	4a42      	ldr	r2, [pc, #264]	@ (8012248 <TIM_Base_SetConfig+0x134>)
 8012140:	4293      	cmp	r3, r2
 8012142:	d007      	beq.n	8012154 <TIM_Base_SetConfig+0x40>
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	4a41      	ldr	r2, [pc, #260]	@ (801224c <TIM_Base_SetConfig+0x138>)
 8012148:	4293      	cmp	r3, r2
 801214a:	d003      	beq.n	8012154 <TIM_Base_SetConfig+0x40>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	4a40      	ldr	r2, [pc, #256]	@ (8012250 <TIM_Base_SetConfig+0x13c>)
 8012150:	4293      	cmp	r3, r2
 8012152:	d108      	bne.n	8012166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801215a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	685b      	ldr	r3, [r3, #4]
 8012160:	68fa      	ldr	r2, [r7, #12]
 8012162:	4313      	orrs	r3, r2
 8012164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4a35      	ldr	r2, [pc, #212]	@ (8012240 <TIM_Base_SetConfig+0x12c>)
 801216a:	4293      	cmp	r3, r2
 801216c:	d02b      	beq.n	80121c6 <TIM_Base_SetConfig+0xb2>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012174:	d027      	beq.n	80121c6 <TIM_Base_SetConfig+0xb2>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	4a32      	ldr	r2, [pc, #200]	@ (8012244 <TIM_Base_SetConfig+0x130>)
 801217a:	4293      	cmp	r3, r2
 801217c:	d023      	beq.n	80121c6 <TIM_Base_SetConfig+0xb2>
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	4a31      	ldr	r2, [pc, #196]	@ (8012248 <TIM_Base_SetConfig+0x134>)
 8012182:	4293      	cmp	r3, r2
 8012184:	d01f      	beq.n	80121c6 <TIM_Base_SetConfig+0xb2>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	4a30      	ldr	r2, [pc, #192]	@ (801224c <TIM_Base_SetConfig+0x138>)
 801218a:	4293      	cmp	r3, r2
 801218c:	d01b      	beq.n	80121c6 <TIM_Base_SetConfig+0xb2>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	4a2f      	ldr	r2, [pc, #188]	@ (8012250 <TIM_Base_SetConfig+0x13c>)
 8012192:	4293      	cmp	r3, r2
 8012194:	d017      	beq.n	80121c6 <TIM_Base_SetConfig+0xb2>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	4a2e      	ldr	r2, [pc, #184]	@ (8012254 <TIM_Base_SetConfig+0x140>)
 801219a:	4293      	cmp	r3, r2
 801219c:	d013      	beq.n	80121c6 <TIM_Base_SetConfig+0xb2>
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	4a2d      	ldr	r2, [pc, #180]	@ (8012258 <TIM_Base_SetConfig+0x144>)
 80121a2:	4293      	cmp	r3, r2
 80121a4:	d00f      	beq.n	80121c6 <TIM_Base_SetConfig+0xb2>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4a2c      	ldr	r2, [pc, #176]	@ (801225c <TIM_Base_SetConfig+0x148>)
 80121aa:	4293      	cmp	r3, r2
 80121ac:	d00b      	beq.n	80121c6 <TIM_Base_SetConfig+0xb2>
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	4a2b      	ldr	r2, [pc, #172]	@ (8012260 <TIM_Base_SetConfig+0x14c>)
 80121b2:	4293      	cmp	r3, r2
 80121b4:	d007      	beq.n	80121c6 <TIM_Base_SetConfig+0xb2>
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	4a2a      	ldr	r2, [pc, #168]	@ (8012264 <TIM_Base_SetConfig+0x150>)
 80121ba:	4293      	cmp	r3, r2
 80121bc:	d003      	beq.n	80121c6 <TIM_Base_SetConfig+0xb2>
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	4a29      	ldr	r2, [pc, #164]	@ (8012268 <TIM_Base_SetConfig+0x154>)
 80121c2:	4293      	cmp	r3, r2
 80121c4:	d108      	bne.n	80121d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80121cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	68db      	ldr	r3, [r3, #12]
 80121d2:	68fa      	ldr	r2, [r7, #12]
 80121d4:	4313      	orrs	r3, r2
 80121d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	695b      	ldr	r3, [r3, #20]
 80121e2:	4313      	orrs	r3, r2
 80121e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	68fa      	ldr	r2, [r7, #12]
 80121ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	689a      	ldr	r2, [r3, #8]
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	681a      	ldr	r2, [r3, #0]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	4a10      	ldr	r2, [pc, #64]	@ (8012240 <TIM_Base_SetConfig+0x12c>)
 8012200:	4293      	cmp	r3, r2
 8012202:	d003      	beq.n	801220c <TIM_Base_SetConfig+0xf8>
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	4a12      	ldr	r2, [pc, #72]	@ (8012250 <TIM_Base_SetConfig+0x13c>)
 8012208:	4293      	cmp	r3, r2
 801220a:	d103      	bne.n	8012214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	691a      	ldr	r2, [r3, #16]
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2201      	movs	r2, #1
 8012218:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	691b      	ldr	r3, [r3, #16]
 801221e:	f003 0301 	and.w	r3, r3, #1
 8012222:	2b01      	cmp	r3, #1
 8012224:	d105      	bne.n	8012232 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	691b      	ldr	r3, [r3, #16]
 801222a:	f023 0201 	bic.w	r2, r3, #1
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	611a      	str	r2, [r3, #16]
  }
}
 8012232:	bf00      	nop
 8012234:	3714      	adds	r7, #20
 8012236:	46bd      	mov	sp, r7
 8012238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop
 8012240:	40010000 	.word	0x40010000
 8012244:	40000400 	.word	0x40000400
 8012248:	40000800 	.word	0x40000800
 801224c:	40000c00 	.word	0x40000c00
 8012250:	40010400 	.word	0x40010400
 8012254:	40014000 	.word	0x40014000
 8012258:	40014400 	.word	0x40014400
 801225c:	40014800 	.word	0x40014800
 8012260:	40001800 	.word	0x40001800
 8012264:	40001c00 	.word	0x40001c00
 8012268:	40002000 	.word	0x40002000

0801226c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801226c:	b480      	push	{r7}
 801226e:	b087      	sub	sp, #28
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6a1b      	ldr	r3, [r3, #32]
 801227a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	6a1b      	ldr	r3, [r3, #32]
 8012280:	f023 0201 	bic.w	r2, r3, #1
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	685b      	ldr	r3, [r3, #4]
 801228c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	699b      	ldr	r3, [r3, #24]
 8012292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012294:	68fa      	ldr	r2, [r7, #12]
 8012296:	4b2b      	ldr	r3, [pc, #172]	@ (8012344 <TIM_OC1_SetConfig+0xd8>)
 8012298:	4013      	ands	r3, r2
 801229a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	f023 0303 	bic.w	r3, r3, #3
 80122a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	68fa      	ldr	r2, [r7, #12]
 80122aa:	4313      	orrs	r3, r2
 80122ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	f023 0302 	bic.w	r3, r3, #2
 80122b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	689b      	ldr	r3, [r3, #8]
 80122ba:	697a      	ldr	r2, [r7, #20]
 80122bc:	4313      	orrs	r3, r2
 80122be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	4a21      	ldr	r2, [pc, #132]	@ (8012348 <TIM_OC1_SetConfig+0xdc>)
 80122c4:	4293      	cmp	r3, r2
 80122c6:	d003      	beq.n	80122d0 <TIM_OC1_SetConfig+0x64>
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	4a20      	ldr	r2, [pc, #128]	@ (801234c <TIM_OC1_SetConfig+0xe0>)
 80122cc:	4293      	cmp	r3, r2
 80122ce:	d10c      	bne.n	80122ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	f023 0308 	bic.w	r3, r3, #8
 80122d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	697a      	ldr	r2, [r7, #20]
 80122de:	4313      	orrs	r3, r2
 80122e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	f023 0304 	bic.w	r3, r3, #4
 80122e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	4a16      	ldr	r2, [pc, #88]	@ (8012348 <TIM_OC1_SetConfig+0xdc>)
 80122ee:	4293      	cmp	r3, r2
 80122f0:	d003      	beq.n	80122fa <TIM_OC1_SetConfig+0x8e>
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	4a15      	ldr	r2, [pc, #84]	@ (801234c <TIM_OC1_SetConfig+0xe0>)
 80122f6:	4293      	cmp	r3, r2
 80122f8:	d111      	bne.n	801231e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	695b      	ldr	r3, [r3, #20]
 801230e:	693a      	ldr	r2, [r7, #16]
 8012310:	4313      	orrs	r3, r2
 8012312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	699b      	ldr	r3, [r3, #24]
 8012318:	693a      	ldr	r2, [r7, #16]
 801231a:	4313      	orrs	r3, r2
 801231c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	693a      	ldr	r2, [r7, #16]
 8012322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	68fa      	ldr	r2, [r7, #12]
 8012328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	685a      	ldr	r2, [r3, #4]
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	697a      	ldr	r2, [r7, #20]
 8012336:	621a      	str	r2, [r3, #32]
}
 8012338:	bf00      	nop
 801233a:	371c      	adds	r7, #28
 801233c:	46bd      	mov	sp, r7
 801233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012342:	4770      	bx	lr
 8012344:	fffeff8f 	.word	0xfffeff8f
 8012348:	40010000 	.word	0x40010000
 801234c:	40010400 	.word	0x40010400

08012350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012350:	b480      	push	{r7}
 8012352:	b087      	sub	sp, #28
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6a1b      	ldr	r3, [r3, #32]
 801235e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6a1b      	ldr	r3, [r3, #32]
 8012364:	f023 0210 	bic.w	r2, r3, #16
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	685b      	ldr	r3, [r3, #4]
 8012370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	699b      	ldr	r3, [r3, #24]
 8012376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012378:	68fa      	ldr	r2, [r7, #12]
 801237a:	4b2e      	ldr	r3, [pc, #184]	@ (8012434 <TIM_OC2_SetConfig+0xe4>)
 801237c:	4013      	ands	r3, r2
 801237e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	021b      	lsls	r3, r3, #8
 801238e:	68fa      	ldr	r2, [r7, #12]
 8012390:	4313      	orrs	r3, r2
 8012392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	f023 0320 	bic.w	r3, r3, #32
 801239a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	689b      	ldr	r3, [r3, #8]
 80123a0:	011b      	lsls	r3, r3, #4
 80123a2:	697a      	ldr	r2, [r7, #20]
 80123a4:	4313      	orrs	r3, r2
 80123a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	4a23      	ldr	r2, [pc, #140]	@ (8012438 <TIM_OC2_SetConfig+0xe8>)
 80123ac:	4293      	cmp	r3, r2
 80123ae:	d003      	beq.n	80123b8 <TIM_OC2_SetConfig+0x68>
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	4a22      	ldr	r2, [pc, #136]	@ (801243c <TIM_OC2_SetConfig+0xec>)
 80123b4:	4293      	cmp	r3, r2
 80123b6:	d10d      	bne.n	80123d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80123be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	68db      	ldr	r3, [r3, #12]
 80123c4:	011b      	lsls	r3, r3, #4
 80123c6:	697a      	ldr	r2, [r7, #20]
 80123c8:	4313      	orrs	r3, r2
 80123ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80123d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	4a18      	ldr	r2, [pc, #96]	@ (8012438 <TIM_OC2_SetConfig+0xe8>)
 80123d8:	4293      	cmp	r3, r2
 80123da:	d003      	beq.n	80123e4 <TIM_OC2_SetConfig+0x94>
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	4a17      	ldr	r2, [pc, #92]	@ (801243c <TIM_OC2_SetConfig+0xec>)
 80123e0:	4293      	cmp	r3, r2
 80123e2:	d113      	bne.n	801240c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80123ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80123ec:	693b      	ldr	r3, [r7, #16]
 80123ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80123f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	695b      	ldr	r3, [r3, #20]
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	693a      	ldr	r2, [r7, #16]
 80123fc:	4313      	orrs	r3, r2
 80123fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	699b      	ldr	r3, [r3, #24]
 8012404:	009b      	lsls	r3, r3, #2
 8012406:	693a      	ldr	r2, [r7, #16]
 8012408:	4313      	orrs	r3, r2
 801240a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	693a      	ldr	r2, [r7, #16]
 8012410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	68fa      	ldr	r2, [r7, #12]
 8012416:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	685a      	ldr	r2, [r3, #4]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	697a      	ldr	r2, [r7, #20]
 8012424:	621a      	str	r2, [r3, #32]
}
 8012426:	bf00      	nop
 8012428:	371c      	adds	r7, #28
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr
 8012432:	bf00      	nop
 8012434:	feff8fff 	.word	0xfeff8fff
 8012438:	40010000 	.word	0x40010000
 801243c:	40010400 	.word	0x40010400

08012440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012440:	b480      	push	{r7}
 8012442:	b087      	sub	sp, #28
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6a1b      	ldr	r3, [r3, #32]
 801244e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6a1b      	ldr	r3, [r3, #32]
 8012454:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	69db      	ldr	r3, [r3, #28]
 8012466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012468:	68fa      	ldr	r2, [r7, #12]
 801246a:	4b2d      	ldr	r3, [pc, #180]	@ (8012520 <TIM_OC3_SetConfig+0xe0>)
 801246c:	4013      	ands	r3, r2
 801246e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f023 0303 	bic.w	r3, r3, #3
 8012476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	68fa      	ldr	r2, [r7, #12]
 801247e:	4313      	orrs	r3, r2
 8012480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	689b      	ldr	r3, [r3, #8]
 801248e:	021b      	lsls	r3, r3, #8
 8012490:	697a      	ldr	r2, [r7, #20]
 8012492:	4313      	orrs	r3, r2
 8012494:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	4a22      	ldr	r2, [pc, #136]	@ (8012524 <TIM_OC3_SetConfig+0xe4>)
 801249a:	4293      	cmp	r3, r2
 801249c:	d003      	beq.n	80124a6 <TIM_OC3_SetConfig+0x66>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	4a21      	ldr	r2, [pc, #132]	@ (8012528 <TIM_OC3_SetConfig+0xe8>)
 80124a2:	4293      	cmp	r3, r2
 80124a4:	d10d      	bne.n	80124c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80124ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	68db      	ldr	r3, [r3, #12]
 80124b2:	021b      	lsls	r3, r3, #8
 80124b4:	697a      	ldr	r2, [r7, #20]
 80124b6:	4313      	orrs	r3, r2
 80124b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80124c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	4a17      	ldr	r2, [pc, #92]	@ (8012524 <TIM_OC3_SetConfig+0xe4>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d003      	beq.n	80124d2 <TIM_OC3_SetConfig+0x92>
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	4a16      	ldr	r2, [pc, #88]	@ (8012528 <TIM_OC3_SetConfig+0xe8>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d113      	bne.n	80124fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80124d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80124da:	693b      	ldr	r3, [r7, #16]
 80124dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80124e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80124e2:	683b      	ldr	r3, [r7, #0]
 80124e4:	695b      	ldr	r3, [r3, #20]
 80124e6:	011b      	lsls	r3, r3, #4
 80124e8:	693a      	ldr	r2, [r7, #16]
 80124ea:	4313      	orrs	r3, r2
 80124ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	699b      	ldr	r3, [r3, #24]
 80124f2:	011b      	lsls	r3, r3, #4
 80124f4:	693a      	ldr	r2, [r7, #16]
 80124f6:	4313      	orrs	r3, r2
 80124f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	693a      	ldr	r2, [r7, #16]
 80124fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	68fa      	ldr	r2, [r7, #12]
 8012504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	685a      	ldr	r2, [r3, #4]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	697a      	ldr	r2, [r7, #20]
 8012512:	621a      	str	r2, [r3, #32]
}
 8012514:	bf00      	nop
 8012516:	371c      	adds	r7, #28
 8012518:	46bd      	mov	sp, r7
 801251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251e:	4770      	bx	lr
 8012520:	fffeff8f 	.word	0xfffeff8f
 8012524:	40010000 	.word	0x40010000
 8012528:	40010400 	.word	0x40010400

0801252c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801252c:	b480      	push	{r7}
 801252e:	b087      	sub	sp, #28
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6a1b      	ldr	r3, [r3, #32]
 801253a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6a1b      	ldr	r3, [r3, #32]
 8012540:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	685b      	ldr	r3, [r3, #4]
 801254c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	69db      	ldr	r3, [r3, #28]
 8012552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012554:	68fa      	ldr	r2, [r7, #12]
 8012556:	4b1e      	ldr	r3, [pc, #120]	@ (80125d0 <TIM_OC4_SetConfig+0xa4>)
 8012558:	4013      	ands	r3, r2
 801255a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	021b      	lsls	r3, r3, #8
 801256a:	68fa      	ldr	r2, [r7, #12]
 801256c:	4313      	orrs	r3, r2
 801256e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	689b      	ldr	r3, [r3, #8]
 801257c:	031b      	lsls	r3, r3, #12
 801257e:	693a      	ldr	r2, [r7, #16]
 8012580:	4313      	orrs	r3, r2
 8012582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	4a13      	ldr	r2, [pc, #76]	@ (80125d4 <TIM_OC4_SetConfig+0xa8>)
 8012588:	4293      	cmp	r3, r2
 801258a:	d003      	beq.n	8012594 <TIM_OC4_SetConfig+0x68>
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	4a12      	ldr	r2, [pc, #72]	@ (80125d8 <TIM_OC4_SetConfig+0xac>)
 8012590:	4293      	cmp	r3, r2
 8012592:	d109      	bne.n	80125a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801259a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	695b      	ldr	r3, [r3, #20]
 80125a0:	019b      	lsls	r3, r3, #6
 80125a2:	697a      	ldr	r2, [r7, #20]
 80125a4:	4313      	orrs	r3, r2
 80125a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	697a      	ldr	r2, [r7, #20]
 80125ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	68fa      	ldr	r2, [r7, #12]
 80125b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	685a      	ldr	r2, [r3, #4]
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	693a      	ldr	r2, [r7, #16]
 80125c0:	621a      	str	r2, [r3, #32]
}
 80125c2:	bf00      	nop
 80125c4:	371c      	adds	r7, #28
 80125c6:	46bd      	mov	sp, r7
 80125c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125cc:	4770      	bx	lr
 80125ce:	bf00      	nop
 80125d0:	feff8fff 	.word	0xfeff8fff
 80125d4:	40010000 	.word	0x40010000
 80125d8:	40010400 	.word	0x40010400

080125dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80125dc:	b480      	push	{r7}
 80125de:	b087      	sub	sp, #28
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6a1b      	ldr	r3, [r3, #32]
 80125ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6a1b      	ldr	r3, [r3, #32]
 80125f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	685b      	ldr	r3, [r3, #4]
 80125fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012604:	68fa      	ldr	r2, [r7, #12]
 8012606:	4b1b      	ldr	r3, [pc, #108]	@ (8012674 <TIM_OC5_SetConfig+0x98>)
 8012608:	4013      	ands	r3, r2
 801260a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	68fa      	ldr	r2, [r7, #12]
 8012612:	4313      	orrs	r3, r2
 8012614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801261c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	689b      	ldr	r3, [r3, #8]
 8012622:	041b      	lsls	r3, r3, #16
 8012624:	693a      	ldr	r2, [r7, #16]
 8012626:	4313      	orrs	r3, r2
 8012628:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	4a12      	ldr	r2, [pc, #72]	@ (8012678 <TIM_OC5_SetConfig+0x9c>)
 801262e:	4293      	cmp	r3, r2
 8012630:	d003      	beq.n	801263a <TIM_OC5_SetConfig+0x5e>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	4a11      	ldr	r2, [pc, #68]	@ (801267c <TIM_OC5_SetConfig+0xa0>)
 8012636:	4293      	cmp	r3, r2
 8012638:	d109      	bne.n	801264e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012640:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	695b      	ldr	r3, [r3, #20]
 8012646:	021b      	lsls	r3, r3, #8
 8012648:	697a      	ldr	r2, [r7, #20]
 801264a:	4313      	orrs	r3, r2
 801264c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	697a      	ldr	r2, [r7, #20]
 8012652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	68fa      	ldr	r2, [r7, #12]
 8012658:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	685a      	ldr	r2, [r3, #4]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	693a      	ldr	r2, [r7, #16]
 8012666:	621a      	str	r2, [r3, #32]
}
 8012668:	bf00      	nop
 801266a:	371c      	adds	r7, #28
 801266c:	46bd      	mov	sp, r7
 801266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012672:	4770      	bx	lr
 8012674:	fffeff8f 	.word	0xfffeff8f
 8012678:	40010000 	.word	0x40010000
 801267c:	40010400 	.word	0x40010400

08012680 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012680:	b480      	push	{r7}
 8012682:	b087      	sub	sp, #28
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	6a1b      	ldr	r3, [r3, #32]
 801268e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6a1b      	ldr	r3, [r3, #32]
 8012694:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	685b      	ldr	r3, [r3, #4]
 80126a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80126a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80126a8:	68fa      	ldr	r2, [r7, #12]
 80126aa:	4b1c      	ldr	r3, [pc, #112]	@ (801271c <TIM_OC6_SetConfig+0x9c>)
 80126ac:	4013      	ands	r3, r2
 80126ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	021b      	lsls	r3, r3, #8
 80126b6:	68fa      	ldr	r2, [r7, #12]
 80126b8:	4313      	orrs	r3, r2
 80126ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80126c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	689b      	ldr	r3, [r3, #8]
 80126c8:	051b      	lsls	r3, r3, #20
 80126ca:	693a      	ldr	r2, [r7, #16]
 80126cc:	4313      	orrs	r3, r2
 80126ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	4a13      	ldr	r2, [pc, #76]	@ (8012720 <TIM_OC6_SetConfig+0xa0>)
 80126d4:	4293      	cmp	r3, r2
 80126d6:	d003      	beq.n	80126e0 <TIM_OC6_SetConfig+0x60>
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	4a12      	ldr	r2, [pc, #72]	@ (8012724 <TIM_OC6_SetConfig+0xa4>)
 80126dc:	4293      	cmp	r3, r2
 80126de:	d109      	bne.n	80126f4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80126e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	695b      	ldr	r3, [r3, #20]
 80126ec:	029b      	lsls	r3, r3, #10
 80126ee:	697a      	ldr	r2, [r7, #20]
 80126f0:	4313      	orrs	r3, r2
 80126f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	697a      	ldr	r2, [r7, #20]
 80126f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	68fa      	ldr	r2, [r7, #12]
 80126fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	685a      	ldr	r2, [r3, #4]
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	693a      	ldr	r2, [r7, #16]
 801270c:	621a      	str	r2, [r3, #32]
}
 801270e:	bf00      	nop
 8012710:	371c      	adds	r7, #28
 8012712:	46bd      	mov	sp, r7
 8012714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop
 801271c:	feff8fff 	.word	0xfeff8fff
 8012720:	40010000 	.word	0x40010000
 8012724:	40010400 	.word	0x40010400

08012728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012728:	b480      	push	{r7}
 801272a:	b087      	sub	sp, #28
 801272c:	af00      	add	r7, sp, #0
 801272e:	60f8      	str	r0, [r7, #12]
 8012730:	60b9      	str	r1, [r7, #8]
 8012732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	6a1b      	ldr	r3, [r3, #32]
 8012738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	6a1b      	ldr	r3, [r3, #32]
 801273e:	f023 0201 	bic.w	r2, r3, #1
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	699b      	ldr	r3, [r3, #24]
 801274a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8012752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	011b      	lsls	r3, r3, #4
 8012758:	693a      	ldr	r2, [r7, #16]
 801275a:	4313      	orrs	r3, r2
 801275c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	f023 030a 	bic.w	r3, r3, #10
 8012764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012766:	697a      	ldr	r2, [r7, #20]
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	4313      	orrs	r3, r2
 801276c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	693a      	ldr	r2, [r7, #16]
 8012772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	697a      	ldr	r2, [r7, #20]
 8012778:	621a      	str	r2, [r3, #32]
}
 801277a:	bf00      	nop
 801277c:	371c      	adds	r7, #28
 801277e:	46bd      	mov	sp, r7
 8012780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012784:	4770      	bx	lr

08012786 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012786:	b480      	push	{r7}
 8012788:	b087      	sub	sp, #28
 801278a:	af00      	add	r7, sp, #0
 801278c:	60f8      	str	r0, [r7, #12]
 801278e:	60b9      	str	r1, [r7, #8]
 8012790:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	6a1b      	ldr	r3, [r3, #32]
 8012796:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	6a1b      	ldr	r3, [r3, #32]
 801279c:	f023 0210 	bic.w	r2, r3, #16
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	699b      	ldr	r3, [r3, #24]
 80127a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80127aa:	693b      	ldr	r3, [r7, #16]
 80127ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80127b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	031b      	lsls	r3, r3, #12
 80127b6:	693a      	ldr	r2, [r7, #16]
 80127b8:	4313      	orrs	r3, r2
 80127ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80127c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	011b      	lsls	r3, r3, #4
 80127c8:	697a      	ldr	r2, [r7, #20]
 80127ca:	4313      	orrs	r3, r2
 80127cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	693a      	ldr	r2, [r7, #16]
 80127d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	697a      	ldr	r2, [r7, #20]
 80127d8:	621a      	str	r2, [r3, #32]
}
 80127da:	bf00      	nop
 80127dc:	371c      	adds	r7, #28
 80127de:	46bd      	mov	sp, r7
 80127e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e4:	4770      	bx	lr

080127e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80127e6:	b480      	push	{r7}
 80127e8:	b085      	sub	sp, #20
 80127ea:	af00      	add	r7, sp, #0
 80127ec:	6078      	str	r0, [r7, #4]
 80127ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80127fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80127fe:	683a      	ldr	r2, [r7, #0]
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	4313      	orrs	r3, r2
 8012804:	f043 0307 	orr.w	r3, r3, #7
 8012808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	68fa      	ldr	r2, [r7, #12]
 801280e:	609a      	str	r2, [r3, #8]
}
 8012810:	bf00      	nop
 8012812:	3714      	adds	r7, #20
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr

0801281c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801281c:	b480      	push	{r7}
 801281e:	b087      	sub	sp, #28
 8012820:	af00      	add	r7, sp, #0
 8012822:	60f8      	str	r0, [r7, #12]
 8012824:	60b9      	str	r1, [r7, #8]
 8012826:	607a      	str	r2, [r7, #4]
 8012828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	689b      	ldr	r3, [r3, #8]
 801282e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	021a      	lsls	r2, r3, #8
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	431a      	orrs	r2, r3
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	4313      	orrs	r3, r2
 8012844:	697a      	ldr	r2, [r7, #20]
 8012846:	4313      	orrs	r3, r2
 8012848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	697a      	ldr	r2, [r7, #20]
 801284e:	609a      	str	r2, [r3, #8]
}
 8012850:	bf00      	nop
 8012852:	371c      	adds	r7, #28
 8012854:	46bd      	mov	sp, r7
 8012856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285a:	4770      	bx	lr

0801285c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801285c:	b480      	push	{r7}
 801285e:	b085      	sub	sp, #20
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801286c:	2b01      	cmp	r3, #1
 801286e:	d101      	bne.n	8012874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012870:	2302      	movs	r3, #2
 8012872:	e06d      	b.n	8012950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2201      	movs	r2, #1
 8012878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2202      	movs	r2, #2
 8012880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	689b      	ldr	r3, [r3, #8]
 8012892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4a30      	ldr	r2, [pc, #192]	@ (801295c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d004      	beq.n	80128a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	4a2f      	ldr	r2, [pc, #188]	@ (8012960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80128a4:	4293      	cmp	r3, r2
 80128a6:	d108      	bne.n	80128ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80128ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	685b      	ldr	r3, [r3, #4]
 80128b4:	68fa      	ldr	r2, [r7, #12]
 80128b6:	4313      	orrs	r3, r2
 80128b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80128c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	68fa      	ldr	r2, [r7, #12]
 80128c8:	4313      	orrs	r3, r2
 80128ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	68fa      	ldr	r2, [r7, #12]
 80128d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4a20      	ldr	r2, [pc, #128]	@ (801295c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d022      	beq.n	8012924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80128e6:	d01d      	beq.n	8012924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	4a1d      	ldr	r2, [pc, #116]	@ (8012964 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d018      	beq.n	8012924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	4a1c      	ldr	r2, [pc, #112]	@ (8012968 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d013      	beq.n	8012924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	4a1a      	ldr	r2, [pc, #104]	@ (801296c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8012902:	4293      	cmp	r3, r2
 8012904:	d00e      	beq.n	8012924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	4a15      	ldr	r2, [pc, #84]	@ (8012960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801290c:	4293      	cmp	r3, r2
 801290e:	d009      	beq.n	8012924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	4a16      	ldr	r2, [pc, #88]	@ (8012970 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012916:	4293      	cmp	r3, r2
 8012918:	d004      	beq.n	8012924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	4a15      	ldr	r2, [pc, #84]	@ (8012974 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012920:	4293      	cmp	r3, r2
 8012922:	d10c      	bne.n	801293e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801292a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	689b      	ldr	r3, [r3, #8]
 8012930:	68ba      	ldr	r2, [r7, #8]
 8012932:	4313      	orrs	r3, r2
 8012934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	68ba      	ldr	r2, [r7, #8]
 801293c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	2201      	movs	r2, #1
 8012942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2200      	movs	r2, #0
 801294a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801294e:	2300      	movs	r3, #0
}
 8012950:	4618      	mov	r0, r3
 8012952:	3714      	adds	r7, #20
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr
 801295c:	40010000 	.word	0x40010000
 8012960:	40010400 	.word	0x40010400
 8012964:	40000400 	.word	0x40000400
 8012968:	40000800 	.word	0x40000800
 801296c:	40000c00 	.word	0x40000c00
 8012970:	40014000 	.word	0x40014000
 8012974:	40001800 	.word	0x40001800

08012978 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012978:	b480      	push	{r7}
 801297a:	b085      	sub	sp, #20
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012982:	2300      	movs	r3, #0
 8012984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801298c:	2b01      	cmp	r3, #1
 801298e:	d101      	bne.n	8012994 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012990:	2302      	movs	r3, #2
 8012992:	e065      	b.n	8012a60 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2201      	movs	r2, #1
 8012998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	68db      	ldr	r3, [r3, #12]
 80129a6:	4313      	orrs	r3, r2
 80129a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	689b      	ldr	r3, [r3, #8]
 80129b4:	4313      	orrs	r3, r2
 80129b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	685b      	ldr	r3, [r3, #4]
 80129c2:	4313      	orrs	r3, r2
 80129c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	4313      	orrs	r3, r2
 80129d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	691b      	ldr	r3, [r3, #16]
 80129de:	4313      	orrs	r3, r2
 80129e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	695b      	ldr	r3, [r3, #20]
 80129ec:	4313      	orrs	r3, r2
 80129ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129fa:	4313      	orrs	r3, r2
 80129fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	699b      	ldr	r3, [r3, #24]
 8012a08:	041b      	lsls	r3, r3, #16
 8012a0a:	4313      	orrs	r3, r2
 8012a0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	4a16      	ldr	r2, [pc, #88]	@ (8012a6c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8012a14:	4293      	cmp	r3, r2
 8012a16:	d004      	beq.n	8012a22 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	4a14      	ldr	r2, [pc, #80]	@ (8012a70 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8012a1e:	4293      	cmp	r3, r2
 8012a20:	d115      	bne.n	8012a4e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a2c:	051b      	lsls	r3, r3, #20
 8012a2e:	4313      	orrs	r3, r2
 8012a30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	69db      	ldr	r3, [r3, #28]
 8012a3c:	4313      	orrs	r3, r2
 8012a3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	6a1b      	ldr	r3, [r3, #32]
 8012a4a:	4313      	orrs	r3, r2
 8012a4c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	68fa      	ldr	r2, [r7, #12]
 8012a54:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	2200      	movs	r2, #0
 8012a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012a5e:	2300      	movs	r3, #0
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	3714      	adds	r7, #20
 8012a64:	46bd      	mov	sp, r7
 8012a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6a:	4770      	bx	lr
 8012a6c:	40010000 	.word	0x40010000
 8012a70:	40010400 	.word	0x40010400

08012a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012a74:	b480      	push	{r7}
 8012a76:	b083      	sub	sp, #12
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012a7c:	bf00      	nop
 8012a7e:	370c      	adds	r7, #12
 8012a80:	46bd      	mov	sp, r7
 8012a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a86:	4770      	bx	lr

08012a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b083      	sub	sp, #12
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012a90:	bf00      	nop
 8012a92:	370c      	adds	r7, #12
 8012a94:	46bd      	mov	sp, r7
 8012a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9a:	4770      	bx	lr

08012a9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012a9c:	b480      	push	{r7}
 8012a9e:	b083      	sub	sp, #12
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012aa4:	bf00      	nop
 8012aa6:	370c      	adds	r7, #12
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aae:	4770      	bx	lr

08012ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b082      	sub	sp, #8
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d101      	bne.n	8012ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012abe:	2301      	movs	r3, #1
 8012ac0:	e040      	b.n	8012b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d106      	bne.n	8012ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2200      	movs	r2, #0
 8012ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f7f0 fd78 	bl	80035c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2224      	movs	r2, #36	@ 0x24
 8012adc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	681a      	ldr	r2, [r3, #0]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	f022 0201 	bic.w	r2, r2, #1
 8012aec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d002      	beq.n	8012afc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f000 fa8c 	bl	8013014 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f000 f825 	bl	8012b4c <UART_SetConfig>
 8012b02:	4603      	mov	r3, r0
 8012b04:	2b01      	cmp	r3, #1
 8012b06:	d101      	bne.n	8012b0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8012b08:	2301      	movs	r3, #1
 8012b0a:	e01b      	b.n	8012b44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	685a      	ldr	r2, [r3, #4]
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	689a      	ldr	r2, [r3, #8]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	f042 0201 	orr.w	r2, r2, #1
 8012b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f000 fb0b 	bl	8013158 <UART_CheckIdleState>
 8012b42:	4603      	mov	r3, r0
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	3708      	adds	r7, #8
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}

08012b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b088      	sub	sp, #32
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012b54:	2300      	movs	r3, #0
 8012b56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	689a      	ldr	r2, [r3, #8]
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	691b      	ldr	r3, [r3, #16]
 8012b60:	431a      	orrs	r2, r3
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	695b      	ldr	r3, [r3, #20]
 8012b66:	431a      	orrs	r2, r3
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	69db      	ldr	r3, [r3, #28]
 8012b6c:	4313      	orrs	r3, r2
 8012b6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	681a      	ldr	r2, [r3, #0]
 8012b76:	4ba6      	ldr	r3, [pc, #664]	@ (8012e10 <UART_SetConfig+0x2c4>)
 8012b78:	4013      	ands	r3, r2
 8012b7a:	687a      	ldr	r2, [r7, #4]
 8012b7c:	6812      	ldr	r2, [r2, #0]
 8012b7e:	6979      	ldr	r1, [r7, #20]
 8012b80:	430b      	orrs	r3, r1
 8012b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	68da      	ldr	r2, [r3, #12]
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	430a      	orrs	r2, r1
 8012b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	699b      	ldr	r3, [r3, #24]
 8012b9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6a1b      	ldr	r3, [r3, #32]
 8012ba4:	697a      	ldr	r2, [r7, #20]
 8012ba6:	4313      	orrs	r3, r2
 8012ba8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	689b      	ldr	r3, [r3, #8]
 8012bb0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	697a      	ldr	r2, [r7, #20]
 8012bba:	430a      	orrs	r2, r1
 8012bbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	4a94      	ldr	r2, [pc, #592]	@ (8012e14 <UART_SetConfig+0x2c8>)
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	d120      	bne.n	8012c0a <UART_SetConfig+0xbe>
 8012bc8:	4b93      	ldr	r3, [pc, #588]	@ (8012e18 <UART_SetConfig+0x2cc>)
 8012bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012bce:	f003 0303 	and.w	r3, r3, #3
 8012bd2:	2b03      	cmp	r3, #3
 8012bd4:	d816      	bhi.n	8012c04 <UART_SetConfig+0xb8>
 8012bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8012bdc <UART_SetConfig+0x90>)
 8012bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bdc:	08012bed 	.word	0x08012bed
 8012be0:	08012bf9 	.word	0x08012bf9
 8012be4:	08012bf3 	.word	0x08012bf3
 8012be8:	08012bff 	.word	0x08012bff
 8012bec:	2301      	movs	r3, #1
 8012bee:	77fb      	strb	r3, [r7, #31]
 8012bf0:	e150      	b.n	8012e94 <UART_SetConfig+0x348>
 8012bf2:	2302      	movs	r3, #2
 8012bf4:	77fb      	strb	r3, [r7, #31]
 8012bf6:	e14d      	b.n	8012e94 <UART_SetConfig+0x348>
 8012bf8:	2304      	movs	r3, #4
 8012bfa:	77fb      	strb	r3, [r7, #31]
 8012bfc:	e14a      	b.n	8012e94 <UART_SetConfig+0x348>
 8012bfe:	2308      	movs	r3, #8
 8012c00:	77fb      	strb	r3, [r7, #31]
 8012c02:	e147      	b.n	8012e94 <UART_SetConfig+0x348>
 8012c04:	2310      	movs	r3, #16
 8012c06:	77fb      	strb	r3, [r7, #31]
 8012c08:	e144      	b.n	8012e94 <UART_SetConfig+0x348>
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	4a83      	ldr	r2, [pc, #524]	@ (8012e1c <UART_SetConfig+0x2d0>)
 8012c10:	4293      	cmp	r3, r2
 8012c12:	d132      	bne.n	8012c7a <UART_SetConfig+0x12e>
 8012c14:	4b80      	ldr	r3, [pc, #512]	@ (8012e18 <UART_SetConfig+0x2cc>)
 8012c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012c1a:	f003 030c 	and.w	r3, r3, #12
 8012c1e:	2b0c      	cmp	r3, #12
 8012c20:	d828      	bhi.n	8012c74 <UART_SetConfig+0x128>
 8012c22:	a201      	add	r2, pc, #4	@ (adr r2, 8012c28 <UART_SetConfig+0xdc>)
 8012c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c28:	08012c5d 	.word	0x08012c5d
 8012c2c:	08012c75 	.word	0x08012c75
 8012c30:	08012c75 	.word	0x08012c75
 8012c34:	08012c75 	.word	0x08012c75
 8012c38:	08012c69 	.word	0x08012c69
 8012c3c:	08012c75 	.word	0x08012c75
 8012c40:	08012c75 	.word	0x08012c75
 8012c44:	08012c75 	.word	0x08012c75
 8012c48:	08012c63 	.word	0x08012c63
 8012c4c:	08012c75 	.word	0x08012c75
 8012c50:	08012c75 	.word	0x08012c75
 8012c54:	08012c75 	.word	0x08012c75
 8012c58:	08012c6f 	.word	0x08012c6f
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	77fb      	strb	r3, [r7, #31]
 8012c60:	e118      	b.n	8012e94 <UART_SetConfig+0x348>
 8012c62:	2302      	movs	r3, #2
 8012c64:	77fb      	strb	r3, [r7, #31]
 8012c66:	e115      	b.n	8012e94 <UART_SetConfig+0x348>
 8012c68:	2304      	movs	r3, #4
 8012c6a:	77fb      	strb	r3, [r7, #31]
 8012c6c:	e112      	b.n	8012e94 <UART_SetConfig+0x348>
 8012c6e:	2308      	movs	r3, #8
 8012c70:	77fb      	strb	r3, [r7, #31]
 8012c72:	e10f      	b.n	8012e94 <UART_SetConfig+0x348>
 8012c74:	2310      	movs	r3, #16
 8012c76:	77fb      	strb	r3, [r7, #31]
 8012c78:	e10c      	b.n	8012e94 <UART_SetConfig+0x348>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4a68      	ldr	r2, [pc, #416]	@ (8012e20 <UART_SetConfig+0x2d4>)
 8012c80:	4293      	cmp	r3, r2
 8012c82:	d120      	bne.n	8012cc6 <UART_SetConfig+0x17a>
 8012c84:	4b64      	ldr	r3, [pc, #400]	@ (8012e18 <UART_SetConfig+0x2cc>)
 8012c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012c8a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8012c8e:	2b30      	cmp	r3, #48	@ 0x30
 8012c90:	d013      	beq.n	8012cba <UART_SetConfig+0x16e>
 8012c92:	2b30      	cmp	r3, #48	@ 0x30
 8012c94:	d814      	bhi.n	8012cc0 <UART_SetConfig+0x174>
 8012c96:	2b20      	cmp	r3, #32
 8012c98:	d009      	beq.n	8012cae <UART_SetConfig+0x162>
 8012c9a:	2b20      	cmp	r3, #32
 8012c9c:	d810      	bhi.n	8012cc0 <UART_SetConfig+0x174>
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d002      	beq.n	8012ca8 <UART_SetConfig+0x15c>
 8012ca2:	2b10      	cmp	r3, #16
 8012ca4:	d006      	beq.n	8012cb4 <UART_SetConfig+0x168>
 8012ca6:	e00b      	b.n	8012cc0 <UART_SetConfig+0x174>
 8012ca8:	2300      	movs	r3, #0
 8012caa:	77fb      	strb	r3, [r7, #31]
 8012cac:	e0f2      	b.n	8012e94 <UART_SetConfig+0x348>
 8012cae:	2302      	movs	r3, #2
 8012cb0:	77fb      	strb	r3, [r7, #31]
 8012cb2:	e0ef      	b.n	8012e94 <UART_SetConfig+0x348>
 8012cb4:	2304      	movs	r3, #4
 8012cb6:	77fb      	strb	r3, [r7, #31]
 8012cb8:	e0ec      	b.n	8012e94 <UART_SetConfig+0x348>
 8012cba:	2308      	movs	r3, #8
 8012cbc:	77fb      	strb	r3, [r7, #31]
 8012cbe:	e0e9      	b.n	8012e94 <UART_SetConfig+0x348>
 8012cc0:	2310      	movs	r3, #16
 8012cc2:	77fb      	strb	r3, [r7, #31]
 8012cc4:	e0e6      	b.n	8012e94 <UART_SetConfig+0x348>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	4a56      	ldr	r2, [pc, #344]	@ (8012e24 <UART_SetConfig+0x2d8>)
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	d120      	bne.n	8012d12 <UART_SetConfig+0x1c6>
 8012cd0:	4b51      	ldr	r3, [pc, #324]	@ (8012e18 <UART_SetConfig+0x2cc>)
 8012cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012cd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8012cda:	2bc0      	cmp	r3, #192	@ 0xc0
 8012cdc:	d013      	beq.n	8012d06 <UART_SetConfig+0x1ba>
 8012cde:	2bc0      	cmp	r3, #192	@ 0xc0
 8012ce0:	d814      	bhi.n	8012d0c <UART_SetConfig+0x1c0>
 8012ce2:	2b80      	cmp	r3, #128	@ 0x80
 8012ce4:	d009      	beq.n	8012cfa <UART_SetConfig+0x1ae>
 8012ce6:	2b80      	cmp	r3, #128	@ 0x80
 8012ce8:	d810      	bhi.n	8012d0c <UART_SetConfig+0x1c0>
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d002      	beq.n	8012cf4 <UART_SetConfig+0x1a8>
 8012cee:	2b40      	cmp	r3, #64	@ 0x40
 8012cf0:	d006      	beq.n	8012d00 <UART_SetConfig+0x1b4>
 8012cf2:	e00b      	b.n	8012d0c <UART_SetConfig+0x1c0>
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	77fb      	strb	r3, [r7, #31]
 8012cf8:	e0cc      	b.n	8012e94 <UART_SetConfig+0x348>
 8012cfa:	2302      	movs	r3, #2
 8012cfc:	77fb      	strb	r3, [r7, #31]
 8012cfe:	e0c9      	b.n	8012e94 <UART_SetConfig+0x348>
 8012d00:	2304      	movs	r3, #4
 8012d02:	77fb      	strb	r3, [r7, #31]
 8012d04:	e0c6      	b.n	8012e94 <UART_SetConfig+0x348>
 8012d06:	2308      	movs	r3, #8
 8012d08:	77fb      	strb	r3, [r7, #31]
 8012d0a:	e0c3      	b.n	8012e94 <UART_SetConfig+0x348>
 8012d0c:	2310      	movs	r3, #16
 8012d0e:	77fb      	strb	r3, [r7, #31]
 8012d10:	e0c0      	b.n	8012e94 <UART_SetConfig+0x348>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	4a44      	ldr	r2, [pc, #272]	@ (8012e28 <UART_SetConfig+0x2dc>)
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	d125      	bne.n	8012d68 <UART_SetConfig+0x21c>
 8012d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8012e18 <UART_SetConfig+0x2cc>)
 8012d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012d26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012d2a:	d017      	beq.n	8012d5c <UART_SetConfig+0x210>
 8012d2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012d30:	d817      	bhi.n	8012d62 <UART_SetConfig+0x216>
 8012d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d36:	d00b      	beq.n	8012d50 <UART_SetConfig+0x204>
 8012d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d3c:	d811      	bhi.n	8012d62 <UART_SetConfig+0x216>
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d003      	beq.n	8012d4a <UART_SetConfig+0x1fe>
 8012d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d46:	d006      	beq.n	8012d56 <UART_SetConfig+0x20a>
 8012d48:	e00b      	b.n	8012d62 <UART_SetConfig+0x216>
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	77fb      	strb	r3, [r7, #31]
 8012d4e:	e0a1      	b.n	8012e94 <UART_SetConfig+0x348>
 8012d50:	2302      	movs	r3, #2
 8012d52:	77fb      	strb	r3, [r7, #31]
 8012d54:	e09e      	b.n	8012e94 <UART_SetConfig+0x348>
 8012d56:	2304      	movs	r3, #4
 8012d58:	77fb      	strb	r3, [r7, #31]
 8012d5a:	e09b      	b.n	8012e94 <UART_SetConfig+0x348>
 8012d5c:	2308      	movs	r3, #8
 8012d5e:	77fb      	strb	r3, [r7, #31]
 8012d60:	e098      	b.n	8012e94 <UART_SetConfig+0x348>
 8012d62:	2310      	movs	r3, #16
 8012d64:	77fb      	strb	r3, [r7, #31]
 8012d66:	e095      	b.n	8012e94 <UART_SetConfig+0x348>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	4a2f      	ldr	r2, [pc, #188]	@ (8012e2c <UART_SetConfig+0x2e0>)
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	d125      	bne.n	8012dbe <UART_SetConfig+0x272>
 8012d72:	4b29      	ldr	r3, [pc, #164]	@ (8012e18 <UART_SetConfig+0x2cc>)
 8012d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012d78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8012d7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012d80:	d017      	beq.n	8012db2 <UART_SetConfig+0x266>
 8012d82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012d86:	d817      	bhi.n	8012db8 <UART_SetConfig+0x26c>
 8012d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012d8c:	d00b      	beq.n	8012da6 <UART_SetConfig+0x25a>
 8012d8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012d92:	d811      	bhi.n	8012db8 <UART_SetConfig+0x26c>
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d003      	beq.n	8012da0 <UART_SetConfig+0x254>
 8012d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012d9c:	d006      	beq.n	8012dac <UART_SetConfig+0x260>
 8012d9e:	e00b      	b.n	8012db8 <UART_SetConfig+0x26c>
 8012da0:	2301      	movs	r3, #1
 8012da2:	77fb      	strb	r3, [r7, #31]
 8012da4:	e076      	b.n	8012e94 <UART_SetConfig+0x348>
 8012da6:	2302      	movs	r3, #2
 8012da8:	77fb      	strb	r3, [r7, #31]
 8012daa:	e073      	b.n	8012e94 <UART_SetConfig+0x348>
 8012dac:	2304      	movs	r3, #4
 8012dae:	77fb      	strb	r3, [r7, #31]
 8012db0:	e070      	b.n	8012e94 <UART_SetConfig+0x348>
 8012db2:	2308      	movs	r3, #8
 8012db4:	77fb      	strb	r3, [r7, #31]
 8012db6:	e06d      	b.n	8012e94 <UART_SetConfig+0x348>
 8012db8:	2310      	movs	r3, #16
 8012dba:	77fb      	strb	r3, [r7, #31]
 8012dbc:	e06a      	b.n	8012e94 <UART_SetConfig+0x348>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8012e30 <UART_SetConfig+0x2e4>)
 8012dc4:	4293      	cmp	r3, r2
 8012dc6:	d138      	bne.n	8012e3a <UART_SetConfig+0x2ee>
 8012dc8:	4b13      	ldr	r3, [pc, #76]	@ (8012e18 <UART_SetConfig+0x2cc>)
 8012dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012dce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8012dd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012dd6:	d017      	beq.n	8012e08 <UART_SetConfig+0x2bc>
 8012dd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012ddc:	d82a      	bhi.n	8012e34 <UART_SetConfig+0x2e8>
 8012dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012de2:	d00b      	beq.n	8012dfc <UART_SetConfig+0x2b0>
 8012de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012de8:	d824      	bhi.n	8012e34 <UART_SetConfig+0x2e8>
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d003      	beq.n	8012df6 <UART_SetConfig+0x2aa>
 8012dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012df2:	d006      	beq.n	8012e02 <UART_SetConfig+0x2b6>
 8012df4:	e01e      	b.n	8012e34 <UART_SetConfig+0x2e8>
 8012df6:	2300      	movs	r3, #0
 8012df8:	77fb      	strb	r3, [r7, #31]
 8012dfa:	e04b      	b.n	8012e94 <UART_SetConfig+0x348>
 8012dfc:	2302      	movs	r3, #2
 8012dfe:	77fb      	strb	r3, [r7, #31]
 8012e00:	e048      	b.n	8012e94 <UART_SetConfig+0x348>
 8012e02:	2304      	movs	r3, #4
 8012e04:	77fb      	strb	r3, [r7, #31]
 8012e06:	e045      	b.n	8012e94 <UART_SetConfig+0x348>
 8012e08:	2308      	movs	r3, #8
 8012e0a:	77fb      	strb	r3, [r7, #31]
 8012e0c:	e042      	b.n	8012e94 <UART_SetConfig+0x348>
 8012e0e:	bf00      	nop
 8012e10:	efff69f3 	.word	0xefff69f3
 8012e14:	40011000 	.word	0x40011000
 8012e18:	40023800 	.word	0x40023800
 8012e1c:	40004400 	.word	0x40004400
 8012e20:	40004800 	.word	0x40004800
 8012e24:	40004c00 	.word	0x40004c00
 8012e28:	40005000 	.word	0x40005000
 8012e2c:	40011400 	.word	0x40011400
 8012e30:	40007800 	.word	0x40007800
 8012e34:	2310      	movs	r3, #16
 8012e36:	77fb      	strb	r3, [r7, #31]
 8012e38:	e02c      	b.n	8012e94 <UART_SetConfig+0x348>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	4a72      	ldr	r2, [pc, #456]	@ (8013008 <UART_SetConfig+0x4bc>)
 8012e40:	4293      	cmp	r3, r2
 8012e42:	d125      	bne.n	8012e90 <UART_SetConfig+0x344>
 8012e44:	4b71      	ldr	r3, [pc, #452]	@ (801300c <UART_SetConfig+0x4c0>)
 8012e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012e4a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8012e4e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8012e52:	d017      	beq.n	8012e84 <UART_SetConfig+0x338>
 8012e54:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8012e58:	d817      	bhi.n	8012e8a <UART_SetConfig+0x33e>
 8012e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012e5e:	d00b      	beq.n	8012e78 <UART_SetConfig+0x32c>
 8012e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012e64:	d811      	bhi.n	8012e8a <UART_SetConfig+0x33e>
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d003      	beq.n	8012e72 <UART_SetConfig+0x326>
 8012e6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012e6e:	d006      	beq.n	8012e7e <UART_SetConfig+0x332>
 8012e70:	e00b      	b.n	8012e8a <UART_SetConfig+0x33e>
 8012e72:	2300      	movs	r3, #0
 8012e74:	77fb      	strb	r3, [r7, #31]
 8012e76:	e00d      	b.n	8012e94 <UART_SetConfig+0x348>
 8012e78:	2302      	movs	r3, #2
 8012e7a:	77fb      	strb	r3, [r7, #31]
 8012e7c:	e00a      	b.n	8012e94 <UART_SetConfig+0x348>
 8012e7e:	2304      	movs	r3, #4
 8012e80:	77fb      	strb	r3, [r7, #31]
 8012e82:	e007      	b.n	8012e94 <UART_SetConfig+0x348>
 8012e84:	2308      	movs	r3, #8
 8012e86:	77fb      	strb	r3, [r7, #31]
 8012e88:	e004      	b.n	8012e94 <UART_SetConfig+0x348>
 8012e8a:	2310      	movs	r3, #16
 8012e8c:	77fb      	strb	r3, [r7, #31]
 8012e8e:	e001      	b.n	8012e94 <UART_SetConfig+0x348>
 8012e90:	2310      	movs	r3, #16
 8012e92:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	69db      	ldr	r3, [r3, #28]
 8012e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012e9c:	d15b      	bne.n	8012f56 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8012e9e:	7ffb      	ldrb	r3, [r7, #31]
 8012ea0:	2b08      	cmp	r3, #8
 8012ea2:	d828      	bhi.n	8012ef6 <UART_SetConfig+0x3aa>
 8012ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8012eac <UART_SetConfig+0x360>)
 8012ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eaa:	bf00      	nop
 8012eac:	08012ed1 	.word	0x08012ed1
 8012eb0:	08012ed9 	.word	0x08012ed9
 8012eb4:	08012ee1 	.word	0x08012ee1
 8012eb8:	08012ef7 	.word	0x08012ef7
 8012ebc:	08012ee7 	.word	0x08012ee7
 8012ec0:	08012ef7 	.word	0x08012ef7
 8012ec4:	08012ef7 	.word	0x08012ef7
 8012ec8:	08012ef7 	.word	0x08012ef7
 8012ecc:	08012eef 	.word	0x08012eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012ed0:	f7fd f840 	bl	800ff54 <HAL_RCC_GetPCLK1Freq>
 8012ed4:	61b8      	str	r0, [r7, #24]
        break;
 8012ed6:	e013      	b.n	8012f00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012ed8:	f7fd f850 	bl	800ff7c <HAL_RCC_GetPCLK2Freq>
 8012edc:	61b8      	str	r0, [r7, #24]
        break;
 8012ede:	e00f      	b.n	8012f00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012ee0:	4b4b      	ldr	r3, [pc, #300]	@ (8013010 <UART_SetConfig+0x4c4>)
 8012ee2:	61bb      	str	r3, [r7, #24]
        break;
 8012ee4:	e00c      	b.n	8012f00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012ee6:	f7fc ff63 	bl	800fdb0 <HAL_RCC_GetSysClockFreq>
 8012eea:	61b8      	str	r0, [r7, #24]
        break;
 8012eec:	e008      	b.n	8012f00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012ef2:	61bb      	str	r3, [r7, #24]
        break;
 8012ef4:	e004      	b.n	8012f00 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012efa:	2301      	movs	r3, #1
 8012efc:	77bb      	strb	r3, [r7, #30]
        break;
 8012efe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012f00:	69bb      	ldr	r3, [r7, #24]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d074      	beq.n	8012ff0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012f06:	69bb      	ldr	r3, [r7, #24]
 8012f08:	005a      	lsls	r2, r3, #1
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	685b      	ldr	r3, [r3, #4]
 8012f0e:	085b      	lsrs	r3, r3, #1
 8012f10:	441a      	add	r2, r3
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	2b0f      	cmp	r3, #15
 8012f20:	d916      	bls.n	8012f50 <UART_SetConfig+0x404>
 8012f22:	693b      	ldr	r3, [r7, #16]
 8012f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f28:	d212      	bcs.n	8012f50 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	b29b      	uxth	r3, r3
 8012f2e:	f023 030f 	bic.w	r3, r3, #15
 8012f32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	085b      	lsrs	r3, r3, #1
 8012f38:	b29b      	uxth	r3, r3
 8012f3a:	f003 0307 	and.w	r3, r3, #7
 8012f3e:	b29a      	uxth	r2, r3
 8012f40:	89fb      	ldrh	r3, [r7, #14]
 8012f42:	4313      	orrs	r3, r2
 8012f44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	89fa      	ldrh	r2, [r7, #14]
 8012f4c:	60da      	str	r2, [r3, #12]
 8012f4e:	e04f      	b.n	8012ff0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8012f50:	2301      	movs	r3, #1
 8012f52:	77bb      	strb	r3, [r7, #30]
 8012f54:	e04c      	b.n	8012ff0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012f56:	7ffb      	ldrb	r3, [r7, #31]
 8012f58:	2b08      	cmp	r3, #8
 8012f5a:	d828      	bhi.n	8012fae <UART_SetConfig+0x462>
 8012f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8012f64 <UART_SetConfig+0x418>)
 8012f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f62:	bf00      	nop
 8012f64:	08012f89 	.word	0x08012f89
 8012f68:	08012f91 	.word	0x08012f91
 8012f6c:	08012f99 	.word	0x08012f99
 8012f70:	08012faf 	.word	0x08012faf
 8012f74:	08012f9f 	.word	0x08012f9f
 8012f78:	08012faf 	.word	0x08012faf
 8012f7c:	08012faf 	.word	0x08012faf
 8012f80:	08012faf 	.word	0x08012faf
 8012f84:	08012fa7 	.word	0x08012fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012f88:	f7fc ffe4 	bl	800ff54 <HAL_RCC_GetPCLK1Freq>
 8012f8c:	61b8      	str	r0, [r7, #24]
        break;
 8012f8e:	e013      	b.n	8012fb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012f90:	f7fc fff4 	bl	800ff7c <HAL_RCC_GetPCLK2Freq>
 8012f94:	61b8      	str	r0, [r7, #24]
        break;
 8012f96:	e00f      	b.n	8012fb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012f98:	4b1d      	ldr	r3, [pc, #116]	@ (8013010 <UART_SetConfig+0x4c4>)
 8012f9a:	61bb      	str	r3, [r7, #24]
        break;
 8012f9c:	e00c      	b.n	8012fb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012f9e:	f7fc ff07 	bl	800fdb0 <HAL_RCC_GetSysClockFreq>
 8012fa2:	61b8      	str	r0, [r7, #24]
        break;
 8012fa4:	e008      	b.n	8012fb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012faa:	61bb      	str	r3, [r7, #24]
        break;
 8012fac:	e004      	b.n	8012fb8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	77bb      	strb	r3, [r7, #30]
        break;
 8012fb6:	bf00      	nop
    }

    if (pclk != 0U)
 8012fb8:	69bb      	ldr	r3, [r7, #24]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d018      	beq.n	8012ff0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	085a      	lsrs	r2, r3, #1
 8012fc4:	69bb      	ldr	r3, [r7, #24]
 8012fc6:	441a      	add	r2, r3
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8012fd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012fd2:	693b      	ldr	r3, [r7, #16]
 8012fd4:	2b0f      	cmp	r3, #15
 8012fd6:	d909      	bls.n	8012fec <UART_SetConfig+0x4a0>
 8012fd8:	693b      	ldr	r3, [r7, #16]
 8012fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012fde:	d205      	bcs.n	8012fec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	b29a      	uxth	r2, r3
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	60da      	str	r2, [r3, #12]
 8012fea:	e001      	b.n	8012ff0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8012fec:	2301      	movs	r3, #1
 8012fee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8012ffc:	7fbb      	ldrb	r3, [r7, #30]
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3720      	adds	r7, #32
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}
 8013006:	bf00      	nop
 8013008:	40007c00 	.word	0x40007c00
 801300c:	40023800 	.word	0x40023800
 8013010:	00f42400 	.word	0x00f42400

08013014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013014:	b480      	push	{r7}
 8013016:	b083      	sub	sp, #12
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013020:	f003 0308 	and.w	r3, r3, #8
 8013024:	2b00      	cmp	r3, #0
 8013026:	d00a      	beq.n	801303e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	430a      	orrs	r2, r1
 801303c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013042:	f003 0301 	and.w	r3, r3, #1
 8013046:	2b00      	cmp	r3, #0
 8013048:	d00a      	beq.n	8013060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	430a      	orrs	r2, r1
 801305e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013064:	f003 0302 	and.w	r3, r3, #2
 8013068:	2b00      	cmp	r3, #0
 801306a:	d00a      	beq.n	8013082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	430a      	orrs	r2, r1
 8013080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013086:	f003 0304 	and.w	r3, r3, #4
 801308a:	2b00      	cmp	r3, #0
 801308c:	d00a      	beq.n	80130a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	685b      	ldr	r3, [r3, #4]
 8013094:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	430a      	orrs	r2, r1
 80130a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130a8:	f003 0310 	and.w	r3, r3, #16
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d00a      	beq.n	80130c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	689b      	ldr	r3, [r3, #8]
 80130b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	430a      	orrs	r2, r1
 80130c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130ca:	f003 0320 	and.w	r3, r3, #32
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d00a      	beq.n	80130e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	689b      	ldr	r3, [r3, #8]
 80130d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	430a      	orrs	r2, r1
 80130e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d01a      	beq.n	801312a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	685b      	ldr	r3, [r3, #4]
 80130fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	430a      	orrs	r2, r1
 8013108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801310e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013112:	d10a      	bne.n	801312a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	430a      	orrs	r2, r1
 8013128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801312e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013132:	2b00      	cmp	r3, #0
 8013134:	d00a      	beq.n	801314c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	685b      	ldr	r3, [r3, #4]
 801313c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	430a      	orrs	r2, r1
 801314a:	605a      	str	r2, [r3, #4]
  }
}
 801314c:	bf00      	nop
 801314e:	370c      	adds	r7, #12
 8013150:	46bd      	mov	sp, r7
 8013152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013156:	4770      	bx	lr

08013158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b08c      	sub	sp, #48	@ 0x30
 801315c:	af02      	add	r7, sp, #8
 801315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	2200      	movs	r2, #0
 8013164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013168:	f7f3 fe62 	bl	8006e30 <HAL_GetTick>
 801316c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f003 0308 	and.w	r3, r3, #8
 8013178:	2b08      	cmp	r3, #8
 801317a:	d12e      	bne.n	80131da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801317c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013180:	9300      	str	r3, [sp, #0]
 8013182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013184:	2200      	movs	r2, #0
 8013186:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f000 f83b 	bl	8013206 <UART_WaitOnFlagUntilTimeout>
 8013190:	4603      	mov	r3, r0
 8013192:	2b00      	cmp	r3, #0
 8013194:	d021      	beq.n	80131da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801319c:	693b      	ldr	r3, [r7, #16]
 801319e:	e853 3f00 	ldrex	r3, [r3]
 80131a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80131aa:	623b      	str	r3, [r7, #32]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	461a      	mov	r2, r3
 80131b2:	6a3b      	ldr	r3, [r7, #32]
 80131b4:	61fb      	str	r3, [r7, #28]
 80131b6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131b8:	69b9      	ldr	r1, [r7, #24]
 80131ba:	69fa      	ldr	r2, [r7, #28]
 80131bc:	e841 2300 	strex	r3, r2, [r1]
 80131c0:	617b      	str	r3, [r7, #20]
   return(result);
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d1e6      	bne.n	8013196 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2220      	movs	r2, #32
 80131cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	2200      	movs	r2, #0
 80131d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80131d6:	2303      	movs	r3, #3
 80131d8:	e011      	b.n	80131fe <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2220      	movs	r2, #32
 80131de:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2220      	movs	r2, #32
 80131e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2200      	movs	r2, #0
 80131ec:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2200      	movs	r2, #0
 80131f2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2200      	movs	r2, #0
 80131f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80131fc:	2300      	movs	r3, #0
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3728      	adds	r7, #40	@ 0x28
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}

08013206 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013206:	b580      	push	{r7, lr}
 8013208:	b084      	sub	sp, #16
 801320a:	af00      	add	r7, sp, #0
 801320c:	60f8      	str	r0, [r7, #12]
 801320e:	60b9      	str	r1, [r7, #8]
 8013210:	603b      	str	r3, [r7, #0]
 8013212:	4613      	mov	r3, r2
 8013214:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013216:	e04f      	b.n	80132b8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013218:	69bb      	ldr	r3, [r7, #24]
 801321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801321e:	d04b      	beq.n	80132b8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013220:	f7f3 fe06 	bl	8006e30 <HAL_GetTick>
 8013224:	4602      	mov	r2, r0
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	1ad3      	subs	r3, r2, r3
 801322a:	69ba      	ldr	r2, [r7, #24]
 801322c:	429a      	cmp	r2, r3
 801322e:	d302      	bcc.n	8013236 <UART_WaitOnFlagUntilTimeout+0x30>
 8013230:	69bb      	ldr	r3, [r7, #24]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d101      	bne.n	801323a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013236:	2303      	movs	r3, #3
 8013238:	e04e      	b.n	80132d8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	f003 0304 	and.w	r3, r3, #4
 8013244:	2b00      	cmp	r3, #0
 8013246:	d037      	beq.n	80132b8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	2b80      	cmp	r3, #128	@ 0x80
 801324c:	d034      	beq.n	80132b8 <UART_WaitOnFlagUntilTimeout+0xb2>
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	2b40      	cmp	r3, #64	@ 0x40
 8013252:	d031      	beq.n	80132b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	69db      	ldr	r3, [r3, #28]
 801325a:	f003 0308 	and.w	r3, r3, #8
 801325e:	2b08      	cmp	r3, #8
 8013260:	d110      	bne.n	8013284 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	2208      	movs	r2, #8
 8013268:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801326a:	68f8      	ldr	r0, [r7, #12]
 801326c:	f000 f838 	bl	80132e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2208      	movs	r2, #8
 8013274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	2200      	movs	r2, #0
 801327c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8013280:	2301      	movs	r3, #1
 8013282:	e029      	b.n	80132d8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	69db      	ldr	r3, [r3, #28]
 801328a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801328e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013292:	d111      	bne.n	80132b8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801329c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801329e:	68f8      	ldr	r0, [r7, #12]
 80132a0:	f000 f81e 	bl	80132e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2220      	movs	r2, #32
 80132a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	2200      	movs	r2, #0
 80132b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80132b4:	2303      	movs	r3, #3
 80132b6:	e00f      	b.n	80132d8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	69da      	ldr	r2, [r3, #28]
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	4013      	ands	r3, r2
 80132c2:	68ba      	ldr	r2, [r7, #8]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	bf0c      	ite	eq
 80132c8:	2301      	moveq	r3, #1
 80132ca:	2300      	movne	r3, #0
 80132cc:	b2db      	uxtb	r3, r3
 80132ce:	461a      	mov	r2, r3
 80132d0:	79fb      	ldrb	r3, [r7, #7]
 80132d2:	429a      	cmp	r2, r3
 80132d4:	d0a0      	beq.n	8013218 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80132d6:	2300      	movs	r3, #0
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3710      	adds	r7, #16
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}

080132e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80132e0:	b480      	push	{r7}
 80132e2:	b095      	sub	sp, #84	@ 0x54
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132f0:	e853 3f00 	ldrex	r3, [r3]
 80132f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80132f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80132fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	461a      	mov	r2, r3
 8013304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013306:	643b      	str	r3, [r7, #64]	@ 0x40
 8013308:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801330a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801330c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801330e:	e841 2300 	strex	r3, r2, [r1]
 8013312:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013316:	2b00      	cmp	r3, #0
 8013318:	d1e6      	bne.n	80132e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	3308      	adds	r3, #8
 8013320:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013322:	6a3b      	ldr	r3, [r7, #32]
 8013324:	e853 3f00 	ldrex	r3, [r3]
 8013328:	61fb      	str	r3, [r7, #28]
   return(result);
 801332a:	69fb      	ldr	r3, [r7, #28]
 801332c:	f023 0301 	bic.w	r3, r3, #1
 8013330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	3308      	adds	r3, #8
 8013338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801333a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801333c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801333e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013342:	e841 2300 	strex	r3, r2, [r1]
 8013346:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801334a:	2b00      	cmp	r3, #0
 801334c:	d1e5      	bne.n	801331a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013352:	2b01      	cmp	r3, #1
 8013354:	d118      	bne.n	8013388 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	e853 3f00 	ldrex	r3, [r3]
 8013362:	60bb      	str	r3, [r7, #8]
   return(result);
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	f023 0310 	bic.w	r3, r3, #16
 801336a:	647b      	str	r3, [r7, #68]	@ 0x44
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	461a      	mov	r2, r3
 8013372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013374:	61bb      	str	r3, [r7, #24]
 8013376:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013378:	6979      	ldr	r1, [r7, #20]
 801337a:	69ba      	ldr	r2, [r7, #24]
 801337c:	e841 2300 	strex	r3, r2, [r1]
 8013380:	613b      	str	r3, [r7, #16]
   return(result);
 8013382:	693b      	ldr	r3, [r7, #16]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d1e6      	bne.n	8013356 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2220      	movs	r2, #32
 801338c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2200      	movs	r2, #0
 8013394:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2200      	movs	r2, #0
 801339a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801339c:	bf00      	nop
 801339e:	3754      	adds	r7, #84	@ 0x54
 80133a0:	46bd      	mov	sp, r7
 80133a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a6:	4770      	bx	lr

080133a8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80133a8:	b480      	push	{r7}
 80133aa:	b083      	sub	sp, #12
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
 80133b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d121      	bne.n	80133fe <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	4b27      	ldr	r3, [pc, #156]	@ (801345c <FMC_SDRAM_Init+0xb4>)
 80133c0:	4013      	ands	r3, r2
 80133c2:	683a      	ldr	r2, [r7, #0]
 80133c4:	6851      	ldr	r1, [r2, #4]
 80133c6:	683a      	ldr	r2, [r7, #0]
 80133c8:	6892      	ldr	r2, [r2, #8]
 80133ca:	4311      	orrs	r1, r2
 80133cc:	683a      	ldr	r2, [r7, #0]
 80133ce:	68d2      	ldr	r2, [r2, #12]
 80133d0:	4311      	orrs	r1, r2
 80133d2:	683a      	ldr	r2, [r7, #0]
 80133d4:	6912      	ldr	r2, [r2, #16]
 80133d6:	4311      	orrs	r1, r2
 80133d8:	683a      	ldr	r2, [r7, #0]
 80133da:	6952      	ldr	r2, [r2, #20]
 80133dc:	4311      	orrs	r1, r2
 80133de:	683a      	ldr	r2, [r7, #0]
 80133e0:	6992      	ldr	r2, [r2, #24]
 80133e2:	4311      	orrs	r1, r2
 80133e4:	683a      	ldr	r2, [r7, #0]
 80133e6:	69d2      	ldr	r2, [r2, #28]
 80133e8:	4311      	orrs	r1, r2
 80133ea:	683a      	ldr	r2, [r7, #0]
 80133ec:	6a12      	ldr	r2, [r2, #32]
 80133ee:	4311      	orrs	r1, r2
 80133f0:	683a      	ldr	r2, [r7, #0]
 80133f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80133f4:	430a      	orrs	r2, r1
 80133f6:	431a      	orrs	r2, r3
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	601a      	str	r2, [r3, #0]
 80133fc:	e026      	b.n	801344c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	69d9      	ldr	r1, [r3, #28]
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	6a1b      	ldr	r3, [r3, #32]
 801340e:	4319      	orrs	r1, r3
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013414:	430b      	orrs	r3, r1
 8013416:	431a      	orrs	r2, r3
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	685a      	ldr	r2, [r3, #4]
 8013420:	4b0e      	ldr	r3, [pc, #56]	@ (801345c <FMC_SDRAM_Init+0xb4>)
 8013422:	4013      	ands	r3, r2
 8013424:	683a      	ldr	r2, [r7, #0]
 8013426:	6851      	ldr	r1, [r2, #4]
 8013428:	683a      	ldr	r2, [r7, #0]
 801342a:	6892      	ldr	r2, [r2, #8]
 801342c:	4311      	orrs	r1, r2
 801342e:	683a      	ldr	r2, [r7, #0]
 8013430:	68d2      	ldr	r2, [r2, #12]
 8013432:	4311      	orrs	r1, r2
 8013434:	683a      	ldr	r2, [r7, #0]
 8013436:	6912      	ldr	r2, [r2, #16]
 8013438:	4311      	orrs	r1, r2
 801343a:	683a      	ldr	r2, [r7, #0]
 801343c:	6952      	ldr	r2, [r2, #20]
 801343e:	4311      	orrs	r1, r2
 8013440:	683a      	ldr	r2, [r7, #0]
 8013442:	6992      	ldr	r2, [r2, #24]
 8013444:	430a      	orrs	r2, r1
 8013446:	431a      	orrs	r2, r3
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 801344c:	2300      	movs	r3, #0
}
 801344e:	4618      	mov	r0, r3
 8013450:	370c      	adds	r7, #12
 8013452:	46bd      	mov	sp, r7
 8013454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013458:	4770      	bx	lr
 801345a:	bf00      	nop
 801345c:	ffff8000 	.word	0xffff8000

08013460 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8013460:	b480      	push	{r7}
 8013462:	b085      	sub	sp, #20
 8013464:	af00      	add	r7, sp, #0
 8013466:	60f8      	str	r0, [r7, #12]
 8013468:	60b9      	str	r1, [r7, #8]
 801346a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d128      	bne.n	80134c4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	689b      	ldr	r3, [r3, #8]
 8013476:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	1e59      	subs	r1, r3, #1
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	685b      	ldr	r3, [r3, #4]
 8013484:	3b01      	subs	r3, #1
 8013486:	011b      	lsls	r3, r3, #4
 8013488:	4319      	orrs	r1, r3
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	689b      	ldr	r3, [r3, #8]
 801348e:	3b01      	subs	r3, #1
 8013490:	021b      	lsls	r3, r3, #8
 8013492:	4319      	orrs	r1, r3
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	3b01      	subs	r3, #1
 801349a:	031b      	lsls	r3, r3, #12
 801349c:	4319      	orrs	r1, r3
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	691b      	ldr	r3, [r3, #16]
 80134a2:	3b01      	subs	r3, #1
 80134a4:	041b      	lsls	r3, r3, #16
 80134a6:	4319      	orrs	r1, r3
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	695b      	ldr	r3, [r3, #20]
 80134ac:	3b01      	subs	r3, #1
 80134ae:	051b      	lsls	r3, r3, #20
 80134b0:	4319      	orrs	r1, r3
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	699b      	ldr	r3, [r3, #24]
 80134b6:	3b01      	subs	r3, #1
 80134b8:	061b      	lsls	r3, r3, #24
 80134ba:	430b      	orrs	r3, r1
 80134bc:	431a      	orrs	r2, r3
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	609a      	str	r2, [r3, #8]
 80134c2:	e02d      	b.n	8013520 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	689a      	ldr	r2, [r3, #8]
 80134c8:	4b19      	ldr	r3, [pc, #100]	@ (8013530 <FMC_SDRAM_Timing_Init+0xd0>)
 80134ca:	4013      	ands	r3, r2
 80134cc:	68ba      	ldr	r2, [r7, #8]
 80134ce:	68d2      	ldr	r2, [r2, #12]
 80134d0:	3a01      	subs	r2, #1
 80134d2:	0311      	lsls	r1, r2, #12
 80134d4:	68ba      	ldr	r2, [r7, #8]
 80134d6:	6952      	ldr	r2, [r2, #20]
 80134d8:	3a01      	subs	r2, #1
 80134da:	0512      	lsls	r2, r2, #20
 80134dc:	430a      	orrs	r2, r1
 80134de:	431a      	orrs	r2, r3
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	68db      	ldr	r3, [r3, #12]
 80134e8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	1e59      	subs	r1, r3, #1
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	3b01      	subs	r3, #1
 80134f8:	011b      	lsls	r3, r3, #4
 80134fa:	4319      	orrs	r1, r3
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	689b      	ldr	r3, [r3, #8]
 8013500:	3b01      	subs	r3, #1
 8013502:	021b      	lsls	r3, r3, #8
 8013504:	4319      	orrs	r1, r3
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	691b      	ldr	r3, [r3, #16]
 801350a:	3b01      	subs	r3, #1
 801350c:	041b      	lsls	r3, r3, #16
 801350e:	4319      	orrs	r1, r3
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	699b      	ldr	r3, [r3, #24]
 8013514:	3b01      	subs	r3, #1
 8013516:	061b      	lsls	r3, r3, #24
 8013518:	430b      	orrs	r3, r1
 801351a:	431a      	orrs	r2, r3
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8013520:	2300      	movs	r3, #0
}
 8013522:	4618      	mov	r0, r3
 8013524:	3714      	adds	r7, #20
 8013526:	46bd      	mov	sp, r7
 8013528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352c:	4770      	bx	lr
 801352e:	bf00      	nop
 8013530:	ff0f0fff 	.word	0xff0f0fff

08013534 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8013534:	b480      	push	{r7}
 8013536:	b085      	sub	sp, #20
 8013538:	af00      	add	r7, sp, #0
 801353a:	60f8      	str	r0, [r7, #12]
 801353c:	60b9      	str	r1, [r7, #8]
 801353e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	691a      	ldr	r2, [r3, #16]
 8013544:	4b0c      	ldr	r3, [pc, #48]	@ (8013578 <FMC_SDRAM_SendCommand+0x44>)
 8013546:	4013      	ands	r3, r2
 8013548:	68ba      	ldr	r2, [r7, #8]
 801354a:	6811      	ldr	r1, [r2, #0]
 801354c:	68ba      	ldr	r2, [r7, #8]
 801354e:	6852      	ldr	r2, [r2, #4]
 8013550:	4311      	orrs	r1, r2
 8013552:	68ba      	ldr	r2, [r7, #8]
 8013554:	6892      	ldr	r2, [r2, #8]
 8013556:	3a01      	subs	r2, #1
 8013558:	0152      	lsls	r2, r2, #5
 801355a:	4311      	orrs	r1, r2
 801355c:	68ba      	ldr	r2, [r7, #8]
 801355e:	68d2      	ldr	r2, [r2, #12]
 8013560:	0252      	lsls	r2, r2, #9
 8013562:	430a      	orrs	r2, r1
 8013564:	431a      	orrs	r2, r3
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 801356a:	2300      	movs	r3, #0
}
 801356c:	4618      	mov	r0, r3
 801356e:	3714      	adds	r7, #20
 8013570:	46bd      	mov	sp, r7
 8013572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013576:	4770      	bx	lr
 8013578:	ffc00000 	.word	0xffc00000

0801357c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 801357c:	b480      	push	{r7}
 801357e:	b083      	sub	sp, #12
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	695a      	ldr	r2, [r3, #20]
 801358a:	4b07      	ldr	r3, [pc, #28]	@ (80135a8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 801358c:	4013      	ands	r3, r2
 801358e:	683a      	ldr	r2, [r7, #0]
 8013590:	0052      	lsls	r2, r2, #1
 8013592:	431a      	orrs	r2, r3
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8013598:	2300      	movs	r3, #0
}
 801359a:	4618      	mov	r0, r3
 801359c:	370c      	adds	r7, #12
 801359e:	46bd      	mov	sp, r7
 80135a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a4:	4770      	bx	lr
 80135a6:	bf00      	nop
 80135a8:	ffffc001 	.word	0xffffc001

080135ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80135ac:	b084      	sub	sp, #16
 80135ae:	b580      	push	{r7, lr}
 80135b0:	b084      	sub	sp, #16
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	6078      	str	r0, [r7, #4]
 80135b6:	f107 001c 	add.w	r0, r7, #28
 80135ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80135be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80135c2:	2b01      	cmp	r3, #1
 80135c4:	d121      	bne.n	801360a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	68da      	ldr	r2, [r3, #12]
 80135d6:	4b21      	ldr	r3, [pc, #132]	@ (801365c <USB_CoreInit+0xb0>)
 80135d8:	4013      	ands	r3, r2
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	68db      	ldr	r3, [r3, #12]
 80135e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80135ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80135ee:	2b01      	cmp	r3, #1
 80135f0:	d105      	bne.n	80135fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	68db      	ldr	r3, [r3, #12]
 80135f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80135fe:	6878      	ldr	r0, [r7, #4]
 8013600:	f000 f9d4 	bl	80139ac <USB_CoreReset>
 8013604:	4603      	mov	r3, r0
 8013606:	73fb      	strb	r3, [r7, #15]
 8013608:	e010      	b.n	801362c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	68db      	ldr	r3, [r3, #12]
 801360e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f000 f9c8 	bl	80139ac <USB_CoreReset>
 801361c:	4603      	mov	r3, r0
 801361e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013624:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 801362c:	7fbb      	ldrb	r3, [r7, #30]
 801362e:	2b01      	cmp	r3, #1
 8013630:	d10b      	bne.n	801364a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	689b      	ldr	r3, [r3, #8]
 8013636:	f043 0206 	orr.w	r2, r3, #6
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	689b      	ldr	r3, [r3, #8]
 8013642:	f043 0220 	orr.w	r2, r3, #32
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801364a:	7bfb      	ldrb	r3, [r7, #15]
}
 801364c:	4618      	mov	r0, r3
 801364e:	3710      	adds	r7, #16
 8013650:	46bd      	mov	sp, r7
 8013652:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013656:	b004      	add	sp, #16
 8013658:	4770      	bx	lr
 801365a:	bf00      	nop
 801365c:	ffbdffbf 	.word	0xffbdffbf

08013660 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013660:	b480      	push	{r7}
 8013662:	b083      	sub	sp, #12
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	689b      	ldr	r3, [r3, #8]
 801366c:	f043 0201 	orr.w	r2, r3, #1
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013674:	2300      	movs	r3, #0
}
 8013676:	4618      	mov	r0, r3
 8013678:	370c      	adds	r7, #12
 801367a:	46bd      	mov	sp, r7
 801367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013680:	4770      	bx	lr

08013682 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013682:	b480      	push	{r7}
 8013684:	b083      	sub	sp, #12
 8013686:	af00      	add	r7, sp, #0
 8013688:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	689b      	ldr	r3, [r3, #8]
 801368e:	f023 0201 	bic.w	r2, r3, #1
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013696:	2300      	movs	r3, #0
}
 8013698:	4618      	mov	r0, r3
 801369a:	370c      	adds	r7, #12
 801369c:	46bd      	mov	sp, r7
 801369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a2:	4770      	bx	lr

080136a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b084      	sub	sp, #16
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	460b      	mov	r3, r1
 80136ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80136b0:	2300      	movs	r3, #0
 80136b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80136c0:	78fb      	ldrb	r3, [r7, #3]
 80136c2:	2b01      	cmp	r3, #1
 80136c4:	d115      	bne.n	80136f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	68db      	ldr	r3, [r3, #12]
 80136ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80136d2:	200a      	movs	r0, #10
 80136d4:	f7f3 fbb8 	bl	8006e48 <HAL_Delay>
      ms += 10U;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	330a      	adds	r3, #10
 80136dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f000 f956 	bl	8013990 <USB_GetMode>
 80136e4:	4603      	mov	r3, r0
 80136e6:	2b01      	cmp	r3, #1
 80136e8:	d01e      	beq.n	8013728 <USB_SetCurrentMode+0x84>
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80136ee:	d9f0      	bls.n	80136d2 <USB_SetCurrentMode+0x2e>
 80136f0:	e01a      	b.n	8013728 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80136f2:	78fb      	ldrb	r3, [r7, #3]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d115      	bne.n	8013724 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	68db      	ldr	r3, [r3, #12]
 80136fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8013704:	200a      	movs	r0, #10
 8013706:	f7f3 fb9f 	bl	8006e48 <HAL_Delay>
      ms += 10U;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	330a      	adds	r3, #10
 801370e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f000 f93d 	bl	8013990 <USB_GetMode>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d005      	beq.n	8013728 <USB_SetCurrentMode+0x84>
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	2bc7      	cmp	r3, #199	@ 0xc7
 8013720:	d9f0      	bls.n	8013704 <USB_SetCurrentMode+0x60>
 8013722:	e001      	b.n	8013728 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013724:	2301      	movs	r3, #1
 8013726:	e005      	b.n	8013734 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	2bc8      	cmp	r3, #200	@ 0xc8
 801372c:	d101      	bne.n	8013732 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801372e:	2301      	movs	r3, #1
 8013730:	e000      	b.n	8013734 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013732:	2300      	movs	r3, #0
}
 8013734:	4618      	mov	r0, r3
 8013736:	3710      	adds	r7, #16
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801373c:	b480      	push	{r7}
 801373e:	b085      	sub	sp, #20
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013746:	2300      	movs	r3, #0
 8013748:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	3301      	adds	r3, #1
 801374e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013756:	d901      	bls.n	801375c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013758:	2303      	movs	r3, #3
 801375a:	e01b      	b.n	8013794 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	691b      	ldr	r3, [r3, #16]
 8013760:	2b00      	cmp	r3, #0
 8013762:	daf2      	bge.n	801374a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013764:	2300      	movs	r3, #0
 8013766:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	019b      	lsls	r3, r3, #6
 801376c:	f043 0220 	orr.w	r2, r3, #32
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	3301      	adds	r3, #1
 8013778:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013780:	d901      	bls.n	8013786 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013782:	2303      	movs	r3, #3
 8013784:	e006      	b.n	8013794 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	691b      	ldr	r3, [r3, #16]
 801378a:	f003 0320 	and.w	r3, r3, #32
 801378e:	2b20      	cmp	r3, #32
 8013790:	d0f0      	beq.n	8013774 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013792:	2300      	movs	r3, #0
}
 8013794:	4618      	mov	r0, r3
 8013796:	3714      	adds	r7, #20
 8013798:	46bd      	mov	sp, r7
 801379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379e:	4770      	bx	lr

080137a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80137a0:	b480      	push	{r7}
 80137a2:	b085      	sub	sp, #20
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80137a8:	2300      	movs	r3, #0
 80137aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	3301      	adds	r3, #1
 80137b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80137b8:	d901      	bls.n	80137be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80137ba:	2303      	movs	r3, #3
 80137bc:	e018      	b.n	80137f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	691b      	ldr	r3, [r3, #16]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	daf2      	bge.n	80137ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80137c6:	2300      	movs	r3, #0
 80137c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	2210      	movs	r2, #16
 80137ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	3301      	adds	r3, #1
 80137d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80137dc:	d901      	bls.n	80137e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80137de:	2303      	movs	r3, #3
 80137e0:	e006      	b.n	80137f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	691b      	ldr	r3, [r3, #16]
 80137e6:	f003 0310 	and.w	r3, r3, #16
 80137ea:	2b10      	cmp	r3, #16
 80137ec:	d0f0      	beq.n	80137d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80137ee:	2300      	movs	r3, #0
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	3714      	adds	r7, #20
 80137f4:	46bd      	mov	sp, r7
 80137f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fa:	4770      	bx	lr

080137fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80137fc:	b480      	push	{r7}
 80137fe:	b089      	sub	sp, #36	@ 0x24
 8013800:	af00      	add	r7, sp, #0
 8013802:	60f8      	str	r0, [r7, #12]
 8013804:	60b9      	str	r1, [r7, #8]
 8013806:	4611      	mov	r1, r2
 8013808:	461a      	mov	r2, r3
 801380a:	460b      	mov	r3, r1
 801380c:	71fb      	strb	r3, [r7, #7]
 801380e:	4613      	mov	r3, r2
 8013810:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801381a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801381e:	2b00      	cmp	r3, #0
 8013820:	d123      	bne.n	801386a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013822:	88bb      	ldrh	r3, [r7, #4]
 8013824:	3303      	adds	r3, #3
 8013826:	089b      	lsrs	r3, r3, #2
 8013828:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801382a:	2300      	movs	r3, #0
 801382c:	61bb      	str	r3, [r7, #24]
 801382e:	e018      	b.n	8013862 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013830:	79fb      	ldrb	r3, [r7, #7]
 8013832:	031a      	lsls	r2, r3, #12
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	4413      	add	r3, r2
 8013838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801383c:	461a      	mov	r2, r3
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013844:	69fb      	ldr	r3, [r7, #28]
 8013846:	3301      	adds	r3, #1
 8013848:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	3301      	adds	r3, #1
 801384e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013850:	69fb      	ldr	r3, [r7, #28]
 8013852:	3301      	adds	r3, #1
 8013854:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	3301      	adds	r3, #1
 801385a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801385c:	69bb      	ldr	r3, [r7, #24]
 801385e:	3301      	adds	r3, #1
 8013860:	61bb      	str	r3, [r7, #24]
 8013862:	69ba      	ldr	r2, [r7, #24]
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	429a      	cmp	r2, r3
 8013868:	d3e2      	bcc.n	8013830 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801386a:	2300      	movs	r3, #0
}
 801386c:	4618      	mov	r0, r3
 801386e:	3724      	adds	r7, #36	@ 0x24
 8013870:	46bd      	mov	sp, r7
 8013872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013876:	4770      	bx	lr

08013878 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013878:	b480      	push	{r7}
 801387a:	b08b      	sub	sp, #44	@ 0x2c
 801387c:	af00      	add	r7, sp, #0
 801387e:	60f8      	str	r0, [r7, #12]
 8013880:	60b9      	str	r1, [r7, #8]
 8013882:	4613      	mov	r3, r2
 8013884:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801388e:	88fb      	ldrh	r3, [r7, #6]
 8013890:	089b      	lsrs	r3, r3, #2
 8013892:	b29b      	uxth	r3, r3
 8013894:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013896:	88fb      	ldrh	r3, [r7, #6]
 8013898:	f003 0303 	and.w	r3, r3, #3
 801389c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801389e:	2300      	movs	r3, #0
 80138a0:	623b      	str	r3, [r7, #32]
 80138a2:	e014      	b.n	80138ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80138aa:	681a      	ldr	r2, [r3, #0]
 80138ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80138b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138b2:	3301      	adds	r3, #1
 80138b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80138b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138b8:	3301      	adds	r3, #1
 80138ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80138bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138be:	3301      	adds	r3, #1
 80138c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80138c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138c4:	3301      	adds	r3, #1
 80138c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80138c8:	6a3b      	ldr	r3, [r7, #32]
 80138ca:	3301      	adds	r3, #1
 80138cc:	623b      	str	r3, [r7, #32]
 80138ce:	6a3a      	ldr	r2, [r7, #32]
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d3e6      	bcc.n	80138a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80138d6:	8bfb      	ldrh	r3, [r7, #30]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d01e      	beq.n	801391a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80138dc:	2300      	movs	r3, #0
 80138de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80138e0:	69bb      	ldr	r3, [r7, #24]
 80138e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80138e6:	461a      	mov	r2, r3
 80138e8:	f107 0310 	add.w	r3, r7, #16
 80138ec:	6812      	ldr	r2, [r2, #0]
 80138ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80138f0:	693a      	ldr	r2, [r7, #16]
 80138f2:	6a3b      	ldr	r3, [r7, #32]
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	00db      	lsls	r3, r3, #3
 80138f8:	fa22 f303 	lsr.w	r3, r2, r3
 80138fc:	b2da      	uxtb	r2, r3
 80138fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013900:	701a      	strb	r2, [r3, #0]
      i++;
 8013902:	6a3b      	ldr	r3, [r7, #32]
 8013904:	3301      	adds	r3, #1
 8013906:	623b      	str	r3, [r7, #32]
      pDest++;
 8013908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801390a:	3301      	adds	r3, #1
 801390c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801390e:	8bfb      	ldrh	r3, [r7, #30]
 8013910:	3b01      	subs	r3, #1
 8013912:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013914:	8bfb      	ldrh	r3, [r7, #30]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d1ea      	bne.n	80138f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801391c:	4618      	mov	r0, r3
 801391e:	372c      	adds	r7, #44	@ 0x2c
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr

08013928 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8013928:	b480      	push	{r7}
 801392a:	b085      	sub	sp, #20
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	695b      	ldr	r3, [r3, #20]
 8013934:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	699b      	ldr	r3, [r3, #24]
 801393a:	68fa      	ldr	r2, [r7, #12]
 801393c:	4013      	ands	r3, r2
 801393e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013940:	68fb      	ldr	r3, [r7, #12]
}
 8013942:	4618      	mov	r0, r3
 8013944:	3714      	adds	r7, #20
 8013946:	46bd      	mov	sp, r7
 8013948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394c:	4770      	bx	lr

0801394e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 801394e:	b480      	push	{r7}
 8013950:	b085      	sub	sp, #20
 8013952:	af00      	add	r7, sp, #0
 8013954:	6078      	str	r0, [r7, #4]
 8013956:	460b      	mov	r3, r1
 8013958:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 801395e:	78fb      	ldrb	r3, [r7, #3]
 8013960:	015a      	lsls	r2, r3, #5
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	4413      	add	r3, r2
 8013966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801396a:	689b      	ldr	r3, [r3, #8]
 801396c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 801396e:	78fb      	ldrb	r3, [r7, #3]
 8013970:	015a      	lsls	r2, r3, #5
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	4413      	add	r3, r2
 8013976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801397a:	68db      	ldr	r3, [r3, #12]
 801397c:	68ba      	ldr	r2, [r7, #8]
 801397e:	4013      	ands	r3, r2
 8013980:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013982:	68bb      	ldr	r3, [r7, #8]
}
 8013984:	4618      	mov	r0, r3
 8013986:	3714      	adds	r7, #20
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr

08013990 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8013990:	b480      	push	{r7}
 8013992:	b083      	sub	sp, #12
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	695b      	ldr	r3, [r3, #20]
 801399c:	f003 0301 	and.w	r3, r3, #1
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	370c      	adds	r7, #12
 80139a4:	46bd      	mov	sp, r7
 80139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139aa:	4770      	bx	lr

080139ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80139ac:	b480      	push	{r7}
 80139ae:	b085      	sub	sp, #20
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80139b4:	2300      	movs	r3, #0
 80139b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	3301      	adds	r3, #1
 80139bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80139c4:	d901      	bls.n	80139ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80139c6:	2303      	movs	r3, #3
 80139c8:	e01b      	b.n	8013a02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	691b      	ldr	r3, [r3, #16]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	daf2      	bge.n	80139b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80139d2:	2300      	movs	r3, #0
 80139d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	691b      	ldr	r3, [r3, #16]
 80139da:	f043 0201 	orr.w	r2, r3, #1
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	3301      	adds	r3, #1
 80139e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80139ee:	d901      	bls.n	80139f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80139f0:	2303      	movs	r3, #3
 80139f2:	e006      	b.n	8013a02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	691b      	ldr	r3, [r3, #16]
 80139f8:	f003 0301 	and.w	r3, r3, #1
 80139fc:	2b01      	cmp	r3, #1
 80139fe:	d0f0      	beq.n	80139e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8013a00:	2300      	movs	r3, #0
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	3714      	adds	r7, #20
 8013a06:	46bd      	mov	sp, r7
 8013a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0c:	4770      	bx	lr
	...

08013a10 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013a10:	b084      	sub	sp, #16
 8013a12:	b580      	push	{r7, lr}
 8013a14:	b086      	sub	sp, #24
 8013a16:	af00      	add	r7, sp, #0
 8013a18:	6078      	str	r0, [r7, #4]
 8013a1a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8013a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013a22:	2300      	movs	r3, #0
 8013a24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013a30:	461a      	mov	r2, r3
 8013a32:	2300      	movs	r3, #0
 8013a34:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a3a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	68db      	ldr	r3, [r3, #12]
 8013a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d119      	bne.n	8013a82 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8013a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a52:	2b01      	cmp	r3, #1
 8013a54:	d10a      	bne.n	8013a6c <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	68fa      	ldr	r2, [r7, #12]
 8013a60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8013a64:	f043 0304 	orr.w	r3, r3, #4
 8013a68:	6013      	str	r3, [r2, #0]
 8013a6a:	e014      	b.n	8013a96 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	68fa      	ldr	r2, [r7, #12]
 8013a76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8013a7a:	f023 0304 	bic.w	r3, r3, #4
 8013a7e:	6013      	str	r3, [r2, #0]
 8013a80:	e009      	b.n	8013a96 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	68fa      	ldr	r2, [r7, #12]
 8013a8c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8013a90:	f023 0304 	bic.w	r3, r3, #4
 8013a94:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013a96:	2110      	movs	r1, #16
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f7ff fe4f 	bl	801373c <USB_FlushTxFifo>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d001      	beq.n	8013aa8 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f7ff fe79 	bl	80137a0 <USB_FlushRxFifo>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d001      	beq.n	8013ab8 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8013ab8:	2300      	movs	r3, #0
 8013aba:	613b      	str	r3, [r7, #16]
 8013abc:	e015      	b.n	8013aea <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	015a      	lsls	r2, r3, #5
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	4413      	add	r3, r2
 8013ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013aca:	461a      	mov	r2, r3
 8013acc:	f04f 33ff 	mov.w	r3, #4294967295
 8013ad0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	015a      	lsls	r2, r3, #5
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	4413      	add	r3, r2
 8013ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013ade:	461a      	mov	r2, r3
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	3301      	adds	r3, #1
 8013ae8:	613b      	str	r3, [r7, #16]
 8013aea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013aee:	461a      	mov	r2, r3
 8013af0:	693b      	ldr	r3, [r7, #16]
 8013af2:	4293      	cmp	r3, r2
 8013af4:	d3e3      	bcc.n	8013abe <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2200      	movs	r2, #0
 8013afa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f04f 32ff 	mov.w	r2, #4294967295
 8013b02:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	4a18      	ldr	r2, [pc, #96]	@ (8013b68 <USB_HostInit+0x158>)
 8013b08:	4293      	cmp	r3, r2
 8013b0a:	d10b      	bne.n	8013b24 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b12:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	4a15      	ldr	r2, [pc, #84]	@ (8013b6c <USB_HostInit+0x15c>)
 8013b18:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	4a14      	ldr	r2, [pc, #80]	@ (8013b70 <USB_HostInit+0x160>)
 8013b1e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8013b22:	e009      	b.n	8013b38 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2280      	movs	r2, #128	@ 0x80
 8013b28:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	4a11      	ldr	r2, [pc, #68]	@ (8013b74 <USB_HostInit+0x164>)
 8013b2e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	4a11      	ldr	r2, [pc, #68]	@ (8013b78 <USB_HostInit+0x168>)
 8013b34:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013b38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d105      	bne.n	8013b4c <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	699b      	ldr	r3, [r3, #24]
 8013b44:	f043 0210 	orr.w	r2, r3, #16
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	699a      	ldr	r2, [r3, #24]
 8013b50:	4b0a      	ldr	r3, [pc, #40]	@ (8013b7c <USB_HostInit+0x16c>)
 8013b52:	4313      	orrs	r3, r2
 8013b54:	687a      	ldr	r2, [r7, #4]
 8013b56:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8013b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3718      	adds	r7, #24
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013b64:	b004      	add	sp, #16
 8013b66:	4770      	bx	lr
 8013b68:	40040000 	.word	0x40040000
 8013b6c:	01000200 	.word	0x01000200
 8013b70:	00e00300 	.word	0x00e00300
 8013b74:	00600080 	.word	0x00600080
 8013b78:	004000e0 	.word	0x004000e0
 8013b7c:	a3200008 	.word	0xa3200008

08013b80 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8013b80:	b480      	push	{r7}
 8013b82:	b085      	sub	sp, #20
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
 8013b88:	460b      	mov	r3, r1
 8013b8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	68fa      	ldr	r2, [r7, #12]
 8013b9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8013b9e:	f023 0303 	bic.w	r3, r3, #3
 8013ba2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	78fb      	ldrb	r3, [r7, #3]
 8013bae:	f003 0303 	and.w	r3, r3, #3
 8013bb2:	68f9      	ldr	r1, [r7, #12]
 8013bb4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8013bb8:	4313      	orrs	r3, r2
 8013bba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8013bbc:	78fb      	ldrb	r3, [r7, #3]
 8013bbe:	2b01      	cmp	r3, #1
 8013bc0:	d107      	bne.n	8013bd2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013bc8:	461a      	mov	r2, r3
 8013bca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8013bce:	6053      	str	r3, [r2, #4]
 8013bd0:	e00c      	b.n	8013bec <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8013bd2:	78fb      	ldrb	r3, [r7, #3]
 8013bd4:	2b02      	cmp	r3, #2
 8013bd6:	d107      	bne.n	8013be8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013bde:	461a      	mov	r2, r3
 8013be0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8013be4:	6053      	str	r3, [r2, #4]
 8013be6:	e001      	b.n	8013bec <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8013be8:	2301      	movs	r3, #1
 8013bea:	e000      	b.n	8013bee <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8013bec:	2300      	movs	r3, #0
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3714      	adds	r7, #20
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf8:	4770      	bx	lr

08013bfa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8013bfa:	b580      	push	{r7, lr}
 8013bfc:	b084      	sub	sp, #16
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8013c06:	2300      	movs	r3, #0
 8013c08:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8013c1a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	68fa      	ldr	r2, [r7, #12]
 8013c20:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8013c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013c28:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8013c2a:	2064      	movs	r0, #100	@ 0x64
 8013c2c:	f7f3 f90c 	bl	8006e48 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	68fa      	ldr	r2, [r7, #12]
 8013c34:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8013c38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013c3c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8013c3e:	200a      	movs	r0, #10
 8013c40:	f7f3 f902 	bl	8006e48 <HAL_Delay>

  return HAL_OK;
 8013c44:	2300      	movs	r3, #0
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3710      	adds	r7, #16
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}

08013c4e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8013c4e:	b480      	push	{r7}
 8013c50:	b085      	sub	sp, #20
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	6078      	str	r0, [r7, #4]
 8013c56:	460b      	mov	r3, r1
 8013c58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8013c72:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d109      	bne.n	8013c92 <USB_DriveVbus+0x44>
 8013c7e:	78fb      	ldrb	r3, [r7, #3]
 8013c80:	2b01      	cmp	r3, #1
 8013c82:	d106      	bne.n	8013c92 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	68fa      	ldr	r2, [r7, #12]
 8013c88:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8013c8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8013c90:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8013c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013c9c:	d109      	bne.n	8013cb2 <USB_DriveVbus+0x64>
 8013c9e:	78fb      	ldrb	r3, [r7, #3]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d106      	bne.n	8013cb2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	68fa      	ldr	r2, [r7, #12]
 8013ca8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8013cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013cb0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8013cb2:	2300      	movs	r3, #0
}
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	3714      	adds	r7, #20
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbe:	4770      	bx	lr

08013cc0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8013cc0:	b480      	push	{r7}
 8013cc2:	b085      	sub	sp, #20
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	0c5b      	lsrs	r3, r3, #17
 8013cde:	f003 0303 	and.w	r3, r3, #3
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3714      	adds	r7, #20
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cec:	4770      	bx	lr

08013cee <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8013cee:	b480      	push	{r7}
 8013cf0:	b085      	sub	sp, #20
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013d00:	689b      	ldr	r3, [r3, #8]
 8013d02:	b29b      	uxth	r3, r3
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3714      	adds	r7, #20
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0e:	4770      	bx	lr

08013d10 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b088      	sub	sp, #32
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	4608      	mov	r0, r1
 8013d1a:	4611      	mov	r1, r2
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	4603      	mov	r3, r0
 8013d20:	70fb      	strb	r3, [r7, #3]
 8013d22:	460b      	mov	r3, r1
 8013d24:	70bb      	strb	r3, [r7, #2]
 8013d26:	4613      	mov	r3, r2
 8013d28:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8013d32:	78fb      	ldrb	r3, [r7, #3]
 8013d34:	015a      	lsls	r2, r3, #5
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	4413      	add	r3, r2
 8013d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013d3e:	461a      	mov	r2, r3
 8013d40:	f04f 33ff 	mov.w	r3, #4294967295
 8013d44:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8013d46:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013d4a:	2b03      	cmp	r3, #3
 8013d4c:	d87c      	bhi.n	8013e48 <USB_HC_Init+0x138>
 8013d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8013d54 <USB_HC_Init+0x44>)
 8013d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d54:	08013d65 	.word	0x08013d65
 8013d58:	08013e0b 	.word	0x08013e0b
 8013d5c:	08013d65 	.word	0x08013d65
 8013d60:	08013dcd 	.word	0x08013dcd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013d64:	78fb      	ldrb	r3, [r7, #3]
 8013d66:	015a      	lsls	r2, r3, #5
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	4413      	add	r3, r2
 8013d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013d70:	461a      	mov	r2, r3
 8013d72:	f240 439d 	movw	r3, #1181	@ 0x49d
 8013d76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8013d78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	da10      	bge.n	8013da2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8013d80:	78fb      	ldrb	r3, [r7, #3]
 8013d82:	015a      	lsls	r2, r3, #5
 8013d84:	693b      	ldr	r3, [r7, #16]
 8013d86:	4413      	add	r3, r2
 8013d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	78fa      	ldrb	r2, [r7, #3]
 8013d90:	0151      	lsls	r1, r2, #5
 8013d92:	693a      	ldr	r2, [r7, #16]
 8013d94:	440a      	add	r2, r1
 8013d96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8013d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013d9e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8013da0:	e055      	b.n	8013e4e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	4a6f      	ldr	r2, [pc, #444]	@ (8013f64 <USB_HC_Init+0x254>)
 8013da6:	4293      	cmp	r3, r2
 8013da8:	d151      	bne.n	8013e4e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8013daa:	78fb      	ldrb	r3, [r7, #3]
 8013dac:	015a      	lsls	r2, r3, #5
 8013dae:	693b      	ldr	r3, [r7, #16]
 8013db0:	4413      	add	r3, r2
 8013db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013db6:	68db      	ldr	r3, [r3, #12]
 8013db8:	78fa      	ldrb	r2, [r7, #3]
 8013dba:	0151      	lsls	r1, r2, #5
 8013dbc:	693a      	ldr	r2, [r7, #16]
 8013dbe:	440a      	add	r2, r1
 8013dc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8013dc4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8013dc8:	60d3      	str	r3, [r2, #12]
      break;
 8013dca:	e040      	b.n	8013e4e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013dcc:	78fb      	ldrb	r3, [r7, #3]
 8013dce:	015a      	lsls	r2, r3, #5
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	4413      	add	r3, r2
 8013dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013dd8:	461a      	mov	r2, r3
 8013dda:	f240 639d 	movw	r3, #1693	@ 0x69d
 8013dde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8013de0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	da34      	bge.n	8013e52 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8013de8:	78fb      	ldrb	r3, [r7, #3]
 8013dea:	015a      	lsls	r2, r3, #5
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	4413      	add	r3, r2
 8013df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013df4:	68db      	ldr	r3, [r3, #12]
 8013df6:	78fa      	ldrb	r2, [r7, #3]
 8013df8:	0151      	lsls	r1, r2, #5
 8013dfa:	693a      	ldr	r2, [r7, #16]
 8013dfc:	440a      	add	r2, r1
 8013dfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8013e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013e06:	60d3      	str	r3, [r2, #12]
      }

      break;
 8013e08:	e023      	b.n	8013e52 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013e0a:	78fb      	ldrb	r3, [r7, #3]
 8013e0c:	015a      	lsls	r2, r3, #5
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	4413      	add	r3, r2
 8013e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013e16:	461a      	mov	r2, r3
 8013e18:	f240 2325 	movw	r3, #549	@ 0x225
 8013e1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8013e1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	da17      	bge.n	8013e56 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8013e26:	78fb      	ldrb	r3, [r7, #3]
 8013e28:	015a      	lsls	r2, r3, #5
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	4413      	add	r3, r2
 8013e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013e32:	68db      	ldr	r3, [r3, #12]
 8013e34:	78fa      	ldrb	r2, [r7, #3]
 8013e36:	0151      	lsls	r1, r2, #5
 8013e38:	693a      	ldr	r2, [r7, #16]
 8013e3a:	440a      	add	r2, r1
 8013e3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8013e40:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8013e44:	60d3      	str	r3, [r2, #12]
      }
      break;
 8013e46:	e006      	b.n	8013e56 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8013e48:	2301      	movs	r3, #1
 8013e4a:	77fb      	strb	r3, [r7, #31]
      break;
 8013e4c:	e004      	b.n	8013e58 <USB_HC_Init+0x148>
      break;
 8013e4e:	bf00      	nop
 8013e50:	e002      	b.n	8013e58 <USB_HC_Init+0x148>
      break;
 8013e52:	bf00      	nop
 8013e54:	e000      	b.n	8013e58 <USB_HC_Init+0x148>
      break;
 8013e56:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8013e58:	78fb      	ldrb	r3, [r7, #3]
 8013e5a:	015a      	lsls	r2, r3, #5
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	4413      	add	r3, r2
 8013e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013e64:	461a      	mov	r2, r3
 8013e66:	2300      	movs	r3, #0
 8013e68:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8013e6a:	78fb      	ldrb	r3, [r7, #3]
 8013e6c:	015a      	lsls	r2, r3, #5
 8013e6e:	693b      	ldr	r3, [r7, #16]
 8013e70:	4413      	add	r3, r2
 8013e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013e76:	68db      	ldr	r3, [r3, #12]
 8013e78:	78fa      	ldrb	r2, [r7, #3]
 8013e7a:	0151      	lsls	r1, r2, #5
 8013e7c:	693a      	ldr	r2, [r7, #16]
 8013e7e:	440a      	add	r2, r1
 8013e80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8013e84:	f043 0302 	orr.w	r3, r3, #2
 8013e88:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013e90:	699a      	ldr	r2, [r3, #24]
 8013e92:	78fb      	ldrb	r3, [r7, #3]
 8013e94:	f003 030f 	and.w	r3, r3, #15
 8013e98:	2101      	movs	r1, #1
 8013e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8013e9e:	6939      	ldr	r1, [r7, #16]
 8013ea0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8013ea4:	4313      	orrs	r3, r2
 8013ea6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	699b      	ldr	r3, [r3, #24]
 8013eac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8013eb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	da03      	bge.n	8013ec4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8013ebc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013ec0:	61bb      	str	r3, [r7, #24]
 8013ec2:	e001      	b.n	8013ec8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8013ec8:	6878      	ldr	r0, [r7, #4]
 8013eca:	f7ff fef9 	bl	8013cc0 <USB_GetHostSpeed>
 8013ece:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8013ed0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013ed4:	2b02      	cmp	r3, #2
 8013ed6:	d106      	bne.n	8013ee6 <USB_HC_Init+0x1d6>
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	2b02      	cmp	r3, #2
 8013edc:	d003      	beq.n	8013ee6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8013ede:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8013ee2:	617b      	str	r3, [r7, #20]
 8013ee4:	e001      	b.n	8013eea <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013eea:	787b      	ldrb	r3, [r7, #1]
 8013eec:	059b      	lsls	r3, r3, #22
 8013eee:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8013ef2:	78bb      	ldrb	r3, [r7, #2]
 8013ef4:	02db      	lsls	r3, r3, #11
 8013ef6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013efa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8013efc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013f00:	049b      	lsls	r3, r3, #18
 8013f02:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8013f06:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8013f08:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8013f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8013f0e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8013f10:	69bb      	ldr	r3, [r7, #24]
 8013f12:	431a      	orrs	r2, r3
 8013f14:	697b      	ldr	r3, [r7, #20]
 8013f16:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013f18:	78fa      	ldrb	r2, [r7, #3]
 8013f1a:	0151      	lsls	r1, r2, #5
 8013f1c:	693a      	ldr	r2, [r7, #16]
 8013f1e:	440a      	add	r2, r1
 8013f20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8013f24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013f28:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8013f2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013f2e:	2b03      	cmp	r3, #3
 8013f30:	d003      	beq.n	8013f3a <USB_HC_Init+0x22a>
 8013f32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013f36:	2b01      	cmp	r3, #1
 8013f38:	d10f      	bne.n	8013f5a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8013f3a:	78fb      	ldrb	r3, [r7, #3]
 8013f3c:	015a      	lsls	r2, r3, #5
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	4413      	add	r3, r2
 8013f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	78fa      	ldrb	r2, [r7, #3]
 8013f4a:	0151      	lsls	r1, r2, #5
 8013f4c:	693a      	ldr	r2, [r7, #16]
 8013f4e:	440a      	add	r2, r1
 8013f50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8013f54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013f58:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8013f5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3720      	adds	r7, #32
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}
 8013f64:	40040000 	.word	0x40040000

08013f68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b08c      	sub	sp, #48	@ 0x30
 8013f6c:	af02      	add	r7, sp, #8
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	60b9      	str	r1, [r7, #8]
 8013f72:	4613      	mov	r3, r2
 8013f74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	785b      	ldrb	r3, [r3, #1]
 8013f7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8013f80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013f84:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	4a5d      	ldr	r2, [pc, #372]	@ (8014100 <USB_HC_StartXfer+0x198>)
 8013f8a:	4293      	cmp	r3, r2
 8013f8c:	d12f      	bne.n	8013fee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8013f8e:	79fb      	ldrb	r3, [r7, #7]
 8013f90:	2b01      	cmp	r3, #1
 8013f92:	d11c      	bne.n	8013fce <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	7c9b      	ldrb	r3, [r3, #18]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d003      	beq.n	8013fa4 <USB_HC_StartXfer+0x3c>
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	7c9b      	ldrb	r3, [r3, #18]
 8013fa0:	2b02      	cmp	r3, #2
 8013fa2:	d124      	bne.n	8013fee <USB_HC_StartXfer+0x86>
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	799b      	ldrb	r3, [r3, #6]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d120      	bne.n	8013fee <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8013fac:	69fb      	ldr	r3, [r7, #28]
 8013fae:	015a      	lsls	r2, r3, #5
 8013fb0:	6a3b      	ldr	r3, [r7, #32]
 8013fb2:	4413      	add	r3, r2
 8013fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8013fb8:	68db      	ldr	r3, [r3, #12]
 8013fba:	69fa      	ldr	r2, [r7, #28]
 8013fbc:	0151      	lsls	r1, r2, #5
 8013fbe:	6a3a      	ldr	r2, [r7, #32]
 8013fc0:	440a      	add	r2, r1
 8013fc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8013fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013fca:	60d3      	str	r3, [r2, #12]
 8013fcc:	e00f      	b.n	8013fee <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	791b      	ldrb	r3, [r3, #4]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d10b      	bne.n	8013fee <USB_HC_StartXfer+0x86>
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	795b      	ldrb	r3, [r3, #5]
 8013fda:	2b01      	cmp	r3, #1
 8013fdc:	d107      	bne.n	8013fee <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	785b      	ldrb	r3, [r3, #1]
 8013fe2:	4619      	mov	r1, r3
 8013fe4:	68f8      	ldr	r0, [r7, #12]
 8013fe6:	f000 fb6b 	bl	80146c0 <USB_DoPing>
        return HAL_OK;
 8013fea:	2300      	movs	r3, #0
 8013fec:	e232      	b.n	8014454 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	799b      	ldrb	r3, [r3, #6]
 8013ff2:	2b01      	cmp	r3, #1
 8013ff4:	d158      	bne.n	80140a8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8013ff6:	2301      	movs	r3, #1
 8013ff8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	78db      	ldrb	r3, [r3, #3]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d007      	beq.n	8014012 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8014002:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014004:	68ba      	ldr	r2, [r7, #8]
 8014006:	8a92      	ldrh	r2, [r2, #20]
 8014008:	fb03 f202 	mul.w	r2, r3, r2
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	61da      	str	r2, [r3, #28]
 8014010:	e07c      	b.n	801410c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	7c9b      	ldrb	r3, [r3, #18]
 8014016:	2b01      	cmp	r3, #1
 8014018:	d130      	bne.n	801407c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	6a1b      	ldr	r3, [r3, #32]
 801401e:	2bbc      	cmp	r3, #188	@ 0xbc
 8014020:	d918      	bls.n	8014054 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	8a9b      	ldrh	r3, [r3, #20]
 8014026:	461a      	mov	r2, r3
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	69da      	ldr	r2, [r3, #28]
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	68db      	ldr	r3, [r3, #12]
 8014038:	2b01      	cmp	r3, #1
 801403a:	d003      	beq.n	8014044 <USB_HC_StartXfer+0xdc>
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	68db      	ldr	r3, [r3, #12]
 8014040:	2b02      	cmp	r3, #2
 8014042:	d103      	bne.n	801404c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	2202      	movs	r2, #2
 8014048:	60da      	str	r2, [r3, #12]
 801404a:	e05f      	b.n	801410c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 801404c:	68bb      	ldr	r3, [r7, #8]
 801404e:	2201      	movs	r2, #1
 8014050:	60da      	str	r2, [r3, #12]
 8014052:	e05b      	b.n	801410c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	6a1a      	ldr	r2, [r3, #32]
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	2b01      	cmp	r3, #1
 8014062:	d007      	beq.n	8014074 <USB_HC_StartXfer+0x10c>
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	68db      	ldr	r3, [r3, #12]
 8014068:	2b02      	cmp	r3, #2
 801406a:	d003      	beq.n	8014074 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	2204      	movs	r2, #4
 8014070:	60da      	str	r2, [r3, #12]
 8014072:	e04b      	b.n	801410c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	2203      	movs	r2, #3
 8014078:	60da      	str	r2, [r3, #12]
 801407a:	e047      	b.n	801410c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 801407c:	79fb      	ldrb	r3, [r7, #7]
 801407e:	2b01      	cmp	r3, #1
 8014080:	d10d      	bne.n	801409e <USB_HC_StartXfer+0x136>
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	6a1b      	ldr	r3, [r3, #32]
 8014086:	68ba      	ldr	r2, [r7, #8]
 8014088:	8a92      	ldrh	r2, [r2, #20]
 801408a:	4293      	cmp	r3, r2
 801408c:	d907      	bls.n	801409e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801408e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014090:	68ba      	ldr	r2, [r7, #8]
 8014092:	8a92      	ldrh	r2, [r2, #20]
 8014094:	fb03 f202 	mul.w	r2, r3, r2
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	61da      	str	r2, [r3, #28]
 801409c:	e036      	b.n	801410c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	6a1a      	ldr	r2, [r3, #32]
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	61da      	str	r2, [r3, #28]
 80140a6:	e031      	b.n	801410c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	6a1b      	ldr	r3, [r3, #32]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d018      	beq.n	80140e2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80140b0:	68bb      	ldr	r3, [r7, #8]
 80140b2:	6a1b      	ldr	r3, [r3, #32]
 80140b4:	68ba      	ldr	r2, [r7, #8]
 80140b6:	8a92      	ldrh	r2, [r2, #20]
 80140b8:	4413      	add	r3, r2
 80140ba:	3b01      	subs	r3, #1
 80140bc:	68ba      	ldr	r2, [r7, #8]
 80140be:	8a92      	ldrh	r2, [r2, #20]
 80140c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80140c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80140c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80140c8:	8b7b      	ldrh	r3, [r7, #26]
 80140ca:	429a      	cmp	r2, r3
 80140cc:	d90b      	bls.n	80140e6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80140ce:	8b7b      	ldrh	r3, [r7, #26]
 80140d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80140d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80140d4:	68ba      	ldr	r2, [r7, #8]
 80140d6:	8a92      	ldrh	r2, [r2, #20]
 80140d8:	fb03 f202 	mul.w	r2, r3, r2
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	61da      	str	r2, [r3, #28]
 80140e0:	e001      	b.n	80140e6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80140e2:	2301      	movs	r3, #1
 80140e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	78db      	ldrb	r3, [r3, #3]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d00a      	beq.n	8014104 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80140ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80140f0:	68ba      	ldr	r2, [r7, #8]
 80140f2:	8a92      	ldrh	r2, [r2, #20]
 80140f4:	fb03 f202 	mul.w	r2, r3, r2
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	61da      	str	r2, [r3, #28]
 80140fc:	e006      	b.n	801410c <USB_HC_StartXfer+0x1a4>
 80140fe:	bf00      	nop
 8014100:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	6a1a      	ldr	r2, [r3, #32]
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	69db      	ldr	r3, [r3, #28]
 8014110:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8014114:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014116:	04d9      	lsls	r1, r3, #19
 8014118:	4ba3      	ldr	r3, [pc, #652]	@ (80143a8 <USB_HC_StartXfer+0x440>)
 801411a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801411c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	7d9b      	ldrb	r3, [r3, #22]
 8014122:	075b      	lsls	r3, r3, #29
 8014124:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014128:	69f9      	ldr	r1, [r7, #28]
 801412a:	0148      	lsls	r0, r1, #5
 801412c:	6a39      	ldr	r1, [r7, #32]
 801412e:	4401      	add	r1, r0
 8014130:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8014134:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014136:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8014138:	79fb      	ldrb	r3, [r7, #7]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d009      	beq.n	8014152 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	6999      	ldr	r1, [r3, #24]
 8014142:	69fb      	ldr	r3, [r7, #28]
 8014144:	015a      	lsls	r2, r3, #5
 8014146:	6a3b      	ldr	r3, [r7, #32]
 8014148:	4413      	add	r3, r2
 801414a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801414e:	460a      	mov	r2, r1
 8014150:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8014152:	6a3b      	ldr	r3, [r7, #32]
 8014154:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8014158:	689b      	ldr	r3, [r3, #8]
 801415a:	f003 0301 	and.w	r3, r3, #1
 801415e:	2b00      	cmp	r3, #0
 8014160:	bf0c      	ite	eq
 8014162:	2301      	moveq	r3, #1
 8014164:	2300      	movne	r3, #0
 8014166:	b2db      	uxtb	r3, r3
 8014168:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801416a:	69fb      	ldr	r3, [r7, #28]
 801416c:	015a      	lsls	r2, r3, #5
 801416e:	6a3b      	ldr	r3, [r7, #32]
 8014170:	4413      	add	r3, r2
 8014172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	69fa      	ldr	r2, [r7, #28]
 801417a:	0151      	lsls	r1, r2, #5
 801417c:	6a3a      	ldr	r2, [r7, #32]
 801417e:	440a      	add	r2, r1
 8014180:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8014184:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8014188:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801418a:	69fb      	ldr	r3, [r7, #28]
 801418c:	015a      	lsls	r2, r3, #5
 801418e:	6a3b      	ldr	r3, [r7, #32]
 8014190:	4413      	add	r3, r2
 8014192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014196:	681a      	ldr	r2, [r3, #0]
 8014198:	7e7b      	ldrb	r3, [r7, #25]
 801419a:	075b      	lsls	r3, r3, #29
 801419c:	69f9      	ldr	r1, [r7, #28]
 801419e:	0148      	lsls	r0, r1, #5
 80141a0:	6a39      	ldr	r1, [r7, #32]
 80141a2:	4401      	add	r1, r0
 80141a4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80141a8:	4313      	orrs	r3, r2
 80141aa:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	799b      	ldrb	r3, [r3, #6]
 80141b0:	2b01      	cmp	r3, #1
 80141b2:	f040 80c3 	bne.w	801433c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	7c5b      	ldrb	r3, [r3, #17]
 80141ba:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80141bc:	68ba      	ldr	r2, [r7, #8]
 80141be:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80141c0:	4313      	orrs	r3, r2
 80141c2:	69fa      	ldr	r2, [r7, #28]
 80141c4:	0151      	lsls	r1, r2, #5
 80141c6:	6a3a      	ldr	r2, [r7, #32]
 80141c8:	440a      	add	r2, r1
 80141ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80141ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80141d2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80141d4:	69fb      	ldr	r3, [r7, #28]
 80141d6:	015a      	lsls	r2, r3, #5
 80141d8:	6a3b      	ldr	r3, [r7, #32]
 80141da:	4413      	add	r3, r2
 80141dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80141e0:	68db      	ldr	r3, [r3, #12]
 80141e2:	69fa      	ldr	r2, [r7, #28]
 80141e4:	0151      	lsls	r1, r2, #5
 80141e6:	6a3a      	ldr	r2, [r7, #32]
 80141e8:	440a      	add	r2, r1
 80141ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80141ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80141f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	79db      	ldrb	r3, [r3, #7]
 80141f8:	2b01      	cmp	r3, #1
 80141fa:	d123      	bne.n	8014244 <USB_HC_StartXfer+0x2dc>
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	78db      	ldrb	r3, [r3, #3]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d11f      	bne.n	8014244 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8014204:	69fb      	ldr	r3, [r7, #28]
 8014206:	015a      	lsls	r2, r3, #5
 8014208:	6a3b      	ldr	r3, [r7, #32]
 801420a:	4413      	add	r3, r2
 801420c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014210:	685b      	ldr	r3, [r3, #4]
 8014212:	69fa      	ldr	r2, [r7, #28]
 8014214:	0151      	lsls	r1, r2, #5
 8014216:	6a3a      	ldr	r2, [r7, #32]
 8014218:	440a      	add	r2, r1
 801421a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801421e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014222:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8014224:	69fb      	ldr	r3, [r7, #28]
 8014226:	015a      	lsls	r2, r3, #5
 8014228:	6a3b      	ldr	r3, [r7, #32]
 801422a:	4413      	add	r3, r2
 801422c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014230:	68db      	ldr	r3, [r3, #12]
 8014232:	69fa      	ldr	r2, [r7, #28]
 8014234:	0151      	lsls	r1, r2, #5
 8014236:	6a3a      	ldr	r2, [r7, #32]
 8014238:	440a      	add	r2, r1
 801423a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801423e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014242:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	7c9b      	ldrb	r3, [r3, #18]
 8014248:	2b01      	cmp	r3, #1
 801424a:	d003      	beq.n	8014254 <USB_HC_StartXfer+0x2ec>
 801424c:	68bb      	ldr	r3, [r7, #8]
 801424e:	7c9b      	ldrb	r3, [r3, #18]
 8014250:	2b03      	cmp	r3, #3
 8014252:	d117      	bne.n	8014284 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8014258:	2b01      	cmp	r3, #1
 801425a:	d113      	bne.n	8014284 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 801425c:	68bb      	ldr	r3, [r7, #8]
 801425e:	78db      	ldrb	r3, [r3, #3]
 8014260:	2b01      	cmp	r3, #1
 8014262:	d10f      	bne.n	8014284 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8014264:	69fb      	ldr	r3, [r7, #28]
 8014266:	015a      	lsls	r2, r3, #5
 8014268:	6a3b      	ldr	r3, [r7, #32]
 801426a:	4413      	add	r3, r2
 801426c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014270:	685b      	ldr	r3, [r3, #4]
 8014272:	69fa      	ldr	r2, [r7, #28]
 8014274:	0151      	lsls	r1, r2, #5
 8014276:	6a3a      	ldr	r2, [r7, #32]
 8014278:	440a      	add	r2, r1
 801427a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801427e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014282:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8014284:	68bb      	ldr	r3, [r7, #8]
 8014286:	7c9b      	ldrb	r3, [r3, #18]
 8014288:	2b01      	cmp	r3, #1
 801428a:	d162      	bne.n	8014352 <USB_HC_StartXfer+0x3ea>
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	78db      	ldrb	r3, [r3, #3]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d15e      	bne.n	8014352 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8014294:	68bb      	ldr	r3, [r7, #8]
 8014296:	68db      	ldr	r3, [r3, #12]
 8014298:	3b01      	subs	r3, #1
 801429a:	2b03      	cmp	r3, #3
 801429c:	d858      	bhi.n	8014350 <USB_HC_StartXfer+0x3e8>
 801429e:	a201      	add	r2, pc, #4	@ (adr r2, 80142a4 <USB_HC_StartXfer+0x33c>)
 80142a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142a4:	080142b5 	.word	0x080142b5
 80142a8:	080142d7 	.word	0x080142d7
 80142ac:	080142f9 	.word	0x080142f9
 80142b0:	0801431b 	.word	0x0801431b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80142b4:	69fb      	ldr	r3, [r7, #28]
 80142b6:	015a      	lsls	r2, r3, #5
 80142b8:	6a3b      	ldr	r3, [r7, #32]
 80142ba:	4413      	add	r3, r2
 80142bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80142c0:	685b      	ldr	r3, [r3, #4]
 80142c2:	69fa      	ldr	r2, [r7, #28]
 80142c4:	0151      	lsls	r1, r2, #5
 80142c6:	6a3a      	ldr	r2, [r7, #32]
 80142c8:	440a      	add	r2, r1
 80142ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80142ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80142d2:	6053      	str	r3, [r2, #4]
          break;
 80142d4:	e03d      	b.n	8014352 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80142d6:	69fb      	ldr	r3, [r7, #28]
 80142d8:	015a      	lsls	r2, r3, #5
 80142da:	6a3b      	ldr	r3, [r7, #32]
 80142dc:	4413      	add	r3, r2
 80142de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80142e2:	685b      	ldr	r3, [r3, #4]
 80142e4:	69fa      	ldr	r2, [r7, #28]
 80142e6:	0151      	lsls	r1, r2, #5
 80142e8:	6a3a      	ldr	r2, [r7, #32]
 80142ea:	440a      	add	r2, r1
 80142ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80142f0:	f043 030e 	orr.w	r3, r3, #14
 80142f4:	6053      	str	r3, [r2, #4]
          break;
 80142f6:	e02c      	b.n	8014352 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80142f8:	69fb      	ldr	r3, [r7, #28]
 80142fa:	015a      	lsls	r2, r3, #5
 80142fc:	6a3b      	ldr	r3, [r7, #32]
 80142fe:	4413      	add	r3, r2
 8014300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014304:	685b      	ldr	r3, [r3, #4]
 8014306:	69fa      	ldr	r2, [r7, #28]
 8014308:	0151      	lsls	r1, r2, #5
 801430a:	6a3a      	ldr	r2, [r7, #32]
 801430c:	440a      	add	r2, r1
 801430e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8014312:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8014316:	6053      	str	r3, [r2, #4]
          break;
 8014318:	e01b      	b.n	8014352 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 801431a:	69fb      	ldr	r3, [r7, #28]
 801431c:	015a      	lsls	r2, r3, #5
 801431e:	6a3b      	ldr	r3, [r7, #32]
 8014320:	4413      	add	r3, r2
 8014322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014326:	685b      	ldr	r3, [r3, #4]
 8014328:	69fa      	ldr	r2, [r7, #28]
 801432a:	0151      	lsls	r1, r2, #5
 801432c:	6a3a      	ldr	r2, [r7, #32]
 801432e:	440a      	add	r2, r1
 8014330:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8014334:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8014338:	6053      	str	r3, [r2, #4]
          break;
 801433a:	e00a      	b.n	8014352 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 801433c:	69fb      	ldr	r3, [r7, #28]
 801433e:	015a      	lsls	r2, r3, #5
 8014340:	6a3b      	ldr	r3, [r7, #32]
 8014342:	4413      	add	r3, r2
 8014344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014348:	461a      	mov	r2, r3
 801434a:	2300      	movs	r3, #0
 801434c:	6053      	str	r3, [r2, #4]
 801434e:	e000      	b.n	8014352 <USB_HC_StartXfer+0x3ea>
          break;
 8014350:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8014352:	69fb      	ldr	r3, [r7, #28]
 8014354:	015a      	lsls	r2, r3, #5
 8014356:	6a3b      	ldr	r3, [r7, #32]
 8014358:	4413      	add	r3, r2
 801435a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8014368:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	78db      	ldrb	r3, [r3, #3]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d004      	beq.n	801437c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8014378:	613b      	str	r3, [r7, #16]
 801437a:	e003      	b.n	8014384 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8014382:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801438a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801438c:	69fb      	ldr	r3, [r7, #28]
 801438e:	015a      	lsls	r2, r3, #5
 8014390:	6a3b      	ldr	r3, [r7, #32]
 8014392:	4413      	add	r3, r2
 8014394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014398:	461a      	mov	r2, r3
 801439a:	693b      	ldr	r3, [r7, #16]
 801439c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 801439e:	79fb      	ldrb	r3, [r7, #7]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d003      	beq.n	80143ac <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80143a4:	2300      	movs	r3, #0
 80143a6:	e055      	b.n	8014454 <USB_HC_StartXfer+0x4ec>
 80143a8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	78db      	ldrb	r3, [r3, #3]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d14e      	bne.n	8014452 <USB_HC_StartXfer+0x4ea>
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	6a1b      	ldr	r3, [r3, #32]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d04a      	beq.n	8014452 <USB_HC_StartXfer+0x4ea>
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	79db      	ldrb	r3, [r3, #7]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d146      	bne.n	8014452 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	7c9b      	ldrb	r3, [r3, #18]
 80143c8:	2b03      	cmp	r3, #3
 80143ca:	d831      	bhi.n	8014430 <USB_HC_StartXfer+0x4c8>
 80143cc:	a201      	add	r2, pc, #4	@ (adr r2, 80143d4 <USB_HC_StartXfer+0x46c>)
 80143ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143d2:	bf00      	nop
 80143d4:	080143e5 	.word	0x080143e5
 80143d8:	08014409 	.word	0x08014409
 80143dc:	080143e5 	.word	0x080143e5
 80143e0:	08014409 	.word	0x08014409
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	6a1b      	ldr	r3, [r3, #32]
 80143e8:	3303      	adds	r3, #3
 80143ea:	089b      	lsrs	r3, r3, #2
 80143ec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80143ee:	8afa      	ldrh	r2, [r7, #22]
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d91c      	bls.n	8014434 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	699b      	ldr	r3, [r3, #24]
 80143fe:	f043 0220 	orr.w	r2, r3, #32
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	619a      	str	r2, [r3, #24]
        }
        break;
 8014406:	e015      	b.n	8014434 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	6a1b      	ldr	r3, [r3, #32]
 801440c:	3303      	adds	r3, #3
 801440e:	089b      	lsrs	r3, r3, #2
 8014410:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8014412:	8afa      	ldrh	r2, [r7, #22]
 8014414:	6a3b      	ldr	r3, [r7, #32]
 8014416:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801441a:	691b      	ldr	r3, [r3, #16]
 801441c:	b29b      	uxth	r3, r3
 801441e:	429a      	cmp	r2, r3
 8014420:	d90a      	bls.n	8014438 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	699b      	ldr	r3, [r3, #24]
 8014426:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	619a      	str	r2, [r3, #24]
        }
        break;
 801442e:	e003      	b.n	8014438 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8014430:	bf00      	nop
 8014432:	e002      	b.n	801443a <USB_HC_StartXfer+0x4d2>
        break;
 8014434:	bf00      	nop
 8014436:	e000      	b.n	801443a <USB_HC_StartXfer+0x4d2>
        break;
 8014438:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	6999      	ldr	r1, [r3, #24]
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	785a      	ldrb	r2, [r3, #1]
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	6a1b      	ldr	r3, [r3, #32]
 8014446:	b29b      	uxth	r3, r3
 8014448:	2000      	movs	r0, #0
 801444a:	9000      	str	r0, [sp, #0]
 801444c:	68f8      	ldr	r0, [r7, #12]
 801444e:	f7ff f9d5 	bl	80137fc <USB_WritePacket>
  }

  return HAL_OK;
 8014452:	2300      	movs	r3, #0
}
 8014454:	4618      	mov	r0, r3
 8014456:	3728      	adds	r7, #40	@ 0x28
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}

0801445c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801445c:	b480      	push	{r7}
 801445e:	b085      	sub	sp, #20
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801446e:	695b      	ldr	r3, [r3, #20]
 8014470:	b29b      	uxth	r3, r3
}
 8014472:	4618      	mov	r0, r3
 8014474:	3714      	adds	r7, #20
 8014476:	46bd      	mov	sp, r7
 8014478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447c:	4770      	bx	lr

0801447e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801447e:	b480      	push	{r7}
 8014480:	b089      	sub	sp, #36	@ 0x24
 8014482:	af00      	add	r7, sp, #0
 8014484:	6078      	str	r0, [r7, #4]
 8014486:	460b      	mov	r3, r1
 8014488:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 801448e:	78fb      	ldrb	r3, [r7, #3]
 8014490:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8014492:	2300      	movs	r3, #0
 8014494:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8014496:	69bb      	ldr	r3, [r7, #24]
 8014498:	015a      	lsls	r2, r3, #5
 801449a:	69fb      	ldr	r3, [r7, #28]
 801449c:	4413      	add	r3, r2
 801449e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	0c9b      	lsrs	r3, r3, #18
 80144a6:	f003 0303 	and.w	r3, r3, #3
 80144aa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	015a      	lsls	r2, r3, #5
 80144b0:	69fb      	ldr	r3, [r7, #28]
 80144b2:	4413      	add	r3, r2
 80144b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	0fdb      	lsrs	r3, r3, #31
 80144bc:	f003 0301 	and.w	r3, r3, #1
 80144c0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80144c2:	69bb      	ldr	r3, [r7, #24]
 80144c4:	015a      	lsls	r2, r3, #5
 80144c6:	69fb      	ldr	r3, [r7, #28]
 80144c8:	4413      	add	r3, r2
 80144ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	0fdb      	lsrs	r3, r3, #31
 80144d2:	f003 0301 	and.w	r3, r3, #1
 80144d6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	689b      	ldr	r3, [r3, #8]
 80144dc:	f003 0320 	and.w	r3, r3, #32
 80144e0:	2b20      	cmp	r3, #32
 80144e2:	d10d      	bne.n	8014500 <USB_HC_Halt+0x82>
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d10a      	bne.n	8014500 <USB_HC_Halt+0x82>
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d005      	beq.n	80144fc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80144f0:	697b      	ldr	r3, [r7, #20]
 80144f2:	2b01      	cmp	r3, #1
 80144f4:	d002      	beq.n	80144fc <USB_HC_Halt+0x7e>
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	2b03      	cmp	r3, #3
 80144fa:	d101      	bne.n	8014500 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80144fc:	2300      	movs	r3, #0
 80144fe:	e0d8      	b.n	80146b2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8014500:	697b      	ldr	r3, [r7, #20]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d002      	beq.n	801450c <USB_HC_Halt+0x8e>
 8014506:	697b      	ldr	r3, [r7, #20]
 8014508:	2b02      	cmp	r3, #2
 801450a:	d173      	bne.n	80145f4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801450c:	69bb      	ldr	r3, [r7, #24]
 801450e:	015a      	lsls	r2, r3, #5
 8014510:	69fb      	ldr	r3, [r7, #28]
 8014512:	4413      	add	r3, r2
 8014514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	69ba      	ldr	r2, [r7, #24]
 801451c:	0151      	lsls	r1, r2, #5
 801451e:	69fa      	ldr	r2, [r7, #28]
 8014520:	440a      	add	r2, r1
 8014522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8014526:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801452a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	689b      	ldr	r3, [r3, #8]
 8014530:	f003 0320 	and.w	r3, r3, #32
 8014534:	2b00      	cmp	r3, #0
 8014536:	d14a      	bne.n	80145ce <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801453c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014540:	2b00      	cmp	r3, #0
 8014542:	d133      	bne.n	80145ac <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8014544:	69bb      	ldr	r3, [r7, #24]
 8014546:	015a      	lsls	r2, r3, #5
 8014548:	69fb      	ldr	r3, [r7, #28]
 801454a:	4413      	add	r3, r2
 801454c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	69ba      	ldr	r2, [r7, #24]
 8014554:	0151      	lsls	r1, r2, #5
 8014556:	69fa      	ldr	r2, [r7, #28]
 8014558:	440a      	add	r2, r1
 801455a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801455e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014562:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8014564:	69bb      	ldr	r3, [r7, #24]
 8014566:	015a      	lsls	r2, r3, #5
 8014568:	69fb      	ldr	r3, [r7, #28]
 801456a:	4413      	add	r3, r2
 801456c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	69ba      	ldr	r2, [r7, #24]
 8014574:	0151      	lsls	r1, r2, #5
 8014576:	69fa      	ldr	r2, [r7, #28]
 8014578:	440a      	add	r2, r1
 801457a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801457e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8014582:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	3301      	adds	r3, #1
 8014588:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8014590:	d82e      	bhi.n	80145f0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8014592:	69bb      	ldr	r3, [r7, #24]
 8014594:	015a      	lsls	r2, r3, #5
 8014596:	69fb      	ldr	r3, [r7, #28]
 8014598:	4413      	add	r3, r2
 801459a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80145a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80145a8:	d0ec      	beq.n	8014584 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80145aa:	e081      	b.n	80146b0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80145ac:	69bb      	ldr	r3, [r7, #24]
 80145ae:	015a      	lsls	r2, r3, #5
 80145b0:	69fb      	ldr	r3, [r7, #28]
 80145b2:	4413      	add	r3, r2
 80145b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	69ba      	ldr	r2, [r7, #24]
 80145bc:	0151      	lsls	r1, r2, #5
 80145be:	69fa      	ldr	r2, [r7, #28]
 80145c0:	440a      	add	r2, r1
 80145c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80145c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80145ca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80145cc:	e070      	b.n	80146b0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80145ce:	69bb      	ldr	r3, [r7, #24]
 80145d0:	015a      	lsls	r2, r3, #5
 80145d2:	69fb      	ldr	r3, [r7, #28]
 80145d4:	4413      	add	r3, r2
 80145d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	69ba      	ldr	r2, [r7, #24]
 80145de:	0151      	lsls	r1, r2, #5
 80145e0:	69fa      	ldr	r2, [r7, #28]
 80145e2:	440a      	add	r2, r1
 80145e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80145e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80145ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80145ee:	e05f      	b.n	80146b0 <USB_HC_Halt+0x232>
            break;
 80145f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80145f2:	e05d      	b.n	80146b0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80145f4:	69bb      	ldr	r3, [r7, #24]
 80145f6:	015a      	lsls	r2, r3, #5
 80145f8:	69fb      	ldr	r3, [r7, #28]
 80145fa:	4413      	add	r3, r2
 80145fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	69ba      	ldr	r2, [r7, #24]
 8014604:	0151      	lsls	r1, r2, #5
 8014606:	69fa      	ldr	r2, [r7, #28]
 8014608:	440a      	add	r2, r1
 801460a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801460e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014612:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8014614:	69fb      	ldr	r3, [r7, #28]
 8014616:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801461a:	691b      	ldr	r3, [r3, #16]
 801461c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014620:	2b00      	cmp	r3, #0
 8014622:	d133      	bne.n	801468c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8014624:	69bb      	ldr	r3, [r7, #24]
 8014626:	015a      	lsls	r2, r3, #5
 8014628:	69fb      	ldr	r3, [r7, #28]
 801462a:	4413      	add	r3, r2
 801462c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	69ba      	ldr	r2, [r7, #24]
 8014634:	0151      	lsls	r1, r2, #5
 8014636:	69fa      	ldr	r2, [r7, #28]
 8014638:	440a      	add	r2, r1
 801463a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801463e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014642:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8014644:	69bb      	ldr	r3, [r7, #24]
 8014646:	015a      	lsls	r2, r3, #5
 8014648:	69fb      	ldr	r3, [r7, #28]
 801464a:	4413      	add	r3, r2
 801464c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	69ba      	ldr	r2, [r7, #24]
 8014654:	0151      	lsls	r1, r2, #5
 8014656:	69fa      	ldr	r2, [r7, #28]
 8014658:	440a      	add	r2, r1
 801465a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801465e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8014662:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8014664:	68bb      	ldr	r3, [r7, #8]
 8014666:	3301      	adds	r3, #1
 8014668:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 801466a:	68bb      	ldr	r3, [r7, #8]
 801466c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8014670:	d81d      	bhi.n	80146ae <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8014672:	69bb      	ldr	r3, [r7, #24]
 8014674:	015a      	lsls	r2, r3, #5
 8014676:	69fb      	ldr	r3, [r7, #28]
 8014678:	4413      	add	r3, r2
 801467a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014684:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014688:	d0ec      	beq.n	8014664 <USB_HC_Halt+0x1e6>
 801468a:	e011      	b.n	80146b0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801468c:	69bb      	ldr	r3, [r7, #24]
 801468e:	015a      	lsls	r2, r3, #5
 8014690:	69fb      	ldr	r3, [r7, #28]
 8014692:	4413      	add	r3, r2
 8014694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	69ba      	ldr	r2, [r7, #24]
 801469c:	0151      	lsls	r1, r2, #5
 801469e:	69fa      	ldr	r2, [r7, #28]
 80146a0:	440a      	add	r2, r1
 80146a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80146a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80146aa:	6013      	str	r3, [r2, #0]
 80146ac:	e000      	b.n	80146b0 <USB_HC_Halt+0x232>
          break;
 80146ae:	bf00      	nop
    }
  }

  return HAL_OK;
 80146b0:	2300      	movs	r3, #0
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3724      	adds	r7, #36	@ 0x24
 80146b6:	46bd      	mov	sp, r7
 80146b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146bc:	4770      	bx	lr
	...

080146c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80146c0:	b480      	push	{r7}
 80146c2:	b087      	sub	sp, #28
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
 80146c8:	460b      	mov	r3, r1
 80146ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80146d0:	78fb      	ldrb	r3, [r7, #3]
 80146d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80146d4:	2301      	movs	r3, #1
 80146d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	04da      	lsls	r2, r3, #19
 80146dc:	4b15      	ldr	r3, [pc, #84]	@ (8014734 <USB_DoPing+0x74>)
 80146de:	4013      	ands	r3, r2
 80146e0:	693a      	ldr	r2, [r7, #16]
 80146e2:	0151      	lsls	r1, r2, #5
 80146e4:	697a      	ldr	r2, [r7, #20]
 80146e6:	440a      	add	r2, r1
 80146e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80146ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80146f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	015a      	lsls	r2, r3, #5
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	4413      	add	r3, r2
 80146fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8014708:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8014710:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	015a      	lsls	r2, r3, #5
 8014716:	697b      	ldr	r3, [r7, #20]
 8014718:	4413      	add	r3, r2
 801471a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801471e:	461a      	mov	r2, r3
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8014724:	2300      	movs	r3, #0
}
 8014726:	4618      	mov	r0, r3
 8014728:	371c      	adds	r7, #28
 801472a:	46bd      	mov	sp, r7
 801472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014730:	4770      	bx	lr
 8014732:	bf00      	nop
 8014734:	1ff80000 	.word	0x1ff80000

08014738 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b088      	sub	sp, #32
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8014740:	2300      	movs	r3, #0
 8014742:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8014748:	2300      	movs	r3, #0
 801474a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f7fe ff98 	bl	8013682 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014752:	2110      	movs	r1, #16
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f7fe fff1 	bl	801373c <USB_FlushTxFifo>
 801475a:	4603      	mov	r3, r0
 801475c:	2b00      	cmp	r3, #0
 801475e:	d001      	beq.n	8014764 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8014760:	2301      	movs	r3, #1
 8014762:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f7ff f81b 	bl	80137a0 <USB_FlushRxFifo>
 801476a:	4603      	mov	r3, r0
 801476c:	2b00      	cmp	r3, #0
 801476e:	d001      	beq.n	8014774 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8014770:	2301      	movs	r3, #1
 8014772:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8014774:	2300      	movs	r3, #0
 8014776:	61bb      	str	r3, [r7, #24]
 8014778:	e01f      	b.n	80147ba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 801477a:	69bb      	ldr	r3, [r7, #24]
 801477c:	015a      	lsls	r2, r3, #5
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	4413      	add	r3, r2
 8014782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801478a:	693b      	ldr	r3, [r7, #16]
 801478c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014790:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014798:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801479a:	693b      	ldr	r3, [r7, #16]
 801479c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80147a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80147a2:	69bb      	ldr	r3, [r7, #24]
 80147a4:	015a      	lsls	r2, r3, #5
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	4413      	add	r3, r2
 80147aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80147ae:	461a      	mov	r2, r3
 80147b0:	693b      	ldr	r3, [r7, #16]
 80147b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80147b4:	69bb      	ldr	r3, [r7, #24]
 80147b6:	3301      	adds	r3, #1
 80147b8:	61bb      	str	r3, [r7, #24]
 80147ba:	69bb      	ldr	r3, [r7, #24]
 80147bc:	2b0f      	cmp	r3, #15
 80147be:	d9dc      	bls.n	801477a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80147c0:	2300      	movs	r3, #0
 80147c2:	61bb      	str	r3, [r7, #24]
 80147c4:	e034      	b.n	8014830 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80147c6:	69bb      	ldr	r3, [r7, #24]
 80147c8:	015a      	lsls	r2, r3, #5
 80147ca:	697b      	ldr	r3, [r7, #20]
 80147cc:	4413      	add	r3, r2
 80147ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80147d6:	693b      	ldr	r3, [r7, #16]
 80147d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80147dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80147de:	693b      	ldr	r3, [r7, #16]
 80147e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80147e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80147ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80147ee:	69bb      	ldr	r3, [r7, #24]
 80147f0:	015a      	lsls	r2, r3, #5
 80147f2:	697b      	ldr	r3, [r7, #20]
 80147f4:	4413      	add	r3, r2
 80147f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80147fa:	461a      	mov	r2, r3
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	3301      	adds	r3, #1
 8014804:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801480c:	d80c      	bhi.n	8014828 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801480e:	69bb      	ldr	r3, [r7, #24]
 8014810:	015a      	lsls	r2, r3, #5
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	4413      	add	r3, r2
 8014816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014820:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014824:	d0ec      	beq.n	8014800 <USB_StopHost+0xc8>
 8014826:	e000      	b.n	801482a <USB_StopHost+0xf2>
        break;
 8014828:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801482a:	69bb      	ldr	r3, [r7, #24]
 801482c:	3301      	adds	r3, #1
 801482e:	61bb      	str	r3, [r7, #24]
 8014830:	69bb      	ldr	r3, [r7, #24]
 8014832:	2b0f      	cmp	r3, #15
 8014834:	d9c7      	bls.n	80147c6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8014836:	697b      	ldr	r3, [r7, #20]
 8014838:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801483c:	461a      	mov	r2, r3
 801483e:	f04f 33ff 	mov.w	r3, #4294967295
 8014842:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f04f 32ff 	mov.w	r2, #4294967295
 801484a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f7fe ff07 	bl	8013660 <USB_EnableGlobalInt>

  return ret;
 8014852:	7ffb      	ldrb	r3, [r7, #31]
}
 8014854:	4618      	mov	r0, r3
 8014856:	3720      	adds	r7, #32
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}

0801485c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801485c:	b5b0      	push	{r4, r5, r7, lr}
 801485e:	b08c      	sub	sp, #48	@ 0x30
 8014860:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8014862:	4b8f      	ldr	r3, [pc, #572]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 8014864:	22c0      	movs	r2, #192	@ 0xc0
 8014866:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8014868:	4b8d      	ldr	r3, [pc, #564]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 801486a:	22a8      	movs	r2, #168	@ 0xa8
 801486c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 801486e:	4b8c      	ldr	r3, [pc, #560]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 8014870:	2201      	movs	r2, #1
 8014872:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8014874:	4b8a      	ldr	r3, [pc, #552]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 8014876:	226f      	movs	r2, #111	@ 0x6f
 8014878:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801487a:	4b8a      	ldr	r3, [pc, #552]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 801487c:	22ff      	movs	r2, #255	@ 0xff
 801487e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8014880:	4b88      	ldr	r3, [pc, #544]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 8014882:	22ff      	movs	r2, #255	@ 0xff
 8014884:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8014886:	4b87      	ldr	r3, [pc, #540]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 8014888:	22ff      	movs	r2, #255	@ 0xff
 801488a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801488c:	4b85      	ldr	r3, [pc, #532]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 801488e:	2200      	movs	r2, #0
 8014890:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8014892:	4b85      	ldr	r3, [pc, #532]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 8014894:	22c0      	movs	r2, #192	@ 0xc0
 8014896:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8014898:	4b83      	ldr	r3, [pc, #524]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 801489a:	22a8      	movs	r2, #168	@ 0xa8
 801489c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 801489e:	4b82      	ldr	r3, [pc, #520]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 80148a0:	2201      	movs	r2, #1
 80148a2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80148a4:	4b80      	ldr	r3, [pc, #512]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 80148a6:	2201      	movs	r2, #1
 80148a8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80148aa:	2100      	movs	r1, #0
 80148ac:	2000      	movs	r0, #0
 80148ae:	f006 fb99 	bl	801afe4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80148b2:	4b7b      	ldr	r3, [pc, #492]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	061a      	lsls	r2, r3, #24
 80148b8:	4b79      	ldr	r3, [pc, #484]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 80148ba:	785b      	ldrb	r3, [r3, #1]
 80148bc:	041b      	lsls	r3, r3, #16
 80148be:	431a      	orrs	r2, r3
 80148c0:	4b77      	ldr	r3, [pc, #476]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 80148c2:	789b      	ldrb	r3, [r3, #2]
 80148c4:	021b      	lsls	r3, r3, #8
 80148c6:	4313      	orrs	r3, r2
 80148c8:	4a75      	ldr	r2, [pc, #468]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 80148ca:	78d2      	ldrb	r2, [r2, #3]
 80148cc:	4313      	orrs	r3, r2
 80148ce:	061a      	lsls	r2, r3, #24
 80148d0:	4b73      	ldr	r3, [pc, #460]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 80148d2:	781b      	ldrb	r3, [r3, #0]
 80148d4:	0619      	lsls	r1, r3, #24
 80148d6:	4b72      	ldr	r3, [pc, #456]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 80148d8:	785b      	ldrb	r3, [r3, #1]
 80148da:	041b      	lsls	r3, r3, #16
 80148dc:	4319      	orrs	r1, r3
 80148de:	4b70      	ldr	r3, [pc, #448]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 80148e0:	789b      	ldrb	r3, [r3, #2]
 80148e2:	021b      	lsls	r3, r3, #8
 80148e4:	430b      	orrs	r3, r1
 80148e6:	496e      	ldr	r1, [pc, #440]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 80148e8:	78c9      	ldrb	r1, [r1, #3]
 80148ea:	430b      	orrs	r3, r1
 80148ec:	021b      	lsls	r3, r3, #8
 80148ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80148f2:	431a      	orrs	r2, r3
 80148f4:	4b6a      	ldr	r3, [pc, #424]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 80148f6:	781b      	ldrb	r3, [r3, #0]
 80148f8:	0619      	lsls	r1, r3, #24
 80148fa:	4b69      	ldr	r3, [pc, #420]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 80148fc:	785b      	ldrb	r3, [r3, #1]
 80148fe:	041b      	lsls	r3, r3, #16
 8014900:	4319      	orrs	r1, r3
 8014902:	4b67      	ldr	r3, [pc, #412]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 8014904:	789b      	ldrb	r3, [r3, #2]
 8014906:	021b      	lsls	r3, r3, #8
 8014908:	430b      	orrs	r3, r1
 801490a:	4965      	ldr	r1, [pc, #404]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 801490c:	78c9      	ldrb	r1, [r1, #3]
 801490e:	430b      	orrs	r3, r1
 8014910:	0a1b      	lsrs	r3, r3, #8
 8014912:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014916:	431a      	orrs	r2, r3
 8014918:	4b61      	ldr	r3, [pc, #388]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	0619      	lsls	r1, r3, #24
 801491e:	4b60      	ldr	r3, [pc, #384]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 8014920:	785b      	ldrb	r3, [r3, #1]
 8014922:	041b      	lsls	r3, r3, #16
 8014924:	4319      	orrs	r1, r3
 8014926:	4b5e      	ldr	r3, [pc, #376]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 8014928:	789b      	ldrb	r3, [r3, #2]
 801492a:	021b      	lsls	r3, r3, #8
 801492c:	430b      	orrs	r3, r1
 801492e:	495c      	ldr	r1, [pc, #368]	@ (8014aa0 <MX_LWIP_Init+0x244>)
 8014930:	78c9      	ldrb	r1, [r1, #3]
 8014932:	430b      	orrs	r3, r1
 8014934:	0e1b      	lsrs	r3, r3, #24
 8014936:	4313      	orrs	r3, r2
 8014938:	4a5c      	ldr	r2, [pc, #368]	@ (8014aac <MX_LWIP_Init+0x250>)
 801493a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801493c:	4b59      	ldr	r3, [pc, #356]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	061a      	lsls	r2, r3, #24
 8014942:	4b58      	ldr	r3, [pc, #352]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 8014944:	785b      	ldrb	r3, [r3, #1]
 8014946:	041b      	lsls	r3, r3, #16
 8014948:	431a      	orrs	r2, r3
 801494a:	4b56      	ldr	r3, [pc, #344]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 801494c:	789b      	ldrb	r3, [r3, #2]
 801494e:	021b      	lsls	r3, r3, #8
 8014950:	4313      	orrs	r3, r2
 8014952:	4a54      	ldr	r2, [pc, #336]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 8014954:	78d2      	ldrb	r2, [r2, #3]
 8014956:	4313      	orrs	r3, r2
 8014958:	061a      	lsls	r2, r3, #24
 801495a:	4b52      	ldr	r3, [pc, #328]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 801495c:	781b      	ldrb	r3, [r3, #0]
 801495e:	0619      	lsls	r1, r3, #24
 8014960:	4b50      	ldr	r3, [pc, #320]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 8014962:	785b      	ldrb	r3, [r3, #1]
 8014964:	041b      	lsls	r3, r3, #16
 8014966:	4319      	orrs	r1, r3
 8014968:	4b4e      	ldr	r3, [pc, #312]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 801496a:	789b      	ldrb	r3, [r3, #2]
 801496c:	021b      	lsls	r3, r3, #8
 801496e:	430b      	orrs	r3, r1
 8014970:	494c      	ldr	r1, [pc, #304]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 8014972:	78c9      	ldrb	r1, [r1, #3]
 8014974:	430b      	orrs	r3, r1
 8014976:	021b      	lsls	r3, r3, #8
 8014978:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801497c:	431a      	orrs	r2, r3
 801497e:	4b49      	ldr	r3, [pc, #292]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 8014980:	781b      	ldrb	r3, [r3, #0]
 8014982:	0619      	lsls	r1, r3, #24
 8014984:	4b47      	ldr	r3, [pc, #284]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 8014986:	785b      	ldrb	r3, [r3, #1]
 8014988:	041b      	lsls	r3, r3, #16
 801498a:	4319      	orrs	r1, r3
 801498c:	4b45      	ldr	r3, [pc, #276]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 801498e:	789b      	ldrb	r3, [r3, #2]
 8014990:	021b      	lsls	r3, r3, #8
 8014992:	430b      	orrs	r3, r1
 8014994:	4943      	ldr	r1, [pc, #268]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 8014996:	78c9      	ldrb	r1, [r1, #3]
 8014998:	430b      	orrs	r3, r1
 801499a:	0a1b      	lsrs	r3, r3, #8
 801499c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80149a0:	431a      	orrs	r2, r3
 80149a2:	4b40      	ldr	r3, [pc, #256]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	0619      	lsls	r1, r3, #24
 80149a8:	4b3e      	ldr	r3, [pc, #248]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 80149aa:	785b      	ldrb	r3, [r3, #1]
 80149ac:	041b      	lsls	r3, r3, #16
 80149ae:	4319      	orrs	r1, r3
 80149b0:	4b3c      	ldr	r3, [pc, #240]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 80149b2:	789b      	ldrb	r3, [r3, #2]
 80149b4:	021b      	lsls	r3, r3, #8
 80149b6:	430b      	orrs	r3, r1
 80149b8:	493a      	ldr	r1, [pc, #232]	@ (8014aa4 <MX_LWIP_Init+0x248>)
 80149ba:	78c9      	ldrb	r1, [r1, #3]
 80149bc:	430b      	orrs	r3, r1
 80149be:	0e1b      	lsrs	r3, r3, #24
 80149c0:	4313      	orrs	r3, r2
 80149c2:	4a3b      	ldr	r2, [pc, #236]	@ (8014ab0 <MX_LWIP_Init+0x254>)
 80149c4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80149c6:	4b38      	ldr	r3, [pc, #224]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	061a      	lsls	r2, r3, #24
 80149cc:	4b36      	ldr	r3, [pc, #216]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 80149ce:	785b      	ldrb	r3, [r3, #1]
 80149d0:	041b      	lsls	r3, r3, #16
 80149d2:	431a      	orrs	r2, r3
 80149d4:	4b34      	ldr	r3, [pc, #208]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 80149d6:	789b      	ldrb	r3, [r3, #2]
 80149d8:	021b      	lsls	r3, r3, #8
 80149da:	4313      	orrs	r3, r2
 80149dc:	4a32      	ldr	r2, [pc, #200]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 80149de:	78d2      	ldrb	r2, [r2, #3]
 80149e0:	4313      	orrs	r3, r2
 80149e2:	061a      	lsls	r2, r3, #24
 80149e4:	4b30      	ldr	r3, [pc, #192]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 80149e6:	781b      	ldrb	r3, [r3, #0]
 80149e8:	0619      	lsls	r1, r3, #24
 80149ea:	4b2f      	ldr	r3, [pc, #188]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 80149ec:	785b      	ldrb	r3, [r3, #1]
 80149ee:	041b      	lsls	r3, r3, #16
 80149f0:	4319      	orrs	r1, r3
 80149f2:	4b2d      	ldr	r3, [pc, #180]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 80149f4:	789b      	ldrb	r3, [r3, #2]
 80149f6:	021b      	lsls	r3, r3, #8
 80149f8:	430b      	orrs	r3, r1
 80149fa:	492b      	ldr	r1, [pc, #172]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 80149fc:	78c9      	ldrb	r1, [r1, #3]
 80149fe:	430b      	orrs	r3, r1
 8014a00:	021b      	lsls	r3, r3, #8
 8014a02:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014a06:	431a      	orrs	r2, r3
 8014a08:	4b27      	ldr	r3, [pc, #156]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 8014a0a:	781b      	ldrb	r3, [r3, #0]
 8014a0c:	0619      	lsls	r1, r3, #24
 8014a0e:	4b26      	ldr	r3, [pc, #152]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 8014a10:	785b      	ldrb	r3, [r3, #1]
 8014a12:	041b      	lsls	r3, r3, #16
 8014a14:	4319      	orrs	r1, r3
 8014a16:	4b24      	ldr	r3, [pc, #144]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 8014a18:	789b      	ldrb	r3, [r3, #2]
 8014a1a:	021b      	lsls	r3, r3, #8
 8014a1c:	430b      	orrs	r3, r1
 8014a1e:	4922      	ldr	r1, [pc, #136]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 8014a20:	78c9      	ldrb	r1, [r1, #3]
 8014a22:	430b      	orrs	r3, r1
 8014a24:	0a1b      	lsrs	r3, r3, #8
 8014a26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014a2a:	431a      	orrs	r2, r3
 8014a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	0619      	lsls	r1, r3, #24
 8014a32:	4b1d      	ldr	r3, [pc, #116]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 8014a34:	785b      	ldrb	r3, [r3, #1]
 8014a36:	041b      	lsls	r3, r3, #16
 8014a38:	4319      	orrs	r1, r3
 8014a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 8014a3c:	789b      	ldrb	r3, [r3, #2]
 8014a3e:	021b      	lsls	r3, r3, #8
 8014a40:	430b      	orrs	r3, r1
 8014a42:	4919      	ldr	r1, [pc, #100]	@ (8014aa8 <MX_LWIP_Init+0x24c>)
 8014a44:	78c9      	ldrb	r1, [r1, #3]
 8014a46:	430b      	orrs	r3, r1
 8014a48:	0e1b      	lsrs	r3, r3, #24
 8014a4a:	4313      	orrs	r3, r2
 8014a4c:	4a19      	ldr	r2, [pc, #100]	@ (8014ab4 <MX_LWIP_Init+0x258>)
 8014a4e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8014a50:	4b19      	ldr	r3, [pc, #100]	@ (8014ab8 <MX_LWIP_Init+0x25c>)
 8014a52:	9302      	str	r3, [sp, #8]
 8014a54:	4b19      	ldr	r3, [pc, #100]	@ (8014abc <MX_LWIP_Init+0x260>)
 8014a56:	9301      	str	r3, [sp, #4]
 8014a58:	2300      	movs	r3, #0
 8014a5a:	9300      	str	r3, [sp, #0]
 8014a5c:	4b15      	ldr	r3, [pc, #84]	@ (8014ab4 <MX_LWIP_Init+0x258>)
 8014a5e:	4a14      	ldr	r2, [pc, #80]	@ (8014ab0 <MX_LWIP_Init+0x254>)
 8014a60:	4912      	ldr	r1, [pc, #72]	@ (8014aac <MX_LWIP_Init+0x250>)
 8014a62:	4817      	ldr	r0, [pc, #92]	@ (8014ac0 <MX_LWIP_Init+0x264>)
 8014a64:	f007 f932 	bl	801bccc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8014a68:	4815      	ldr	r0, [pc, #84]	@ (8014ac0 <MX_LWIP_Init+0x264>)
 8014a6a:	f007 fae1 	bl	801c030 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8014a6e:	4814      	ldr	r0, [pc, #80]	@ (8014ac0 <MX_LWIP_Init+0x264>)
 8014a70:	f007 faee 	bl	801c050 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8014a74:	4913      	ldr	r1, [pc, #76]	@ (8014ac4 <MX_LWIP_Init+0x268>)
 8014a76:	4812      	ldr	r0, [pc, #72]	@ (8014ac0 <MX_LWIP_Init+0x264>)
 8014a78:	f007 fbec 	bl	801c254 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8014a7c:	4b12      	ldr	r3, [pc, #72]	@ (8014ac8 <MX_LWIP_Init+0x26c>)
 8014a7e:	1d3c      	adds	r4, r7, #4
 8014a80:	461d      	mov	r5, r3
 8014a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014a8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8014a8e:	1d3b      	adds	r3, r7, #4
 8014a90:	490b      	ldr	r1, [pc, #44]	@ (8014ac0 <MX_LWIP_Init+0x264>)
 8014a92:	4618      	mov	r0, r3
 8014a94:	f003 f86f 	bl	8017b76 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8014a98:	bf00      	nop
 8014a9a:	3720      	adds	r7, #32
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8014aa0:	20011150 	.word	0x20011150
 8014aa4:	20011154 	.word	0x20011154
 8014aa8:	20011158 	.word	0x20011158
 8014aac:	20011144 	.word	0x20011144
 8014ab0:	20011148 	.word	0x20011148
 8014ab4:	2001114c 	.word	0x2001114c
 8014ab8:	0801af21 	.word	0x0801af21
 8014abc:	0801502d 	.word	0x0801502d
 8014ac0:	20011110 	.word	0x20011110
 8014ac4:	08014acd 	.word	0x08014acd
 8014ac8:	08028b60 	.word	0x08028b60

08014acc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8014acc:	b480      	push	{r7}
 8014ace:	b083      	sub	sp, #12
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8014ad4:	bf00      	nop
 8014ad6:	370c      	adds	r7, #12
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ade:	4770      	bx	lr

08014ae0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8014ae0:	b480      	push	{r7}
 8014ae2:	b087      	sub	sp, #28
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
 8014ae8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8014af2:	2320      	movs	r3, #32
 8014af4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8014af6:	f3bf 8f4f 	dsb	sy
}
 8014afa:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8014afc:	e00b      	b.n	8014b16 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8014afe:	4a0d      	ldr	r2, [pc, #52]	@ (8014b34 <SCB_InvalidateDCache_by_Addr+0x54>)
 8014b00:	693b      	ldr	r3, [r7, #16]
 8014b02:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	693a      	ldr	r2, [r7, #16]
 8014b0a:	4413      	add	r3, r2
 8014b0c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8014b0e:	697a      	ldr	r2, [r7, #20]
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	1ad3      	subs	r3, r2, r3
 8014b14:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	dcf0      	bgt.n	8014afe <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8014b1c:	f3bf 8f4f 	dsb	sy
}
 8014b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014b22:	f3bf 8f6f 	isb	sy
}
 8014b26:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8014b28:	bf00      	nop
 8014b2a:	371c      	adds	r7, #28
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b32:	4770      	bx	lr
 8014b34:	e000ed00 	.word	0xe000ed00

08014b38 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b082      	sub	sp, #8
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8014b40:	4b04      	ldr	r3, [pc, #16]	@ (8014b54 <HAL_ETH_RxCpltCallback+0x1c>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	4618      	mov	r0, r3
 8014b46:	f003 f9ad 	bl	8017ea4 <osSemaphoreRelease>
}
 8014b4a:	bf00      	nop
 8014b4c:	3708      	adds	r7, #8
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	bf00      	nop
 8014b54:	20011164 	.word	0x20011164

08014b58 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b082      	sub	sp, #8
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8014b60:	4b04      	ldr	r3, [pc, #16]	@ (8014b74 <HAL_ETH_TxCpltCallback+0x1c>)
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	4618      	mov	r0, r3
 8014b66:	f003 f99d 	bl	8017ea4 <osSemaphoreRelease>
}
 8014b6a:	bf00      	nop
 8014b6c:	3708      	adds	r7, #8
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}
 8014b72:	bf00      	nop
 8014b74:	20011168 	.word	0x20011168

08014b78 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b082      	sub	sp, #8
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f7f6 f995 	bl	800aeb0 <HAL_ETH_GetDMAError>
 8014b86:	4603      	mov	r3, r0
 8014b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014b8c:	2b80      	cmp	r3, #128	@ 0x80
 8014b8e:	d104      	bne.n	8014b9a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8014b90:	4b04      	ldr	r3, [pc, #16]	@ (8014ba4 <HAL_ETH_ErrorCallback+0x2c>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	4618      	mov	r0, r3
 8014b96:	f003 f985 	bl	8017ea4 <osSemaphoreRelease>
  }
}
 8014b9a:	bf00      	nop
 8014b9c:	3708      	adds	r7, #8
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	20011164 	.word	0x20011164

08014ba8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8014ba8:	b5b0      	push	{r4, r5, r7, lr}
 8014baa:	b0b4      	sub	sp, #208	@ 0xd0
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8014bc2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014bc6:	2264      	movs	r2, #100	@ 0x64
 8014bc8:	2100      	movs	r1, #0
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f011 ff03 	bl	80269d6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8014bd0:	4b9b      	ldr	r3, [pc, #620]	@ (8014e40 <low_level_init+0x298>)
 8014bd2:	4a9c      	ldr	r2, [pc, #624]	@ (8014e44 <low_level_init+0x29c>)
 8014bd4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8014bdc:	2380      	movs	r3, #128	@ 0x80
 8014bde:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8014be2:	23e1      	movs	r3, #225	@ 0xe1
 8014be4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 8014be8:	2300      	movs	r3, #0
 8014bea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x12;
 8014bee:	2312      	movs	r3, #18
 8014bf0:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x34;
 8014bf4:	2334      	movs	r3, #52	@ 0x34
 8014bf6:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8014bfa:	4a91      	ldr	r2, [pc, #580]	@ (8014e40 <low_level_init+0x298>)
 8014bfc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8014c00:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8014c02:	4b8f      	ldr	r3, [pc, #572]	@ (8014e40 <low_level_init+0x298>)
 8014c04:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8014c08:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8014c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8014e40 <low_level_init+0x298>)
 8014c0c:	4a8e      	ldr	r2, [pc, #568]	@ (8014e48 <low_level_init+0x2a0>)
 8014c0e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8014c10:	4b8b      	ldr	r3, [pc, #556]	@ (8014e40 <low_level_init+0x298>)
 8014c12:	4a8e      	ldr	r2, [pc, #568]	@ (8014e4c <low_level_init+0x2a4>)
 8014c14:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8014c16:	4b8a      	ldr	r3, [pc, #552]	@ (8014e40 <low_level_init+0x298>)
 8014c18:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8014c1c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8014c1e:	4888      	ldr	r0, [pc, #544]	@ (8014e40 <low_level_init+0x298>)
 8014c20:	f7f5 fb0a 	bl	800a238 <HAL_ETH_Init>
 8014c24:	4603      	mov	r3, r0
 8014c26:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8014c2a:	2238      	movs	r2, #56	@ 0x38
 8014c2c:	2100      	movs	r1, #0
 8014c2e:	4888      	ldr	r0, [pc, #544]	@ (8014e50 <low_level_init+0x2a8>)
 8014c30:	f011 fed1 	bl	80269d6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8014c34:	4b86      	ldr	r3, [pc, #536]	@ (8014e50 <low_level_init+0x2a8>)
 8014c36:	2221      	movs	r2, #33	@ 0x21
 8014c38:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8014c3a:	4b85      	ldr	r3, [pc, #532]	@ (8014e50 <low_level_init+0x2a8>)
 8014c3c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8014c40:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8014c42:	4b83      	ldr	r3, [pc, #524]	@ (8014e50 <low_level_init+0x2a8>)
 8014c44:	2200      	movs	r2, #0
 8014c46:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8014c48:	4882      	ldr	r0, [pc, #520]	@ (8014e54 <low_level_init+0x2ac>)
 8014c4a:	f006 fef9 	bl	801ba40 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	2206      	movs	r2, #6
 8014c52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8014c56:	4b7a      	ldr	r3, [pc, #488]	@ (8014e40 <low_level_init+0x298>)
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	781a      	ldrb	r2, [r3, #0]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8014c62:	4b77      	ldr	r3, [pc, #476]	@ (8014e40 <low_level_init+0x298>)
 8014c64:	685b      	ldr	r3, [r3, #4]
 8014c66:	785a      	ldrb	r2, [r3, #1]
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8014c6e:	4b74      	ldr	r3, [pc, #464]	@ (8014e40 <low_level_init+0x298>)
 8014c70:	685b      	ldr	r3, [r3, #4]
 8014c72:	789a      	ldrb	r2, [r3, #2]
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8014c7a:	4b71      	ldr	r3, [pc, #452]	@ (8014e40 <low_level_init+0x298>)
 8014c7c:	685b      	ldr	r3, [r3, #4]
 8014c7e:	78da      	ldrb	r2, [r3, #3]
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8014c86:	4b6e      	ldr	r3, [pc, #440]	@ (8014e40 <low_level_init+0x298>)
 8014c88:	685b      	ldr	r3, [r3, #4]
 8014c8a:	791a      	ldrb	r2, [r3, #4]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8014c92:	4b6b      	ldr	r3, [pc, #428]	@ (8014e40 <low_level_init+0x298>)
 8014c94:	685b      	ldr	r3, [r3, #4]
 8014c96:	795a      	ldrb	r2, [r3, #5]
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8014ca4:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014cac:	f043 030a 	orr.w	r3, r3, #10
 8014cb0:	b2da      	uxtb	r2, r3
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8014cb8:	2300      	movs	r3, #0
 8014cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8014cc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8014cc4:	2101      	movs	r1, #1
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f003 f85e 	bl	8017d88 <osSemaphoreCreate>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	4a62      	ldr	r2, [pc, #392]	@ (8014e58 <low_level_init+0x2b0>)
 8014cd0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8014cda:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014cde:	2101      	movs	r1, #1
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f003 f851 	bl	8017d88 <osSemaphoreCreate>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	4a5c      	ldr	r2, [pc, #368]	@ (8014e5c <low_level_init+0x2b4>)
 8014cea:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8014cec:	4b5a      	ldr	r3, [pc, #360]	@ (8014e58 <low_level_init+0x2b0>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2100      	movs	r1, #0
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f003 f888 	bl	8017e08 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8014cf8:	4b58      	ldr	r3, [pc, #352]	@ (8014e5c <low_level_init+0x2b4>)
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	2100      	movs	r1, #0
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f003 f882 	bl	8017e08 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8014d04:	4b56      	ldr	r3, [pc, #344]	@ (8014e60 <low_level_init+0x2b8>)
 8014d06:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8014d0a:	461d      	mov	r5, r3
 8014d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014d14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8014d18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014d1c:	6879      	ldr	r1, [r7, #4]
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f002 ff29 	bl	8017b76 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8014d24:	494f      	ldr	r1, [pc, #316]	@ (8014e64 <low_level_init+0x2bc>)
 8014d26:	4850      	ldr	r0, [pc, #320]	@ (8014e68 <low_level_init+0x2c0>)
 8014d28:	f7ef fb78 	bl	800441c <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8014d2c:	484e      	ldr	r0, [pc, #312]	@ (8014e68 <low_level_init+0x2c0>)
 8014d2e:	f7ef fba7 	bl	8004480 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8014d32:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d165      	bne.n	8014e06 <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8014d3a:	484b      	ldr	r0, [pc, #300]	@ (8014e68 <low_level_init+0x2c0>)
 8014d3c:	f7ef fbed 	bl	800451a <LAN8742_GetLinkState>
 8014d40:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8014d44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014d48:	2b01      	cmp	r3, #1
 8014d4a:	dc06      	bgt.n	8014d5a <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f007 fa51 	bl	801c1f4 <netif_set_link_down>
      netif_set_down(netif);
 8014d52:	6878      	ldr	r0, [r7, #4]
 8014d54:	f007 f9e8 	bl	801c128 <netif_set_down>
 8014d58:	e057      	b.n	8014e0a <low_level_init+0x262>
    }
    else
    {
      switch (PHYLinkState)
 8014d5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014d5e:	3b02      	subs	r3, #2
 8014d60:	2b03      	cmp	r3, #3
 8014d62:	d82b      	bhi.n	8014dbc <low_level_init+0x214>
 8014d64:	a201      	add	r2, pc, #4	@ (adr r2, 8014d6c <low_level_init+0x1c4>)
 8014d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d6a:	bf00      	nop
 8014d6c:	08014d7d 	.word	0x08014d7d
 8014d70:	08014d8f 	.word	0x08014d8f
 8014d74:	08014d9f 	.word	0x08014d9f
 8014d78:	08014daf 	.word	0x08014daf
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8014d7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014d80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8014d84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8014d88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8014d8c:	e01f      	b.n	8014dce <low_level_init+0x226>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8014d94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8014d98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8014d9c:	e017      	b.n	8014dce <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8014d9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014da2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8014da6:	2300      	movs	r3, #0
 8014da8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8014dac:	e00f      	b.n	8014dce <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8014dae:	2300      	movs	r3, #0
 8014db0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8014db4:	2300      	movs	r3, #0
 8014db6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8014dba:	e008      	b.n	8014dce <low_level_init+0x226>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8014dbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8014dc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8014dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8014dcc:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8014dce:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014dd2:	4619      	mov	r1, r3
 8014dd4:	481a      	ldr	r0, [pc, #104]	@ (8014e40 <low_level_init+0x298>)
 8014dd6:	f7f5 ff17 	bl	800ac08 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8014dda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014dde:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8014de0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014de4:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8014de6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014dea:	4619      	mov	r1, r3
 8014dec:	4814      	ldr	r0, [pc, #80]	@ (8014e40 <low_level_init+0x298>)
 8014dee:	f7f6 f802 	bl	800adf6 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8014df2:	4813      	ldr	r0, [pc, #76]	@ (8014e40 <low_level_init+0x298>)
 8014df4:	f7f5 faba 	bl	800a36c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f007 f929 	bl	801c050 <netif_set_up>
    netif_set_link_up(netif);
 8014dfe:	6878      	ldr	r0, [r7, #4]
 8014e00:	f007 f9c4 	bl	801c18c <netif_set_link_up>
 8014e04:	e001      	b.n	8014e0a <low_level_init+0x262>
    }

  }
  else
  {
    Error_Handler();
 8014e06:	f7ed fdc7 	bl	8002998 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8014e0a:	f7f2 f841 	bl	8006e90 <HAL_GetREVID>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014e14:	d10f      	bne.n	8014e36 <low_level_init+0x28e>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8014e16:	4b15      	ldr	r3, [pc, #84]	@ (8014e6c <low_level_init+0x2c4>)
 8014e18:	f107 040c 	add.w	r4, r7, #12
 8014e1c:	461d      	mov	r5, r3
 8014e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014e26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8014e2a:	f107 030c 	add.w	r3, r7, #12
 8014e2e:	2100      	movs	r1, #0
 8014e30:	4618      	mov	r0, r3
 8014e32:	f002 fea0 	bl	8017b76 <osThreadCreate>
  }
}
 8014e36:	bf00      	nop
 8014e38:	37d0      	adds	r7, #208	@ 0xd0
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	2001116c 	.word	0x2001116c
 8014e44:	40028000 	.word	0x40028000
 8014e48:	2004c100 	.word	0x2004c100
 8014e4c:	2004c000 	.word	0x2004c000
 8014e50:	2001121c 	.word	0x2001121c
 8014e54:	0802cde8 	.word	0x0802cde8
 8014e58:	20011164 	.word	0x20011164
 8014e5c:	20011168 	.word	0x20011168
 8014e60:	08028b84 	.word	0x08028b84
 8014e64:	20010068 	.word	0x20010068
 8014e68:	20011254 	.word	0x20011254
 8014e6c:	08028bb0 	.word	0x08028bb0

08014e70 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b092      	sub	sp, #72	@ 0x48
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8014e7e:	2300      	movs	r3, #0
 8014e80:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8014e82:	2300      	movs	r3, #0
 8014e84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8014e88:	f107 030c 	add.w	r3, r7, #12
 8014e8c:	2230      	movs	r2, #48	@ 0x30
 8014e8e:	2100      	movs	r1, #0
 8014e90:	4618      	mov	r0, r3
 8014e92:	f011 fda0 	bl	80269d6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8014e96:	f107 030c 	add.w	r3, r7, #12
 8014e9a:	2230      	movs	r2, #48	@ 0x30
 8014e9c:	2100      	movs	r1, #0
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f011 fd99 	bl	80269d6 <memset>

  for(q = p; q != NULL; q = q->next)
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	643b      	str	r3, [r7, #64]	@ 0x40
 8014ea8:	e045      	b.n	8014f36 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8014eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014eac:	2b03      	cmp	r3, #3
 8014eae:	d902      	bls.n	8014eb6 <low_level_output+0x46>
      return ERR_IF;
 8014eb0:	f06f 030b 	mvn.w	r3, #11
 8014eb4:	e06c      	b.n	8014f90 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8014eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014eb8:	6859      	ldr	r1, [r3, #4]
 8014eba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ebc:	4613      	mov	r3, r2
 8014ebe:	005b      	lsls	r3, r3, #1
 8014ec0:	4413      	add	r3, r2
 8014ec2:	009b      	lsls	r3, r3, #2
 8014ec4:	3348      	adds	r3, #72	@ 0x48
 8014ec6:	443b      	add	r3, r7
 8014ec8:	3b3c      	subs	r3, #60	@ 0x3c
 8014eca:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8014ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ece:	895b      	ldrh	r3, [r3, #10]
 8014ed0:	4619      	mov	r1, r3
 8014ed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ed4:	4613      	mov	r3, r2
 8014ed6:	005b      	lsls	r3, r3, #1
 8014ed8:	4413      	add	r3, r2
 8014eda:	009b      	lsls	r3, r3, #2
 8014edc:	3348      	adds	r3, #72	@ 0x48
 8014ede:	443b      	add	r3, r7
 8014ee0:	3b38      	subs	r3, #56	@ 0x38
 8014ee2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8014ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d011      	beq.n	8014f0e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8014eea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014eec:	1e5a      	subs	r2, r3, #1
 8014eee:	f107 000c 	add.w	r0, r7, #12
 8014ef2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014ef4:	460b      	mov	r3, r1
 8014ef6:	005b      	lsls	r3, r3, #1
 8014ef8:	440b      	add	r3, r1
 8014efa:	009b      	lsls	r3, r3, #2
 8014efc:	18c1      	adds	r1, r0, r3
 8014efe:	4613      	mov	r3, r2
 8014f00:	005b      	lsls	r3, r3, #1
 8014f02:	4413      	add	r3, r2
 8014f04:	009b      	lsls	r3, r3, #2
 8014f06:	3348      	adds	r3, #72	@ 0x48
 8014f08:	443b      	add	r3, r7
 8014f0a:	3b34      	subs	r3, #52	@ 0x34
 8014f0c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8014f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d109      	bne.n	8014f2a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8014f16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014f18:	4613      	mov	r3, r2
 8014f1a:	005b      	lsls	r3, r3, #1
 8014f1c:	4413      	add	r3, r2
 8014f1e:	009b      	lsls	r3, r3, #2
 8014f20:	3348      	adds	r3, #72	@ 0x48
 8014f22:	443b      	add	r3, r7
 8014f24:	3b34      	subs	r3, #52	@ 0x34
 8014f26:	2200      	movs	r2, #0
 8014f28:	601a      	str	r2, [r3, #0]
    }

    i++;
 8014f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8014f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	643b      	str	r3, [r7, #64]	@ 0x40
 8014f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d1b6      	bne.n	8014eaa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	891b      	ldrh	r3, [r3, #8]
 8014f40:	461a      	mov	r2, r3
 8014f42:	4b15      	ldr	r3, [pc, #84]	@ (8014f98 <low_level_output+0x128>)
 8014f44:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8014f46:	4a14      	ldr	r2, [pc, #80]	@ (8014f98 <low_level_output+0x128>)
 8014f48:	f107 030c 	add.w	r3, r7, #12
 8014f4c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8014f4e:	4a12      	ldr	r2, [pc, #72]	@ (8014f98 <low_level_output+0x128>)
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8014f54:	6838      	ldr	r0, [r7, #0]
 8014f56:	f007 fdcf 	bl	801caf8 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8014f5a:	490f      	ldr	r1, [pc, #60]	@ (8014f98 <low_level_output+0x128>)
 8014f5c:	480f      	ldr	r0, [pc, #60]	@ (8014f9c <low_level_output+0x12c>)
 8014f5e:	f7f5 faf5 	bl	800a54c <HAL_ETH_Transmit_IT>
 8014f62:	4603      	mov	r3, r0
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d10e      	bne.n	8014f86 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8014f68:	bf00      	nop
 8014f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8014fa0 <low_level_output+0x130>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8014f72:	4618      	mov	r0, r3
 8014f74:	f002 ff48 	bl	8017e08 <osSemaphoreWait>
 8014f78:	4603      	mov	r3, r0
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d1f5      	bne.n	8014f6a <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8014f7e:	4807      	ldr	r0, [pc, #28]	@ (8014f9c <low_level_output+0x12c>)
 8014f80:	f7f5 fc84 	bl	800a88c <HAL_ETH_ReleaseTxPacket>
 8014f84:	e002      	b.n	8014f8c <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8014f86:	6838      	ldr	r0, [r7, #0]
 8014f88:	f007 fd10 	bl	801c9ac <pbuf_free>
  }

  return errval;
 8014f8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8014f90:	4618      	mov	r0, r3
 8014f92:	3748      	adds	r7, #72	@ 0x48
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	2001121c 	.word	0x2001121c
 8014f9c:	2001116c 	.word	0x2001116c
 8014fa0:	20011168 	.word	0x20011168

08014fa4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b084      	sub	sp, #16
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8014fac:	2300      	movs	r3, #0
 8014fae:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8014fb0:	4b07      	ldr	r3, [pc, #28]	@ (8014fd0 <low_level_input+0x2c>)
 8014fb2:	781b      	ldrb	r3, [r3, #0]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d105      	bne.n	8014fc4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8014fb8:	f107 030c 	add.w	r3, r7, #12
 8014fbc:	4619      	mov	r1, r3
 8014fbe:	4805      	ldr	r0, [pc, #20]	@ (8014fd4 <low_level_input+0x30>)
 8014fc0:	f7f5 fb20 	bl	800a604 <HAL_ETH_ReadData>
  }

  return p;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	3710      	adds	r7, #16
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}
 8014fce:	bf00      	nop
 8014fd0:	20011160 	.word	0x20011160
 8014fd4:	2001116c 	.word	0x2001116c

08014fd8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b084      	sub	sp, #16
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8014fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8015028 <ethernetif_input+0x50>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	f04f 31ff 	mov.w	r1, #4294967295
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f002 ff09 	bl	8017e08 <osSemaphoreWait>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d1f5      	bne.n	8014fe8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8014ffc:	68b8      	ldr	r0, [r7, #8]
 8014ffe:	f7ff ffd1 	bl	8014fa4 <low_level_input>
 8015002:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d00a      	beq.n	8015020 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	691b      	ldr	r3, [r3, #16]
 801500e:	68b9      	ldr	r1, [r7, #8]
 8015010:	68f8      	ldr	r0, [r7, #12]
 8015012:	4798      	blx	r3
 8015014:	4603      	mov	r3, r0
 8015016:	2b00      	cmp	r3, #0
 8015018:	d002      	beq.n	8015020 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 801501a:	68f8      	ldr	r0, [r7, #12]
 801501c:	f007 fcc6 	bl	801c9ac <pbuf_free>
          }
        }
      } while(p!=NULL);
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d1ea      	bne.n	8014ffc <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8015026:	e7df      	b.n	8014fe8 <ethernetif_input+0x10>
 8015028:	20011164 	.word	0x20011164

0801502c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d106      	bne.n	8015048 <ethernetif_init+0x1c>
 801503a:	4b0e      	ldr	r3, [pc, #56]	@ (8015074 <ethernetif_init+0x48>)
 801503c:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8015040:	490d      	ldr	r1, [pc, #52]	@ (8015078 <ethernetif_init+0x4c>)
 8015042:	480e      	ldr	r0, [pc, #56]	@ (801507c <ethernetif_init+0x50>)
 8015044:	f011 fc28 	bl	8026898 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	2273      	movs	r2, #115	@ 0x73
 801504c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2274      	movs	r2, #116	@ 0x74
 8015054:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	4a09      	ldr	r2, [pc, #36]	@ (8015080 <ethernetif_init+0x54>)
 801505c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	4a08      	ldr	r2, [pc, #32]	@ (8015084 <ethernetif_init+0x58>)
 8015062:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f7ff fd9f 	bl	8014ba8 <low_level_init>

  return ERR_OK;
 801506a:	2300      	movs	r3, #0
}
 801506c:	4618      	mov	r0, r3
 801506e:	3708      	adds	r7, #8
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}
 8015074:	08028bcc 	.word	0x08028bcc
 8015078:	08028be8 	.word	0x08028be8
 801507c:	08028bf8 	.word	0x08028bf8
 8015080:	08023711 	.word	0x08023711
 8015084:	08014e71 	.word	0x08014e71

08015088 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b084      	sub	sp, #16
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8015094:	68f9      	ldr	r1, [r7, #12]
 8015096:	4809      	ldr	r0, [pc, #36]	@ (80150bc <pbuf_free_custom+0x34>)
 8015098:	f006 fdc2 	bl	801bc20 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801509c:	4b08      	ldr	r3, [pc, #32]	@ (80150c0 <pbuf_free_custom+0x38>)
 801509e:	781b      	ldrb	r3, [r3, #0]
 80150a0:	2b01      	cmp	r3, #1
 80150a2:	d107      	bne.n	80150b4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80150a4:	4b06      	ldr	r3, [pc, #24]	@ (80150c0 <pbuf_free_custom+0x38>)
 80150a6:	2200      	movs	r2, #0
 80150a8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80150aa:	4b06      	ldr	r3, [pc, #24]	@ (80150c4 <pbuf_free_custom+0x3c>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	4618      	mov	r0, r3
 80150b0:	f002 fef8 	bl	8017ea4 <osSemaphoreRelease>
  }
}
 80150b4:	bf00      	nop
 80150b6:	3710      	adds	r7, #16
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}
 80150bc:	0802cde8 	.word	0x0802cde8
 80150c0:	20011160 	.word	0x20011160
 80150c4:	20011164 	.word	0x20011164

080150c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80150cc:	f7f1 feb0 	bl	8006e30 <HAL_GetTick>
 80150d0:	4603      	mov	r3, r0
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	bd80      	pop	{r7, pc}
	...

080150d8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b08e      	sub	sp, #56	@ 0x38
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80150e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80150e4:	2200      	movs	r2, #0
 80150e6:	601a      	str	r2, [r3, #0]
 80150e8:	605a      	str	r2, [r3, #4]
 80150ea:	609a      	str	r2, [r3, #8]
 80150ec:	60da      	str	r2, [r3, #12]
 80150ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	4a44      	ldr	r2, [pc, #272]	@ (8015208 <HAL_ETH_MspInit+0x130>)
 80150f6:	4293      	cmp	r3, r2
 80150f8:	f040 8081 	bne.w	80151fe <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80150fc:	4b43      	ldr	r3, [pc, #268]	@ (801520c <HAL_ETH_MspInit+0x134>)
 80150fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015100:	4a42      	ldr	r2, [pc, #264]	@ (801520c <HAL_ETH_MspInit+0x134>)
 8015102:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8015106:	6313      	str	r3, [r2, #48]	@ 0x30
 8015108:	4b40      	ldr	r3, [pc, #256]	@ (801520c <HAL_ETH_MspInit+0x134>)
 801510a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801510c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015110:	623b      	str	r3, [r7, #32]
 8015112:	6a3b      	ldr	r3, [r7, #32]
 8015114:	4b3d      	ldr	r3, [pc, #244]	@ (801520c <HAL_ETH_MspInit+0x134>)
 8015116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015118:	4a3c      	ldr	r2, [pc, #240]	@ (801520c <HAL_ETH_MspInit+0x134>)
 801511a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801511e:	6313      	str	r3, [r2, #48]	@ 0x30
 8015120:	4b3a      	ldr	r3, [pc, #232]	@ (801520c <HAL_ETH_MspInit+0x134>)
 8015122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015124:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8015128:	61fb      	str	r3, [r7, #28]
 801512a:	69fb      	ldr	r3, [r7, #28]
 801512c:	4b37      	ldr	r3, [pc, #220]	@ (801520c <HAL_ETH_MspInit+0x134>)
 801512e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015130:	4a36      	ldr	r2, [pc, #216]	@ (801520c <HAL_ETH_MspInit+0x134>)
 8015132:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015136:	6313      	str	r3, [r2, #48]	@ 0x30
 8015138:	4b34      	ldr	r3, [pc, #208]	@ (801520c <HAL_ETH_MspInit+0x134>)
 801513a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801513c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015140:	61bb      	str	r3, [r7, #24]
 8015142:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015144:	4b31      	ldr	r3, [pc, #196]	@ (801520c <HAL_ETH_MspInit+0x134>)
 8015146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015148:	4a30      	ldr	r2, [pc, #192]	@ (801520c <HAL_ETH_MspInit+0x134>)
 801514a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801514e:	6313      	str	r3, [r2, #48]	@ 0x30
 8015150:	4b2e      	ldr	r3, [pc, #184]	@ (801520c <HAL_ETH_MspInit+0x134>)
 8015152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015158:	617b      	str	r3, [r7, #20]
 801515a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801515c:	4b2b      	ldr	r3, [pc, #172]	@ (801520c <HAL_ETH_MspInit+0x134>)
 801515e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015160:	4a2a      	ldr	r2, [pc, #168]	@ (801520c <HAL_ETH_MspInit+0x134>)
 8015162:	f043 0304 	orr.w	r3, r3, #4
 8015166:	6313      	str	r3, [r2, #48]	@ 0x30
 8015168:	4b28      	ldr	r3, [pc, #160]	@ (801520c <HAL_ETH_MspInit+0x134>)
 801516a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801516c:	f003 0304 	and.w	r3, r3, #4
 8015170:	613b      	str	r3, [r7, #16]
 8015172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015174:	4b25      	ldr	r3, [pc, #148]	@ (801520c <HAL_ETH_MspInit+0x134>)
 8015176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015178:	4a24      	ldr	r2, [pc, #144]	@ (801520c <HAL_ETH_MspInit+0x134>)
 801517a:	f043 0301 	orr.w	r3, r3, #1
 801517e:	6313      	str	r3, [r2, #48]	@ 0x30
 8015180:	4b22      	ldr	r3, [pc, #136]	@ (801520c <HAL_ETH_MspInit+0x134>)
 8015182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015184:	f003 0301 	and.w	r3, r3, #1
 8015188:	60fb      	str	r3, [r7, #12]
 801518a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 801518c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8015190:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015192:	2302      	movs	r3, #2
 8015194:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015196:	2300      	movs	r3, #0
 8015198:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801519a:	2303      	movs	r3, #3
 801519c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801519e:	230b      	movs	r3, #11
 80151a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80151a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80151a6:	4619      	mov	r1, r3
 80151a8:	4819      	ldr	r0, [pc, #100]	@ (8015210 <HAL_ETH_MspInit+0x138>)
 80151aa:	f7f6 faad 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80151ae:	2332      	movs	r3, #50	@ 0x32
 80151b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151b2:	2302      	movs	r3, #2
 80151b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151b6:	2300      	movs	r3, #0
 80151b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80151ba:	2303      	movs	r3, #3
 80151bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80151be:	230b      	movs	r3, #11
 80151c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80151c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80151c6:	4619      	mov	r1, r3
 80151c8:	4812      	ldr	r0, [pc, #72]	@ (8015214 <HAL_ETH_MspInit+0x13c>)
 80151ca:	f7f6 fa9d 	bl	800b708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80151ce:	2386      	movs	r3, #134	@ 0x86
 80151d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151d2:	2302      	movs	r3, #2
 80151d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151d6:	2300      	movs	r3, #0
 80151d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80151da:	2303      	movs	r3, #3
 80151dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80151de:	230b      	movs	r3, #11
 80151e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80151e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80151e6:	4619      	mov	r1, r3
 80151e8:	480b      	ldr	r0, [pc, #44]	@ (8015218 <HAL_ETH_MspInit+0x140>)
 80151ea:	f7f6 fa8d 	bl	800b708 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80151ee:	2200      	movs	r2, #0
 80151f0:	2105      	movs	r1, #5
 80151f2:	203d      	movs	r0, #61	@ 0x3d
 80151f4:	f7f2 f9a4 	bl	8007540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80151f8:	203d      	movs	r0, #61	@ 0x3d
 80151fa:	f7f2 f9bd 	bl	8007578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80151fe:	bf00      	nop
 8015200:	3738      	adds	r7, #56	@ 0x38
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}
 8015206:	bf00      	nop
 8015208:	40028000 	.word	0x40028000
 801520c:	40023800 	.word	0x40023800
 8015210:	40021800 	.word	0x40021800
 8015214:	40020800 	.word	0x40020800
 8015218:	40020000 	.word	0x40020000

0801521c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801521c:	b580      	push	{r7, lr}
 801521e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8015220:	4802      	ldr	r0, [pc, #8]	@ (801522c <ETH_PHY_IO_Init+0x10>)
 8015222:	f7f5 fe03 	bl	800ae2c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8015226:	2300      	movs	r3, #0
}
 8015228:	4618      	mov	r0, r3
 801522a:	bd80      	pop	{r7, pc}
 801522c:	2001116c 	.word	0x2001116c

08015230 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8015230:	b480      	push	{r7}
 8015232:	af00      	add	r7, sp, #0
  return 0;
 8015234:	2300      	movs	r3, #0
}
 8015236:	4618      	mov	r0, r3
 8015238:	46bd      	mov	sp, r7
 801523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523e:	4770      	bx	lr

08015240 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b084      	sub	sp, #16
 8015244:	af00      	add	r7, sp, #0
 8015246:	60f8      	str	r0, [r7, #12]
 8015248:	60b9      	str	r1, [r7, #8]
 801524a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	68ba      	ldr	r2, [r7, #8]
 8015250:	68f9      	ldr	r1, [r7, #12]
 8015252:	4807      	ldr	r0, [pc, #28]	@ (8015270 <ETH_PHY_IO_ReadReg+0x30>)
 8015254:	f7f5 fc44 	bl	800aae0 <HAL_ETH_ReadPHYRegister>
 8015258:	4603      	mov	r3, r0
 801525a:	2b00      	cmp	r3, #0
 801525c:	d002      	beq.n	8015264 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801525e:	f04f 33ff 	mov.w	r3, #4294967295
 8015262:	e000      	b.n	8015266 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8015264:	2300      	movs	r3, #0
}
 8015266:	4618      	mov	r0, r3
 8015268:	3710      	adds	r7, #16
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}
 801526e:	bf00      	nop
 8015270:	2001116c 	.word	0x2001116c

08015274 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b084      	sub	sp, #16
 8015278:	af00      	add	r7, sp, #0
 801527a:	60f8      	str	r0, [r7, #12]
 801527c:	60b9      	str	r1, [r7, #8]
 801527e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	68ba      	ldr	r2, [r7, #8]
 8015284:	68f9      	ldr	r1, [r7, #12]
 8015286:	4807      	ldr	r0, [pc, #28]	@ (80152a4 <ETH_PHY_IO_WriteReg+0x30>)
 8015288:	f7f5 fc75 	bl	800ab76 <HAL_ETH_WritePHYRegister>
 801528c:	4603      	mov	r3, r0
 801528e:	2b00      	cmp	r3, #0
 8015290:	d002      	beq.n	8015298 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8015292:	f04f 33ff 	mov.w	r3, #4294967295
 8015296:	e000      	b.n	801529a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8015298:	2300      	movs	r3, #0
}
 801529a:	4618      	mov	r0, r3
 801529c:	3710      	adds	r7, #16
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}
 80152a2:	bf00      	nop
 80152a4:	2001116c 	.word	0x2001116c

080152a8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80152ac:	f7f1 fdc0 	bl	8006e30 <HAL_GetTick>
 80152b0:	4603      	mov	r3, r0
}
 80152b2:	4618      	mov	r0, r3
 80152b4:	bd80      	pop	{r7, pc}
	...

080152b8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b0a0      	sub	sp, #128	@ 0x80
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80152c0:	f107 0308 	add.w	r3, r7, #8
 80152c4:	2264      	movs	r2, #100	@ 0x64
 80152c6:	2100      	movs	r1, #0
 80152c8:	4618      	mov	r0, r3
 80152ca:	f011 fb84 	bl	80269d6 <memset>
  int32_t PHYLinkState = 0;
 80152ce:	2300      	movs	r3, #0
 80152d0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80152d2:	2300      	movs	r3, #0
 80152d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80152d6:	2300      	movs	r3, #0
 80152d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80152da:	2300      	movs	r3, #0
 80152dc:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80152e2:	483a      	ldr	r0, [pc, #232]	@ (80153cc <ethernet_link_thread+0x114>)
 80152e4:	f7ef f919 	bl	800451a <LAN8742_GetLinkState>
 80152e8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80152ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80152ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80152f0:	089b      	lsrs	r3, r3, #2
 80152f2:	f003 0301 	and.w	r3, r3, #1
 80152f6:	b2db      	uxtb	r3, r3
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d00c      	beq.n	8015316 <ethernet_link_thread+0x5e>
 80152fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80152fe:	2b01      	cmp	r3, #1
 8015300:	dc09      	bgt.n	8015316 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8015302:	4833      	ldr	r0, [pc, #204]	@ (80153d0 <ethernet_link_thread+0x118>)
 8015304:	f7f5 f8a2 	bl	800a44c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8015308:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801530a:	f006 ff0d 	bl	801c128 <netif_set_down>
    netif_set_link_down(netif);
 801530e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015310:	f006 ff70 	bl	801c1f4 <netif_set_link_down>
 8015314:	e055      	b.n	80153c2 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8015316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015318:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801531c:	f003 0304 	and.w	r3, r3, #4
 8015320:	2b00      	cmp	r3, #0
 8015322:	d14e      	bne.n	80153c2 <ethernet_link_thread+0x10a>
 8015324:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015326:	2b01      	cmp	r3, #1
 8015328:	dd4b      	ble.n	80153c2 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 801532a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801532c:	3b02      	subs	r3, #2
 801532e:	2b03      	cmp	r3, #3
 8015330:	d82a      	bhi.n	8015388 <ethernet_link_thread+0xd0>
 8015332:	a201      	add	r2, pc, #4	@ (adr r2, 8015338 <ethernet_link_thread+0x80>)
 8015334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015338:	08015349 	.word	0x08015349
 801533c:	0801535b 	.word	0x0801535b
 8015340:	0801536b 	.word	0x0801536b
 8015344:	0801537b 	.word	0x0801537b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8015348:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801534c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 801534e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8015352:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8015354:	2301      	movs	r3, #1
 8015356:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8015358:	e017      	b.n	801538a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 801535a:	2300      	movs	r3, #0
 801535c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 801535e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8015362:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8015364:	2301      	movs	r3, #1
 8015366:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8015368:	e00f      	b.n	801538a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 801536a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801536e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8015370:	2300      	movs	r3, #0
 8015372:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8015374:	2301      	movs	r3, #1
 8015376:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8015378:	e007      	b.n	801538a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 801537a:	2300      	movs	r3, #0
 801537c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 801537e:	2300      	movs	r3, #0
 8015380:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8015382:	2301      	movs	r3, #1
 8015384:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8015386:	e000      	b.n	801538a <ethernet_link_thread+0xd2>
    default:
      break;
 8015388:	bf00      	nop
    }

    if(linkchanged)
 801538a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801538c:	2b00      	cmp	r3, #0
 801538e:	d018      	beq.n	80153c2 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8015390:	f107 0308 	add.w	r3, r7, #8
 8015394:	4619      	mov	r1, r3
 8015396:	480e      	ldr	r0, [pc, #56]	@ (80153d0 <ethernet_link_thread+0x118>)
 8015398:	f7f5 fc36 	bl	800ac08 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801539c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801539e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80153a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80153a2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80153a4:	f107 0308 	add.w	r3, r7, #8
 80153a8:	4619      	mov	r1, r3
 80153aa:	4809      	ldr	r0, [pc, #36]	@ (80153d0 <ethernet_link_thread+0x118>)
 80153ac:	f7f5 fd23 	bl	800adf6 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80153b0:	4807      	ldr	r0, [pc, #28]	@ (80153d0 <ethernet_link_thread+0x118>)
 80153b2:	f7f4 ffdb 	bl	800a36c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80153b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80153b8:	f006 fe4a 	bl	801c050 <netif_set_up>
      netif_set_link_up(netif);
 80153bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80153be:	f006 fee5 	bl	801c18c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80153c2:	2064      	movs	r0, #100	@ 0x64
 80153c4:	f002 fc2f 	bl	8017c26 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80153c8:	e78b      	b.n	80152e2 <ethernet_link_thread+0x2a>
 80153ca:	bf00      	nop
 80153cc:	20011254 	.word	0x20011254
 80153d0:	2001116c 	.word	0x2001116c

080153d4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b086      	sub	sp, #24
 80153d8:	af02      	add	r7, sp, #8
 80153da:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80153dc:	4812      	ldr	r0, [pc, #72]	@ (8015428 <HAL_ETH_RxAllocateCallback+0x54>)
 80153de:	f006 fbab 	bl	801bb38 <memp_malloc_pool>
 80153e2:	60f8      	str	r0, [r7, #12]
  if (p)
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d014      	beq.n	8015414 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	f103 0220 	add.w	r2, r3, #32
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	4a0d      	ldr	r2, [pc, #52]	@ (801542c <HAL_ETH_RxAllocateCallback+0x58>)
 80153f8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8015402:	9201      	str	r2, [sp, #4]
 8015404:	9300      	str	r3, [sp, #0]
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	2241      	movs	r2, #65	@ 0x41
 801540a:	2100      	movs	r1, #0
 801540c:	2000      	movs	r0, #0
 801540e:	f007 f915 	bl	801c63c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8015412:	e005      	b.n	8015420 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8015414:	4b06      	ldr	r3, [pc, #24]	@ (8015430 <HAL_ETH_RxAllocateCallback+0x5c>)
 8015416:	2201      	movs	r2, #1
 8015418:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2200      	movs	r2, #0
 801541e:	601a      	str	r2, [r3, #0]
}
 8015420:	bf00      	nop
 8015422:	3710      	adds	r7, #16
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}
 8015428:	0802cde8 	.word	0x0802cde8
 801542c:	08015089 	.word	0x08015089
 8015430:	20011160 	.word	0x20011160

08015434 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b088      	sub	sp, #32
 8015438:	af00      	add	r7, sp, #0
 801543a:	60f8      	str	r0, [r7, #12]
 801543c:	60b9      	str	r1, [r7, #8]
 801543e:	607a      	str	r2, [r7, #4]
 8015440:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8015446:	68bb      	ldr	r3, [r7, #8]
 8015448:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801544a:	2300      	movs	r3, #0
 801544c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	3b20      	subs	r3, #32
 8015452:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8015454:	69fb      	ldr	r3, [r7, #28]
 8015456:	2200      	movs	r2, #0
 8015458:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 801545a:	69fb      	ldr	r3, [r7, #28]
 801545c:	2200      	movs	r2, #0
 801545e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8015460:	69fb      	ldr	r3, [r7, #28]
 8015462:	887a      	ldrh	r2, [r7, #2]
 8015464:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8015466:	69bb      	ldr	r3, [r7, #24]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d103      	bne.n	8015476 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	69fa      	ldr	r2, [r7, #28]
 8015472:	601a      	str	r2, [r3, #0]
 8015474:	e003      	b.n	801547e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8015476:	697b      	ldr	r3, [r7, #20]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	69fa      	ldr	r2, [r7, #28]
 801547c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	69fa      	ldr	r2, [r7, #28]
 8015482:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8015484:	69bb      	ldr	r3, [r7, #24]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	61fb      	str	r3, [r7, #28]
 801548a:	e009      	b.n	80154a0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	891a      	ldrh	r2, [r3, #8]
 8015490:	887b      	ldrh	r3, [r7, #2]
 8015492:	4413      	add	r3, r2
 8015494:	b29a      	uxth	r2, r3
 8015496:	69fb      	ldr	r3, [r7, #28]
 8015498:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 801549a:	69fb      	ldr	r3, [r7, #28]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	61fb      	str	r3, [r7, #28]
 80154a0:	69fb      	ldr	r3, [r7, #28]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d1f2      	bne.n	801548c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80154a6:	887b      	ldrh	r3, [r7, #2]
 80154a8:	4619      	mov	r1, r3
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f7ff fb18 	bl	8014ae0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80154b0:	bf00      	nop
 80154b2:	3720      	adds	r7, #32
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}

080154b8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b082      	sub	sp, #8
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f007 fa73 	bl	801c9ac <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80154c6:	bf00      	nop
 80154c8:	3708      	adds	r7, #8
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}
	...

080154d0 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b082      	sub	sp, #8
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 80154d8:	4b15      	ldr	r3, [pc, #84]	@ (8015530 <RMII_Thread+0x60>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d003      	beq.n	80154ec <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 80154e4:	2000      	movs	r0, #0
 80154e6:	f002 fb92 	bl	8017c0e <osThreadTerminate>
 80154ea:	e7f5      	b.n	80154d8 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 80154ec:	4b10      	ldr	r3, [pc, #64]	@ (8015530 <RMII_Thread+0x60>)
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80154f4:	2b0a      	cmp	r3, #10
 80154f6:	d916      	bls.n	8015526 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80154f8:	4b0e      	ldr	r3, [pc, #56]	@ (8015534 <RMII_Thread+0x64>)
 80154fa:	685b      	ldr	r3, [r3, #4]
 80154fc:	4a0d      	ldr	r2, [pc, #52]	@ (8015534 <RMII_Thread+0x64>)
 80154fe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8015502:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8015504:	4b0b      	ldr	r3, [pc, #44]	@ (8015534 <RMII_Thread+0x64>)
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	4a0a      	ldr	r2, [pc, #40]	@ (8015534 <RMII_Thread+0x64>)
 801550a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801550e:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8015510:	4b07      	ldr	r3, [pc, #28]	@ (8015530 <RMII_Thread+0x60>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8015518:	4b05      	ldr	r3, [pc, #20]	@ (8015530 <RMII_Thread+0x60>)
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	f042 0201 	orr.w	r2, r2, #1
 8015520:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8015524:	e7d8      	b.n	80154d8 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 8015526:	20c8      	movs	r0, #200	@ 0xc8
 8015528:	f002 fb7d 	bl	8017c26 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 801552c:	e7d4      	b.n	80154d8 <RMII_Thread+0x8>
 801552e:	bf00      	nop
 8015530:	2001116c 	.word	0x2001116c
 8015534:	40013800 	.word	0x40013800

08015538 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8015538:	b590      	push	{r4, r7, lr}
 801553a:	b089      	sub	sp, #36	@ 0x24
 801553c:	af04      	add	r7, sp, #16
 801553e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8015540:	2301      	movs	r3, #1
 8015542:	2202      	movs	r2, #2
 8015544:	2102      	movs	r1, #2
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f000 fcd7 	bl	8015efa <USBH_FindInterface>
 801554c:	4603      	mov	r3, r0
 801554e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8015550:	7bfb      	ldrb	r3, [r7, #15]
 8015552:	2bff      	cmp	r3, #255	@ 0xff
 8015554:	d002      	beq.n	801555c <USBH_CDC_InterfaceInit+0x24>
 8015556:	7bfb      	ldrb	r3, [r7, #15]
 8015558:	2b01      	cmp	r3, #1
 801555a:	d901      	bls.n	8015560 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801555c:	2302      	movs	r3, #2
 801555e:	e13d      	b.n	80157dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8015560:	7bfb      	ldrb	r3, [r7, #15]
 8015562:	4619      	mov	r1, r3
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f000 fcac 	bl	8015ec2 <USBH_SelectInterface>
 801556a:	4603      	mov	r3, r0
 801556c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 801556e:	7bbb      	ldrb	r3, [r7, #14]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d001      	beq.n	8015578 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8015574:	2302      	movs	r3, #2
 8015576:	e131      	b.n	80157dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 801557e:	2050      	movs	r0, #80	@ 0x50
 8015580:	f010 fb74 	bl	8025c6c <malloc>
 8015584:	4603      	mov	r3, r0
 8015586:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801558e:	69db      	ldr	r3, [r3, #28]
 8015590:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d101      	bne.n	801559c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8015598:	2302      	movs	r3, #2
 801559a:	e11f      	b.n	80157dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 801559c:	2250      	movs	r2, #80	@ 0x50
 801559e:	2100      	movs	r1, #0
 80155a0:	68b8      	ldr	r0, [r7, #8]
 80155a2:	f011 fa18 	bl	80269d6 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80155a6:	7bfb      	ldrb	r3, [r7, #15]
 80155a8:	687a      	ldr	r2, [r7, #4]
 80155aa:	211a      	movs	r1, #26
 80155ac:	fb01 f303 	mul.w	r3, r1, r3
 80155b0:	4413      	add	r3, r2
 80155b2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80155b6:	781b      	ldrb	r3, [r3, #0]
 80155b8:	b25b      	sxtb	r3, r3
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	da15      	bge.n	80155ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80155be:	7bfb      	ldrb	r3, [r7, #15]
 80155c0:	687a      	ldr	r2, [r7, #4]
 80155c2:	211a      	movs	r1, #26
 80155c4:	fb01 f303 	mul.w	r3, r1, r3
 80155c8:	4413      	add	r3, r2
 80155ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80155ce:	781a      	ldrb	r2, [r3, #0]
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80155d4:	7bfb      	ldrb	r3, [r7, #15]
 80155d6:	687a      	ldr	r2, [r7, #4]
 80155d8:	211a      	movs	r1, #26
 80155da:	fb01 f303 	mul.w	r3, r1, r3
 80155de:	4413      	add	r3, r2
 80155e0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80155e4:	881a      	ldrh	r2, [r3, #0]
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	785b      	ldrb	r3, [r3, #1]
 80155ee:	4619      	mov	r1, r3
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f002 fa1c 	bl	8017a2e <USBH_AllocPipe>
 80155f6:	4603      	mov	r3, r0
 80155f8:	461a      	mov	r2, r3
 80155fa:	68bb      	ldr	r3, [r7, #8]
 80155fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	7819      	ldrb	r1, [r3, #0]
 8015602:	68bb      	ldr	r3, [r7, #8]
 8015604:	7858      	ldrb	r0, [r3, #1]
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8015612:	68ba      	ldr	r2, [r7, #8]
 8015614:	8952      	ldrh	r2, [r2, #10]
 8015616:	9202      	str	r2, [sp, #8]
 8015618:	2203      	movs	r2, #3
 801561a:	9201      	str	r2, [sp, #4]
 801561c:	9300      	str	r3, [sp, #0]
 801561e:	4623      	mov	r3, r4
 8015620:	4602      	mov	r2, r0
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f002 f9d4 	bl	80179d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8015628:	68bb      	ldr	r3, [r7, #8]
 801562a:	781b      	ldrb	r3, [r3, #0]
 801562c:	2200      	movs	r2, #0
 801562e:	4619      	mov	r1, r3
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f010 fa95 	bl	8025b60 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8015636:	2300      	movs	r3, #0
 8015638:	2200      	movs	r2, #0
 801563a:	210a      	movs	r1, #10
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f000 fc5c 	bl	8015efa <USBH_FindInterface>
 8015642:	4603      	mov	r3, r0
 8015644:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8015646:	7bfb      	ldrb	r3, [r7, #15]
 8015648:	2bff      	cmp	r3, #255	@ 0xff
 801564a:	d002      	beq.n	8015652 <USBH_CDC_InterfaceInit+0x11a>
 801564c:	7bfb      	ldrb	r3, [r7, #15]
 801564e:	2b01      	cmp	r3, #1
 8015650:	d901      	bls.n	8015656 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8015652:	2302      	movs	r3, #2
 8015654:	e0c2      	b.n	80157dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8015656:	7bfb      	ldrb	r3, [r7, #15]
 8015658:	687a      	ldr	r2, [r7, #4]
 801565a:	211a      	movs	r1, #26
 801565c:	fb01 f303 	mul.w	r3, r1, r3
 8015660:	4413      	add	r3, r2
 8015662:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	b25b      	sxtb	r3, r3
 801566a:	2b00      	cmp	r3, #0
 801566c:	da16      	bge.n	801569c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801566e:	7bfb      	ldrb	r3, [r7, #15]
 8015670:	687a      	ldr	r2, [r7, #4]
 8015672:	211a      	movs	r1, #26
 8015674:	fb01 f303 	mul.w	r3, r1, r3
 8015678:	4413      	add	r3, r2
 801567a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801567e:	781a      	ldrb	r2, [r3, #0]
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8015684:	7bfb      	ldrb	r3, [r7, #15]
 8015686:	687a      	ldr	r2, [r7, #4]
 8015688:	211a      	movs	r1, #26
 801568a:	fb01 f303 	mul.w	r3, r1, r3
 801568e:	4413      	add	r3, r2
 8015690:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8015694:	881a      	ldrh	r2, [r3, #0]
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	835a      	strh	r2, [r3, #26]
 801569a:	e015      	b.n	80156c8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801569c:	7bfb      	ldrb	r3, [r7, #15]
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	211a      	movs	r1, #26
 80156a2:	fb01 f303 	mul.w	r3, r1, r3
 80156a6:	4413      	add	r3, r2
 80156a8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80156ac:	781a      	ldrb	r2, [r3, #0]
 80156ae:	68bb      	ldr	r3, [r7, #8]
 80156b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80156b2:	7bfb      	ldrb	r3, [r7, #15]
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	211a      	movs	r1, #26
 80156b8:	fb01 f303 	mul.w	r3, r1, r3
 80156bc:	4413      	add	r3, r2
 80156be:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80156c2:	881a      	ldrh	r2, [r3, #0]
 80156c4:	68bb      	ldr	r3, [r7, #8]
 80156c6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80156c8:	7bfb      	ldrb	r3, [r7, #15]
 80156ca:	687a      	ldr	r2, [r7, #4]
 80156cc:	211a      	movs	r1, #26
 80156ce:	fb01 f303 	mul.w	r3, r1, r3
 80156d2:	4413      	add	r3, r2
 80156d4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	b25b      	sxtb	r3, r3
 80156dc:	2b00      	cmp	r3, #0
 80156de:	da16      	bge.n	801570e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80156e0:	7bfb      	ldrb	r3, [r7, #15]
 80156e2:	687a      	ldr	r2, [r7, #4]
 80156e4:	211a      	movs	r1, #26
 80156e6:	fb01 f303 	mul.w	r3, r1, r3
 80156ea:	4413      	add	r3, r2
 80156ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80156f0:	781a      	ldrb	r2, [r3, #0]
 80156f2:	68bb      	ldr	r3, [r7, #8]
 80156f4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80156f6:	7bfb      	ldrb	r3, [r7, #15]
 80156f8:	687a      	ldr	r2, [r7, #4]
 80156fa:	211a      	movs	r1, #26
 80156fc:	fb01 f303 	mul.w	r3, r1, r3
 8015700:	4413      	add	r3, r2
 8015702:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8015706:	881a      	ldrh	r2, [r3, #0]
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	835a      	strh	r2, [r3, #26]
 801570c:	e015      	b.n	801573a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801570e:	7bfb      	ldrb	r3, [r7, #15]
 8015710:	687a      	ldr	r2, [r7, #4]
 8015712:	211a      	movs	r1, #26
 8015714:	fb01 f303 	mul.w	r3, r1, r3
 8015718:	4413      	add	r3, r2
 801571a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 801571e:	781a      	ldrb	r2, [r3, #0]
 8015720:	68bb      	ldr	r3, [r7, #8]
 8015722:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8015724:	7bfb      	ldrb	r3, [r7, #15]
 8015726:	687a      	ldr	r2, [r7, #4]
 8015728:	211a      	movs	r1, #26
 801572a:	fb01 f303 	mul.w	r3, r1, r3
 801572e:	4413      	add	r3, r2
 8015730:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8015734:	881a      	ldrh	r2, [r3, #0]
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	7b9b      	ldrb	r3, [r3, #14]
 801573e:	4619      	mov	r1, r3
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f002 f974 	bl	8017a2e <USBH_AllocPipe>
 8015746:	4603      	mov	r3, r0
 8015748:	461a      	mov	r2, r3
 801574a:	68bb      	ldr	r3, [r7, #8]
 801574c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	7bdb      	ldrb	r3, [r3, #15]
 8015752:	4619      	mov	r1, r3
 8015754:	6878      	ldr	r0, [r7, #4]
 8015756:	f002 f96a 	bl	8017a2e <USBH_AllocPipe>
 801575a:	4603      	mov	r3, r0
 801575c:	461a      	mov	r2, r3
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8015762:	68bb      	ldr	r3, [r7, #8]
 8015764:	7b59      	ldrb	r1, [r3, #13]
 8015766:	68bb      	ldr	r3, [r7, #8]
 8015768:	7b98      	ldrb	r0, [r3, #14]
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8015776:	68ba      	ldr	r2, [r7, #8]
 8015778:	8b12      	ldrh	r2, [r2, #24]
 801577a:	9202      	str	r2, [sp, #8]
 801577c:	2202      	movs	r2, #2
 801577e:	9201      	str	r2, [sp, #4]
 8015780:	9300      	str	r3, [sp, #0]
 8015782:	4623      	mov	r3, r4
 8015784:	4602      	mov	r2, r0
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f002 f922 	bl	80179d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	7b19      	ldrb	r1, [r3, #12]
 8015790:	68bb      	ldr	r3, [r7, #8]
 8015792:	7bd8      	ldrb	r0, [r3, #15]
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80157a0:	68ba      	ldr	r2, [r7, #8]
 80157a2:	8b52      	ldrh	r2, [r2, #26]
 80157a4:	9202      	str	r2, [sp, #8]
 80157a6:	2202      	movs	r2, #2
 80157a8:	9201      	str	r2, [sp, #4]
 80157aa:	9300      	str	r3, [sp, #0]
 80157ac:	4623      	mov	r3, r4
 80157ae:	4602      	mov	r2, r0
 80157b0:	6878      	ldr	r0, [r7, #4]
 80157b2:	f002 f90d 	bl	80179d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80157b6:	68bb      	ldr	r3, [r7, #8]
 80157b8:	2200      	movs	r2, #0
 80157ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	7b5b      	ldrb	r3, [r3, #13]
 80157c2:	2200      	movs	r2, #0
 80157c4:	4619      	mov	r1, r3
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f010 f9ca 	bl	8025b60 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	7b1b      	ldrb	r3, [r3, #12]
 80157d0:	2200      	movs	r2, #0
 80157d2:	4619      	mov	r1, r3
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	f010 f9c3 	bl	8025b60 <USBH_LL_SetToggle>

  return USBH_OK;
 80157da:	2300      	movs	r3, #0
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3714      	adds	r7, #20
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd90      	pop	{r4, r7, pc}

080157e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b084      	sub	sp, #16
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80157f2:	69db      	ldr	r3, [r3, #28]
 80157f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	781b      	ldrb	r3, [r3, #0]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d00e      	beq.n	801581c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	4619      	mov	r1, r3
 8015804:	6878      	ldr	r0, [r7, #4]
 8015806:	f002 f902 	bl	8017a0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	781b      	ldrb	r3, [r3, #0]
 801580e:	4619      	mov	r1, r3
 8015810:	6878      	ldr	r0, [r7, #4]
 8015812:	f002 f92d 	bl	8017a70 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	2200      	movs	r2, #0
 801581a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	7b1b      	ldrb	r3, [r3, #12]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d00e      	beq.n	8015842 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	7b1b      	ldrb	r3, [r3, #12]
 8015828:	4619      	mov	r1, r3
 801582a:	6878      	ldr	r0, [r7, #4]
 801582c:	f002 f8ef 	bl	8017a0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	7b1b      	ldrb	r3, [r3, #12]
 8015834:	4619      	mov	r1, r3
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	f002 f91a 	bl	8017a70 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	2200      	movs	r2, #0
 8015840:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	7b5b      	ldrb	r3, [r3, #13]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d00e      	beq.n	8015868 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	7b5b      	ldrb	r3, [r3, #13]
 801584e:	4619      	mov	r1, r3
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f002 f8dc 	bl	8017a0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	7b5b      	ldrb	r3, [r3, #13]
 801585a:	4619      	mov	r1, r3
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	f002 f907 	bl	8017a70 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	2200      	movs	r2, #0
 8015866:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801586e:	69db      	ldr	r3, [r3, #28]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d00b      	beq.n	801588c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801587a:	69db      	ldr	r3, [r3, #28]
 801587c:	4618      	mov	r0, r3
 801587e:	f010 f9fd 	bl	8025c7c <free>
    phost->pActiveClass->pData = 0U;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8015888:	2200      	movs	r2, #0
 801588a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 801588c:	2300      	movs	r3, #0
}
 801588e:	4618      	mov	r0, r3
 8015890:	3710      	adds	r7, #16
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}

08015896 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8015896:	b580      	push	{r7, lr}
 8015898:	b084      	sub	sp, #16
 801589a:	af00      	add	r7, sp, #0
 801589c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80158a4:	69db      	ldr	r3, [r3, #28]
 80158a6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	3340      	adds	r3, #64	@ 0x40
 80158ac:	4619      	mov	r1, r3
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f000 f8b1 	bl	8015a16 <GetLineCoding>
 80158b4:	4603      	mov	r3, r0
 80158b6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80158b8:	7afb      	ldrb	r3, [r7, #11]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d105      	bne.n	80158ca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80158c4:	2102      	movs	r1, #2
 80158c6:	6878      	ldr	r0, [r7, #4]
 80158c8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80158ca:	7afb      	ldrb	r3, [r7, #11]
}
 80158cc:	4618      	mov	r0, r3
 80158ce:	3710      	adds	r7, #16
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}

080158d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b084      	sub	sp, #16
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80158dc:	2301      	movs	r3, #1
 80158de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80158e0:	2300      	movs	r3, #0
 80158e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80158ea:	69db      	ldr	r3, [r3, #28]
 80158ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80158ee:	68bb      	ldr	r3, [r7, #8]
 80158f0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80158f4:	2b04      	cmp	r3, #4
 80158f6:	d877      	bhi.n	80159e8 <USBH_CDC_Process+0x114>
 80158f8:	a201      	add	r2, pc, #4	@ (adr r2, 8015900 <USBH_CDC_Process+0x2c>)
 80158fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158fe:	bf00      	nop
 8015900:	08015915 	.word	0x08015915
 8015904:	0801591b 	.word	0x0801591b
 8015908:	0801594b 	.word	0x0801594b
 801590c:	080159bf 	.word	0x080159bf
 8015910:	080159cd 	.word	0x080159cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8015914:	2300      	movs	r3, #0
 8015916:	73fb      	strb	r3, [r7, #15]
      break;
 8015918:	e06d      	b.n	80159f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801591a:	68bb      	ldr	r3, [r7, #8]
 801591c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801591e:	4619      	mov	r1, r3
 8015920:	6878      	ldr	r0, [r7, #4]
 8015922:	f000 f897 	bl	8015a54 <SetLineCoding>
 8015926:	4603      	mov	r3, r0
 8015928:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801592a:	7bbb      	ldrb	r3, [r7, #14]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d104      	bne.n	801593a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8015930:	68bb      	ldr	r3, [r7, #8]
 8015932:	2202      	movs	r2, #2
 8015934:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8015938:	e058      	b.n	80159ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801593a:	7bbb      	ldrb	r3, [r7, #14]
 801593c:	2b01      	cmp	r3, #1
 801593e:	d055      	beq.n	80159ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	2204      	movs	r2, #4
 8015944:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8015948:	e050      	b.n	80159ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	3340      	adds	r3, #64	@ 0x40
 801594e:	4619      	mov	r1, r3
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f000 f860 	bl	8015a16 <GetLineCoding>
 8015956:	4603      	mov	r3, r0
 8015958:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801595a:	7bbb      	ldrb	r3, [r7, #14]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d126      	bne.n	80159ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	2200      	movs	r2, #0
 8015964:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8015968:	68bb      	ldr	r3, [r7, #8]
 801596a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015972:	791b      	ldrb	r3, [r3, #4]
 8015974:	429a      	cmp	r2, r3
 8015976:	d13b      	bne.n	80159f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015982:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8015984:	429a      	cmp	r2, r3
 8015986:	d133      	bne.n	80159f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 801598e:	68bb      	ldr	r3, [r7, #8]
 8015990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015992:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8015994:	429a      	cmp	r2, r3
 8015996:	d12b      	bne.n	80159f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8015998:	68bb      	ldr	r3, [r7, #8]
 801599a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801599c:	68bb      	ldr	r3, [r7, #8]
 801599e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80159a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80159a2:	429a      	cmp	r2, r3
 80159a4:	d124      	bne.n	80159f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80159a6:	6878      	ldr	r0, [r7, #4]
 80159a8:	f000 f982 	bl	8015cb0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80159ac:	e020      	b.n	80159f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80159ae:	7bbb      	ldrb	r3, [r7, #14]
 80159b0:	2b01      	cmp	r3, #1
 80159b2:	d01d      	beq.n	80159f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80159b4:	68bb      	ldr	r3, [r7, #8]
 80159b6:	2204      	movs	r2, #4
 80159b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80159bc:	e018      	b.n	80159f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	f000 f867 	bl	8015a92 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f000 f8f6 	bl	8015bb6 <CDC_ProcessReception>
      break;
 80159ca:	e014      	b.n	80159f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80159cc:	2100      	movs	r1, #0
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f001 f988 	bl	8016ce4 <USBH_ClrFeature>
 80159d4:	4603      	mov	r3, r0
 80159d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80159d8:	7bbb      	ldrb	r3, [r7, #14]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d10a      	bne.n	80159f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	2200      	movs	r2, #0
 80159e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80159e6:	e005      	b.n	80159f4 <USBH_CDC_Process+0x120>

    default:
      break;
 80159e8:	bf00      	nop
 80159ea:	e004      	b.n	80159f6 <USBH_CDC_Process+0x122>
      break;
 80159ec:	bf00      	nop
 80159ee:	e002      	b.n	80159f6 <USBH_CDC_Process+0x122>
      break;
 80159f0:	bf00      	nop
 80159f2:	e000      	b.n	80159f6 <USBH_CDC_Process+0x122>
      break;
 80159f4:	bf00      	nop

  }

  return status;
 80159f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	3710      	adds	r7, #16
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}

08015a00 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8015a00:	b480      	push	{r7}
 8015a02:	b083      	sub	sp, #12
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8015a08:	2300      	movs	r3, #0
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	370c      	adds	r7, #12
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a14:	4770      	bx	lr

08015a16 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8015a16:	b580      	push	{r7, lr}
 8015a18:	b082      	sub	sp, #8
 8015a1a:	af00      	add	r7, sp, #0
 8015a1c:	6078      	str	r0, [r7, #4]
 8015a1e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	22a1      	movs	r2, #161	@ 0xa1
 8015a24:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2221      	movs	r2, #33	@ 0x21
 8015a2a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	2200      	movs	r2, #0
 8015a36:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2207      	movs	r2, #7
 8015a3c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8015a3e:	683b      	ldr	r3, [r7, #0]
 8015a40:	2207      	movs	r2, #7
 8015a42:	4619      	mov	r1, r3
 8015a44:	6878      	ldr	r0, [r7, #4]
 8015a46:	f001 fc82 	bl	801734e <USBH_CtlReq>
 8015a4a:	4603      	mov	r3, r0
}
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	3708      	adds	r7, #8
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}

08015a54 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b082      	sub	sp, #8
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
 8015a5c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	2221      	movs	r2, #33	@ 0x21
 8015a62:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2220      	movs	r2, #32
 8015a68:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	2200      	movs	r2, #0
 8015a74:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2207      	movs	r2, #7
 8015a7a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	2207      	movs	r2, #7
 8015a80:	4619      	mov	r1, r3
 8015a82:	6878      	ldr	r0, [r7, #4]
 8015a84:	f001 fc63 	bl	801734e <USBH_CtlReq>
 8015a88:	4603      	mov	r3, r0
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3708      	adds	r7, #8
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}

08015a92 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8015a92:	b580      	push	{r7, lr}
 8015a94:	b086      	sub	sp, #24
 8015a96:	af02      	add	r7, sp, #8
 8015a98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8015aa0:	69db      	ldr	r3, [r3, #28]
 8015aa2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8015aae:	2b01      	cmp	r3, #1
 8015ab0:	d002      	beq.n	8015ab8 <CDC_ProcessTransmission+0x26>
 8015ab2:	2b02      	cmp	r3, #2
 8015ab4:	d023      	beq.n	8015afe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8015ab6:	e07a      	b.n	8015bae <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015abc:	68fa      	ldr	r2, [r7, #12]
 8015abe:	8b12      	ldrh	r2, [r2, #24]
 8015ac0:	4293      	cmp	r3, r2
 8015ac2:	d90b      	bls.n	8015adc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	69d9      	ldr	r1, [r3, #28]
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	8b1a      	ldrh	r2, [r3, #24]
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	7b5b      	ldrb	r3, [r3, #13]
 8015ad0:	2001      	movs	r0, #1
 8015ad2:	9000      	str	r0, [sp, #0]
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f001 ff38 	bl	801794a <USBH_BulkSendData>
 8015ada:	e00b      	b.n	8015af4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8015ae4:	b29a      	uxth	r2, r3
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	7b5b      	ldrb	r3, [r3, #13]
 8015aea:	2001      	movs	r0, #1
 8015aec:	9000      	str	r0, [sp, #0]
 8015aee:	6878      	ldr	r0, [r7, #4]
 8015af0:	f001 ff2b 	bl	801794a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	2202      	movs	r2, #2
 8015af8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8015afc:	e057      	b.n	8015bae <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	7b5b      	ldrb	r3, [r3, #13]
 8015b02:	4619      	mov	r1, r3
 8015b04:	6878      	ldr	r0, [r7, #4]
 8015b06:	f010 f801 	bl	8025b0c <USBH_LL_GetURBState>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8015b0e:	7afb      	ldrb	r3, [r7, #11]
 8015b10:	2b01      	cmp	r3, #1
 8015b12:	d136      	bne.n	8015b82 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b18:	68fa      	ldr	r2, [r7, #12]
 8015b1a:	8b12      	ldrh	r2, [r2, #24]
 8015b1c:	4293      	cmp	r3, r2
 8015b1e:	d90e      	bls.n	8015b3e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b24:	68fa      	ldr	r2, [r7, #12]
 8015b26:	8b12      	ldrh	r2, [r2, #24]
 8015b28:	1a9a      	subs	r2, r3, r2
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	69db      	ldr	r3, [r3, #28]
 8015b32:	68fa      	ldr	r2, [r7, #12]
 8015b34:	8b12      	ldrh	r2, [r2, #24]
 8015b36:	441a      	add	r2, r3
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	61da      	str	r2, [r3, #28]
 8015b3c:	e002      	b.n	8015b44 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	2200      	movs	r2, #0
 8015b42:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d004      	beq.n	8015b56 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	2201      	movs	r2, #1
 8015b50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8015b54:	e006      	b.n	8015b64 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	2200      	movs	r2, #0
 8015b5a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8015b5e:	6878      	ldr	r0, [r7, #4]
 8015b60:	f000 f892 	bl	8015c88 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	2204      	movs	r2, #4
 8015b68:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8015b78:	2200      	movs	r2, #0
 8015b7a:	4619      	mov	r1, r3
 8015b7c:	f002 f9f0 	bl	8017f60 <osMessagePut>
      break;
 8015b80:	e014      	b.n	8015bac <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8015b82:	7afb      	ldrb	r3, [r7, #11]
 8015b84:	2b02      	cmp	r3, #2
 8015b86:	d111      	bne.n	8015bac <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	2201      	movs	r2, #1
 8015b8c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2204      	movs	r2, #4
 8015b94:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	4619      	mov	r1, r3
 8015ba8:	f002 f9da 	bl	8017f60 <osMessagePut>
      break;
 8015bac:	bf00      	nop
  }
}
 8015bae:	bf00      	nop
 8015bb0:	3710      	adds	r7, #16
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}

08015bb6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8015bb6:	b580      	push	{r7, lr}
 8015bb8:	b086      	sub	sp, #24
 8015bba:	af00      	add	r7, sp, #0
 8015bbc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8015bc4:	69db      	ldr	r3, [r3, #28]
 8015bc6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015bc8:	2300      	movs	r3, #0
 8015bca:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8015bcc:	697b      	ldr	r3, [r7, #20]
 8015bce:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8015bd2:	2b03      	cmp	r3, #3
 8015bd4:	d002      	beq.n	8015bdc <CDC_ProcessReception+0x26>
 8015bd6:	2b04      	cmp	r3, #4
 8015bd8:	d00e      	beq.n	8015bf8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8015bda:	e051      	b.n	8015c80 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8015bdc:	697b      	ldr	r3, [r7, #20]
 8015bde:	6a19      	ldr	r1, [r3, #32]
 8015be0:	697b      	ldr	r3, [r7, #20]
 8015be2:	8b5a      	ldrh	r2, [r3, #26]
 8015be4:	697b      	ldr	r3, [r7, #20]
 8015be6:	7b1b      	ldrb	r3, [r3, #12]
 8015be8:	6878      	ldr	r0, [r7, #4]
 8015bea:	f001 fed3 	bl	8017994 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8015bee:	697b      	ldr	r3, [r7, #20]
 8015bf0:	2204      	movs	r2, #4
 8015bf2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8015bf6:	e043      	b.n	8015c80 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	7b1b      	ldrb	r3, [r3, #12]
 8015bfc:	4619      	mov	r1, r3
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f00f ff84 	bl	8025b0c <USBH_LL_GetURBState>
 8015c04:	4603      	mov	r3, r0
 8015c06:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8015c08:	7cfb      	ldrb	r3, [r7, #19]
 8015c0a:	2b01      	cmp	r3, #1
 8015c0c:	d137      	bne.n	8015c7e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8015c0e:	697b      	ldr	r3, [r7, #20]
 8015c10:	7b1b      	ldrb	r3, [r3, #12]
 8015c12:	4619      	mov	r1, r3
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f00f fee7 	bl	80259e8 <USBH_LL_GetLastXferSize>
 8015c1a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8015c1c:	697b      	ldr	r3, [r7, #20]
 8015c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c20:	68fa      	ldr	r2, [r7, #12]
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d016      	beq.n	8015c54 <CDC_ProcessReception+0x9e>
 8015c26:	697b      	ldr	r3, [r7, #20]
 8015c28:	8b5b      	ldrh	r3, [r3, #26]
 8015c2a:	461a      	mov	r2, r3
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	4293      	cmp	r3, r2
 8015c30:	d110      	bne.n	8015c54 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	1ad2      	subs	r2, r2, r3
 8015c3a:	697b      	ldr	r3, [r7, #20]
 8015c3c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8015c3e:	697b      	ldr	r3, [r7, #20]
 8015c40:	6a1a      	ldr	r2, [r3, #32]
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	441a      	add	r2, r3
 8015c46:	697b      	ldr	r3, [r7, #20]
 8015c48:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	2203      	movs	r2, #3
 8015c4e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8015c52:	e006      	b.n	8015c62 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8015c54:	697b      	ldr	r3, [r7, #20]
 8015c56:	2200      	movs	r2, #0
 8015c58:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f000 f81d 	bl	8015c9c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	2204      	movs	r2, #4
 8015c66:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8015c76:	2200      	movs	r2, #0
 8015c78:	4619      	mov	r1, r3
 8015c7a:	f002 f971 	bl	8017f60 <osMessagePut>
      break;
 8015c7e:	bf00      	nop
  }
}
 8015c80:	bf00      	nop
 8015c82:	3718      	adds	r7, #24
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8015c88:	b480      	push	{r7}
 8015c8a:	b083      	sub	sp, #12
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8015c90:	bf00      	nop
 8015c92:	370c      	adds	r7, #12
 8015c94:	46bd      	mov	sp, r7
 8015c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9a:	4770      	bx	lr

08015c9c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8015c9c:	b480      	push	{r7}
 8015c9e:	b083      	sub	sp, #12
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8015ca4:	bf00      	nop
 8015ca6:	370c      	adds	r7, #12
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cae:	4770      	bx	lr

08015cb0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8015cb0:	b480      	push	{r7}
 8015cb2:	b083      	sub	sp, #12
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8015cb8:	bf00      	nop
 8015cba:	370c      	adds	r7, #12
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc2:	4770      	bx	lr

08015cc4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8015cc4:	b5b0      	push	{r4, r5, r7, lr}
 8015cc6:	b090      	sub	sp, #64	@ 0x40
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	60f8      	str	r0, [r7, #12]
 8015ccc:	60b9      	str	r1, [r7, #8]
 8015cce:	4613      	mov	r3, r2
 8015cd0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d101      	bne.n	8015cdc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8015cd8:	2302      	movs	r3, #2
 8015cda:	e04d      	b.n	8015d78 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	79fa      	ldrb	r2, [r7, #7]
 8015ce0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8015cf4:	68f8      	ldr	r0, [r7, #12]
 8015cf6:	f000 f847 	bl	8015d88 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	2200      	movs	r2, #0
 8015d06:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	2200      	movs	r2, #0
 8015d16:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d003      	beq.n	8015d28 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	68ba      	ldr	r2, [r7, #8]
 8015d24:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8015d28:	4b15      	ldr	r3, [pc, #84]	@ (8015d80 <USBH_Init+0xbc>)
 8015d2a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8015d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8015d34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015d38:	2100      	movs	r1, #0
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	f002 f8e8 	bl	8017f10 <osMessageCreate>
 8015d40:	4602      	mov	r2, r0
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8015d48:	4b0e      	ldr	r3, [pc, #56]	@ (8015d84 <USBH_Init+0xc0>)
 8015d4a:	f107 0414 	add.w	r4, r7, #20
 8015d4e:	461d      	mov	r5, r3
 8015d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015d58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8015d5c:	f107 0314 	add.w	r3, r7, #20
 8015d60:	68f9      	ldr	r1, [r7, #12]
 8015d62:	4618      	mov	r0, r3
 8015d64:	f001 ff07 	bl	8017b76 <osThreadCreate>
 8015d68:	4602      	mov	r2, r0
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8015d70:	68f8      	ldr	r0, [r7, #12]
 8015d72:	f00f fd85 	bl	8025880 <USBH_LL_Init>

  return USBH_OK;
 8015d76:	2300      	movs	r3, #0
}
 8015d78:	4618      	mov	r0, r3
 8015d7a:	3740      	adds	r7, #64	@ 0x40
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8015d80:	08028c24 	.word	0x08028c24
 8015d84:	08028c40 	.word	0x08028c40

08015d88 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b084      	sub	sp, #16
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8015d90:	2300      	movs	r3, #0
 8015d92:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015d94:	2300      	movs	r3, #0
 8015d96:	60fb      	str	r3, [r7, #12]
 8015d98:	e009      	b.n	8015dae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8015d9a:	687a      	ldr	r2, [r7, #4]
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	33e0      	adds	r3, #224	@ 0xe0
 8015da0:	009b      	lsls	r3, r3, #2
 8015da2:	4413      	add	r3, r2
 8015da4:	2200      	movs	r2, #0
 8015da6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	3301      	adds	r3, #1
 8015dac:	60fb      	str	r3, [r7, #12]
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	2b0f      	cmp	r3, #15
 8015db2:	d9f2      	bls.n	8015d9a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015db4:	2300      	movs	r3, #0
 8015db6:	60fb      	str	r3, [r7, #12]
 8015db8:	e009      	b.n	8015dce <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8015dba:	687a      	ldr	r2, [r7, #4]
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	4413      	add	r3, r2
 8015dc0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	3301      	adds	r3, #1
 8015dcc:	60fb      	str	r3, [r7, #12]
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015dd4:	d3f1      	bcc.n	8015dba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	2200      	movs	r2, #0
 8015dda:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	2200      	movs	r2, #0
 8015de0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2201      	movs	r2, #1
 8015de6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2200      	movs	r2, #0
 8015dec:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2201      	movs	r2, #1
 8015df4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2240      	movs	r2, #64	@ 0x40
 8015dfa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2200      	movs	r2, #0
 8015e06:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	2201      	movs	r2, #1
 8015e0e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	2200      	movs	r2, #0
 8015e16:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	2200      	movs	r2, #0
 8015e1e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	331c      	adds	r3, #28
 8015e26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015e2a:	2100      	movs	r1, #0
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f010 fdd2 	bl	80269d6 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8015e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015e3c:	2100      	movs	r1, #0
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f010 fdc9 	bl	80269d6 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8015e4a:	2212      	movs	r2, #18
 8015e4c:	2100      	movs	r1, #0
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f010 fdc1 	bl	80269d6 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8015e5a:	223e      	movs	r2, #62	@ 0x3e
 8015e5c:	2100      	movs	r1, #0
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f010 fdb9 	bl	80269d6 <memset>

  return USBH_OK;
 8015e64:	2300      	movs	r3, #0
}
 8015e66:	4618      	mov	r0, r3
 8015e68:	3710      	adds	r7, #16
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	bd80      	pop	{r7, pc}

08015e6e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8015e6e:	b480      	push	{r7}
 8015e70:	b085      	sub	sp, #20
 8015e72:	af00      	add	r7, sp, #0
 8015e74:	6078      	str	r0, [r7, #4]
 8015e76:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8015e78:	2300      	movs	r3, #0
 8015e7a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d016      	beq.n	8015eb0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d10e      	bne.n	8015eaa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8015e92:	1c59      	adds	r1, r3, #1
 8015e94:	687a      	ldr	r2, [r7, #4]
 8015e96:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8015e9a:	687a      	ldr	r2, [r7, #4]
 8015e9c:	33de      	adds	r3, #222	@ 0xde
 8015e9e:	6839      	ldr	r1, [r7, #0]
 8015ea0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	73fb      	strb	r3, [r7, #15]
 8015ea8:	e004      	b.n	8015eb4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8015eaa:	2302      	movs	r3, #2
 8015eac:	73fb      	strb	r3, [r7, #15]
 8015eae:	e001      	b.n	8015eb4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8015eb0:	2302      	movs	r3, #2
 8015eb2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3714      	adds	r7, #20
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec0:	4770      	bx	lr

08015ec2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8015ec2:	b480      	push	{r7}
 8015ec4:	b085      	sub	sp, #20
 8015ec6:	af00      	add	r7, sp, #0
 8015ec8:	6078      	str	r0, [r7, #4]
 8015eca:	460b      	mov	r3, r1
 8015ecc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8015ed8:	78fa      	ldrb	r2, [r7, #3]
 8015eda:	429a      	cmp	r2, r3
 8015edc:	d204      	bcs.n	8015ee8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	78fa      	ldrb	r2, [r7, #3]
 8015ee2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8015ee6:	e001      	b.n	8015eec <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8015ee8:	2302      	movs	r3, #2
 8015eea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8015eee:	4618      	mov	r0, r3
 8015ef0:	3714      	adds	r7, #20
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef8:	4770      	bx	lr

08015efa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8015efa:	b480      	push	{r7}
 8015efc:	b087      	sub	sp, #28
 8015efe:	af00      	add	r7, sp, #0
 8015f00:	6078      	str	r0, [r7, #4]
 8015f02:	4608      	mov	r0, r1
 8015f04:	4611      	mov	r1, r2
 8015f06:	461a      	mov	r2, r3
 8015f08:	4603      	mov	r3, r0
 8015f0a:	70fb      	strb	r3, [r7, #3]
 8015f0c:	460b      	mov	r3, r1
 8015f0e:	70bb      	strb	r3, [r7, #2]
 8015f10:	4613      	mov	r3, r2
 8015f12:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8015f14:	2300      	movs	r3, #0
 8015f16:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8015f18:	2300      	movs	r3, #0
 8015f1a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8015f22:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015f24:	e025      	b.n	8015f72 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8015f26:	7dfb      	ldrb	r3, [r7, #23]
 8015f28:	221a      	movs	r2, #26
 8015f2a:	fb02 f303 	mul.w	r3, r2, r3
 8015f2e:	3308      	adds	r3, #8
 8015f30:	68fa      	ldr	r2, [r7, #12]
 8015f32:	4413      	add	r3, r2
 8015f34:	3302      	adds	r3, #2
 8015f36:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	795b      	ldrb	r3, [r3, #5]
 8015f3c:	78fa      	ldrb	r2, [r7, #3]
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d002      	beq.n	8015f48 <USBH_FindInterface+0x4e>
 8015f42:	78fb      	ldrb	r3, [r7, #3]
 8015f44:	2bff      	cmp	r3, #255	@ 0xff
 8015f46:	d111      	bne.n	8015f6c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015f48:	693b      	ldr	r3, [r7, #16]
 8015f4a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8015f4c:	78ba      	ldrb	r2, [r7, #2]
 8015f4e:	429a      	cmp	r2, r3
 8015f50:	d002      	beq.n	8015f58 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015f52:	78bb      	ldrb	r3, [r7, #2]
 8015f54:	2bff      	cmp	r3, #255	@ 0xff
 8015f56:	d109      	bne.n	8015f6c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015f58:	693b      	ldr	r3, [r7, #16]
 8015f5a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015f5c:	787a      	ldrb	r2, [r7, #1]
 8015f5e:	429a      	cmp	r2, r3
 8015f60:	d002      	beq.n	8015f68 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015f62:	787b      	ldrb	r3, [r7, #1]
 8015f64:	2bff      	cmp	r3, #255	@ 0xff
 8015f66:	d101      	bne.n	8015f6c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8015f68:	7dfb      	ldrb	r3, [r7, #23]
 8015f6a:	e006      	b.n	8015f7a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8015f6c:	7dfb      	ldrb	r3, [r7, #23]
 8015f6e:	3301      	adds	r3, #1
 8015f70:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015f72:	7dfb      	ldrb	r3, [r7, #23]
 8015f74:	2b01      	cmp	r3, #1
 8015f76:	d9d6      	bls.n	8015f26 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8015f78:	23ff      	movs	r3, #255	@ 0xff
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	371c      	adds	r7, #28
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f84:	4770      	bx	lr

08015f86 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b082      	sub	sp, #8
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	f00f fcb2 	bl	80258f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8015f94:	2101      	movs	r1, #1
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	f00f fdcb 	bl	8025b32 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8015f9c:	2300      	movs	r3, #0
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	3708      	adds	r7, #8
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd80      	pop	{r7, pc}
	...

08015fa8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b088      	sub	sp, #32
 8015fac:	af04      	add	r7, sp, #16
 8015fae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8015fb0:	2302      	movs	r3, #2
 8015fb2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8015fbe:	b2db      	uxtb	r3, r3
 8015fc0:	2b01      	cmp	r3, #1
 8015fc2:	d102      	bne.n	8015fca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	2203      	movs	r2, #3
 8015fc8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	781b      	ldrb	r3, [r3, #0]
 8015fce:	b2db      	uxtb	r3, r3
 8015fd0:	2b0b      	cmp	r3, #11
 8015fd2:	f200 8244 	bhi.w	801645e <USBH_Process+0x4b6>
 8015fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8015fdc <USBH_Process+0x34>)
 8015fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fdc:	0801600d 	.word	0x0801600d
 8015fe0:	0801605b 	.word	0x0801605b
 8015fe4:	080160df 	.word	0x080160df
 8015fe8:	080163dd 	.word	0x080163dd
 8015fec:	0801645f 	.word	0x0801645f
 8015ff0:	0801619b 	.word	0x0801619b
 8015ff4:	08016367 	.word	0x08016367
 8015ff8:	080161ed 	.word	0x080161ed
 8015ffc:	08016229 	.word	0x08016229
 8016000:	08016261 	.word	0x08016261
 8016004:	080162bf 	.word	0x080162bf
 8016008:	080163c5 	.word	0x080163c5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8016012:	b2db      	uxtb	r3, r3
 8016014:	2b00      	cmp	r3, #0
 8016016:	f000 8224 	beq.w	8016462 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	2201      	movs	r2, #1
 801601e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8016020:	20c8      	movs	r0, #200	@ 0xc8
 8016022:	f00f fdd0 	bl	8025bc6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8016026:	6878      	ldr	r0, [r7, #4]
 8016028:	f00f fcc3 	bl	80259b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2200      	movs	r2, #0
 8016030:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2200      	movs	r2, #0
 8016038:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	2201      	movs	r2, #1
 8016040:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8016050:	2200      	movs	r2, #0
 8016052:	4619      	mov	r1, r3
 8016054:	f001 ff84 	bl	8017f60 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8016058:	e203      	b.n	8016462 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8016060:	2b01      	cmp	r3, #1
 8016062:	d107      	bne.n	8016074 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	2200      	movs	r2, #0
 8016068:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	2202      	movs	r2, #2
 8016070:	701a      	strb	r2, [r3, #0]
 8016072:	e025      	b.n	80160c0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 801607a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801607e:	d914      	bls.n	80160aa <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8016086:	3301      	adds	r3, #1
 8016088:	b2da      	uxtb	r2, r3
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8016096:	2b03      	cmp	r3, #3
 8016098:	d903      	bls.n	80160a2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	220d      	movs	r2, #13
 801609e:	701a      	strb	r2, [r3, #0]
 80160a0:	e00e      	b.n	80160c0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	2200      	movs	r2, #0
 80160a6:	701a      	strb	r2, [r3, #0]
 80160a8:	e00a      	b.n	80160c0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80160b0:	f103 020a 	add.w	r2, r3, #10
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80160ba:	200a      	movs	r0, #10
 80160bc:	f00f fd83 	bl	8025bc6 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	2201      	movs	r2, #1
 80160c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80160d4:	2200      	movs	r2, #0
 80160d6:	4619      	mov	r1, r3
 80160d8:	f001 ff42 	bl	8017f60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80160dc:	e1c8      	b.n	8016470 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d005      	beq.n	80160f4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80160ee:	2104      	movs	r1, #4
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80160f4:	2064      	movs	r0, #100	@ 0x64
 80160f6:	f00f fd66 	bl	8025bc6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f00f fc32 	bl	8025964 <USBH_LL_GetSpeed>
 8016100:	4603      	mov	r3, r0
 8016102:	461a      	mov	r2, r3
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2205      	movs	r2, #5
 801610e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8016110:	2100      	movs	r1, #0
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	f001 fc8b 	bl	8017a2e <USBH_AllocPipe>
 8016118:	4603      	mov	r3, r0
 801611a:	461a      	mov	r2, r3
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8016120:	2180      	movs	r1, #128	@ 0x80
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f001 fc83 	bl	8017a2e <USBH_AllocPipe>
 8016128:	4603      	mov	r3, r0
 801612a:	461a      	mov	r2, r3
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	7919      	ldrb	r1, [r3, #4]
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8016140:	687a      	ldr	r2, [r7, #4]
 8016142:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8016144:	9202      	str	r2, [sp, #8]
 8016146:	2200      	movs	r2, #0
 8016148:	9201      	str	r2, [sp, #4]
 801614a:	9300      	str	r3, [sp, #0]
 801614c:	4603      	mov	r3, r0
 801614e:	2280      	movs	r2, #128	@ 0x80
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f001 fc3d 	bl	80179d0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	7959      	ldrb	r1, [r3, #5]
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8016166:	687a      	ldr	r2, [r7, #4]
 8016168:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801616a:	9202      	str	r2, [sp, #8]
 801616c:	2200      	movs	r2, #0
 801616e:	9201      	str	r2, [sp, #4]
 8016170:	9300      	str	r3, [sp, #0]
 8016172:	4603      	mov	r3, r0
 8016174:	2200      	movs	r2, #0
 8016176:	6878      	ldr	r0, [r7, #4]
 8016178:	f001 fc2a 	bl	80179d0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	2201      	movs	r2, #1
 8016180:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8016190:	2200      	movs	r2, #0
 8016192:	4619      	mov	r1, r3
 8016194:	f001 fee4 	bl	8017f60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016198:	e16a      	b.n	8016470 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	f000 f96e 	bl	801647c <USBH_HandleEnum>
 80161a0:	4603      	mov	r3, r0
 80161a2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80161a4:	7bbb      	ldrb	r3, [r7, #14]
 80161a6:	b2db      	uxtb	r3, r3
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	f040 815c 	bne.w	8016466 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	2200      	movs	r2, #0
 80161b2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80161bc:	2b01      	cmp	r3, #1
 80161be:	d103      	bne.n	80161c8 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	2208      	movs	r2, #8
 80161c4:	701a      	strb	r2, [r3, #0]
 80161c6:	e002      	b.n	80161ce <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	2207      	movs	r2, #7
 80161cc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	2205      	movs	r2, #5
 80161d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80161e2:	2200      	movs	r2, #0
 80161e4:	4619      	mov	r1, r3
 80161e6:	f001 febb 	bl	8017f60 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80161ea:	e13c      	b.n	8016466 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	f000 8139 	beq.w	801646a <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80161fe:	2101      	movs	r1, #1
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	2208      	movs	r2, #8
 8016208:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	2205      	movs	r2, #5
 801620e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801621e:	2200      	movs	r2, #0
 8016220:	4619      	mov	r1, r3
 8016222:	f001 fe9d 	bl	8017f60 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8016226:	e120      	b.n	801646a <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 801622e:	4619      	mov	r1, r3
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f000 fd10 	bl	8016c56 <USBH_SetCfg>
 8016236:	4603      	mov	r3, r0
 8016238:	2b00      	cmp	r3, #0
 801623a:	d102      	bne.n	8016242 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2209      	movs	r2, #9
 8016240:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	2201      	movs	r2, #1
 8016246:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8016256:	2200      	movs	r2, #0
 8016258:	4619      	mov	r1, r3
 801625a:	f001 fe81 	bl	8017f60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801625e:	e107      	b.n	8016470 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8016266:	f003 0320 	and.w	r3, r3, #32
 801626a:	2b00      	cmp	r3, #0
 801626c:	d015      	beq.n	801629a <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 801626e:	2101      	movs	r1, #1
 8016270:	6878      	ldr	r0, [r7, #4]
 8016272:	f000 fd13 	bl	8016c9c <USBH_SetFeature>
 8016276:	4603      	mov	r3, r0
 8016278:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801627a:	7bbb      	ldrb	r3, [r7, #14]
 801627c:	b2db      	uxtb	r3, r3
 801627e:	2b00      	cmp	r3, #0
 8016280:	d103      	bne.n	801628a <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	220a      	movs	r2, #10
 8016286:	701a      	strb	r2, [r3, #0]
 8016288:	e00a      	b.n	80162a0 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 801628a:	7bbb      	ldrb	r3, [r7, #14]
 801628c:	b2db      	uxtb	r3, r3
 801628e:	2b03      	cmp	r3, #3
 8016290:	d106      	bne.n	80162a0 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	220a      	movs	r2, #10
 8016296:	701a      	strb	r2, [r3, #0]
 8016298:	e002      	b.n	80162a0 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	220a      	movs	r2, #10
 801629e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2201      	movs	r2, #1
 80162a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80162b4:	2200      	movs	r2, #0
 80162b6:	4619      	mov	r1, r3
 80162b8:	f001 fe52 	bl	8017f60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80162bc:	e0d8      	b.n	8016470 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d03f      	beq.n	8016348 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	2200      	movs	r2, #0
 80162cc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80162d0:	2300      	movs	r3, #0
 80162d2:	73fb      	strb	r3, [r7, #15]
 80162d4:	e016      	b.n	8016304 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80162d6:	7bfa      	ldrb	r2, [r7, #15]
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	32de      	adds	r2, #222	@ 0xde
 80162dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162e0:	791a      	ldrb	r2, [r3, #4]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d108      	bne.n	80162fe <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 80162ec:	7bfa      	ldrb	r2, [r7, #15]
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	32de      	adds	r2, #222	@ 0xde
 80162f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80162fc:	e005      	b.n	801630a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80162fe:	7bfb      	ldrb	r3, [r7, #15]
 8016300:	3301      	adds	r3, #1
 8016302:	73fb      	strb	r3, [r7, #15]
 8016304:	7bfb      	ldrb	r3, [r7, #15]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d0e5      	beq.n	80162d6 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8016310:	2b00      	cmp	r3, #0
 8016312:	d016      	beq.n	8016342 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801631a:	689b      	ldr	r3, [r3, #8]
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	4798      	blx	r3
 8016320:	4603      	mov	r3, r0
 8016322:	2b00      	cmp	r3, #0
 8016324:	d109      	bne.n	801633a <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2206      	movs	r2, #6
 801632a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8016332:	2103      	movs	r1, #3
 8016334:	6878      	ldr	r0, [r7, #4]
 8016336:	4798      	blx	r3
 8016338:	e006      	b.n	8016348 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	220d      	movs	r2, #13
 801633e:	701a      	strb	r2, [r3, #0]
 8016340:	e002      	b.n	8016348 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	220d      	movs	r2, #13
 8016346:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2205      	movs	r2, #5
 801634c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801635c:	2200      	movs	r2, #0
 801635e:	4619      	mov	r1, r3
 8016360:	f001 fdfe 	bl	8017f60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016364:	e084      	b.n	8016470 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801636c:	2b00      	cmp	r3, #0
 801636e:	d017      	beq.n	80163a0 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8016376:	691b      	ldr	r3, [r3, #16]
 8016378:	6878      	ldr	r0, [r7, #4]
 801637a:	4798      	blx	r3
 801637c:	4603      	mov	r3, r0
 801637e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8016380:	7bbb      	ldrb	r3, [r7, #14]
 8016382:	b2db      	uxtb	r3, r3
 8016384:	2b00      	cmp	r3, #0
 8016386:	d103      	bne.n	8016390 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	220b      	movs	r2, #11
 801638c:	701a      	strb	r2, [r3, #0]
 801638e:	e00a      	b.n	80163a6 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8016390:	7bbb      	ldrb	r3, [r7, #14]
 8016392:	b2db      	uxtb	r3, r3
 8016394:	2b02      	cmp	r3, #2
 8016396:	d106      	bne.n	80163a6 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	220d      	movs	r2, #13
 801639c:	701a      	strb	r2, [r3, #0]
 801639e:	e002      	b.n	80163a6 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	220d      	movs	r2, #13
 80163a4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	2205      	movs	r2, #5
 80163aa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80163ba:	2200      	movs	r2, #0
 80163bc:	4619      	mov	r1, r3
 80163be:	f001 fdcf 	bl	8017f60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80163c2:	e055      	b.n	8016470 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d04f      	beq.n	801646e <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80163d4:	695b      	ldr	r3, [r3, #20]
 80163d6:	6878      	ldr	r0, [r7, #4]
 80163d8:	4798      	blx	r3
      }
      break;
 80163da:	e048      	b.n	801646e <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2200      	movs	r2, #0
 80163e0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f7ff fccf 	bl	8015d88 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d009      	beq.n	8016408 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80163fa:	68db      	ldr	r3, [r3, #12]
 80163fc:	6878      	ldr	r0, [r7, #4]
 80163fe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	2200      	movs	r2, #0
 8016404:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801640e:	2b00      	cmp	r3, #0
 8016410:	d005      	beq.n	801641e <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8016418:	2105      	movs	r1, #5
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8016424:	b2db      	uxtb	r3, r3
 8016426:	2b01      	cmp	r3, #1
 8016428:	d107      	bne.n	801643a <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	2200      	movs	r2, #0
 801642e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8016432:	6878      	ldr	r0, [r7, #4]
 8016434:	f7ff fda7 	bl	8015f86 <USBH_Start>
 8016438:	e002      	b.n	8016440 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	f00f fa5c 	bl	80258f8 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	2201      	movs	r2, #1
 8016444:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8016454:	2200      	movs	r2, #0
 8016456:	4619      	mov	r1, r3
 8016458:	f001 fd82 	bl	8017f60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801645c:	e008      	b.n	8016470 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 801645e:	bf00      	nop
 8016460:	e006      	b.n	8016470 <USBH_Process+0x4c8>
      break;
 8016462:	bf00      	nop
 8016464:	e004      	b.n	8016470 <USBH_Process+0x4c8>
      break;
 8016466:	bf00      	nop
 8016468:	e002      	b.n	8016470 <USBH_Process+0x4c8>
    break;
 801646a:	bf00      	nop
 801646c:	e000      	b.n	8016470 <USBH_Process+0x4c8>
      break;
 801646e:	bf00      	nop
  }
  return USBH_OK;
 8016470:	2300      	movs	r3, #0
}
 8016472:	4618      	mov	r0, r3
 8016474:	3710      	adds	r7, #16
 8016476:	46bd      	mov	sp, r7
 8016478:	bd80      	pop	{r7, pc}
 801647a:	bf00      	nop

0801647c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b088      	sub	sp, #32
 8016480:	af04      	add	r7, sp, #16
 8016482:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8016484:	2301      	movs	r3, #1
 8016486:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8016488:	2301      	movs	r3, #1
 801648a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	785b      	ldrb	r3, [r3, #1]
 8016490:	2b07      	cmp	r3, #7
 8016492:	f200 8204 	bhi.w	801689e <USBH_HandleEnum+0x422>
 8016496:	a201      	add	r2, pc, #4	@ (adr r2, 801649c <USBH_HandleEnum+0x20>)
 8016498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801649c:	080164bd 	.word	0x080164bd
 80164a0:	08016577 	.word	0x08016577
 80164a4:	080165e1 	.word	0x080165e1
 80164a8:	0801666b 	.word	0x0801666b
 80164ac:	080166d5 	.word	0x080166d5
 80164b0:	08016745 	.word	0x08016745
 80164b4:	080167e1 	.word	0x080167e1
 80164b8:	0801685f 	.word	0x0801685f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80164bc:	2108      	movs	r1, #8
 80164be:	6878      	ldr	r0, [r7, #4]
 80164c0:	f000 fae6 	bl	8016a90 <USBH_Get_DevDesc>
 80164c4:	4603      	mov	r3, r0
 80164c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80164c8:	7bbb      	ldrb	r3, [r7, #14]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d12e      	bne.n	801652c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2201      	movs	r2, #1
 80164dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	7919      	ldrb	r1, [r3, #4]
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80164ee:	687a      	ldr	r2, [r7, #4]
 80164f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80164f2:	9202      	str	r2, [sp, #8]
 80164f4:	2200      	movs	r2, #0
 80164f6:	9201      	str	r2, [sp, #4]
 80164f8:	9300      	str	r3, [sp, #0]
 80164fa:	4603      	mov	r3, r0
 80164fc:	2280      	movs	r2, #128	@ 0x80
 80164fe:	6878      	ldr	r0, [r7, #4]
 8016500:	f001 fa66 	bl	80179d0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	7959      	ldrb	r1, [r3, #5]
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8016514:	687a      	ldr	r2, [r7, #4]
 8016516:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8016518:	9202      	str	r2, [sp, #8]
 801651a:	2200      	movs	r2, #0
 801651c:	9201      	str	r2, [sp, #4]
 801651e:	9300      	str	r3, [sp, #0]
 8016520:	4603      	mov	r3, r0
 8016522:	2200      	movs	r2, #0
 8016524:	6878      	ldr	r0, [r7, #4]
 8016526:	f001 fa53 	bl	80179d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801652a:	e1ba      	b.n	80168a2 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801652c:	7bbb      	ldrb	r3, [r7, #14]
 801652e:	2b03      	cmp	r3, #3
 8016530:	f040 81b7 	bne.w	80168a2 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801653a:	3301      	adds	r3, #1
 801653c:	b2da      	uxtb	r2, r3
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801654a:	2b03      	cmp	r3, #3
 801654c:	d903      	bls.n	8016556 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	220d      	movs	r2, #13
 8016552:	701a      	strb	r2, [r3, #0]
      break;
 8016554:	e1a5      	b.n	80168a2 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	795b      	ldrb	r3, [r3, #5]
 801655a:	4619      	mov	r1, r3
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f001 fa87 	bl	8017a70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	791b      	ldrb	r3, [r3, #4]
 8016566:	4619      	mov	r1, r3
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f001 fa81 	bl	8017a70 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2200      	movs	r2, #0
 8016572:	701a      	strb	r2, [r3, #0]
      break;
 8016574:	e195      	b.n	80168a2 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8016576:	2112      	movs	r1, #18
 8016578:	6878      	ldr	r0, [r7, #4]
 801657a:	f000 fa89 	bl	8016a90 <USBH_Get_DevDesc>
 801657e:	4603      	mov	r3, r0
 8016580:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8016582:	7bbb      	ldrb	r3, [r7, #14]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d103      	bne.n	8016590 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	2202      	movs	r2, #2
 801658c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801658e:	e18a      	b.n	80168a6 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016590:	7bbb      	ldrb	r3, [r7, #14]
 8016592:	2b03      	cmp	r3, #3
 8016594:	f040 8187 	bne.w	80168a6 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801659e:	3301      	adds	r3, #1
 80165a0:	b2da      	uxtb	r2, r3
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80165ae:	2b03      	cmp	r3, #3
 80165b0:	d903      	bls.n	80165ba <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	220d      	movs	r2, #13
 80165b6:	701a      	strb	r2, [r3, #0]
      break;
 80165b8:	e175      	b.n	80168a6 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	795b      	ldrb	r3, [r3, #5]
 80165be:	4619      	mov	r1, r3
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f001 fa55 	bl	8017a70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	791b      	ldrb	r3, [r3, #4]
 80165ca:	4619      	mov	r1, r3
 80165cc:	6878      	ldr	r0, [r7, #4]
 80165ce:	f001 fa4f 	bl	8017a70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	2200      	movs	r2, #0
 80165d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2200      	movs	r2, #0
 80165dc:	701a      	strb	r2, [r3, #0]
      break;
 80165de:	e162      	b.n	80168a6 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80165e0:	2101      	movs	r1, #1
 80165e2:	6878      	ldr	r0, [r7, #4]
 80165e4:	f000 fb13 	bl	8016c0e <USBH_SetAddress>
 80165e8:	4603      	mov	r3, r0
 80165ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80165ec:	7bbb      	ldrb	r3, [r7, #14]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d130      	bne.n	8016654 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80165f2:	2002      	movs	r0, #2
 80165f4:	f00f fae7 	bl	8025bc6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2201      	movs	r2, #1
 80165fc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	2203      	movs	r2, #3
 8016604:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	7919      	ldrb	r1, [r3, #4]
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8016616:	687a      	ldr	r2, [r7, #4]
 8016618:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801661a:	9202      	str	r2, [sp, #8]
 801661c:	2200      	movs	r2, #0
 801661e:	9201      	str	r2, [sp, #4]
 8016620:	9300      	str	r3, [sp, #0]
 8016622:	4603      	mov	r3, r0
 8016624:	2280      	movs	r2, #128	@ 0x80
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f001 f9d2 	bl	80179d0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	7959      	ldrb	r1, [r3, #5]
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801663c:	687a      	ldr	r2, [r7, #4]
 801663e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8016640:	9202      	str	r2, [sp, #8]
 8016642:	2200      	movs	r2, #0
 8016644:	9201      	str	r2, [sp, #4]
 8016646:	9300      	str	r3, [sp, #0]
 8016648:	4603      	mov	r3, r0
 801664a:	2200      	movs	r2, #0
 801664c:	6878      	ldr	r0, [r7, #4]
 801664e:	f001 f9bf 	bl	80179d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8016652:	e12a      	b.n	80168aa <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016654:	7bbb      	ldrb	r3, [r7, #14]
 8016656:	2b03      	cmp	r3, #3
 8016658:	f040 8127 	bne.w	80168aa <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	220d      	movs	r2, #13
 8016660:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	2200      	movs	r2, #0
 8016666:	705a      	strb	r2, [r3, #1]
      break;
 8016668:	e11f      	b.n	80168aa <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801666a:	2109      	movs	r1, #9
 801666c:	6878      	ldr	r0, [r7, #4]
 801666e:	f000 fa3b 	bl	8016ae8 <USBH_Get_CfgDesc>
 8016672:	4603      	mov	r3, r0
 8016674:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8016676:	7bbb      	ldrb	r3, [r7, #14]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d103      	bne.n	8016684 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2204      	movs	r2, #4
 8016680:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8016682:	e114      	b.n	80168ae <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016684:	7bbb      	ldrb	r3, [r7, #14]
 8016686:	2b03      	cmp	r3, #3
 8016688:	f040 8111 	bne.w	80168ae <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8016692:	3301      	adds	r3, #1
 8016694:	b2da      	uxtb	r2, r3
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80166a2:	2b03      	cmp	r3, #3
 80166a4:	d903      	bls.n	80166ae <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	220d      	movs	r2, #13
 80166aa:	701a      	strb	r2, [r3, #0]
      break;
 80166ac:	e0ff      	b.n	80168ae <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	795b      	ldrb	r3, [r3, #5]
 80166b2:	4619      	mov	r1, r3
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	f001 f9db 	bl	8017a70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	791b      	ldrb	r3, [r3, #4]
 80166be:	4619      	mov	r1, r3
 80166c0:	6878      	ldr	r0, [r7, #4]
 80166c2:	f001 f9d5 	bl	8017a70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	2200      	movs	r2, #0
 80166ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	2200      	movs	r2, #0
 80166d0:	701a      	strb	r2, [r3, #0]
      break;
 80166d2:	e0ec      	b.n	80168ae <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80166da:	4619      	mov	r1, r3
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f000 fa03 	bl	8016ae8 <USBH_Get_CfgDesc>
 80166e2:	4603      	mov	r3, r0
 80166e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80166e6:	7bbb      	ldrb	r3, [r7, #14]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d103      	bne.n	80166f4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	2205      	movs	r2, #5
 80166f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80166f2:	e0de      	b.n	80168b2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80166f4:	7bbb      	ldrb	r3, [r7, #14]
 80166f6:	2b03      	cmp	r3, #3
 80166f8:	f040 80db 	bne.w	80168b2 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8016702:	3301      	adds	r3, #1
 8016704:	b2da      	uxtb	r2, r3
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8016712:	2b03      	cmp	r3, #3
 8016714:	d903      	bls.n	801671e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	220d      	movs	r2, #13
 801671a:	701a      	strb	r2, [r3, #0]
      break;
 801671c:	e0c9      	b.n	80168b2 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	795b      	ldrb	r3, [r3, #5]
 8016722:	4619      	mov	r1, r3
 8016724:	6878      	ldr	r0, [r7, #4]
 8016726:	f001 f9a3 	bl	8017a70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	791b      	ldrb	r3, [r3, #4]
 801672e:	4619      	mov	r1, r3
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f001 f99d 	bl	8017a70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	2200      	movs	r2, #0
 801673a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	2200      	movs	r2, #0
 8016740:	701a      	strb	r2, [r3, #0]
      break;
 8016742:	e0b6      	b.n	80168b2 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 801674a:	2b00      	cmp	r3, #0
 801674c:	d036      	beq.n	80167bc <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801675a:	23ff      	movs	r3, #255	@ 0xff
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f000 f9ed 	bl	8016b3c <USBH_Get_StringDesc>
 8016762:	4603      	mov	r3, r0
 8016764:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016766:	7bbb      	ldrb	r3, [r7, #14]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d111      	bne.n	8016790 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2206      	movs	r2, #6
 8016770:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	2205      	movs	r2, #5
 8016776:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8016786:	2200      	movs	r2, #0
 8016788:	4619      	mov	r1, r3
 801678a:	f001 fbe9 	bl	8017f60 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801678e:	e092      	b.n	80168b6 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016790:	7bbb      	ldrb	r3, [r7, #14]
 8016792:	2b03      	cmp	r3, #3
 8016794:	f040 808f 	bne.w	80168b6 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	2206      	movs	r2, #6
 801679c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	2205      	movs	r2, #5
 80167a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80167b2:	2200      	movs	r2, #0
 80167b4:	4619      	mov	r1, r3
 80167b6:	f001 fbd3 	bl	8017f60 <osMessagePut>
      break;
 80167ba:	e07c      	b.n	80168b6 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2206      	movs	r2, #6
 80167c0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	2205      	movs	r2, #5
 80167c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80167d6:	2200      	movs	r2, #0
 80167d8:	4619      	mov	r1, r3
 80167da:	f001 fbc1 	bl	8017f60 <osMessagePut>
      break;
 80167de:	e06a      	b.n	80168b6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d027      	beq.n	801683a <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80167f6:	23ff      	movs	r3, #255	@ 0xff
 80167f8:	6878      	ldr	r0, [r7, #4]
 80167fa:	f000 f99f 	bl	8016b3c <USBH_Get_StringDesc>
 80167fe:	4603      	mov	r3, r0
 8016800:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016802:	7bbb      	ldrb	r3, [r7, #14]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d103      	bne.n	8016810 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	2207      	movs	r2, #7
 801680c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801680e:	e054      	b.n	80168ba <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016810:	7bbb      	ldrb	r3, [r7, #14]
 8016812:	2b03      	cmp	r3, #3
 8016814:	d151      	bne.n	80168ba <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	2207      	movs	r2, #7
 801681a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2205      	movs	r2, #5
 8016820:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8016830:	2200      	movs	r2, #0
 8016832:	4619      	mov	r1, r3
 8016834:	f001 fb94 	bl	8017f60 <osMessagePut>
      break;
 8016838:	e03f      	b.n	80168ba <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2207      	movs	r2, #7
 801683e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	2205      	movs	r2, #5
 8016844:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8016854:	2200      	movs	r2, #0
 8016856:	4619      	mov	r1, r3
 8016858:	f001 fb82 	bl	8017f60 <osMessagePut>
      break;
 801685c:	e02d      	b.n	80168ba <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8016864:	2b00      	cmp	r3, #0
 8016866:	d017      	beq.n	8016898 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8016874:	23ff      	movs	r3, #255	@ 0xff
 8016876:	6878      	ldr	r0, [r7, #4]
 8016878:	f000 f960 	bl	8016b3c <USBH_Get_StringDesc>
 801687c:	4603      	mov	r3, r0
 801687e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016880:	7bbb      	ldrb	r3, [r7, #14]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d102      	bne.n	801688c <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8016886:	2300      	movs	r3, #0
 8016888:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801688a:	e018      	b.n	80168be <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801688c:	7bbb      	ldrb	r3, [r7, #14]
 801688e:	2b03      	cmp	r3, #3
 8016890:	d115      	bne.n	80168be <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8016892:	2300      	movs	r3, #0
 8016894:	73fb      	strb	r3, [r7, #15]
      break;
 8016896:	e012      	b.n	80168be <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8016898:	2300      	movs	r3, #0
 801689a:	73fb      	strb	r3, [r7, #15]
      break;
 801689c:	e00f      	b.n	80168be <USBH_HandleEnum+0x442>

    default:
      break;
 801689e:	bf00      	nop
 80168a0:	e00e      	b.n	80168c0 <USBH_HandleEnum+0x444>
      break;
 80168a2:	bf00      	nop
 80168a4:	e00c      	b.n	80168c0 <USBH_HandleEnum+0x444>
      break;
 80168a6:	bf00      	nop
 80168a8:	e00a      	b.n	80168c0 <USBH_HandleEnum+0x444>
      break;
 80168aa:	bf00      	nop
 80168ac:	e008      	b.n	80168c0 <USBH_HandleEnum+0x444>
      break;
 80168ae:	bf00      	nop
 80168b0:	e006      	b.n	80168c0 <USBH_HandleEnum+0x444>
      break;
 80168b2:	bf00      	nop
 80168b4:	e004      	b.n	80168c0 <USBH_HandleEnum+0x444>
      break;
 80168b6:	bf00      	nop
 80168b8:	e002      	b.n	80168c0 <USBH_HandleEnum+0x444>
      break;
 80168ba:	bf00      	nop
 80168bc:	e000      	b.n	80168c0 <USBH_HandleEnum+0x444>
      break;
 80168be:	bf00      	nop
  }
  return Status;
 80168c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3710      	adds	r7, #16
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop

080168cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80168cc:	b480      	push	{r7}
 80168ce:	b083      	sub	sp, #12
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
 80168d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	683a      	ldr	r2, [r7, #0]
 80168da:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80168de:	bf00      	nop
 80168e0:	370c      	adds	r7, #12
 80168e2:	46bd      	mov	sp, r7
 80168e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e8:	4770      	bx	lr

080168ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80168ea:	b580      	push	{r7, lr}
 80168ec:	b082      	sub	sp, #8
 80168ee:	af00      	add	r7, sp, #0
 80168f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80168f8:	1c5a      	adds	r2, r3, #1
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8016900:	6878      	ldr	r0, [r7, #4]
 8016902:	f000 f804 	bl	801690e <USBH_HandleSof>
}
 8016906:	bf00      	nop
 8016908:	3708      	adds	r7, #8
 801690a:	46bd      	mov	sp, r7
 801690c:	bd80      	pop	{r7, pc}

0801690e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801690e:	b580      	push	{r7, lr}
 8016910:	b082      	sub	sp, #8
 8016912:	af00      	add	r7, sp, #0
 8016914:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	781b      	ldrb	r3, [r3, #0]
 801691a:	b2db      	uxtb	r3, r3
 801691c:	2b0b      	cmp	r3, #11
 801691e:	d10a      	bne.n	8016936 <USBH_HandleSof+0x28>
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8016926:	2b00      	cmp	r3, #0
 8016928:	d005      	beq.n	8016936 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8016930:	699b      	ldr	r3, [r3, #24]
 8016932:	6878      	ldr	r0, [r7, #4]
 8016934:	4798      	blx	r3
  }
}
 8016936:	bf00      	nop
 8016938:	3708      	adds	r7, #8
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}

0801693e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801693e:	b580      	push	{r7, lr}
 8016940:	b082      	sub	sp, #8
 8016942:	af00      	add	r7, sp, #0
 8016944:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	2201      	movs	r2, #1
 801694a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	2201      	movs	r2, #1
 8016952:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8016962:	2200      	movs	r2, #0
 8016964:	4619      	mov	r1, r3
 8016966:	f001 fafb 	bl	8017f60 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 801696a:	bf00      	nop
}
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}

08016972 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8016972:	b480      	push	{r7}
 8016974:	b083      	sub	sp, #12
 8016976:	af00      	add	r7, sp, #0
 8016978:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	2200      	movs	r2, #0
 801697e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8016982:	bf00      	nop
}
 8016984:	370c      	adds	r7, #12
 8016986:	46bd      	mov	sp, r7
 8016988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698c:	4770      	bx	lr

0801698e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801698e:	b580      	push	{r7, lr}
 8016990:	b082      	sub	sp, #8
 8016992:	af00      	add	r7, sp, #0
 8016994:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	2201      	movs	r2, #1
 801699a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	2200      	movs	r2, #0
 80169a2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	2200      	movs	r2, #0
 80169aa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	2201      	movs	r2, #1
 80169b2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80169c2:	2200      	movs	r2, #0
 80169c4:	4619      	mov	r1, r3
 80169c6:	f001 facb 	bl	8017f60 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80169ca:	2300      	movs	r3, #0
}
 80169cc:	4618      	mov	r0, r3
 80169ce:	3708      	adds	r7, #8
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}

080169d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b082      	sub	sp, #8
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	2201      	movs	r2, #1
 80169e0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	2200      	movs	r2, #0
 80169e8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	2200      	movs	r2, #0
 80169f0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80169f4:	6878      	ldr	r0, [r7, #4]
 80169f6:	f00e ff9a 	bl	802592e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	791b      	ldrb	r3, [r3, #4]
 80169fe:	4619      	mov	r1, r3
 8016a00:	6878      	ldr	r0, [r7, #4]
 8016a02:	f001 f835 	bl	8017a70 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	795b      	ldrb	r3, [r3, #5]
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f001 f82f 	bl	8017a70 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	2201      	movs	r2, #1
 8016a16:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8016a26:	2200      	movs	r2, #0
 8016a28:	4619      	mov	r1, r3
 8016a2a:	f001 fa99 	bl	8017f60 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8016a2e:	2300      	movs	r3, #0
}
 8016a30:	4618      	mov	r0, r3
 8016a32:	3708      	adds	r7, #8
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}

08016a38 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b086      	sub	sp, #24
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8016a46:	f107 030c 	add.w	r3, r7, #12
 8016a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f001 fac6 	bl	8017fe0 <osMessageGet>
    if (event.status == osEventMessage)
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	2b10      	cmp	r3, #16
 8016a58:	d1f2      	bne.n	8016a40 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8016a5a:	6878      	ldr	r0, [r7, #4]
 8016a5c:	f7ff faa4 	bl	8015fa8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8016a60:	e7ee      	b.n	8016a40 <USBH_Process_OS+0x8>

08016a62 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8016a62:	b580      	push	{r7, lr}
 8016a64:	b082      	sub	sp, #8
 8016a66:	af00      	add	r7, sp, #0
 8016a68:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	2201      	movs	r2, #1
 8016a6e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8016a7e:	2200      	movs	r2, #0
 8016a80:	4619      	mov	r1, r3
 8016a82:	f001 fa6d 	bl	8017f60 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8016a86:	2300      	movs	r3, #0
}
 8016a88:	4618      	mov	r0, r3
 8016a8a:	3708      	adds	r7, #8
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}

08016a90 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b086      	sub	sp, #24
 8016a94:	af02      	add	r7, sp, #8
 8016a96:	6078      	str	r0, [r7, #4]
 8016a98:	460b      	mov	r3, r1
 8016a9a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8016a9c:	887b      	ldrh	r3, [r7, #2]
 8016a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016aa2:	d901      	bls.n	8016aa8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016aa4:	2303      	movs	r3, #3
 8016aa6:	e01b      	b.n	8016ae0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8016aae:	887b      	ldrh	r3, [r7, #2]
 8016ab0:	9300      	str	r3, [sp, #0]
 8016ab2:	4613      	mov	r3, r2
 8016ab4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016ab8:	2100      	movs	r1, #0
 8016aba:	6878      	ldr	r0, [r7, #4]
 8016abc:	f000 f872 	bl	8016ba4 <USBH_GetDescriptor>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8016ac4:	7bfb      	ldrb	r3, [r7, #15]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d109      	bne.n	8016ade <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8016ad0:	887a      	ldrh	r2, [r7, #2]
 8016ad2:	4619      	mov	r1, r3
 8016ad4:	6878      	ldr	r0, [r7, #4]
 8016ad6:	f000 f929 	bl	8016d2c <USBH_ParseDevDesc>
 8016ada:	4603      	mov	r3, r0
 8016adc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	3710      	adds	r7, #16
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}

08016ae8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b086      	sub	sp, #24
 8016aec:	af02      	add	r7, sp, #8
 8016aee:	6078      	str	r0, [r7, #4]
 8016af0:	460b      	mov	r3, r1
 8016af2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	331c      	adds	r3, #28
 8016af8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8016afa:	887b      	ldrh	r3, [r7, #2]
 8016afc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016b00:	d901      	bls.n	8016b06 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016b02:	2303      	movs	r3, #3
 8016b04:	e016      	b.n	8016b34 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8016b06:	887b      	ldrh	r3, [r7, #2]
 8016b08:	9300      	str	r3, [sp, #0]
 8016b0a:	68bb      	ldr	r3, [r7, #8]
 8016b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016b10:	2100      	movs	r1, #0
 8016b12:	6878      	ldr	r0, [r7, #4]
 8016b14:	f000 f846 	bl	8016ba4 <USBH_GetDescriptor>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8016b1c:	7bfb      	ldrb	r3, [r7, #15]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d107      	bne.n	8016b32 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8016b22:	887b      	ldrh	r3, [r7, #2]
 8016b24:	461a      	mov	r2, r3
 8016b26:	68b9      	ldr	r1, [r7, #8]
 8016b28:	6878      	ldr	r0, [r7, #4]
 8016b2a:	f000 f9af 	bl	8016e8c <USBH_ParseCfgDesc>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b34:	4618      	mov	r0, r3
 8016b36:	3710      	adds	r7, #16
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}

08016b3c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b088      	sub	sp, #32
 8016b40:	af02      	add	r7, sp, #8
 8016b42:	60f8      	str	r0, [r7, #12]
 8016b44:	607a      	str	r2, [r7, #4]
 8016b46:	461a      	mov	r2, r3
 8016b48:	460b      	mov	r3, r1
 8016b4a:	72fb      	strb	r3, [r7, #11]
 8016b4c:	4613      	mov	r3, r2
 8016b4e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8016b50:	893b      	ldrh	r3, [r7, #8]
 8016b52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016b56:	d802      	bhi.n	8016b5e <USBH_Get_StringDesc+0x22>
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d101      	bne.n	8016b62 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016b5e:	2303      	movs	r3, #3
 8016b60:	e01c      	b.n	8016b9c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8016b62:	7afb      	ldrb	r3, [r7, #11]
 8016b64:	b29b      	uxth	r3, r3
 8016b66:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8016b6a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8016b72:	893b      	ldrh	r3, [r7, #8]
 8016b74:	9300      	str	r3, [sp, #0]
 8016b76:	460b      	mov	r3, r1
 8016b78:	2100      	movs	r1, #0
 8016b7a:	68f8      	ldr	r0, [r7, #12]
 8016b7c:	f000 f812 	bl	8016ba4 <USBH_GetDescriptor>
 8016b80:	4603      	mov	r3, r0
 8016b82:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8016b84:	7dfb      	ldrb	r3, [r7, #23]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d107      	bne.n	8016b9a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8016b90:	893a      	ldrh	r2, [r7, #8]
 8016b92:	6879      	ldr	r1, [r7, #4]
 8016b94:	4618      	mov	r0, r3
 8016b96:	f000 fb8d 	bl	80172b4 <USBH_ParseStringDesc>
  }

  return status;
 8016b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	3718      	adds	r7, #24
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}

08016ba4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b084      	sub	sp, #16
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	60f8      	str	r0, [r7, #12]
 8016bac:	607b      	str	r3, [r7, #4]
 8016bae:	460b      	mov	r3, r1
 8016bb0:	72fb      	strb	r3, [r7, #11]
 8016bb2:	4613      	mov	r3, r2
 8016bb4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	789b      	ldrb	r3, [r3, #2]
 8016bba:	2b01      	cmp	r3, #1
 8016bbc:	d11c      	bne.n	8016bf8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8016bbe:	7afb      	ldrb	r3, [r7, #11]
 8016bc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016bc4:	b2da      	uxtb	r2, r3
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	2206      	movs	r2, #6
 8016bce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	893a      	ldrh	r2, [r7, #8]
 8016bd4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8016bd6:	893b      	ldrh	r3, [r7, #8]
 8016bd8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8016bdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016be0:	d104      	bne.n	8016bec <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	f240 4209 	movw	r2, #1033	@ 0x409
 8016be8:	829a      	strh	r2, [r3, #20]
 8016bea:	e002      	b.n	8016bf2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	2200      	movs	r2, #0
 8016bf0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	8b3a      	ldrh	r2, [r7, #24]
 8016bf6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8016bf8:	8b3b      	ldrh	r3, [r7, #24]
 8016bfa:	461a      	mov	r2, r3
 8016bfc:	6879      	ldr	r1, [r7, #4]
 8016bfe:	68f8      	ldr	r0, [r7, #12]
 8016c00:	f000 fba5 	bl	801734e <USBH_CtlReq>
 8016c04:	4603      	mov	r3, r0
}
 8016c06:	4618      	mov	r0, r3
 8016c08:	3710      	adds	r7, #16
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}

08016c0e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8016c0e:	b580      	push	{r7, lr}
 8016c10:	b082      	sub	sp, #8
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	6078      	str	r0, [r7, #4]
 8016c16:	460b      	mov	r3, r1
 8016c18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	789b      	ldrb	r3, [r3, #2]
 8016c1e:	2b01      	cmp	r3, #1
 8016c20:	d10f      	bne.n	8016c42 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2200      	movs	r2, #0
 8016c26:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	2205      	movs	r2, #5
 8016c2c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8016c2e:	78fb      	ldrb	r3, [r7, #3]
 8016c30:	b29a      	uxth	r2, r3
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	2200      	movs	r2, #0
 8016c3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	2200      	movs	r2, #0
 8016c40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016c42:	2200      	movs	r2, #0
 8016c44:	2100      	movs	r1, #0
 8016c46:	6878      	ldr	r0, [r7, #4]
 8016c48:	f000 fb81 	bl	801734e <USBH_CtlReq>
 8016c4c:	4603      	mov	r3, r0
}
 8016c4e:	4618      	mov	r0, r3
 8016c50:	3708      	adds	r7, #8
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}

08016c56 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8016c56:	b580      	push	{r7, lr}
 8016c58:	b082      	sub	sp, #8
 8016c5a:	af00      	add	r7, sp, #0
 8016c5c:	6078      	str	r0, [r7, #4]
 8016c5e:	460b      	mov	r3, r1
 8016c60:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	789b      	ldrb	r3, [r3, #2]
 8016c66:	2b01      	cmp	r3, #1
 8016c68:	d10e      	bne.n	8016c88 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	2209      	movs	r2, #9
 8016c74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	887a      	ldrh	r2, [r7, #2]
 8016c7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	2200      	movs	r2, #0
 8016c80:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	2200      	movs	r2, #0
 8016c86:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016c88:	2200      	movs	r2, #0
 8016c8a:	2100      	movs	r1, #0
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	f000 fb5e 	bl	801734e <USBH_CtlReq>
 8016c92:	4603      	mov	r3, r0
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	3708      	adds	r7, #8
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	bd80      	pop	{r7, pc}

08016c9c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b082      	sub	sp, #8
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
 8016ca4:	460b      	mov	r3, r1
 8016ca6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	789b      	ldrb	r3, [r3, #2]
 8016cac:	2b01      	cmp	r3, #1
 8016cae:	d10f      	bne.n	8016cd0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	2203      	movs	r2, #3
 8016cba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8016cbc:	78fb      	ldrb	r3, [r7, #3]
 8016cbe:	b29a      	uxth	r2, r3
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	2200      	movs	r2, #0
 8016cce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	2100      	movs	r1, #0
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f000 fb3a 	bl	801734e <USBH_CtlReq>
 8016cda:	4603      	mov	r3, r0
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}

08016ce4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b082      	sub	sp, #8
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
 8016cec:	460b      	mov	r3, r1
 8016cee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	789b      	ldrb	r3, [r3, #2]
 8016cf4:	2b01      	cmp	r3, #1
 8016cf6:	d10f      	bne.n	8016d18 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	2202      	movs	r2, #2
 8016cfc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	2201      	movs	r2, #1
 8016d02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2200      	movs	r2, #0
 8016d08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8016d0a:	78fb      	ldrb	r3, [r7, #3]
 8016d0c:	b29a      	uxth	r2, r3
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	2200      	movs	r2, #0
 8016d16:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016d18:	2200      	movs	r2, #0
 8016d1a:	2100      	movs	r1, #0
 8016d1c:	6878      	ldr	r0, [r7, #4]
 8016d1e:	f000 fb16 	bl	801734e <USBH_CtlReq>
 8016d22:	4603      	mov	r3, r0
}
 8016d24:	4618      	mov	r0, r3
 8016d26:	3708      	adds	r7, #8
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd80      	pop	{r7, pc}

08016d2c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016d2c:	b480      	push	{r7}
 8016d2e:	b087      	sub	sp, #28
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	60f8      	str	r0, [r7, #12]
 8016d34:	60b9      	str	r1, [r7, #8]
 8016d36:	4613      	mov	r3, r2
 8016d38:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8016d40:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8016d42:	2300      	movs	r3, #0
 8016d44:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8016d46:	68bb      	ldr	r3, [r7, #8]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d101      	bne.n	8016d50 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8016d4c:	2302      	movs	r3, #2
 8016d4e:	e094      	b.n	8016e7a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8016d50:	68bb      	ldr	r3, [r7, #8]
 8016d52:	781a      	ldrb	r2, [r3, #0]
 8016d54:	693b      	ldr	r3, [r7, #16]
 8016d56:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8016d58:	68bb      	ldr	r3, [r7, #8]
 8016d5a:	785a      	ldrb	r2, [r3, #1]
 8016d5c:	693b      	ldr	r3, [r7, #16]
 8016d5e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8016d60:	68bb      	ldr	r3, [r7, #8]
 8016d62:	3302      	adds	r3, #2
 8016d64:	781b      	ldrb	r3, [r3, #0]
 8016d66:	461a      	mov	r2, r3
 8016d68:	68bb      	ldr	r3, [r7, #8]
 8016d6a:	3303      	adds	r3, #3
 8016d6c:	781b      	ldrb	r3, [r3, #0]
 8016d6e:	021b      	lsls	r3, r3, #8
 8016d70:	b29b      	uxth	r3, r3
 8016d72:	4313      	orrs	r3, r2
 8016d74:	b29a      	uxth	r2, r3
 8016d76:	693b      	ldr	r3, [r7, #16]
 8016d78:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8016d7a:	68bb      	ldr	r3, [r7, #8]
 8016d7c:	791a      	ldrb	r2, [r3, #4]
 8016d7e:	693b      	ldr	r3, [r7, #16]
 8016d80:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8016d82:	68bb      	ldr	r3, [r7, #8]
 8016d84:	795a      	ldrb	r2, [r3, #5]
 8016d86:	693b      	ldr	r3, [r7, #16]
 8016d88:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8016d8a:	68bb      	ldr	r3, [r7, #8]
 8016d8c:	799a      	ldrb	r2, [r3, #6]
 8016d8e:	693b      	ldr	r3, [r7, #16]
 8016d90:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8016d92:	68bb      	ldr	r3, [r7, #8]
 8016d94:	79da      	ldrb	r2, [r3, #7]
 8016d96:	693b      	ldr	r3, [r7, #16]
 8016d98:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d004      	beq.n	8016dae <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016daa:	2b01      	cmp	r3, #1
 8016dac:	d11b      	bne.n	8016de6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	79db      	ldrb	r3, [r3, #7]
 8016db2:	2b20      	cmp	r3, #32
 8016db4:	dc0f      	bgt.n	8016dd6 <USBH_ParseDevDesc+0xaa>
 8016db6:	2b08      	cmp	r3, #8
 8016db8:	db0f      	blt.n	8016dda <USBH_ParseDevDesc+0xae>
 8016dba:	3b08      	subs	r3, #8
 8016dbc:	4a32      	ldr	r2, [pc, #200]	@ (8016e88 <USBH_ParseDevDesc+0x15c>)
 8016dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8016dc2:	f003 0301 	and.w	r3, r3, #1
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	bf14      	ite	ne
 8016dca:	2301      	movne	r3, #1
 8016dcc:	2300      	moveq	r3, #0
 8016dce:	b2db      	uxtb	r3, r3
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d106      	bne.n	8016de2 <USBH_ParseDevDesc+0xb6>
 8016dd4:	e001      	b.n	8016dda <USBH_ParseDevDesc+0xae>
 8016dd6:	2b40      	cmp	r3, #64	@ 0x40
 8016dd8:	d003      	beq.n	8016de2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8016dda:	693b      	ldr	r3, [r7, #16]
 8016ddc:	2208      	movs	r2, #8
 8016dde:	71da      	strb	r2, [r3, #7]
        break;
 8016de0:	e000      	b.n	8016de4 <USBH_ParseDevDesc+0xb8>
        break;
 8016de2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8016de4:	e00e      	b.n	8016e04 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8016dec:	2b02      	cmp	r3, #2
 8016dee:	d107      	bne.n	8016e00 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	79db      	ldrb	r3, [r3, #7]
 8016df4:	2b08      	cmp	r3, #8
 8016df6:	d005      	beq.n	8016e04 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8016df8:	693b      	ldr	r3, [r7, #16]
 8016dfa:	2208      	movs	r2, #8
 8016dfc:	71da      	strb	r2, [r3, #7]
 8016dfe:	e001      	b.n	8016e04 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8016e00:	2303      	movs	r3, #3
 8016e02:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8016e04:	88fb      	ldrh	r3, [r7, #6]
 8016e06:	2b08      	cmp	r3, #8
 8016e08:	d936      	bls.n	8016e78 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8016e0a:	68bb      	ldr	r3, [r7, #8]
 8016e0c:	3308      	adds	r3, #8
 8016e0e:	781b      	ldrb	r3, [r3, #0]
 8016e10:	461a      	mov	r2, r3
 8016e12:	68bb      	ldr	r3, [r7, #8]
 8016e14:	3309      	adds	r3, #9
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	021b      	lsls	r3, r3, #8
 8016e1a:	b29b      	uxth	r3, r3
 8016e1c:	4313      	orrs	r3, r2
 8016e1e:	b29a      	uxth	r2, r3
 8016e20:	693b      	ldr	r3, [r7, #16]
 8016e22:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8016e24:	68bb      	ldr	r3, [r7, #8]
 8016e26:	330a      	adds	r3, #10
 8016e28:	781b      	ldrb	r3, [r3, #0]
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	68bb      	ldr	r3, [r7, #8]
 8016e2e:	330b      	adds	r3, #11
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	021b      	lsls	r3, r3, #8
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	4313      	orrs	r3, r2
 8016e38:	b29a      	uxth	r2, r3
 8016e3a:	693b      	ldr	r3, [r7, #16]
 8016e3c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8016e3e:	68bb      	ldr	r3, [r7, #8]
 8016e40:	330c      	adds	r3, #12
 8016e42:	781b      	ldrb	r3, [r3, #0]
 8016e44:	461a      	mov	r2, r3
 8016e46:	68bb      	ldr	r3, [r7, #8]
 8016e48:	330d      	adds	r3, #13
 8016e4a:	781b      	ldrb	r3, [r3, #0]
 8016e4c:	021b      	lsls	r3, r3, #8
 8016e4e:	b29b      	uxth	r3, r3
 8016e50:	4313      	orrs	r3, r2
 8016e52:	b29a      	uxth	r2, r3
 8016e54:	693b      	ldr	r3, [r7, #16]
 8016e56:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	7b9a      	ldrb	r2, [r3, #14]
 8016e5c:	693b      	ldr	r3, [r7, #16]
 8016e5e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	7bda      	ldrb	r2, [r3, #15]
 8016e64:	693b      	ldr	r3, [r7, #16]
 8016e66:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8016e68:	68bb      	ldr	r3, [r7, #8]
 8016e6a:	7c1a      	ldrb	r2, [r3, #16]
 8016e6c:	693b      	ldr	r3, [r7, #16]
 8016e6e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	7c5a      	ldrb	r2, [r3, #17]
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8016e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	371c      	adds	r7, #28
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e84:	4770      	bx	lr
 8016e86:	bf00      	nop
 8016e88:	01000101 	.word	0x01000101

08016e8c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b08c      	sub	sp, #48	@ 0x30
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	60f8      	str	r0, [r7, #12]
 8016e94:	60b9      	str	r1, [r7, #8]
 8016e96:	4613      	mov	r3, r2
 8016e98:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8016ea0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d101      	bne.n	8016ebe <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8016eba:	2302      	movs	r3, #2
 8016ebc:	e0da      	b.n	8017074 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8016ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ec4:	781b      	ldrb	r3, [r3, #0]
 8016ec6:	2b09      	cmp	r3, #9
 8016ec8:	d002      	beq.n	8016ed0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8016eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ecc:	2209      	movs	r2, #9
 8016ece:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	781a      	ldrb	r2, [r3, #0]
 8016ed4:	6a3b      	ldr	r3, [r7, #32]
 8016ed6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8016ed8:	68bb      	ldr	r3, [r7, #8]
 8016eda:	785a      	ldrb	r2, [r3, #1]
 8016edc:	6a3b      	ldr	r3, [r7, #32]
 8016ede:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8016ee0:	68bb      	ldr	r3, [r7, #8]
 8016ee2:	3302      	adds	r3, #2
 8016ee4:	781b      	ldrb	r3, [r3, #0]
 8016ee6:	461a      	mov	r2, r3
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	3303      	adds	r3, #3
 8016eec:	781b      	ldrb	r3, [r3, #0]
 8016eee:	021b      	lsls	r3, r3, #8
 8016ef0:	b29b      	uxth	r3, r3
 8016ef2:	4313      	orrs	r3, r2
 8016ef4:	b29b      	uxth	r3, r3
 8016ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016efa:	bf28      	it	cs
 8016efc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8016f00:	b29a      	uxth	r2, r3
 8016f02:	6a3b      	ldr	r3, [r7, #32]
 8016f04:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8016f06:	68bb      	ldr	r3, [r7, #8]
 8016f08:	791a      	ldrb	r2, [r3, #4]
 8016f0a:	6a3b      	ldr	r3, [r7, #32]
 8016f0c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8016f0e:	68bb      	ldr	r3, [r7, #8]
 8016f10:	795a      	ldrb	r2, [r3, #5]
 8016f12:	6a3b      	ldr	r3, [r7, #32]
 8016f14:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8016f16:	68bb      	ldr	r3, [r7, #8]
 8016f18:	799a      	ldrb	r2, [r3, #6]
 8016f1a:	6a3b      	ldr	r3, [r7, #32]
 8016f1c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	79da      	ldrb	r2, [r3, #7]
 8016f22:	6a3b      	ldr	r3, [r7, #32]
 8016f24:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8016f26:	68bb      	ldr	r3, [r7, #8]
 8016f28:	7a1a      	ldrb	r2, [r3, #8]
 8016f2a:	6a3b      	ldr	r3, [r7, #32]
 8016f2c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8016f2e:	88fb      	ldrh	r3, [r7, #6]
 8016f30:	2b09      	cmp	r3, #9
 8016f32:	f240 809d 	bls.w	8017070 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8016f36:	2309      	movs	r3, #9
 8016f38:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016f3e:	e081      	b.n	8017044 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016f40:	f107 0316 	add.w	r3, r7, #22
 8016f44:	4619      	mov	r1, r3
 8016f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016f48:	f000 f9e7 	bl	801731a <USBH_GetNextDesc>
 8016f4c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8016f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f50:	785b      	ldrb	r3, [r3, #1]
 8016f52:	2b04      	cmp	r3, #4
 8016f54:	d176      	bne.n	8017044 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8016f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f58:	781b      	ldrb	r3, [r3, #0]
 8016f5a:	2b09      	cmp	r3, #9
 8016f5c:	d002      	beq.n	8016f64 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8016f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f60:	2209      	movs	r2, #9
 8016f62:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8016f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f68:	221a      	movs	r2, #26
 8016f6a:	fb02 f303 	mul.w	r3, r2, r3
 8016f6e:	3308      	adds	r3, #8
 8016f70:	6a3a      	ldr	r2, [r7, #32]
 8016f72:	4413      	add	r3, r2
 8016f74:	3302      	adds	r3, #2
 8016f76:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8016f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016f7a:	69f8      	ldr	r0, [r7, #28]
 8016f7c:	f000 f87e 	bl	801707c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8016f80:	2300      	movs	r3, #0
 8016f82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8016f86:	2300      	movs	r3, #0
 8016f88:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016f8a:	e043      	b.n	8017014 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016f8c:	f107 0316 	add.w	r3, r7, #22
 8016f90:	4619      	mov	r1, r3
 8016f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016f94:	f000 f9c1 	bl	801731a <USBH_GetNextDesc>
 8016f98:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f9c:	785b      	ldrb	r3, [r3, #1]
 8016f9e:	2b05      	cmp	r3, #5
 8016fa0:	d138      	bne.n	8017014 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8016fa2:	69fb      	ldr	r3, [r7, #28]
 8016fa4:	795b      	ldrb	r3, [r3, #5]
 8016fa6:	2b01      	cmp	r3, #1
 8016fa8:	d113      	bne.n	8016fd2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8016faa:	69fb      	ldr	r3, [r7, #28]
 8016fac:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8016fae:	2b02      	cmp	r3, #2
 8016fb0:	d003      	beq.n	8016fba <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8016fb2:	69fb      	ldr	r3, [r7, #28]
 8016fb4:	799b      	ldrb	r3, [r3, #6]
 8016fb6:	2b03      	cmp	r3, #3
 8016fb8:	d10b      	bne.n	8016fd2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016fba:	69fb      	ldr	r3, [r7, #28]
 8016fbc:	79db      	ldrb	r3, [r3, #7]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d10b      	bne.n	8016fda <USBH_ParseCfgDesc+0x14e>
 8016fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fc4:	781b      	ldrb	r3, [r3, #0]
 8016fc6:	2b09      	cmp	r3, #9
 8016fc8:	d007      	beq.n	8016fda <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8016fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fcc:	2209      	movs	r2, #9
 8016fce:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016fd0:	e003      	b.n	8016fda <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8016fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fd4:	2207      	movs	r2, #7
 8016fd6:	701a      	strb	r2, [r3, #0]
 8016fd8:	e000      	b.n	8016fdc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016fda:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8016fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016fe0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8016fe4:	3201      	adds	r2, #1
 8016fe6:	00d2      	lsls	r2, r2, #3
 8016fe8:	211a      	movs	r1, #26
 8016fea:	fb01 f303 	mul.w	r3, r1, r3
 8016fee:	4413      	add	r3, r2
 8016ff0:	3308      	adds	r3, #8
 8016ff2:	6a3a      	ldr	r2, [r7, #32]
 8016ff4:	4413      	add	r3, r2
 8016ff6:	3304      	adds	r3, #4
 8016ff8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8016ffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ffc:	69b9      	ldr	r1, [r7, #24]
 8016ffe:	68f8      	ldr	r0, [r7, #12]
 8017000:	f000 f870 	bl	80170e4 <USBH_ParseEPDesc>
 8017004:	4603      	mov	r3, r0
 8017006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 801700a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801700e:	3301      	adds	r3, #1
 8017010:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8017014:	69fb      	ldr	r3, [r7, #28]
 8017016:	791b      	ldrb	r3, [r3, #4]
 8017018:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801701c:	429a      	cmp	r2, r3
 801701e:	d204      	bcs.n	801702a <USBH_ParseCfgDesc+0x19e>
 8017020:	6a3b      	ldr	r3, [r7, #32]
 8017022:	885a      	ldrh	r2, [r3, #2]
 8017024:	8afb      	ldrh	r3, [r7, #22]
 8017026:	429a      	cmp	r2, r3
 8017028:	d8b0      	bhi.n	8016f8c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801702a:	69fb      	ldr	r3, [r7, #28]
 801702c:	791b      	ldrb	r3, [r3, #4]
 801702e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8017032:	429a      	cmp	r2, r3
 8017034:	d201      	bcs.n	801703a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8017036:	2303      	movs	r3, #3
 8017038:	e01c      	b.n	8017074 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 801703a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801703e:	3301      	adds	r3, #1
 8017040:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8017044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017048:	2b01      	cmp	r3, #1
 801704a:	d805      	bhi.n	8017058 <USBH_ParseCfgDesc+0x1cc>
 801704c:	6a3b      	ldr	r3, [r7, #32]
 801704e:	885a      	ldrh	r2, [r3, #2]
 8017050:	8afb      	ldrh	r3, [r7, #22]
 8017052:	429a      	cmp	r2, r3
 8017054:	f63f af74 	bhi.w	8016f40 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8017058:	6a3b      	ldr	r3, [r7, #32]
 801705a:	791b      	ldrb	r3, [r3, #4]
 801705c:	2b02      	cmp	r3, #2
 801705e:	bf28      	it	cs
 8017060:	2302      	movcs	r3, #2
 8017062:	b2db      	uxtb	r3, r3
 8017064:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017068:	429a      	cmp	r2, r3
 801706a:	d201      	bcs.n	8017070 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 801706c:	2303      	movs	r3, #3
 801706e:	e001      	b.n	8017074 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8017070:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8017074:	4618      	mov	r0, r3
 8017076:	3730      	adds	r7, #48	@ 0x30
 8017078:	46bd      	mov	sp, r7
 801707a:	bd80      	pop	{r7, pc}

0801707c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 801707c:	b480      	push	{r7}
 801707e:	b083      	sub	sp, #12
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
 8017084:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	781a      	ldrb	r2, [r3, #0]
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	785a      	ldrb	r2, [r3, #1]
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8017096:	683b      	ldr	r3, [r7, #0]
 8017098:	789a      	ldrb	r2, [r3, #2]
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 801709e:	683b      	ldr	r3, [r7, #0]
 80170a0:	78da      	ldrb	r2, [r3, #3]
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80170a6:	683b      	ldr	r3, [r7, #0]
 80170a8:	3304      	adds	r3, #4
 80170aa:	781b      	ldrb	r3, [r3, #0]
 80170ac:	2b02      	cmp	r3, #2
 80170ae:	bf28      	it	cs
 80170b0:	2302      	movcs	r3, #2
 80170b2:	b2da      	uxtb	r2, r3
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	795a      	ldrb	r2, [r3, #5]
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80170c0:	683b      	ldr	r3, [r7, #0]
 80170c2:	799a      	ldrb	r2, [r3, #6]
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80170c8:	683b      	ldr	r3, [r7, #0]
 80170ca:	79da      	ldrb	r2, [r3, #7]
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80170d0:	683b      	ldr	r3, [r7, #0]
 80170d2:	7a1a      	ldrb	r2, [r3, #8]
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	721a      	strb	r2, [r3, #8]
}
 80170d8:	bf00      	nop
 80170da:	370c      	adds	r7, #12
 80170dc:	46bd      	mov	sp, r7
 80170de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e2:	4770      	bx	lr

080170e4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80170e4:	b480      	push	{r7}
 80170e6:	b087      	sub	sp, #28
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	60f8      	str	r0, [r7, #12]
 80170ec:	60b9      	str	r1, [r7, #8]
 80170ee:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80170f0:	2300      	movs	r3, #0
 80170f2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	781a      	ldrb	r2, [r3, #0]
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	785a      	ldrb	r2, [r3, #1]
 8017100:	68bb      	ldr	r3, [r7, #8]
 8017102:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	789a      	ldrb	r2, [r3, #2]
 8017108:	68bb      	ldr	r3, [r7, #8]
 801710a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	78da      	ldrb	r2, [r3, #3]
 8017110:	68bb      	ldr	r3, [r7, #8]
 8017112:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	3304      	adds	r3, #4
 8017118:	781b      	ldrb	r3, [r3, #0]
 801711a:	461a      	mov	r2, r3
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	3305      	adds	r3, #5
 8017120:	781b      	ldrb	r3, [r3, #0]
 8017122:	021b      	lsls	r3, r3, #8
 8017124:	b29b      	uxth	r3, r3
 8017126:	4313      	orrs	r3, r2
 8017128:	b29a      	uxth	r2, r3
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	799a      	ldrb	r2, [r3, #6]
 8017132:	68bb      	ldr	r3, [r7, #8]
 8017134:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8017136:	68bb      	ldr	r3, [r7, #8]
 8017138:	889b      	ldrh	r3, [r3, #4]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d009      	beq.n	8017152 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 801713e:	68bb      	ldr	r3, [r7, #8]
 8017140:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8017142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017146:	d804      	bhi.n	8017152 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8017148:	68bb      	ldr	r3, [r7, #8]
 801714a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 801714c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017150:	d901      	bls.n	8017156 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8017152:	2303      	movs	r3, #3
 8017154:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801715c:	2b00      	cmp	r3, #0
 801715e:	d136      	bne.n	80171ce <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8017160:	68bb      	ldr	r3, [r7, #8]
 8017162:	78db      	ldrb	r3, [r3, #3]
 8017164:	f003 0303 	and.w	r3, r3, #3
 8017168:	2b02      	cmp	r3, #2
 801716a:	d108      	bne.n	801717e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	889b      	ldrh	r3, [r3, #4]
 8017170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017174:	f240 8097 	bls.w	80172a6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8017178:	2303      	movs	r3, #3
 801717a:	75fb      	strb	r3, [r7, #23]
 801717c:	e093      	b.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 801717e:	68bb      	ldr	r3, [r7, #8]
 8017180:	78db      	ldrb	r3, [r3, #3]
 8017182:	f003 0303 	and.w	r3, r3, #3
 8017186:	2b00      	cmp	r3, #0
 8017188:	d107      	bne.n	801719a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 801718a:	68bb      	ldr	r3, [r7, #8]
 801718c:	889b      	ldrh	r3, [r3, #4]
 801718e:	2b40      	cmp	r3, #64	@ 0x40
 8017190:	f240 8089 	bls.w	80172a6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8017194:	2303      	movs	r3, #3
 8017196:	75fb      	strb	r3, [r7, #23]
 8017198:	e085      	b.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	78db      	ldrb	r3, [r3, #3]
 801719e:	f003 0303 	and.w	r3, r3, #3
 80171a2:	2b01      	cmp	r3, #1
 80171a4:	d005      	beq.n	80171b2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80171a6:	68bb      	ldr	r3, [r7, #8]
 80171a8:	78db      	ldrb	r3, [r3, #3]
 80171aa:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80171ae:	2b03      	cmp	r3, #3
 80171b0:	d10a      	bne.n	80171c8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	799b      	ldrb	r3, [r3, #6]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d003      	beq.n	80171c2 <USBH_ParseEPDesc+0xde>
 80171ba:	68bb      	ldr	r3, [r7, #8]
 80171bc:	799b      	ldrb	r3, [r3, #6]
 80171be:	2b10      	cmp	r3, #16
 80171c0:	d970      	bls.n	80172a4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80171c2:	2303      	movs	r3, #3
 80171c4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80171c6:	e06d      	b.n	80172a4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80171c8:	2303      	movs	r3, #3
 80171ca:	75fb      	strb	r3, [r7, #23]
 80171cc:	e06b      	b.n	80172a6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80171d4:	2b01      	cmp	r3, #1
 80171d6:	d13c      	bne.n	8017252 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80171d8:	68bb      	ldr	r3, [r7, #8]
 80171da:	78db      	ldrb	r3, [r3, #3]
 80171dc:	f003 0303 	and.w	r3, r3, #3
 80171e0:	2b02      	cmp	r3, #2
 80171e2:	d005      	beq.n	80171f0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80171e4:	68bb      	ldr	r3, [r7, #8]
 80171e6:	78db      	ldrb	r3, [r3, #3]
 80171e8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d106      	bne.n	80171fe <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80171f0:	68bb      	ldr	r3, [r7, #8]
 80171f2:	889b      	ldrh	r3, [r3, #4]
 80171f4:	2b40      	cmp	r3, #64	@ 0x40
 80171f6:	d956      	bls.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80171f8:	2303      	movs	r3, #3
 80171fa:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80171fc:	e053      	b.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80171fe:	68bb      	ldr	r3, [r7, #8]
 8017200:	78db      	ldrb	r3, [r3, #3]
 8017202:	f003 0303 	and.w	r3, r3, #3
 8017206:	2b01      	cmp	r3, #1
 8017208:	d10e      	bne.n	8017228 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 801720a:	68bb      	ldr	r3, [r7, #8]
 801720c:	799b      	ldrb	r3, [r3, #6]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d007      	beq.n	8017222 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8017212:	68bb      	ldr	r3, [r7, #8]
 8017214:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8017216:	2b10      	cmp	r3, #16
 8017218:	d803      	bhi.n	8017222 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 801721a:	68bb      	ldr	r3, [r7, #8]
 801721c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 801721e:	2b40      	cmp	r3, #64	@ 0x40
 8017220:	d941      	bls.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8017222:	2303      	movs	r3, #3
 8017224:	75fb      	strb	r3, [r7, #23]
 8017226:	e03e      	b.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8017228:	68bb      	ldr	r3, [r7, #8]
 801722a:	78db      	ldrb	r3, [r3, #3]
 801722c:	f003 0303 	and.w	r3, r3, #3
 8017230:	2b03      	cmp	r3, #3
 8017232:	d10b      	bne.n	801724c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8017234:	68bb      	ldr	r3, [r7, #8]
 8017236:	799b      	ldrb	r3, [r3, #6]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d004      	beq.n	8017246 <USBH_ParseEPDesc+0x162>
 801723c:	68bb      	ldr	r3, [r7, #8]
 801723e:	889b      	ldrh	r3, [r3, #4]
 8017240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017244:	d32f      	bcc.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8017246:	2303      	movs	r3, #3
 8017248:	75fb      	strb	r3, [r7, #23]
 801724a:	e02c      	b.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801724c:	2303      	movs	r3, #3
 801724e:	75fb      	strb	r3, [r7, #23]
 8017250:	e029      	b.n	80172a6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8017258:	2b02      	cmp	r3, #2
 801725a:	d120      	bne.n	801729e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 801725c:	68bb      	ldr	r3, [r7, #8]
 801725e:	78db      	ldrb	r3, [r3, #3]
 8017260:	f003 0303 	and.w	r3, r3, #3
 8017264:	2b00      	cmp	r3, #0
 8017266:	d106      	bne.n	8017276 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8017268:	68bb      	ldr	r3, [r7, #8]
 801726a:	889b      	ldrh	r3, [r3, #4]
 801726c:	2b08      	cmp	r3, #8
 801726e:	d01a      	beq.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8017270:	2303      	movs	r3, #3
 8017272:	75fb      	strb	r3, [r7, #23]
 8017274:	e017      	b.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8017276:	68bb      	ldr	r3, [r7, #8]
 8017278:	78db      	ldrb	r3, [r3, #3]
 801727a:	f003 0303 	and.w	r3, r3, #3
 801727e:	2b03      	cmp	r3, #3
 8017280:	d10a      	bne.n	8017298 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	799b      	ldrb	r3, [r3, #6]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d003      	beq.n	8017292 <USBH_ParseEPDesc+0x1ae>
 801728a:	68bb      	ldr	r3, [r7, #8]
 801728c:	889b      	ldrh	r3, [r3, #4]
 801728e:	2b08      	cmp	r3, #8
 8017290:	d909      	bls.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8017292:	2303      	movs	r3, #3
 8017294:	75fb      	strb	r3, [r7, #23]
 8017296:	e006      	b.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8017298:	2303      	movs	r3, #3
 801729a:	75fb      	strb	r3, [r7, #23]
 801729c:	e003      	b.n	80172a6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 801729e:	2303      	movs	r3, #3
 80172a0:	75fb      	strb	r3, [r7, #23]
 80172a2:	e000      	b.n	80172a6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80172a4:	bf00      	nop
  }

  return status;
 80172a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	371c      	adds	r7, #28
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr

080172b4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80172b4:	b480      	push	{r7}
 80172b6:	b087      	sub	sp, #28
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	60f8      	str	r0, [r7, #12]
 80172bc:	60b9      	str	r1, [r7, #8]
 80172be:	4613      	mov	r3, r2
 80172c0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	3301      	adds	r3, #1
 80172c6:	781b      	ldrb	r3, [r3, #0]
 80172c8:	2b03      	cmp	r3, #3
 80172ca:	d120      	bne.n	801730e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	781b      	ldrb	r3, [r3, #0]
 80172d0:	1e9a      	subs	r2, r3, #2
 80172d2:	88fb      	ldrh	r3, [r7, #6]
 80172d4:	4293      	cmp	r3, r2
 80172d6:	bf28      	it	cs
 80172d8:	4613      	movcs	r3, r2
 80172da:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	3302      	adds	r3, #2
 80172e0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80172e2:	2300      	movs	r3, #0
 80172e4:	82fb      	strh	r3, [r7, #22]
 80172e6:	e00b      	b.n	8017300 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80172e8:	8afb      	ldrh	r3, [r7, #22]
 80172ea:	68fa      	ldr	r2, [r7, #12]
 80172ec:	4413      	add	r3, r2
 80172ee:	781a      	ldrb	r2, [r3, #0]
 80172f0:	68bb      	ldr	r3, [r7, #8]
 80172f2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	3301      	adds	r3, #1
 80172f8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80172fa:	8afb      	ldrh	r3, [r7, #22]
 80172fc:	3302      	adds	r3, #2
 80172fe:	82fb      	strh	r3, [r7, #22]
 8017300:	8afa      	ldrh	r2, [r7, #22]
 8017302:	8abb      	ldrh	r3, [r7, #20]
 8017304:	429a      	cmp	r2, r3
 8017306:	d3ef      	bcc.n	80172e8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	2200      	movs	r2, #0
 801730c:	701a      	strb	r2, [r3, #0]
  }
}
 801730e:	bf00      	nop
 8017310:	371c      	adds	r7, #28
 8017312:	46bd      	mov	sp, r7
 8017314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017318:	4770      	bx	lr

0801731a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801731a:	b480      	push	{r7}
 801731c:	b085      	sub	sp, #20
 801731e:	af00      	add	r7, sp, #0
 8017320:	6078      	str	r0, [r7, #4]
 8017322:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	881b      	ldrh	r3, [r3, #0]
 8017328:	687a      	ldr	r2, [r7, #4]
 801732a:	7812      	ldrb	r2, [r2, #0]
 801732c:	4413      	add	r3, r2
 801732e:	b29a      	uxth	r2, r3
 8017330:	683b      	ldr	r3, [r7, #0]
 8017332:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	781b      	ldrb	r3, [r3, #0]
 8017338:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	4413      	add	r3, r2
 801733e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8017340:	68fb      	ldr	r3, [r7, #12]
}
 8017342:	4618      	mov	r0, r3
 8017344:	3714      	adds	r7, #20
 8017346:	46bd      	mov	sp, r7
 8017348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734c:	4770      	bx	lr

0801734e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801734e:	b580      	push	{r7, lr}
 8017350:	b086      	sub	sp, #24
 8017352:	af00      	add	r7, sp, #0
 8017354:	60f8      	str	r0, [r7, #12]
 8017356:	60b9      	str	r1, [r7, #8]
 8017358:	4613      	mov	r3, r2
 801735a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801735c:	2301      	movs	r3, #1
 801735e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	789b      	ldrb	r3, [r3, #2]
 8017364:	2b01      	cmp	r3, #1
 8017366:	d002      	beq.n	801736e <USBH_CtlReq+0x20>
 8017368:	2b02      	cmp	r3, #2
 801736a:	d01d      	beq.n	80173a8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 801736c:	e043      	b.n	80173f6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	68ba      	ldr	r2, [r7, #8]
 8017372:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	88fa      	ldrh	r2, [r7, #6]
 8017378:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	2201      	movs	r2, #1
 801737e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	2202      	movs	r2, #2
 8017384:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8017386:	2301      	movs	r3, #1
 8017388:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	2203      	movs	r2, #3
 801738e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801739e:	2200      	movs	r2, #0
 80173a0:	4619      	mov	r1, r3
 80173a2:	f000 fddd 	bl	8017f60 <osMessagePut>
      break;
 80173a6:	e026      	b.n	80173f6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80173a8:	68f8      	ldr	r0, [r7, #12]
 80173aa:	f000 f829 	bl	8017400 <USBH_HandleControl>
 80173ae:	4603      	mov	r3, r0
 80173b0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80173b2:	7dfb      	ldrb	r3, [r7, #23]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d002      	beq.n	80173be <USBH_CtlReq+0x70>
 80173b8:	7dfb      	ldrb	r3, [r7, #23]
 80173ba:	2b03      	cmp	r3, #3
 80173bc:	d106      	bne.n	80173cc <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	2201      	movs	r2, #1
 80173c2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	2200      	movs	r2, #0
 80173c8:	761a      	strb	r2, [r3, #24]
 80173ca:	e005      	b.n	80173d8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80173cc:	7dfb      	ldrb	r3, [r7, #23]
 80173ce:	2b02      	cmp	r3, #2
 80173d0:	d102      	bne.n	80173d8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	2201      	movs	r2, #1
 80173d6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	2203      	movs	r2, #3
 80173dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80173ec:	2200      	movs	r2, #0
 80173ee:	4619      	mov	r1, r3
 80173f0:	f000 fdb6 	bl	8017f60 <osMessagePut>
      break;
 80173f4:	bf00      	nop
  }
  return status;
 80173f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80173f8:	4618      	mov	r0, r3
 80173fa:	3718      	adds	r7, #24
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bd80      	pop	{r7, pc}

08017400 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b086      	sub	sp, #24
 8017404:	af02      	add	r7, sp, #8
 8017406:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8017408:	2301      	movs	r3, #1
 801740a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801740c:	2300      	movs	r3, #0
 801740e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	7e1b      	ldrb	r3, [r3, #24]
 8017414:	3b01      	subs	r3, #1
 8017416:	2b0a      	cmp	r3, #10
 8017418:	f200 8229 	bhi.w	801786e <USBH_HandleControl+0x46e>
 801741c:	a201      	add	r2, pc, #4	@ (adr r2, 8017424 <USBH_HandleControl+0x24>)
 801741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017422:	bf00      	nop
 8017424:	08017451 	.word	0x08017451
 8017428:	0801746b 	.word	0x0801746b
 801742c:	0801750d 	.word	0x0801750d
 8017430:	08017533 	.word	0x08017533
 8017434:	080175bf 	.word	0x080175bf
 8017438:	080175e9 	.word	0x080175e9
 801743c:	080176ab 	.word	0x080176ab
 8017440:	080176cd 	.word	0x080176cd
 8017444:	0801775f 	.word	0x0801775f
 8017448:	08017785 	.word	0x08017785
 801744c:	08017817 	.word	0x08017817
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	f103 0110 	add.w	r1, r3, #16
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	795b      	ldrb	r3, [r3, #5]
 801745a:	461a      	mov	r2, r3
 801745c:	6878      	ldr	r0, [r7, #4]
 801745e:	f000 fa17 	bl	8017890 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	2202      	movs	r2, #2
 8017466:	761a      	strb	r2, [r3, #24]
      break;
 8017468:	e20c      	b.n	8017884 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	795b      	ldrb	r3, [r3, #5]
 801746e:	4619      	mov	r1, r3
 8017470:	6878      	ldr	r0, [r7, #4]
 8017472:	f00e fb4b 	bl	8025b0c <USBH_LL_GetURBState>
 8017476:	4603      	mov	r3, r0
 8017478:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801747a:	7bbb      	ldrb	r3, [r7, #14]
 801747c:	2b01      	cmp	r3, #1
 801747e:	d12c      	bne.n	80174da <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	7c1b      	ldrb	r3, [r3, #16]
 8017484:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8017488:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	8adb      	ldrh	r3, [r3, #22]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d00a      	beq.n	80174a8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8017492:	7b7b      	ldrb	r3, [r7, #13]
 8017494:	2b80      	cmp	r3, #128	@ 0x80
 8017496:	d103      	bne.n	80174a0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	2203      	movs	r2, #3
 801749c:	761a      	strb	r2, [r3, #24]
 801749e:	e00d      	b.n	80174bc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	2205      	movs	r2, #5
 80174a4:	761a      	strb	r2, [r3, #24]
 80174a6:	e009      	b.n	80174bc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80174a8:	7b7b      	ldrb	r3, [r7, #13]
 80174aa:	2b80      	cmp	r3, #128	@ 0x80
 80174ac:	d103      	bne.n	80174b6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	2209      	movs	r2, #9
 80174b2:	761a      	strb	r2, [r3, #24]
 80174b4:	e002      	b.n	80174bc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	2207      	movs	r2, #7
 80174ba:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2203      	movs	r2, #3
 80174c0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80174d0:	2200      	movs	r2, #0
 80174d2:	4619      	mov	r1, r3
 80174d4:	f000 fd44 	bl	8017f60 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80174d8:	e1cb      	b.n	8017872 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80174da:	7bbb      	ldrb	r3, [r7, #14]
 80174dc:	2b04      	cmp	r3, #4
 80174de:	d003      	beq.n	80174e8 <USBH_HandleControl+0xe8>
 80174e0:	7bbb      	ldrb	r3, [r7, #14]
 80174e2:	2b02      	cmp	r3, #2
 80174e4:	f040 81c5 	bne.w	8017872 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	220b      	movs	r2, #11
 80174ec:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	2203      	movs	r2, #3
 80174f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8017502:	2200      	movs	r2, #0
 8017504:	4619      	mov	r1, r3
 8017506:	f000 fd2b 	bl	8017f60 <osMessagePut>
      break;
 801750a:	e1b2      	b.n	8017872 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8017512:	b29a      	uxth	r2, r3
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	6899      	ldr	r1, [r3, #8]
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	899a      	ldrh	r2, [r3, #12]
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	791b      	ldrb	r3, [r3, #4]
 8017524:	6878      	ldr	r0, [r7, #4]
 8017526:	f000 f9f2 	bl	801790e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	2204      	movs	r2, #4
 801752e:	761a      	strb	r2, [r3, #24]
      break;
 8017530:	e1a8      	b.n	8017884 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	791b      	ldrb	r3, [r3, #4]
 8017536:	4619      	mov	r1, r3
 8017538:	6878      	ldr	r0, [r7, #4]
 801753a:	f00e fae7 	bl	8025b0c <USBH_LL_GetURBState>
 801753e:	4603      	mov	r3, r0
 8017540:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8017542:	7bbb      	ldrb	r3, [r7, #14]
 8017544:	2b01      	cmp	r3, #1
 8017546:	d110      	bne.n	801756a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	2209      	movs	r2, #9
 801754c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	2203      	movs	r2, #3
 8017552:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8017562:	2200      	movs	r2, #0
 8017564:	4619      	mov	r1, r3
 8017566:	f000 fcfb 	bl	8017f60 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801756a:	7bbb      	ldrb	r3, [r7, #14]
 801756c:	2b05      	cmp	r3, #5
 801756e:	d110      	bne.n	8017592 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8017570:	2303      	movs	r3, #3
 8017572:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	2203      	movs	r2, #3
 8017578:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8017588:	2200      	movs	r2, #0
 801758a:	4619      	mov	r1, r3
 801758c:	f000 fce8 	bl	8017f60 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017590:	e171      	b.n	8017876 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8017592:	7bbb      	ldrb	r3, [r7, #14]
 8017594:	2b04      	cmp	r3, #4
 8017596:	f040 816e 	bne.w	8017876 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	220b      	movs	r2, #11
 801759e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	2203      	movs	r2, #3
 80175a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80175b4:	2200      	movs	r2, #0
 80175b6:	4619      	mov	r1, r3
 80175b8:	f000 fcd2 	bl	8017f60 <osMessagePut>
      break;
 80175bc:	e15b      	b.n	8017876 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	6899      	ldr	r1, [r3, #8]
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	899a      	ldrh	r2, [r3, #12]
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	795b      	ldrb	r3, [r3, #5]
 80175ca:	2001      	movs	r0, #1
 80175cc:	9000      	str	r0, [sp, #0]
 80175ce:	6878      	ldr	r0, [r7, #4]
 80175d0:	f000 f978 	bl	80178c4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80175da:	b29a      	uxth	r2, r3
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	2206      	movs	r2, #6
 80175e4:	761a      	strb	r2, [r3, #24]
      break;
 80175e6:	e14d      	b.n	8017884 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	795b      	ldrb	r3, [r3, #5]
 80175ec:	4619      	mov	r1, r3
 80175ee:	6878      	ldr	r0, [r7, #4]
 80175f0:	f00e fa8c 	bl	8025b0c <USBH_LL_GetURBState>
 80175f4:	4603      	mov	r3, r0
 80175f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80175f8:	7bbb      	ldrb	r3, [r7, #14]
 80175fa:	2b01      	cmp	r3, #1
 80175fc:	d111      	bne.n	8017622 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	2207      	movs	r2, #7
 8017602:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	2203      	movs	r2, #3
 8017608:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8017618:	2200      	movs	r2, #0
 801761a:	4619      	mov	r1, r3
 801761c:	f000 fca0 	bl	8017f60 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017620:	e12b      	b.n	801787a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8017622:	7bbb      	ldrb	r3, [r7, #14]
 8017624:	2b05      	cmp	r3, #5
 8017626:	d113      	bne.n	8017650 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	220c      	movs	r2, #12
 801762c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801762e:	2303      	movs	r3, #3
 8017630:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	2203      	movs	r2, #3
 8017636:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8017646:	2200      	movs	r2, #0
 8017648:	4619      	mov	r1, r3
 801764a:	f000 fc89 	bl	8017f60 <osMessagePut>
      break;
 801764e:	e114      	b.n	801787a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8017650:	7bbb      	ldrb	r3, [r7, #14]
 8017652:	2b02      	cmp	r3, #2
 8017654:	d111      	bne.n	801767a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	2205      	movs	r2, #5
 801765a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	2203      	movs	r2, #3
 8017660:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8017670:	2200      	movs	r2, #0
 8017672:	4619      	mov	r1, r3
 8017674:	f000 fc74 	bl	8017f60 <osMessagePut>
      break;
 8017678:	e0ff      	b.n	801787a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801767a:	7bbb      	ldrb	r3, [r7, #14]
 801767c:	2b04      	cmp	r3, #4
 801767e:	f040 80fc 	bne.w	801787a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	220b      	movs	r2, #11
 8017686:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8017688:	2302      	movs	r3, #2
 801768a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	2203      	movs	r2, #3
 8017690:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80176a0:	2200      	movs	r2, #0
 80176a2:	4619      	mov	r1, r3
 80176a4:	f000 fc5c 	bl	8017f60 <osMessagePut>
      break;
 80176a8:	e0e7      	b.n	801787a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	791b      	ldrb	r3, [r3, #4]
 80176ae:	2200      	movs	r2, #0
 80176b0:	2100      	movs	r1, #0
 80176b2:	6878      	ldr	r0, [r7, #4]
 80176b4:	f000 f92b 	bl	801790e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80176be:	b29a      	uxth	r2, r3
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	2208      	movs	r2, #8
 80176c8:	761a      	strb	r2, [r3, #24]

      break;
 80176ca:	e0db      	b.n	8017884 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	791b      	ldrb	r3, [r3, #4]
 80176d0:	4619      	mov	r1, r3
 80176d2:	6878      	ldr	r0, [r7, #4]
 80176d4:	f00e fa1a 	bl	8025b0c <USBH_LL_GetURBState>
 80176d8:	4603      	mov	r3, r0
 80176da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80176dc:	7bbb      	ldrb	r3, [r7, #14]
 80176de:	2b01      	cmp	r3, #1
 80176e0:	d113      	bne.n	801770a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	220d      	movs	r2, #13
 80176e6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80176e8:	2300      	movs	r3, #0
 80176ea:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	2203      	movs	r2, #3
 80176f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8017700:	2200      	movs	r2, #0
 8017702:	4619      	mov	r1, r3
 8017704:	f000 fc2c 	bl	8017f60 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017708:	e0b9      	b.n	801787e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 801770a:	7bbb      	ldrb	r3, [r7, #14]
 801770c:	2b04      	cmp	r3, #4
 801770e:	d111      	bne.n	8017734 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	220b      	movs	r2, #11
 8017714:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	2203      	movs	r2, #3
 801771a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801772a:	2200      	movs	r2, #0
 801772c:	4619      	mov	r1, r3
 801772e:	f000 fc17 	bl	8017f60 <osMessagePut>
      break;
 8017732:	e0a4      	b.n	801787e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8017734:	7bbb      	ldrb	r3, [r7, #14]
 8017736:	2b05      	cmp	r3, #5
 8017738:	f040 80a1 	bne.w	801787e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 801773c:	2303      	movs	r3, #3
 801773e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	2203      	movs	r2, #3
 8017744:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8017754:	2200      	movs	r2, #0
 8017756:	4619      	mov	r1, r3
 8017758:	f000 fc02 	bl	8017f60 <osMessagePut>
      break;
 801775c:	e08f      	b.n	801787e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	795b      	ldrb	r3, [r3, #5]
 8017762:	2201      	movs	r2, #1
 8017764:	9200      	str	r2, [sp, #0]
 8017766:	2200      	movs	r2, #0
 8017768:	2100      	movs	r1, #0
 801776a:	6878      	ldr	r0, [r7, #4]
 801776c:	f000 f8aa 	bl	80178c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8017776:	b29a      	uxth	r2, r3
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	220a      	movs	r2, #10
 8017780:	761a      	strb	r2, [r3, #24]
      break;
 8017782:	e07f      	b.n	8017884 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	795b      	ldrb	r3, [r3, #5]
 8017788:	4619      	mov	r1, r3
 801778a:	6878      	ldr	r0, [r7, #4]
 801778c:	f00e f9be 	bl	8025b0c <USBH_LL_GetURBState>
 8017790:	4603      	mov	r3, r0
 8017792:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8017794:	7bbb      	ldrb	r3, [r7, #14]
 8017796:	2b01      	cmp	r3, #1
 8017798:	d113      	bne.n	80177c2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 801779a:	2300      	movs	r3, #0
 801779c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	220d      	movs	r2, #13
 80177a2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2203      	movs	r2, #3
 80177a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80177b8:	2200      	movs	r2, #0
 80177ba:	4619      	mov	r1, r3
 80177bc:	f000 fbd0 	bl	8017f60 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80177c0:	e05f      	b.n	8017882 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80177c2:	7bbb      	ldrb	r3, [r7, #14]
 80177c4:	2b02      	cmp	r3, #2
 80177c6:	d111      	bne.n	80177ec <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	2209      	movs	r2, #9
 80177cc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	2203      	movs	r2, #3
 80177d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80177e2:	2200      	movs	r2, #0
 80177e4:	4619      	mov	r1, r3
 80177e6:	f000 fbbb 	bl	8017f60 <osMessagePut>
      break;
 80177ea:	e04a      	b.n	8017882 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80177ec:	7bbb      	ldrb	r3, [r7, #14]
 80177ee:	2b04      	cmp	r3, #4
 80177f0:	d147      	bne.n	8017882 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	220b      	movs	r2, #11
 80177f6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	2203      	movs	r2, #3
 80177fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801780c:	2200      	movs	r2, #0
 801780e:	4619      	mov	r1, r3
 8017810:	f000 fba6 	bl	8017f60 <osMessagePut>
      break;
 8017814:	e035      	b.n	8017882 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	7e5b      	ldrb	r3, [r3, #25]
 801781a:	3301      	adds	r3, #1
 801781c:	b2da      	uxtb	r2, r3
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	765a      	strb	r2, [r3, #25]
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	7e5b      	ldrb	r3, [r3, #25]
 8017826:	2b02      	cmp	r3, #2
 8017828:	d806      	bhi.n	8017838 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	2201      	movs	r2, #1
 801782e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	2201      	movs	r2, #1
 8017834:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8017836:	e025      	b.n	8017884 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801783e:	2106      	movs	r1, #6
 8017840:	6878      	ldr	r0, [r7, #4]
 8017842:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	2200      	movs	r2, #0
 8017848:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	795b      	ldrb	r3, [r3, #5]
 801784e:	4619      	mov	r1, r3
 8017850:	6878      	ldr	r0, [r7, #4]
 8017852:	f000 f90d 	bl	8017a70 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	791b      	ldrb	r3, [r3, #4]
 801785a:	4619      	mov	r1, r3
 801785c:	6878      	ldr	r0, [r7, #4]
 801785e:	f000 f907 	bl	8017a70 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	2200      	movs	r2, #0
 8017866:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8017868:	2302      	movs	r3, #2
 801786a:	73fb      	strb	r3, [r7, #15]
      break;
 801786c:	e00a      	b.n	8017884 <USBH_HandleControl+0x484>

    default:
      break;
 801786e:	bf00      	nop
 8017870:	e008      	b.n	8017884 <USBH_HandleControl+0x484>
      break;
 8017872:	bf00      	nop
 8017874:	e006      	b.n	8017884 <USBH_HandleControl+0x484>
      break;
 8017876:	bf00      	nop
 8017878:	e004      	b.n	8017884 <USBH_HandleControl+0x484>
      break;
 801787a:	bf00      	nop
 801787c:	e002      	b.n	8017884 <USBH_HandleControl+0x484>
      break;
 801787e:	bf00      	nop
 8017880:	e000      	b.n	8017884 <USBH_HandleControl+0x484>
      break;
 8017882:	bf00      	nop
  }

  return status;
 8017884:	7bfb      	ldrb	r3, [r7, #15]
}
 8017886:	4618      	mov	r0, r3
 8017888:	3710      	adds	r7, #16
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}
 801788e:	bf00      	nop

08017890 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8017890:	b580      	push	{r7, lr}
 8017892:	b088      	sub	sp, #32
 8017894:	af04      	add	r7, sp, #16
 8017896:	60f8      	str	r0, [r7, #12]
 8017898:	60b9      	str	r1, [r7, #8]
 801789a:	4613      	mov	r3, r2
 801789c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801789e:	79f9      	ldrb	r1, [r7, #7]
 80178a0:	2300      	movs	r3, #0
 80178a2:	9303      	str	r3, [sp, #12]
 80178a4:	2308      	movs	r3, #8
 80178a6:	9302      	str	r3, [sp, #8]
 80178a8:	68bb      	ldr	r3, [r7, #8]
 80178aa:	9301      	str	r3, [sp, #4]
 80178ac:	2300      	movs	r3, #0
 80178ae:	9300      	str	r3, [sp, #0]
 80178b0:	2300      	movs	r3, #0
 80178b2:	2200      	movs	r2, #0
 80178b4:	68f8      	ldr	r0, [r7, #12]
 80178b6:	f00e f8f8 	bl	8025aaa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80178ba:	2300      	movs	r3, #0
}
 80178bc:	4618      	mov	r0, r3
 80178be:	3710      	adds	r7, #16
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}

080178c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b088      	sub	sp, #32
 80178c8:	af04      	add	r7, sp, #16
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	60b9      	str	r1, [r7, #8]
 80178ce:	4611      	mov	r1, r2
 80178d0:	461a      	mov	r2, r3
 80178d2:	460b      	mov	r3, r1
 80178d4:	80fb      	strh	r3, [r7, #6]
 80178d6:	4613      	mov	r3, r2
 80178d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d001      	beq.n	80178e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80178e4:	2300      	movs	r3, #0
 80178e6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80178e8:	7979      	ldrb	r1, [r7, #5]
 80178ea:	7e3b      	ldrb	r3, [r7, #24]
 80178ec:	9303      	str	r3, [sp, #12]
 80178ee:	88fb      	ldrh	r3, [r7, #6]
 80178f0:	9302      	str	r3, [sp, #8]
 80178f2:	68bb      	ldr	r3, [r7, #8]
 80178f4:	9301      	str	r3, [sp, #4]
 80178f6:	2301      	movs	r3, #1
 80178f8:	9300      	str	r3, [sp, #0]
 80178fa:	2300      	movs	r3, #0
 80178fc:	2200      	movs	r2, #0
 80178fe:	68f8      	ldr	r0, [r7, #12]
 8017900:	f00e f8d3 	bl	8025aaa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8017904:	2300      	movs	r3, #0
}
 8017906:	4618      	mov	r0, r3
 8017908:	3710      	adds	r7, #16
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}

0801790e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801790e:	b580      	push	{r7, lr}
 8017910:	b088      	sub	sp, #32
 8017912:	af04      	add	r7, sp, #16
 8017914:	60f8      	str	r0, [r7, #12]
 8017916:	60b9      	str	r1, [r7, #8]
 8017918:	4611      	mov	r1, r2
 801791a:	461a      	mov	r2, r3
 801791c:	460b      	mov	r3, r1
 801791e:	80fb      	strh	r3, [r7, #6]
 8017920:	4613      	mov	r3, r2
 8017922:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017924:	7979      	ldrb	r1, [r7, #5]
 8017926:	2300      	movs	r3, #0
 8017928:	9303      	str	r3, [sp, #12]
 801792a:	88fb      	ldrh	r3, [r7, #6]
 801792c:	9302      	str	r3, [sp, #8]
 801792e:	68bb      	ldr	r3, [r7, #8]
 8017930:	9301      	str	r3, [sp, #4]
 8017932:	2301      	movs	r3, #1
 8017934:	9300      	str	r3, [sp, #0]
 8017936:	2300      	movs	r3, #0
 8017938:	2201      	movs	r2, #1
 801793a:	68f8      	ldr	r0, [r7, #12]
 801793c:	f00e f8b5 	bl	8025aaa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8017940:	2300      	movs	r3, #0

}
 8017942:	4618      	mov	r0, r3
 8017944:	3710      	adds	r7, #16
 8017946:	46bd      	mov	sp, r7
 8017948:	bd80      	pop	{r7, pc}

0801794a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801794a:	b580      	push	{r7, lr}
 801794c:	b088      	sub	sp, #32
 801794e:	af04      	add	r7, sp, #16
 8017950:	60f8      	str	r0, [r7, #12]
 8017952:	60b9      	str	r1, [r7, #8]
 8017954:	4611      	mov	r1, r2
 8017956:	461a      	mov	r2, r3
 8017958:	460b      	mov	r3, r1
 801795a:	80fb      	strh	r3, [r7, #6]
 801795c:	4613      	mov	r3, r2
 801795e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8017966:	2b00      	cmp	r3, #0
 8017968:	d001      	beq.n	801796e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801796a:	2300      	movs	r3, #0
 801796c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801796e:	7979      	ldrb	r1, [r7, #5]
 8017970:	7e3b      	ldrb	r3, [r7, #24]
 8017972:	9303      	str	r3, [sp, #12]
 8017974:	88fb      	ldrh	r3, [r7, #6]
 8017976:	9302      	str	r3, [sp, #8]
 8017978:	68bb      	ldr	r3, [r7, #8]
 801797a:	9301      	str	r3, [sp, #4]
 801797c:	2301      	movs	r3, #1
 801797e:	9300      	str	r3, [sp, #0]
 8017980:	2302      	movs	r3, #2
 8017982:	2200      	movs	r2, #0
 8017984:	68f8      	ldr	r0, [r7, #12]
 8017986:	f00e f890 	bl	8025aaa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801798a:	2300      	movs	r3, #0
}
 801798c:	4618      	mov	r0, r3
 801798e:	3710      	adds	r7, #16
 8017990:	46bd      	mov	sp, r7
 8017992:	bd80      	pop	{r7, pc}

08017994 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b088      	sub	sp, #32
 8017998:	af04      	add	r7, sp, #16
 801799a:	60f8      	str	r0, [r7, #12]
 801799c:	60b9      	str	r1, [r7, #8]
 801799e:	4611      	mov	r1, r2
 80179a0:	461a      	mov	r2, r3
 80179a2:	460b      	mov	r3, r1
 80179a4:	80fb      	strh	r3, [r7, #6]
 80179a6:	4613      	mov	r3, r2
 80179a8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80179aa:	7979      	ldrb	r1, [r7, #5]
 80179ac:	2300      	movs	r3, #0
 80179ae:	9303      	str	r3, [sp, #12]
 80179b0:	88fb      	ldrh	r3, [r7, #6]
 80179b2:	9302      	str	r3, [sp, #8]
 80179b4:	68bb      	ldr	r3, [r7, #8]
 80179b6:	9301      	str	r3, [sp, #4]
 80179b8:	2301      	movs	r3, #1
 80179ba:	9300      	str	r3, [sp, #0]
 80179bc:	2302      	movs	r3, #2
 80179be:	2201      	movs	r2, #1
 80179c0:	68f8      	ldr	r0, [r7, #12]
 80179c2:	f00e f872 	bl	8025aaa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80179c6:	2300      	movs	r3, #0
}
 80179c8:	4618      	mov	r0, r3
 80179ca:	3710      	adds	r7, #16
 80179cc:	46bd      	mov	sp, r7
 80179ce:	bd80      	pop	{r7, pc}

080179d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b086      	sub	sp, #24
 80179d4:	af04      	add	r7, sp, #16
 80179d6:	6078      	str	r0, [r7, #4]
 80179d8:	4608      	mov	r0, r1
 80179da:	4611      	mov	r1, r2
 80179dc:	461a      	mov	r2, r3
 80179de:	4603      	mov	r3, r0
 80179e0:	70fb      	strb	r3, [r7, #3]
 80179e2:	460b      	mov	r3, r1
 80179e4:	70bb      	strb	r3, [r7, #2]
 80179e6:	4613      	mov	r3, r2
 80179e8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80179ea:	7878      	ldrb	r0, [r7, #1]
 80179ec:	78ba      	ldrb	r2, [r7, #2]
 80179ee:	78f9      	ldrb	r1, [r7, #3]
 80179f0:	8b3b      	ldrh	r3, [r7, #24]
 80179f2:	9302      	str	r3, [sp, #8]
 80179f4:	7d3b      	ldrb	r3, [r7, #20]
 80179f6:	9301      	str	r3, [sp, #4]
 80179f8:	7c3b      	ldrb	r3, [r7, #16]
 80179fa:	9300      	str	r3, [sp, #0]
 80179fc:	4603      	mov	r3, r0
 80179fe:	6878      	ldr	r0, [r7, #4]
 8017a00:	f00e f805 	bl	8025a0e <USBH_LL_OpenPipe>

  return USBH_OK;
 8017a04:	2300      	movs	r3, #0
}
 8017a06:	4618      	mov	r0, r3
 8017a08:	3708      	adds	r7, #8
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	bd80      	pop	{r7, pc}

08017a0e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8017a0e:	b580      	push	{r7, lr}
 8017a10:	b082      	sub	sp, #8
 8017a12:	af00      	add	r7, sp, #0
 8017a14:	6078      	str	r0, [r7, #4]
 8017a16:	460b      	mov	r3, r1
 8017a18:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8017a1a:	78fb      	ldrb	r3, [r7, #3]
 8017a1c:	4619      	mov	r1, r3
 8017a1e:	6878      	ldr	r0, [r7, #4]
 8017a20:	f00e f824 	bl	8025a6c <USBH_LL_ClosePipe>

  return USBH_OK;
 8017a24:	2300      	movs	r3, #0
}
 8017a26:	4618      	mov	r0, r3
 8017a28:	3708      	adds	r7, #8
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	bd80      	pop	{r7, pc}

08017a2e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8017a2e:	b580      	push	{r7, lr}
 8017a30:	b084      	sub	sp, #16
 8017a32:	af00      	add	r7, sp, #0
 8017a34:	6078      	str	r0, [r7, #4]
 8017a36:	460b      	mov	r3, r1
 8017a38:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8017a3a:	6878      	ldr	r0, [r7, #4]
 8017a3c:	f000 f836 	bl	8017aac <USBH_GetFreePipe>
 8017a40:	4603      	mov	r3, r0
 8017a42:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8017a44:	89fb      	ldrh	r3, [r7, #14]
 8017a46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a4a:	4293      	cmp	r3, r2
 8017a4c:	d00a      	beq.n	8017a64 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8017a4e:	78fa      	ldrb	r2, [r7, #3]
 8017a50:	89fb      	ldrh	r3, [r7, #14]
 8017a52:	f003 030f 	and.w	r3, r3, #15
 8017a56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8017a5a:	6879      	ldr	r1, [r7, #4]
 8017a5c:	33e0      	adds	r3, #224	@ 0xe0
 8017a5e:	009b      	lsls	r3, r3, #2
 8017a60:	440b      	add	r3, r1
 8017a62:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8017a64:	89fb      	ldrh	r3, [r7, #14]
 8017a66:	b2db      	uxtb	r3, r3
}
 8017a68:	4618      	mov	r0, r3
 8017a6a:	3710      	adds	r7, #16
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}

08017a70 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8017a70:	b480      	push	{r7}
 8017a72:	b083      	sub	sp, #12
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]
 8017a78:	460b      	mov	r3, r1
 8017a7a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8017a7c:	78fb      	ldrb	r3, [r7, #3]
 8017a7e:	2b0f      	cmp	r3, #15
 8017a80:	d80d      	bhi.n	8017a9e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8017a82:	78fb      	ldrb	r3, [r7, #3]
 8017a84:	687a      	ldr	r2, [r7, #4]
 8017a86:	33e0      	adds	r3, #224	@ 0xe0
 8017a88:	009b      	lsls	r3, r3, #2
 8017a8a:	4413      	add	r3, r2
 8017a8c:	685a      	ldr	r2, [r3, #4]
 8017a8e:	78fb      	ldrb	r3, [r7, #3]
 8017a90:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017a94:	6879      	ldr	r1, [r7, #4]
 8017a96:	33e0      	adds	r3, #224	@ 0xe0
 8017a98:	009b      	lsls	r3, r3, #2
 8017a9a:	440b      	add	r3, r1
 8017a9c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8017a9e:	2300      	movs	r3, #0
}
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	370c      	adds	r7, #12
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aaa:	4770      	bx	lr

08017aac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8017aac:	b480      	push	{r7}
 8017aae:	b085      	sub	sp, #20
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8017ab8:	2300      	movs	r3, #0
 8017aba:	73fb      	strb	r3, [r7, #15]
 8017abc:	e00f      	b.n	8017ade <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8017abe:	7bfb      	ldrb	r3, [r7, #15]
 8017ac0:	687a      	ldr	r2, [r7, #4]
 8017ac2:	33e0      	adds	r3, #224	@ 0xe0
 8017ac4:	009b      	lsls	r3, r3, #2
 8017ac6:	4413      	add	r3, r2
 8017ac8:	685b      	ldr	r3, [r3, #4]
 8017aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d102      	bne.n	8017ad8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8017ad2:	7bfb      	ldrb	r3, [r7, #15]
 8017ad4:	b29b      	uxth	r3, r3
 8017ad6:	e007      	b.n	8017ae8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8017ad8:	7bfb      	ldrb	r3, [r7, #15]
 8017ada:	3301      	adds	r3, #1
 8017adc:	73fb      	strb	r3, [r7, #15]
 8017ade:	7bfb      	ldrb	r3, [r7, #15]
 8017ae0:	2b0f      	cmp	r3, #15
 8017ae2:	d9ec      	bls.n	8017abe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8017ae4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3714      	adds	r7, #20
 8017aec:	46bd      	mov	sp, r7
 8017aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af2:	4770      	bx	lr

08017af4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8017af4:	b480      	push	{r7}
 8017af6:	b085      	sub	sp, #20
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	4603      	mov	r3, r0
 8017afc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8017afe:	2300      	movs	r3, #0
 8017b00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8017b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017b06:	2b84      	cmp	r3, #132	@ 0x84
 8017b08:	d005      	beq.n	8017b16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8017b0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	4413      	add	r3, r2
 8017b12:	3303      	adds	r3, #3
 8017b14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8017b16:	68fb      	ldr	r3, [r7, #12]
}
 8017b18:	4618      	mov	r0, r3
 8017b1a:	3714      	adds	r7, #20
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b22:	4770      	bx	lr

08017b24 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8017b24:	b480      	push	{r7}
 8017b26:	b083      	sub	sp, #12
 8017b28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017b2a:	f3ef 8305 	mrs	r3, IPSR
 8017b2e:	607b      	str	r3, [r7, #4]
  return(result);
 8017b30:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	bf14      	ite	ne
 8017b36:	2301      	movne	r3, #1
 8017b38:	2300      	moveq	r3, #0
 8017b3a:	b2db      	uxtb	r3, r3
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	370c      	adds	r7, #12
 8017b40:	46bd      	mov	sp, r7
 8017b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b46:	4770      	bx	lr

08017b48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8017b4c:	f001 fe0a 	bl	8019764 <vTaskStartScheduler>
  
  return osOK;
 8017b50:	2300      	movs	r3, #0
}
 8017b52:	4618      	mov	r0, r3
 8017b54:	bd80      	pop	{r7, pc}

08017b56 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8017b56:	b580      	push	{r7, lr}
 8017b58:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8017b5a:	f7ff ffe3 	bl	8017b24 <inHandlerMode>
 8017b5e:	4603      	mov	r3, r0
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d003      	beq.n	8017b6c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8017b64:	f001 ff2a 	bl	80199bc <xTaskGetTickCountFromISR>
 8017b68:	4603      	mov	r3, r0
 8017b6a:	e002      	b.n	8017b72 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8017b6c:	f001 ff16 	bl	801999c <xTaskGetTickCount>
 8017b70:	4603      	mov	r3, r0
  }
}
 8017b72:	4618      	mov	r0, r3
 8017b74:	bd80      	pop	{r7, pc}

08017b76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8017b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b78:	b089      	sub	sp, #36	@ 0x24
 8017b7a:	af04      	add	r7, sp, #16
 8017b7c:	6078      	str	r0, [r7, #4]
 8017b7e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	695b      	ldr	r3, [r3, #20]
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d020      	beq.n	8017bca <osThreadCreate+0x54>
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	699b      	ldr	r3, [r3, #24]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d01c      	beq.n	8017bca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	685c      	ldr	r4, [r3, #4]
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	691e      	ldr	r6, [r3, #16]
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f7ff ffa6 	bl	8017af4 <makeFreeRtosPriority>
 8017ba8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	695b      	ldr	r3, [r3, #20]
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017bb2:	9202      	str	r2, [sp, #8]
 8017bb4:	9301      	str	r3, [sp, #4]
 8017bb6:	9100      	str	r1, [sp, #0]
 8017bb8:	683b      	ldr	r3, [r7, #0]
 8017bba:	4632      	mov	r2, r6
 8017bbc:	4629      	mov	r1, r5
 8017bbe:	4620      	mov	r0, r4
 8017bc0:	f001 fb44 	bl	801924c <xTaskCreateStatic>
 8017bc4:	4603      	mov	r3, r0
 8017bc6:	60fb      	str	r3, [r7, #12]
 8017bc8:	e01c      	b.n	8017c04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	685c      	ldr	r4, [r3, #4]
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017bd6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017bde:	4618      	mov	r0, r3
 8017be0:	f7ff ff88 	bl	8017af4 <makeFreeRtosPriority>
 8017be4:	4602      	mov	r2, r0
 8017be6:	f107 030c 	add.w	r3, r7, #12
 8017bea:	9301      	str	r3, [sp, #4]
 8017bec:	9200      	str	r2, [sp, #0]
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	4632      	mov	r2, r6
 8017bf2:	4629      	mov	r1, r5
 8017bf4:	4620      	mov	r0, r4
 8017bf6:	f001 fb8f 	bl	8019318 <xTaskCreate>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	2b01      	cmp	r3, #1
 8017bfe:	d001      	beq.n	8017c04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8017c00:	2300      	movs	r3, #0
 8017c02:	e000      	b.n	8017c06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8017c04:	68fb      	ldr	r3, [r7, #12]
}
 8017c06:	4618      	mov	r0, r3
 8017c08:	3714      	adds	r7, #20
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017c0e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8017c0e:	b580      	push	{r7, lr}
 8017c10:	b082      	sub	sp, #8
 8017c12:	af00      	add	r7, sp, #0
 8017c14:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f001 fcda 	bl	80195d0 <vTaskDelete>
  return osOK;
 8017c1c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8017c1e:	4618      	mov	r0, r3
 8017c20:	3708      	adds	r7, #8
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}

08017c26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8017c26:	b580      	push	{r7, lr}
 8017c28:	b084      	sub	sp, #16
 8017c2a:	af00      	add	r7, sp, #0
 8017c2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d001      	beq.n	8017c3c <osDelay+0x16>
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	e000      	b.n	8017c3e <osDelay+0x18>
 8017c3c:	2301      	movs	r3, #1
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f001 fd58 	bl	80196f4 <vTaskDelay>
  
  return osOK;
 8017c44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8017c46:	4618      	mov	r0, r3
 8017c48:	3710      	adds	r7, #16
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	bd80      	pop	{r7, pc}

08017c4e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8017c4e:	b580      	push	{r7, lr}
 8017c50:	b082      	sub	sp, #8
 8017c52:	af00      	add	r7, sp, #0
 8017c54:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	685b      	ldr	r3, [r3, #4]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d007      	beq.n	8017c6e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	685b      	ldr	r3, [r3, #4]
 8017c62:	4619      	mov	r1, r3
 8017c64:	2001      	movs	r0, #1
 8017c66:	f000 fc6a 	bl	801853e <xQueueCreateMutexStatic>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	e003      	b.n	8017c76 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8017c6e:	2001      	movs	r0, #1
 8017c70:	f000 fc4d 	bl	801850e <xQueueCreateMutex>
 8017c74:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8017c76:	4618      	mov	r0, r3
 8017c78:	3708      	adds	r7, #8
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bd80      	pop	{r7, pc}
	...

08017c80 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b084      	sub	sp, #16
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
 8017c88:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d101      	bne.n	8017c98 <osMutexWait+0x18>
    return osErrorParameter;
 8017c94:	2380      	movs	r3, #128	@ 0x80
 8017c96:	e03a      	b.n	8017d0e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8017c98:	2300      	movs	r3, #0
 8017c9a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8017c9c:	683b      	ldr	r3, [r7, #0]
 8017c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ca2:	d103      	bne.n	8017cac <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8017ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8017ca8:	60fb      	str	r3, [r7, #12]
 8017caa:	e009      	b.n	8017cc0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d006      	beq.n	8017cc0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8017cb2:	683b      	ldr	r3, [r7, #0]
 8017cb4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d101      	bne.n	8017cc0 <osMutexWait+0x40>
      ticks = 1;
 8017cbc:	2301      	movs	r3, #1
 8017cbe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8017cc0:	f7ff ff30 	bl	8017b24 <inHandlerMode>
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d017      	beq.n	8017cfa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8017cca:	f107 0308 	add.w	r3, r7, #8
 8017cce:	461a      	mov	r2, r3
 8017cd0:	2100      	movs	r1, #0
 8017cd2:	6878      	ldr	r0, [r7, #4]
 8017cd4:	f001 f90a 	bl	8018eec <xQueueReceiveFromISR>
 8017cd8:	4603      	mov	r3, r0
 8017cda:	2b01      	cmp	r3, #1
 8017cdc:	d001      	beq.n	8017ce2 <osMutexWait+0x62>
      return osErrorOS;
 8017cde:	23ff      	movs	r3, #255	@ 0xff
 8017ce0:	e015      	b.n	8017d0e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d011      	beq.n	8017d0c <osMutexWait+0x8c>
 8017ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8017d18 <osMutexWait+0x98>)
 8017cea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017cee:	601a      	str	r2, [r3, #0]
 8017cf0:	f3bf 8f4f 	dsb	sy
 8017cf4:	f3bf 8f6f 	isb	sy
 8017cf8:	e008      	b.n	8017d0c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8017cfa:	68f9      	ldr	r1, [r7, #12]
 8017cfc:	6878      	ldr	r0, [r7, #4]
 8017cfe:	f000 ffdd 	bl	8018cbc <xQueueSemaphoreTake>
 8017d02:	4603      	mov	r3, r0
 8017d04:	2b01      	cmp	r3, #1
 8017d06:	d001      	beq.n	8017d0c <osMutexWait+0x8c>
    return osErrorOS;
 8017d08:	23ff      	movs	r3, #255	@ 0xff
 8017d0a:	e000      	b.n	8017d0e <osMutexWait+0x8e>
  }
  
  return osOK;
 8017d0c:	2300      	movs	r3, #0
}
 8017d0e:	4618      	mov	r0, r3
 8017d10:	3710      	adds	r7, #16
 8017d12:	46bd      	mov	sp, r7
 8017d14:	bd80      	pop	{r7, pc}
 8017d16:	bf00      	nop
 8017d18:	e000ed04 	.word	0xe000ed04

08017d1c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b084      	sub	sp, #16
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8017d24:	2300      	movs	r3, #0
 8017d26:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8017d28:	2300      	movs	r3, #0
 8017d2a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8017d2c:	f7ff fefa 	bl	8017b24 <inHandlerMode>
 8017d30:	4603      	mov	r3, r0
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d016      	beq.n	8017d64 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8017d36:	f107 0308 	add.w	r3, r7, #8
 8017d3a:	4619      	mov	r1, r3
 8017d3c:	6878      	ldr	r0, [r7, #4]
 8017d3e:	f000 fe3c 	bl	80189ba <xQueueGiveFromISR>
 8017d42:	4603      	mov	r3, r0
 8017d44:	2b01      	cmp	r3, #1
 8017d46:	d001      	beq.n	8017d4c <osMutexRelease+0x30>
      return osErrorOS;
 8017d48:	23ff      	movs	r3, #255	@ 0xff
 8017d4a:	e017      	b.n	8017d7c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017d4c:	68bb      	ldr	r3, [r7, #8]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d013      	beq.n	8017d7a <osMutexRelease+0x5e>
 8017d52:	4b0c      	ldr	r3, [pc, #48]	@ (8017d84 <osMutexRelease+0x68>)
 8017d54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017d58:	601a      	str	r2, [r3, #0]
 8017d5a:	f3bf 8f4f 	dsb	sy
 8017d5e:	f3bf 8f6f 	isb	sy
 8017d62:	e00a      	b.n	8017d7a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8017d64:	2300      	movs	r3, #0
 8017d66:	2200      	movs	r2, #0
 8017d68:	2100      	movs	r1, #0
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	f000 fc78 	bl	8018660 <xQueueGenericSend>
 8017d70:	4603      	mov	r3, r0
 8017d72:	2b01      	cmp	r3, #1
 8017d74:	d001      	beq.n	8017d7a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8017d76:	23ff      	movs	r3, #255	@ 0xff
 8017d78:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
}
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	3710      	adds	r7, #16
 8017d80:	46bd      	mov	sp, r7
 8017d82:	bd80      	pop	{r7, pc}
 8017d84:	e000ed04 	.word	0xe000ed04

08017d88 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b086      	sub	sp, #24
 8017d8c:	af02      	add	r7, sp, #8
 8017d8e:	6078      	str	r0, [r7, #4]
 8017d90:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	685b      	ldr	r3, [r3, #4]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d016      	beq.n	8017dc8 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8017d9a:	683b      	ldr	r3, [r7, #0]
 8017d9c:	2b01      	cmp	r3, #1
 8017d9e:	d10a      	bne.n	8017db6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	685b      	ldr	r3, [r3, #4]
 8017da4:	2203      	movs	r2, #3
 8017da6:	9200      	str	r2, [sp, #0]
 8017da8:	2200      	movs	r2, #0
 8017daa:	2100      	movs	r1, #0
 8017dac:	2001      	movs	r0, #1
 8017dae:	f000 faab 	bl	8018308 <xQueueGenericCreateStatic>
 8017db2:	4603      	mov	r3, r0
 8017db4:	e023      	b.n	8017dfe <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8017db6:	6838      	ldr	r0, [r7, #0]
 8017db8:	6839      	ldr	r1, [r7, #0]
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	685b      	ldr	r3, [r3, #4]
 8017dbe:	461a      	mov	r2, r3
 8017dc0:	f000 fbd8 	bl	8018574 <xQueueCreateCountingSemaphoreStatic>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	e01a      	b.n	8017dfe <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8017dc8:	683b      	ldr	r3, [r7, #0]
 8017dca:	2b01      	cmp	r3, #1
 8017dcc:	d110      	bne.n	8017df0 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8017dce:	2203      	movs	r2, #3
 8017dd0:	2100      	movs	r1, #0
 8017dd2:	2001      	movs	r0, #1
 8017dd4:	f000 fb1f 	bl	8018416 <xQueueGenericCreate>
 8017dd8:	60f8      	str	r0, [r7, #12]
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d005      	beq.n	8017dec <osSemaphoreCreate+0x64>
 8017de0:	2300      	movs	r3, #0
 8017de2:	2200      	movs	r2, #0
 8017de4:	2100      	movs	r1, #0
 8017de6:	68f8      	ldr	r0, [r7, #12]
 8017de8:	f000 fc3a 	bl	8018660 <xQueueGenericSend>
      return sema;
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	e006      	b.n	8017dfe <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	683a      	ldr	r2, [r7, #0]
 8017df4:	4611      	mov	r1, r2
 8017df6:	4618      	mov	r0, r3
 8017df8:	f000 fbf9 	bl	80185ee <xQueueCreateCountingSemaphore>
 8017dfc:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8017dfe:	4618      	mov	r0, r3
 8017e00:	3710      	adds	r7, #16
 8017e02:	46bd      	mov	sp, r7
 8017e04:	bd80      	pop	{r7, pc}
	...

08017e08 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b084      	sub	sp, #16
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	6078      	str	r0, [r7, #4]
 8017e10:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8017e12:	2300      	movs	r3, #0
 8017e14:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d101      	bne.n	8017e20 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8017e1c:	2380      	movs	r3, #128	@ 0x80
 8017e1e:	e03a      	b.n	8017e96 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8017e20:	2300      	movs	r3, #0
 8017e22:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8017e24:	683b      	ldr	r3, [r7, #0]
 8017e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e2a:	d103      	bne.n	8017e34 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8017e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8017e30:	60fb      	str	r3, [r7, #12]
 8017e32:	e009      	b.n	8017e48 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8017e34:	683b      	ldr	r3, [r7, #0]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d006      	beq.n	8017e48 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8017e3a:	683b      	ldr	r3, [r7, #0]
 8017e3c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d101      	bne.n	8017e48 <osSemaphoreWait+0x40>
      ticks = 1;
 8017e44:	2301      	movs	r3, #1
 8017e46:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8017e48:	f7ff fe6c 	bl	8017b24 <inHandlerMode>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d017      	beq.n	8017e82 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8017e52:	f107 0308 	add.w	r3, r7, #8
 8017e56:	461a      	mov	r2, r3
 8017e58:	2100      	movs	r1, #0
 8017e5a:	6878      	ldr	r0, [r7, #4]
 8017e5c:	f001 f846 	bl	8018eec <xQueueReceiveFromISR>
 8017e60:	4603      	mov	r3, r0
 8017e62:	2b01      	cmp	r3, #1
 8017e64:	d001      	beq.n	8017e6a <osSemaphoreWait+0x62>
      return osErrorOS;
 8017e66:	23ff      	movs	r3, #255	@ 0xff
 8017e68:	e015      	b.n	8017e96 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8017e6a:	68bb      	ldr	r3, [r7, #8]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d011      	beq.n	8017e94 <osSemaphoreWait+0x8c>
 8017e70:	4b0b      	ldr	r3, [pc, #44]	@ (8017ea0 <osSemaphoreWait+0x98>)
 8017e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017e76:	601a      	str	r2, [r3, #0]
 8017e78:	f3bf 8f4f 	dsb	sy
 8017e7c:	f3bf 8f6f 	isb	sy
 8017e80:	e008      	b.n	8017e94 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8017e82:	68f9      	ldr	r1, [r7, #12]
 8017e84:	6878      	ldr	r0, [r7, #4]
 8017e86:	f000 ff19 	bl	8018cbc <xQueueSemaphoreTake>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	2b01      	cmp	r3, #1
 8017e8e:	d001      	beq.n	8017e94 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8017e90:	23ff      	movs	r3, #255	@ 0xff
 8017e92:	e000      	b.n	8017e96 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8017e94:	2300      	movs	r3, #0
}
 8017e96:	4618      	mov	r0, r3
 8017e98:	3710      	adds	r7, #16
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	bd80      	pop	{r7, pc}
 8017e9e:	bf00      	nop
 8017ea0:	e000ed04 	.word	0xe000ed04

08017ea4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	b084      	sub	sp, #16
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8017eac:	2300      	movs	r3, #0
 8017eae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8017eb4:	f7ff fe36 	bl	8017b24 <inHandlerMode>
 8017eb8:	4603      	mov	r3, r0
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d016      	beq.n	8017eec <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8017ebe:	f107 0308 	add.w	r3, r7, #8
 8017ec2:	4619      	mov	r1, r3
 8017ec4:	6878      	ldr	r0, [r7, #4]
 8017ec6:	f000 fd78 	bl	80189ba <xQueueGiveFromISR>
 8017eca:	4603      	mov	r3, r0
 8017ecc:	2b01      	cmp	r3, #1
 8017ece:	d001      	beq.n	8017ed4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8017ed0:	23ff      	movs	r3, #255	@ 0xff
 8017ed2:	e017      	b.n	8017f04 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017ed4:	68bb      	ldr	r3, [r7, #8]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d013      	beq.n	8017f02 <osSemaphoreRelease+0x5e>
 8017eda:	4b0c      	ldr	r3, [pc, #48]	@ (8017f0c <osSemaphoreRelease+0x68>)
 8017edc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017ee0:	601a      	str	r2, [r3, #0]
 8017ee2:	f3bf 8f4f 	dsb	sy
 8017ee6:	f3bf 8f6f 	isb	sy
 8017eea:	e00a      	b.n	8017f02 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8017eec:	2300      	movs	r3, #0
 8017eee:	2200      	movs	r2, #0
 8017ef0:	2100      	movs	r1, #0
 8017ef2:	6878      	ldr	r0, [r7, #4]
 8017ef4:	f000 fbb4 	bl	8018660 <xQueueGenericSend>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	2b01      	cmp	r3, #1
 8017efc:	d001      	beq.n	8017f02 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8017efe:	23ff      	movs	r3, #255	@ 0xff
 8017f00:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8017f02:	68fb      	ldr	r3, [r7, #12]
}
 8017f04:	4618      	mov	r0, r3
 8017f06:	3710      	adds	r7, #16
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	bd80      	pop	{r7, pc}
 8017f0c:	e000ed04 	.word	0xe000ed04

08017f10 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8017f10:	b590      	push	{r4, r7, lr}
 8017f12:	b085      	sub	sp, #20
 8017f14:	af02      	add	r7, sp, #8
 8017f16:	6078      	str	r0, [r7, #4]
 8017f18:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	689b      	ldr	r3, [r3, #8]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d011      	beq.n	8017f46 <osMessageCreate+0x36>
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	68db      	ldr	r3, [r3, #12]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d00d      	beq.n	8017f46 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	6818      	ldr	r0, [r3, #0]
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	6859      	ldr	r1, [r3, #4]
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	689a      	ldr	r2, [r3, #8]
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	68db      	ldr	r3, [r3, #12]
 8017f3a:	2400      	movs	r4, #0
 8017f3c:	9400      	str	r4, [sp, #0]
 8017f3e:	f000 f9e3 	bl	8018308 <xQueueGenericCreateStatic>
 8017f42:	4603      	mov	r3, r0
 8017f44:	e008      	b.n	8017f58 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	6818      	ldr	r0, [r3, #0]
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	685b      	ldr	r3, [r3, #4]
 8017f4e:	2200      	movs	r2, #0
 8017f50:	4619      	mov	r1, r3
 8017f52:	f000 fa60 	bl	8018416 <xQueueGenericCreate>
 8017f56:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8017f58:	4618      	mov	r0, r3
 8017f5a:	370c      	adds	r7, #12
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	bd90      	pop	{r4, r7, pc}

08017f60 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b086      	sub	sp, #24
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	60f8      	str	r0, [r7, #12]
 8017f68:	60b9      	str	r1, [r7, #8]
 8017f6a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8017f74:	697b      	ldr	r3, [r7, #20]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d101      	bne.n	8017f7e <osMessagePut+0x1e>
    ticks = 1;
 8017f7a:	2301      	movs	r3, #1
 8017f7c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8017f7e:	f7ff fdd1 	bl	8017b24 <inHandlerMode>
 8017f82:	4603      	mov	r3, r0
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d018      	beq.n	8017fba <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8017f88:	f107 0210 	add.w	r2, r7, #16
 8017f8c:	f107 0108 	add.w	r1, r7, #8
 8017f90:	2300      	movs	r3, #0
 8017f92:	68f8      	ldr	r0, [r7, #12]
 8017f94:	f000 fc6e 	bl	8018874 <xQueueGenericSendFromISR>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	2b01      	cmp	r3, #1
 8017f9c:	d001      	beq.n	8017fa2 <osMessagePut+0x42>
      return osErrorOS;
 8017f9e:	23ff      	movs	r3, #255	@ 0xff
 8017fa0:	e018      	b.n	8017fd4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017fa2:	693b      	ldr	r3, [r7, #16]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d014      	beq.n	8017fd2 <osMessagePut+0x72>
 8017fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8017fdc <osMessagePut+0x7c>)
 8017faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017fae:	601a      	str	r2, [r3, #0]
 8017fb0:	f3bf 8f4f 	dsb	sy
 8017fb4:	f3bf 8f6f 	isb	sy
 8017fb8:	e00b      	b.n	8017fd2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8017fba:	f107 0108 	add.w	r1, r7, #8
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	697a      	ldr	r2, [r7, #20]
 8017fc2:	68f8      	ldr	r0, [r7, #12]
 8017fc4:	f000 fb4c 	bl	8018660 <xQueueGenericSend>
 8017fc8:	4603      	mov	r3, r0
 8017fca:	2b01      	cmp	r3, #1
 8017fcc:	d001      	beq.n	8017fd2 <osMessagePut+0x72>
      return osErrorOS;
 8017fce:	23ff      	movs	r3, #255	@ 0xff
 8017fd0:	e000      	b.n	8017fd4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8017fd2:	2300      	movs	r3, #0
}
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	3718      	adds	r7, #24
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	bd80      	pop	{r7, pc}
 8017fdc:	e000ed04 	.word	0xe000ed04

08017fe0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8017fe0:	b590      	push	{r4, r7, lr}
 8017fe2:	b08b      	sub	sp, #44	@ 0x2c
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	60f8      	str	r0, [r7, #12]
 8017fe8:	60b9      	str	r1, [r7, #8]
 8017fea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8017fec:	68bb      	ldr	r3, [r7, #8]
 8017fee:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8017ff4:	68bb      	ldr	r3, [r7, #8]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d10a      	bne.n	8018010 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8017ffa:	2380      	movs	r3, #128	@ 0x80
 8017ffc:	617b      	str	r3, [r7, #20]
    return event;
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	461c      	mov	r4, r3
 8018002:	f107 0314 	add.w	r3, r7, #20
 8018006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801800a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801800e:	e054      	b.n	80180ba <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8018010:	2300      	movs	r3, #0
 8018012:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8018014:	2300      	movs	r3, #0
 8018016:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801801e:	d103      	bne.n	8018028 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8018020:	f04f 33ff 	mov.w	r3, #4294967295
 8018024:	627b      	str	r3, [r7, #36]	@ 0x24
 8018026:	e009      	b.n	801803c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d006      	beq.n	801803c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8018032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018034:	2b00      	cmp	r3, #0
 8018036:	d101      	bne.n	801803c <osMessageGet+0x5c>
      ticks = 1;
 8018038:	2301      	movs	r3, #1
 801803a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 801803c:	f7ff fd72 	bl	8017b24 <inHandlerMode>
 8018040:	4603      	mov	r3, r0
 8018042:	2b00      	cmp	r3, #0
 8018044:	d01c      	beq.n	8018080 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8018046:	f107 0220 	add.w	r2, r7, #32
 801804a:	f107 0314 	add.w	r3, r7, #20
 801804e:	3304      	adds	r3, #4
 8018050:	4619      	mov	r1, r3
 8018052:	68b8      	ldr	r0, [r7, #8]
 8018054:	f000 ff4a 	bl	8018eec <xQueueReceiveFromISR>
 8018058:	4603      	mov	r3, r0
 801805a:	2b01      	cmp	r3, #1
 801805c:	d102      	bne.n	8018064 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801805e:	2310      	movs	r3, #16
 8018060:	617b      	str	r3, [r7, #20]
 8018062:	e001      	b.n	8018068 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8018064:	2300      	movs	r3, #0
 8018066:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018068:	6a3b      	ldr	r3, [r7, #32]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d01d      	beq.n	80180aa <osMessageGet+0xca>
 801806e:	4b15      	ldr	r3, [pc, #84]	@ (80180c4 <osMessageGet+0xe4>)
 8018070:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018074:	601a      	str	r2, [r3, #0]
 8018076:	f3bf 8f4f 	dsb	sy
 801807a:	f3bf 8f6f 	isb	sy
 801807e:	e014      	b.n	80180aa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8018080:	f107 0314 	add.w	r3, r7, #20
 8018084:	3304      	adds	r3, #4
 8018086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018088:	4619      	mov	r1, r3
 801808a:	68b8      	ldr	r0, [r7, #8]
 801808c:	f000 fd2e 	bl	8018aec <xQueueReceive>
 8018090:	4603      	mov	r3, r0
 8018092:	2b01      	cmp	r3, #1
 8018094:	d102      	bne.n	801809c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8018096:	2310      	movs	r3, #16
 8018098:	617b      	str	r3, [r7, #20]
 801809a:	e006      	b.n	80180aa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801809c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d101      	bne.n	80180a6 <osMessageGet+0xc6>
 80180a2:	2300      	movs	r3, #0
 80180a4:	e000      	b.n	80180a8 <osMessageGet+0xc8>
 80180a6:	2340      	movs	r3, #64	@ 0x40
 80180a8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	461c      	mov	r4, r3
 80180ae:	f107 0314 	add.w	r3, r7, #20
 80180b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80180b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80180ba:	68f8      	ldr	r0, [r7, #12]
 80180bc:	372c      	adds	r7, #44	@ 0x2c
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd90      	pop	{r4, r7, pc}
 80180c2:	bf00      	nop
 80180c4:	e000ed04 	.word	0xe000ed04

080180c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80180c8:	b480      	push	{r7}
 80180ca:	b083      	sub	sp, #12
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	f103 0208 	add.w	r2, r3, #8
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f04f 32ff 	mov.w	r2, #4294967295
 80180e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	f103 0208 	add.w	r2, r3, #8
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	f103 0208 	add.w	r2, r3, #8
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	2200      	movs	r2, #0
 80180fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80180fc:	bf00      	nop
 80180fe:	370c      	adds	r7, #12
 8018100:	46bd      	mov	sp, r7
 8018102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018106:	4770      	bx	lr

08018108 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018108:	b480      	push	{r7}
 801810a:	b083      	sub	sp, #12
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	2200      	movs	r2, #0
 8018114:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018116:	bf00      	nop
 8018118:	370c      	adds	r7, #12
 801811a:	46bd      	mov	sp, r7
 801811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018120:	4770      	bx	lr

08018122 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018122:	b480      	push	{r7}
 8018124:	b085      	sub	sp, #20
 8018126:	af00      	add	r7, sp, #0
 8018128:	6078      	str	r0, [r7, #4]
 801812a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	685b      	ldr	r3, [r3, #4]
 8018130:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	68fa      	ldr	r2, [r7, #12]
 8018136:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	689a      	ldr	r2, [r3, #8]
 801813c:	683b      	ldr	r3, [r7, #0]
 801813e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	689b      	ldr	r3, [r3, #8]
 8018144:	683a      	ldr	r2, [r7, #0]
 8018146:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	683a      	ldr	r2, [r7, #0]
 801814c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801814e:	683b      	ldr	r3, [r7, #0]
 8018150:	687a      	ldr	r2, [r7, #4]
 8018152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	1c5a      	adds	r2, r3, #1
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	601a      	str	r2, [r3, #0]
}
 801815e:	bf00      	nop
 8018160:	3714      	adds	r7, #20
 8018162:	46bd      	mov	sp, r7
 8018164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018168:	4770      	bx	lr

0801816a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801816a:	b480      	push	{r7}
 801816c:	b085      	sub	sp, #20
 801816e:	af00      	add	r7, sp, #0
 8018170:	6078      	str	r0, [r7, #4]
 8018172:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018174:	683b      	ldr	r3, [r7, #0]
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018180:	d103      	bne.n	801818a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	691b      	ldr	r3, [r3, #16]
 8018186:	60fb      	str	r3, [r7, #12]
 8018188:	e00c      	b.n	80181a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	3308      	adds	r3, #8
 801818e:	60fb      	str	r3, [r7, #12]
 8018190:	e002      	b.n	8018198 <vListInsert+0x2e>
 8018192:	68fb      	ldr	r3, [r7, #12]
 8018194:	685b      	ldr	r3, [r3, #4]
 8018196:	60fb      	str	r3, [r7, #12]
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	685b      	ldr	r3, [r3, #4]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	68ba      	ldr	r2, [r7, #8]
 80181a0:	429a      	cmp	r2, r3
 80181a2:	d2f6      	bcs.n	8018192 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	685a      	ldr	r2, [r3, #4]
 80181a8:	683b      	ldr	r3, [r7, #0]
 80181aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80181ac:	683b      	ldr	r3, [r7, #0]
 80181ae:	685b      	ldr	r3, [r3, #4]
 80181b0:	683a      	ldr	r2, [r7, #0]
 80181b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80181b4:	683b      	ldr	r3, [r7, #0]
 80181b6:	68fa      	ldr	r2, [r7, #12]
 80181b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	683a      	ldr	r2, [r7, #0]
 80181be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80181c0:	683b      	ldr	r3, [r7, #0]
 80181c2:	687a      	ldr	r2, [r7, #4]
 80181c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	1c5a      	adds	r2, r3, #1
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	601a      	str	r2, [r3, #0]
}
 80181d0:	bf00      	nop
 80181d2:	3714      	adds	r7, #20
 80181d4:	46bd      	mov	sp, r7
 80181d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181da:	4770      	bx	lr

080181dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80181dc:	b480      	push	{r7}
 80181de:	b085      	sub	sp, #20
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	691b      	ldr	r3, [r3, #16]
 80181e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	685b      	ldr	r3, [r3, #4]
 80181ee:	687a      	ldr	r2, [r7, #4]
 80181f0:	6892      	ldr	r2, [r2, #8]
 80181f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	689b      	ldr	r3, [r3, #8]
 80181f8:	687a      	ldr	r2, [r7, #4]
 80181fa:	6852      	ldr	r2, [r2, #4]
 80181fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	685b      	ldr	r3, [r3, #4]
 8018202:	687a      	ldr	r2, [r7, #4]
 8018204:	429a      	cmp	r2, r3
 8018206:	d103      	bne.n	8018210 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	689a      	ldr	r2, [r3, #8]
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	2200      	movs	r2, #0
 8018214:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	1e5a      	subs	r2, r3, #1
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	681b      	ldr	r3, [r3, #0]
}
 8018224:	4618      	mov	r0, r3
 8018226:	3714      	adds	r7, #20
 8018228:	46bd      	mov	sp, r7
 801822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801822e:	4770      	bx	lr

08018230 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b084      	sub	sp, #16
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
 8018238:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801823e:	68fb      	ldr	r3, [r7, #12]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d10d      	bne.n	8018260 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018248:	b672      	cpsid	i
 801824a:	f383 8811 	msr	BASEPRI, r3
 801824e:	f3bf 8f6f 	isb	sy
 8018252:	f3bf 8f4f 	dsb	sy
 8018256:	b662      	cpsie	i
 8018258:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801825a:	bf00      	nop
 801825c:	bf00      	nop
 801825e:	e7fd      	b.n	801825c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8018260:	f002 fa4c 	bl	801a6fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	681a      	ldr	r2, [r3, #0]
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801826c:	68f9      	ldr	r1, [r7, #12]
 801826e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8018270:	fb01 f303 	mul.w	r3, r1, r3
 8018274:	441a      	add	r2, r3
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	2200      	movs	r2, #0
 801827e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	681a      	ldr	r2, [r3, #0]
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	681a      	ldr	r2, [r3, #0]
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018290:	3b01      	subs	r3, #1
 8018292:	68f9      	ldr	r1, [r7, #12]
 8018294:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8018296:	fb01 f303 	mul.w	r3, r1, r3
 801829a:	441a      	add	r2, r3
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	22ff      	movs	r2, #255	@ 0xff
 80182a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	22ff      	movs	r2, #255	@ 0xff
 80182ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d114      	bne.n	80182e0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	691b      	ldr	r3, [r3, #16]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d01a      	beq.n	80182f4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	3310      	adds	r3, #16
 80182c2:	4618      	mov	r0, r3
 80182c4:	f001 fcfa 	bl	8019cbc <xTaskRemoveFromEventList>
 80182c8:	4603      	mov	r3, r0
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d012      	beq.n	80182f4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80182ce:	4b0d      	ldr	r3, [pc, #52]	@ (8018304 <xQueueGenericReset+0xd4>)
 80182d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80182d4:	601a      	str	r2, [r3, #0]
 80182d6:	f3bf 8f4f 	dsb	sy
 80182da:	f3bf 8f6f 	isb	sy
 80182de:	e009      	b.n	80182f4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	3310      	adds	r3, #16
 80182e4:	4618      	mov	r0, r3
 80182e6:	f7ff feef 	bl	80180c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	3324      	adds	r3, #36	@ 0x24
 80182ee:	4618      	mov	r0, r3
 80182f0:	f7ff feea 	bl	80180c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80182f4:	f002 fa38 	bl	801a768 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80182f8:	2301      	movs	r3, #1
}
 80182fa:	4618      	mov	r0, r3
 80182fc:	3710      	adds	r7, #16
 80182fe:	46bd      	mov	sp, r7
 8018300:	bd80      	pop	{r7, pc}
 8018302:	bf00      	nop
 8018304:	e000ed04 	.word	0xe000ed04

08018308 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018308:	b580      	push	{r7, lr}
 801830a:	b08e      	sub	sp, #56	@ 0x38
 801830c:	af02      	add	r7, sp, #8
 801830e:	60f8      	str	r0, [r7, #12]
 8018310:	60b9      	str	r1, [r7, #8]
 8018312:	607a      	str	r2, [r7, #4]
 8018314:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d10d      	bne.n	8018338 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 801831c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018320:	b672      	cpsid	i
 8018322:	f383 8811 	msr	BASEPRI, r3
 8018326:	f3bf 8f6f 	isb	sy
 801832a:	f3bf 8f4f 	dsb	sy
 801832e:	b662      	cpsie	i
 8018330:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8018332:	bf00      	nop
 8018334:	bf00      	nop
 8018336:	e7fd      	b.n	8018334 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018338:	683b      	ldr	r3, [r7, #0]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d10d      	bne.n	801835a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 801833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018342:	b672      	cpsid	i
 8018344:	f383 8811 	msr	BASEPRI, r3
 8018348:	f3bf 8f6f 	isb	sy
 801834c:	f3bf 8f4f 	dsb	sy
 8018350:	b662      	cpsie	i
 8018352:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8018354:	bf00      	nop
 8018356:	bf00      	nop
 8018358:	e7fd      	b.n	8018356 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d002      	beq.n	8018366 <xQueueGenericCreateStatic+0x5e>
 8018360:	68bb      	ldr	r3, [r7, #8]
 8018362:	2b00      	cmp	r3, #0
 8018364:	d001      	beq.n	801836a <xQueueGenericCreateStatic+0x62>
 8018366:	2301      	movs	r3, #1
 8018368:	e000      	b.n	801836c <xQueueGenericCreateStatic+0x64>
 801836a:	2300      	movs	r3, #0
 801836c:	2b00      	cmp	r3, #0
 801836e:	d10d      	bne.n	801838c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8018370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018374:	b672      	cpsid	i
 8018376:	f383 8811 	msr	BASEPRI, r3
 801837a:	f3bf 8f6f 	isb	sy
 801837e:	f3bf 8f4f 	dsb	sy
 8018382:	b662      	cpsie	i
 8018384:	623b      	str	r3, [r7, #32]
}
 8018386:	bf00      	nop
 8018388:	bf00      	nop
 801838a:	e7fd      	b.n	8018388 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d102      	bne.n	8018398 <xQueueGenericCreateStatic+0x90>
 8018392:	68bb      	ldr	r3, [r7, #8]
 8018394:	2b00      	cmp	r3, #0
 8018396:	d101      	bne.n	801839c <xQueueGenericCreateStatic+0x94>
 8018398:	2301      	movs	r3, #1
 801839a:	e000      	b.n	801839e <xQueueGenericCreateStatic+0x96>
 801839c:	2300      	movs	r3, #0
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d10d      	bne.n	80183be <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80183a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183a6:	b672      	cpsid	i
 80183a8:	f383 8811 	msr	BASEPRI, r3
 80183ac:	f3bf 8f6f 	isb	sy
 80183b0:	f3bf 8f4f 	dsb	sy
 80183b4:	b662      	cpsie	i
 80183b6:	61fb      	str	r3, [r7, #28]
}
 80183b8:	bf00      	nop
 80183ba:	bf00      	nop
 80183bc:	e7fd      	b.n	80183ba <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80183be:	2348      	movs	r3, #72	@ 0x48
 80183c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80183c2:	697b      	ldr	r3, [r7, #20]
 80183c4:	2b48      	cmp	r3, #72	@ 0x48
 80183c6:	d00d      	beq.n	80183e4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80183c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183cc:	b672      	cpsid	i
 80183ce:	f383 8811 	msr	BASEPRI, r3
 80183d2:	f3bf 8f6f 	isb	sy
 80183d6:	f3bf 8f4f 	dsb	sy
 80183da:	b662      	cpsie	i
 80183dc:	61bb      	str	r3, [r7, #24]
}
 80183de:	bf00      	nop
 80183e0:	bf00      	nop
 80183e2:	e7fd      	b.n	80183e0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80183e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80183e6:	683b      	ldr	r3, [r7, #0]
 80183e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80183ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d00d      	beq.n	801840c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80183f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183f2:	2201      	movs	r2, #1
 80183f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80183f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80183fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183fe:	9300      	str	r3, [sp, #0]
 8018400:	4613      	mov	r3, r2
 8018402:	687a      	ldr	r2, [r7, #4]
 8018404:	68b9      	ldr	r1, [r7, #8]
 8018406:	68f8      	ldr	r0, [r7, #12]
 8018408:	f000 f848 	bl	801849c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801840c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801840e:	4618      	mov	r0, r3
 8018410:	3730      	adds	r7, #48	@ 0x30
 8018412:	46bd      	mov	sp, r7
 8018414:	bd80      	pop	{r7, pc}

08018416 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8018416:	b580      	push	{r7, lr}
 8018418:	b08a      	sub	sp, #40	@ 0x28
 801841a:	af02      	add	r7, sp, #8
 801841c:	60f8      	str	r0, [r7, #12]
 801841e:	60b9      	str	r1, [r7, #8]
 8018420:	4613      	mov	r3, r2
 8018422:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d10d      	bne.n	8018446 <xQueueGenericCreate+0x30>
	__asm volatile
 801842a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801842e:	b672      	cpsid	i
 8018430:	f383 8811 	msr	BASEPRI, r3
 8018434:	f3bf 8f6f 	isb	sy
 8018438:	f3bf 8f4f 	dsb	sy
 801843c:	b662      	cpsie	i
 801843e:	613b      	str	r3, [r7, #16]
}
 8018440:	bf00      	nop
 8018442:	bf00      	nop
 8018444:	e7fd      	b.n	8018442 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d102      	bne.n	8018452 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801844c:	2300      	movs	r3, #0
 801844e:	61fb      	str	r3, [r7, #28]
 8018450:	e004      	b.n	801845c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	68ba      	ldr	r2, [r7, #8]
 8018456:	fb02 f303 	mul.w	r3, r2, r3
 801845a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801845c:	69fb      	ldr	r3, [r7, #28]
 801845e:	3348      	adds	r3, #72	@ 0x48
 8018460:	4618      	mov	r0, r3
 8018462:	f002 fa79 	bl	801a958 <pvPortMalloc>
 8018466:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8018468:	69bb      	ldr	r3, [r7, #24]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d011      	beq.n	8018492 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801846e:	69bb      	ldr	r3, [r7, #24]
 8018470:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018472:	697b      	ldr	r3, [r7, #20]
 8018474:	3348      	adds	r3, #72	@ 0x48
 8018476:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018478:	69bb      	ldr	r3, [r7, #24]
 801847a:	2200      	movs	r2, #0
 801847c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018480:	79fa      	ldrb	r2, [r7, #7]
 8018482:	69bb      	ldr	r3, [r7, #24]
 8018484:	9300      	str	r3, [sp, #0]
 8018486:	4613      	mov	r3, r2
 8018488:	697a      	ldr	r2, [r7, #20]
 801848a:	68b9      	ldr	r1, [r7, #8]
 801848c:	68f8      	ldr	r0, [r7, #12]
 801848e:	f000 f805 	bl	801849c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018492:	69bb      	ldr	r3, [r7, #24]
	}
 8018494:	4618      	mov	r0, r3
 8018496:	3720      	adds	r7, #32
 8018498:	46bd      	mov	sp, r7
 801849a:	bd80      	pop	{r7, pc}

0801849c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801849c:	b580      	push	{r7, lr}
 801849e:	b084      	sub	sp, #16
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	60f8      	str	r0, [r7, #12]
 80184a4:	60b9      	str	r1, [r7, #8]
 80184a6:	607a      	str	r2, [r7, #4]
 80184a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80184aa:	68bb      	ldr	r3, [r7, #8]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d103      	bne.n	80184b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80184b0:	69bb      	ldr	r3, [r7, #24]
 80184b2:	69ba      	ldr	r2, [r7, #24]
 80184b4:	601a      	str	r2, [r3, #0]
 80184b6:	e002      	b.n	80184be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80184b8:	69bb      	ldr	r3, [r7, #24]
 80184ba:	687a      	ldr	r2, [r7, #4]
 80184bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80184be:	69bb      	ldr	r3, [r7, #24]
 80184c0:	68fa      	ldr	r2, [r7, #12]
 80184c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80184c4:	69bb      	ldr	r3, [r7, #24]
 80184c6:	68ba      	ldr	r2, [r7, #8]
 80184c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80184ca:	2101      	movs	r1, #1
 80184cc:	69b8      	ldr	r0, [r7, #24]
 80184ce:	f7ff feaf 	bl	8018230 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80184d2:	bf00      	nop
 80184d4:	3710      	adds	r7, #16
 80184d6:	46bd      	mov	sp, r7
 80184d8:	bd80      	pop	{r7, pc}

080184da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80184da:	b580      	push	{r7, lr}
 80184dc:	b082      	sub	sp, #8
 80184de:	af00      	add	r7, sp, #0
 80184e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d00e      	beq.n	8018506 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	2200      	movs	r2, #0
 80184ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	2200      	movs	r2, #0
 80184f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	2200      	movs	r2, #0
 80184f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80184fa:	2300      	movs	r3, #0
 80184fc:	2200      	movs	r2, #0
 80184fe:	2100      	movs	r1, #0
 8018500:	6878      	ldr	r0, [r7, #4]
 8018502:	f000 f8ad 	bl	8018660 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8018506:	bf00      	nop
 8018508:	3708      	adds	r7, #8
 801850a:	46bd      	mov	sp, r7
 801850c:	bd80      	pop	{r7, pc}

0801850e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801850e:	b580      	push	{r7, lr}
 8018510:	b086      	sub	sp, #24
 8018512:	af00      	add	r7, sp, #0
 8018514:	4603      	mov	r3, r0
 8018516:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8018518:	2301      	movs	r3, #1
 801851a:	617b      	str	r3, [r7, #20]
 801851c:	2300      	movs	r3, #0
 801851e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8018520:	79fb      	ldrb	r3, [r7, #7]
 8018522:	461a      	mov	r2, r3
 8018524:	6939      	ldr	r1, [r7, #16]
 8018526:	6978      	ldr	r0, [r7, #20]
 8018528:	f7ff ff75 	bl	8018416 <xQueueGenericCreate>
 801852c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801852e:	68f8      	ldr	r0, [r7, #12]
 8018530:	f7ff ffd3 	bl	80184da <prvInitialiseMutex>

		return xNewQueue;
 8018534:	68fb      	ldr	r3, [r7, #12]
	}
 8018536:	4618      	mov	r0, r3
 8018538:	3718      	adds	r7, #24
 801853a:	46bd      	mov	sp, r7
 801853c:	bd80      	pop	{r7, pc}

0801853e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801853e:	b580      	push	{r7, lr}
 8018540:	b088      	sub	sp, #32
 8018542:	af02      	add	r7, sp, #8
 8018544:	4603      	mov	r3, r0
 8018546:	6039      	str	r1, [r7, #0]
 8018548:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801854a:	2301      	movs	r3, #1
 801854c:	617b      	str	r3, [r7, #20]
 801854e:	2300      	movs	r3, #0
 8018550:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8018552:	79fb      	ldrb	r3, [r7, #7]
 8018554:	9300      	str	r3, [sp, #0]
 8018556:	683b      	ldr	r3, [r7, #0]
 8018558:	2200      	movs	r2, #0
 801855a:	6939      	ldr	r1, [r7, #16]
 801855c:	6978      	ldr	r0, [r7, #20]
 801855e:	f7ff fed3 	bl	8018308 <xQueueGenericCreateStatic>
 8018562:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018564:	68f8      	ldr	r0, [r7, #12]
 8018566:	f7ff ffb8 	bl	80184da <prvInitialiseMutex>

		return xNewQueue;
 801856a:	68fb      	ldr	r3, [r7, #12]
	}
 801856c:	4618      	mov	r0, r3
 801856e:	3718      	adds	r7, #24
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}

08018574 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8018574:	b580      	push	{r7, lr}
 8018576:	b08a      	sub	sp, #40	@ 0x28
 8018578:	af02      	add	r7, sp, #8
 801857a:	60f8      	str	r0, [r7, #12]
 801857c:	60b9      	str	r1, [r7, #8]
 801857e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d10d      	bne.n	80185a2 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8018586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801858a:	b672      	cpsid	i
 801858c:	f383 8811 	msr	BASEPRI, r3
 8018590:	f3bf 8f6f 	isb	sy
 8018594:	f3bf 8f4f 	dsb	sy
 8018598:	b662      	cpsie	i
 801859a:	61bb      	str	r3, [r7, #24]
}
 801859c:	bf00      	nop
 801859e:	bf00      	nop
 80185a0:	e7fd      	b.n	801859e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80185a2:	68ba      	ldr	r2, [r7, #8]
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	429a      	cmp	r2, r3
 80185a8:	d90d      	bls.n	80185c6 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 80185aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185ae:	b672      	cpsid	i
 80185b0:	f383 8811 	msr	BASEPRI, r3
 80185b4:	f3bf 8f6f 	isb	sy
 80185b8:	f3bf 8f4f 	dsb	sy
 80185bc:	b662      	cpsie	i
 80185be:	617b      	str	r3, [r7, #20]
}
 80185c0:	bf00      	nop
 80185c2:	bf00      	nop
 80185c4:	e7fd      	b.n	80185c2 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80185c6:	2302      	movs	r3, #2
 80185c8:	9300      	str	r3, [sp, #0]
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	2200      	movs	r2, #0
 80185ce:	2100      	movs	r1, #0
 80185d0:	68f8      	ldr	r0, [r7, #12]
 80185d2:	f7ff fe99 	bl	8018308 <xQueueGenericCreateStatic>
 80185d6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80185d8:	69fb      	ldr	r3, [r7, #28]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d002      	beq.n	80185e4 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80185de:	69fb      	ldr	r3, [r7, #28]
 80185e0:	68ba      	ldr	r2, [r7, #8]
 80185e2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80185e4:	69fb      	ldr	r3, [r7, #28]
	}
 80185e6:	4618      	mov	r0, r3
 80185e8:	3720      	adds	r7, #32
 80185ea:	46bd      	mov	sp, r7
 80185ec:	bd80      	pop	{r7, pc}

080185ee <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80185ee:	b580      	push	{r7, lr}
 80185f0:	b086      	sub	sp, #24
 80185f2:	af00      	add	r7, sp, #0
 80185f4:	6078      	str	r0, [r7, #4]
 80185f6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d10d      	bne.n	801861a <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80185fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018602:	b672      	cpsid	i
 8018604:	f383 8811 	msr	BASEPRI, r3
 8018608:	f3bf 8f6f 	isb	sy
 801860c:	f3bf 8f4f 	dsb	sy
 8018610:	b662      	cpsie	i
 8018612:	613b      	str	r3, [r7, #16]
}
 8018614:	bf00      	nop
 8018616:	bf00      	nop
 8018618:	e7fd      	b.n	8018616 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801861a:	683a      	ldr	r2, [r7, #0]
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	429a      	cmp	r2, r3
 8018620:	d90d      	bls.n	801863e <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8018622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018626:	b672      	cpsid	i
 8018628:	f383 8811 	msr	BASEPRI, r3
 801862c:	f3bf 8f6f 	isb	sy
 8018630:	f3bf 8f4f 	dsb	sy
 8018634:	b662      	cpsie	i
 8018636:	60fb      	str	r3, [r7, #12]
}
 8018638:	bf00      	nop
 801863a:	bf00      	nop
 801863c:	e7fd      	b.n	801863a <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801863e:	2202      	movs	r2, #2
 8018640:	2100      	movs	r1, #0
 8018642:	6878      	ldr	r0, [r7, #4]
 8018644:	f7ff fee7 	bl	8018416 <xQueueGenericCreate>
 8018648:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d002      	beq.n	8018656 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	683a      	ldr	r2, [r7, #0]
 8018654:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8018656:	697b      	ldr	r3, [r7, #20]
	}
 8018658:	4618      	mov	r0, r3
 801865a:	3718      	adds	r7, #24
 801865c:	46bd      	mov	sp, r7
 801865e:	bd80      	pop	{r7, pc}

08018660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b08e      	sub	sp, #56	@ 0x38
 8018664:	af00      	add	r7, sp, #0
 8018666:	60f8      	str	r0, [r7, #12]
 8018668:	60b9      	str	r1, [r7, #8]
 801866a:	607a      	str	r2, [r7, #4]
 801866c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801866e:	2300      	movs	r3, #0
 8018670:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8018676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018678:	2b00      	cmp	r3, #0
 801867a:	d10d      	bne.n	8018698 <xQueueGenericSend+0x38>
	__asm volatile
 801867c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018680:	b672      	cpsid	i
 8018682:	f383 8811 	msr	BASEPRI, r3
 8018686:	f3bf 8f6f 	isb	sy
 801868a:	f3bf 8f4f 	dsb	sy
 801868e:	b662      	cpsie	i
 8018690:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8018692:	bf00      	nop
 8018694:	bf00      	nop
 8018696:	e7fd      	b.n	8018694 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018698:	68bb      	ldr	r3, [r7, #8]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d103      	bne.n	80186a6 <xQueueGenericSend+0x46>
 801869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d101      	bne.n	80186aa <xQueueGenericSend+0x4a>
 80186a6:	2301      	movs	r3, #1
 80186a8:	e000      	b.n	80186ac <xQueueGenericSend+0x4c>
 80186aa:	2300      	movs	r3, #0
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d10d      	bne.n	80186cc <xQueueGenericSend+0x6c>
	__asm volatile
 80186b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80186b4:	b672      	cpsid	i
 80186b6:	f383 8811 	msr	BASEPRI, r3
 80186ba:	f3bf 8f6f 	isb	sy
 80186be:	f3bf 8f4f 	dsb	sy
 80186c2:	b662      	cpsie	i
 80186c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80186c6:	bf00      	nop
 80186c8:	bf00      	nop
 80186ca:	e7fd      	b.n	80186c8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	2b02      	cmp	r3, #2
 80186d0:	d103      	bne.n	80186da <xQueueGenericSend+0x7a>
 80186d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80186d6:	2b01      	cmp	r3, #1
 80186d8:	d101      	bne.n	80186de <xQueueGenericSend+0x7e>
 80186da:	2301      	movs	r3, #1
 80186dc:	e000      	b.n	80186e0 <xQueueGenericSend+0x80>
 80186de:	2300      	movs	r3, #0
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d10d      	bne.n	8018700 <xQueueGenericSend+0xa0>
	__asm volatile
 80186e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80186e8:	b672      	cpsid	i
 80186ea:	f383 8811 	msr	BASEPRI, r3
 80186ee:	f3bf 8f6f 	isb	sy
 80186f2:	f3bf 8f4f 	dsb	sy
 80186f6:	b662      	cpsie	i
 80186f8:	623b      	str	r3, [r7, #32]
}
 80186fa:	bf00      	nop
 80186fc:	bf00      	nop
 80186fe:	e7fd      	b.n	80186fc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018700:	f001 fcac 	bl	801a05c <xTaskGetSchedulerState>
 8018704:	4603      	mov	r3, r0
 8018706:	2b00      	cmp	r3, #0
 8018708:	d102      	bne.n	8018710 <xQueueGenericSend+0xb0>
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	2b00      	cmp	r3, #0
 801870e:	d101      	bne.n	8018714 <xQueueGenericSend+0xb4>
 8018710:	2301      	movs	r3, #1
 8018712:	e000      	b.n	8018716 <xQueueGenericSend+0xb6>
 8018714:	2300      	movs	r3, #0
 8018716:	2b00      	cmp	r3, #0
 8018718:	d10d      	bne.n	8018736 <xQueueGenericSend+0xd6>
	__asm volatile
 801871a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801871e:	b672      	cpsid	i
 8018720:	f383 8811 	msr	BASEPRI, r3
 8018724:	f3bf 8f6f 	isb	sy
 8018728:	f3bf 8f4f 	dsb	sy
 801872c:	b662      	cpsie	i
 801872e:	61fb      	str	r3, [r7, #28]
}
 8018730:	bf00      	nop
 8018732:	bf00      	nop
 8018734:	e7fd      	b.n	8018732 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018736:	f001 ffe1 	bl	801a6fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801873a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801873c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018742:	429a      	cmp	r2, r3
 8018744:	d302      	bcc.n	801874c <xQueueGenericSend+0xec>
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	2b02      	cmp	r3, #2
 801874a:	d129      	bne.n	80187a0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801874c:	683a      	ldr	r2, [r7, #0]
 801874e:	68b9      	ldr	r1, [r7, #8]
 8018750:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018752:	f000 fc6b 	bl	801902c <prvCopyDataToQueue>
 8018756:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801875a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801875c:	2b00      	cmp	r3, #0
 801875e:	d010      	beq.n	8018782 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018762:	3324      	adds	r3, #36	@ 0x24
 8018764:	4618      	mov	r0, r3
 8018766:	f001 faa9 	bl	8019cbc <xTaskRemoveFromEventList>
 801876a:	4603      	mov	r3, r0
 801876c:	2b00      	cmp	r3, #0
 801876e:	d013      	beq.n	8018798 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018770:	4b3f      	ldr	r3, [pc, #252]	@ (8018870 <xQueueGenericSend+0x210>)
 8018772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018776:	601a      	str	r2, [r3, #0]
 8018778:	f3bf 8f4f 	dsb	sy
 801877c:	f3bf 8f6f 	isb	sy
 8018780:	e00a      	b.n	8018798 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018784:	2b00      	cmp	r3, #0
 8018786:	d007      	beq.n	8018798 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018788:	4b39      	ldr	r3, [pc, #228]	@ (8018870 <xQueueGenericSend+0x210>)
 801878a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801878e:	601a      	str	r2, [r3, #0]
 8018790:	f3bf 8f4f 	dsb	sy
 8018794:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018798:	f001 ffe6 	bl	801a768 <vPortExitCritical>
				return pdPASS;
 801879c:	2301      	movs	r3, #1
 801879e:	e063      	b.n	8018868 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d103      	bne.n	80187ae <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80187a6:	f001 ffdf 	bl	801a768 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80187aa:	2300      	movs	r3, #0
 80187ac:	e05c      	b.n	8018868 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80187ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d106      	bne.n	80187c2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80187b4:	f107 0314 	add.w	r3, r7, #20
 80187b8:	4618      	mov	r0, r3
 80187ba:	f001 fae5 	bl	8019d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80187be:	2301      	movs	r3, #1
 80187c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80187c2:	f001 ffd1 	bl	801a768 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80187c6:	f001 f83b 	bl	8019840 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80187ca:	f001 ff97 	bl	801a6fc <vPortEnterCritical>
 80187ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80187d4:	b25b      	sxtb	r3, r3
 80187d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187da:	d103      	bne.n	80187e4 <xQueueGenericSend+0x184>
 80187dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187de:	2200      	movs	r2, #0
 80187e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80187e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80187ea:	b25b      	sxtb	r3, r3
 80187ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187f0:	d103      	bne.n	80187fa <xQueueGenericSend+0x19a>
 80187f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187f4:	2200      	movs	r2, #0
 80187f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80187fa:	f001 ffb5 	bl	801a768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80187fe:	1d3a      	adds	r2, r7, #4
 8018800:	f107 0314 	add.w	r3, r7, #20
 8018804:	4611      	mov	r1, r2
 8018806:	4618      	mov	r0, r3
 8018808:	f001 fad4 	bl	8019db4 <xTaskCheckForTimeOut>
 801880c:	4603      	mov	r3, r0
 801880e:	2b00      	cmp	r3, #0
 8018810:	d124      	bne.n	801885c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018812:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018814:	f000 fd02 	bl	801921c <prvIsQueueFull>
 8018818:	4603      	mov	r3, r0
 801881a:	2b00      	cmp	r3, #0
 801881c:	d018      	beq.n	8018850 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018820:	3310      	adds	r3, #16
 8018822:	687a      	ldr	r2, [r7, #4]
 8018824:	4611      	mov	r1, r2
 8018826:	4618      	mov	r0, r3
 8018828:	f001 fa20 	bl	8019c6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801882c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801882e:	f000 fc8d 	bl	801914c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8018832:	f001 f813 	bl	801985c <xTaskResumeAll>
 8018836:	4603      	mov	r3, r0
 8018838:	2b00      	cmp	r3, #0
 801883a:	f47f af7c 	bne.w	8018736 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 801883e:	4b0c      	ldr	r3, [pc, #48]	@ (8018870 <xQueueGenericSend+0x210>)
 8018840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018844:	601a      	str	r2, [r3, #0]
 8018846:	f3bf 8f4f 	dsb	sy
 801884a:	f3bf 8f6f 	isb	sy
 801884e:	e772      	b.n	8018736 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018850:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018852:	f000 fc7b 	bl	801914c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018856:	f001 f801 	bl	801985c <xTaskResumeAll>
 801885a:	e76c      	b.n	8018736 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801885c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801885e:	f000 fc75 	bl	801914c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018862:	f000 fffb 	bl	801985c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018866:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018868:	4618      	mov	r0, r3
 801886a:	3738      	adds	r7, #56	@ 0x38
 801886c:	46bd      	mov	sp, r7
 801886e:	bd80      	pop	{r7, pc}
 8018870:	e000ed04 	.word	0xe000ed04

08018874 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018874:	b580      	push	{r7, lr}
 8018876:	b08e      	sub	sp, #56	@ 0x38
 8018878:	af00      	add	r7, sp, #0
 801887a:	60f8      	str	r0, [r7, #12]
 801887c:	60b9      	str	r1, [r7, #8]
 801887e:	607a      	str	r2, [r7, #4]
 8018880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8018886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018888:	2b00      	cmp	r3, #0
 801888a:	d10d      	bne.n	80188a8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 801888c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018890:	b672      	cpsid	i
 8018892:	f383 8811 	msr	BASEPRI, r3
 8018896:	f3bf 8f6f 	isb	sy
 801889a:	f3bf 8f4f 	dsb	sy
 801889e:	b662      	cpsie	i
 80188a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80188a2:	bf00      	nop
 80188a4:	bf00      	nop
 80188a6:	e7fd      	b.n	80188a4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80188a8:	68bb      	ldr	r3, [r7, #8]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d103      	bne.n	80188b6 <xQueueGenericSendFromISR+0x42>
 80188ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d101      	bne.n	80188ba <xQueueGenericSendFromISR+0x46>
 80188b6:	2301      	movs	r3, #1
 80188b8:	e000      	b.n	80188bc <xQueueGenericSendFromISR+0x48>
 80188ba:	2300      	movs	r3, #0
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d10d      	bne.n	80188dc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80188c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80188c4:	b672      	cpsid	i
 80188c6:	f383 8811 	msr	BASEPRI, r3
 80188ca:	f3bf 8f6f 	isb	sy
 80188ce:	f3bf 8f4f 	dsb	sy
 80188d2:	b662      	cpsie	i
 80188d4:	623b      	str	r3, [r7, #32]
}
 80188d6:	bf00      	nop
 80188d8:	bf00      	nop
 80188da:	e7fd      	b.n	80188d8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80188dc:	683b      	ldr	r3, [r7, #0]
 80188de:	2b02      	cmp	r3, #2
 80188e0:	d103      	bne.n	80188ea <xQueueGenericSendFromISR+0x76>
 80188e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80188e6:	2b01      	cmp	r3, #1
 80188e8:	d101      	bne.n	80188ee <xQueueGenericSendFromISR+0x7a>
 80188ea:	2301      	movs	r3, #1
 80188ec:	e000      	b.n	80188f0 <xQueueGenericSendFromISR+0x7c>
 80188ee:	2300      	movs	r3, #0
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d10d      	bne.n	8018910 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80188f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80188f8:	b672      	cpsid	i
 80188fa:	f383 8811 	msr	BASEPRI, r3
 80188fe:	f3bf 8f6f 	isb	sy
 8018902:	f3bf 8f4f 	dsb	sy
 8018906:	b662      	cpsie	i
 8018908:	61fb      	str	r3, [r7, #28]
}
 801890a:	bf00      	nop
 801890c:	bf00      	nop
 801890e:	e7fd      	b.n	801890c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018910:	f001 ffdc 	bl	801a8cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018914:	f3ef 8211 	mrs	r2, BASEPRI
 8018918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801891c:	b672      	cpsid	i
 801891e:	f383 8811 	msr	BASEPRI, r3
 8018922:	f3bf 8f6f 	isb	sy
 8018926:	f3bf 8f4f 	dsb	sy
 801892a:	b662      	cpsie	i
 801892c:	61ba      	str	r2, [r7, #24]
 801892e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8018930:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018932:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018936:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801893a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801893c:	429a      	cmp	r2, r3
 801893e:	d302      	bcc.n	8018946 <xQueueGenericSendFromISR+0xd2>
 8018940:	683b      	ldr	r3, [r7, #0]
 8018942:	2b02      	cmp	r3, #2
 8018944:	d12c      	bne.n	80189a0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801894c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018950:	683a      	ldr	r2, [r7, #0]
 8018952:	68b9      	ldr	r1, [r7, #8]
 8018954:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018956:	f000 fb69 	bl	801902c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801895a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801895e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018962:	d112      	bne.n	801898a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018968:	2b00      	cmp	r3, #0
 801896a:	d016      	beq.n	801899a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801896c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801896e:	3324      	adds	r3, #36	@ 0x24
 8018970:	4618      	mov	r0, r3
 8018972:	f001 f9a3 	bl	8019cbc <xTaskRemoveFromEventList>
 8018976:	4603      	mov	r3, r0
 8018978:	2b00      	cmp	r3, #0
 801897a:	d00e      	beq.n	801899a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d00b      	beq.n	801899a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	2201      	movs	r2, #1
 8018986:	601a      	str	r2, [r3, #0]
 8018988:	e007      	b.n	801899a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801898a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801898e:	3301      	adds	r3, #1
 8018990:	b2db      	uxtb	r3, r3
 8018992:	b25a      	sxtb	r2, r3
 8018994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801899a:	2301      	movs	r3, #1
 801899c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801899e:	e001      	b.n	80189a4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80189a0:	2300      	movs	r3, #0
 80189a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80189a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189a6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80189a8:	693b      	ldr	r3, [r7, #16]
 80189aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80189ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80189b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80189b2:	4618      	mov	r0, r3
 80189b4:	3738      	adds	r7, #56	@ 0x38
 80189b6:	46bd      	mov	sp, r7
 80189b8:	bd80      	pop	{r7, pc}

080189ba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80189ba:	b580      	push	{r7, lr}
 80189bc:	b08e      	sub	sp, #56	@ 0x38
 80189be:	af00      	add	r7, sp, #0
 80189c0:	6078      	str	r0, [r7, #4]
 80189c2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80189c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d10d      	bne.n	80189ea <xQueueGiveFromISR+0x30>
	__asm volatile
 80189ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189d2:	b672      	cpsid	i
 80189d4:	f383 8811 	msr	BASEPRI, r3
 80189d8:	f3bf 8f6f 	isb	sy
 80189dc:	f3bf 8f4f 	dsb	sy
 80189e0:	b662      	cpsie	i
 80189e2:	623b      	str	r3, [r7, #32]
}
 80189e4:	bf00      	nop
 80189e6:	bf00      	nop
 80189e8:	e7fd      	b.n	80189e6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80189ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d00d      	beq.n	8018a0e <xQueueGiveFromISR+0x54>
	__asm volatile
 80189f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189f6:	b672      	cpsid	i
 80189f8:	f383 8811 	msr	BASEPRI, r3
 80189fc:	f3bf 8f6f 	isb	sy
 8018a00:	f3bf 8f4f 	dsb	sy
 8018a04:	b662      	cpsie	i
 8018a06:	61fb      	str	r3, [r7, #28]
}
 8018a08:	bf00      	nop
 8018a0a:	bf00      	nop
 8018a0c:	e7fd      	b.n	8018a0a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8018a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d103      	bne.n	8018a1e <xQueueGiveFromISR+0x64>
 8018a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a18:	689b      	ldr	r3, [r3, #8]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d101      	bne.n	8018a22 <xQueueGiveFromISR+0x68>
 8018a1e:	2301      	movs	r3, #1
 8018a20:	e000      	b.n	8018a24 <xQueueGiveFromISR+0x6a>
 8018a22:	2300      	movs	r3, #0
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d10d      	bne.n	8018a44 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8018a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a2c:	b672      	cpsid	i
 8018a2e:	f383 8811 	msr	BASEPRI, r3
 8018a32:	f3bf 8f6f 	isb	sy
 8018a36:	f3bf 8f4f 	dsb	sy
 8018a3a:	b662      	cpsie	i
 8018a3c:	61bb      	str	r3, [r7, #24]
}
 8018a3e:	bf00      	nop
 8018a40:	bf00      	nop
 8018a42:	e7fd      	b.n	8018a40 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018a44:	f001 ff42 	bl	801a8cc <vPortValidateInterruptPriority>
	__asm volatile
 8018a48:	f3ef 8211 	mrs	r2, BASEPRI
 8018a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a50:	b672      	cpsid	i
 8018a52:	f383 8811 	msr	BASEPRI, r3
 8018a56:	f3bf 8f6f 	isb	sy
 8018a5a:	f3bf 8f4f 	dsb	sy
 8018a5e:	b662      	cpsie	i
 8018a60:	617a      	str	r2, [r7, #20]
 8018a62:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018a64:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018a6c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8018a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018a72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018a74:	429a      	cmp	r2, r3
 8018a76:	d22b      	bcs.n	8018ad0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018a7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a84:	1c5a      	adds	r2, r3, #1
 8018a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a88:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018a8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a92:	d112      	bne.n	8018aba <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d016      	beq.n	8018aca <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a9e:	3324      	adds	r3, #36	@ 0x24
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	f001 f90b 	bl	8019cbc <xTaskRemoveFromEventList>
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d00e      	beq.n	8018aca <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018aac:	683b      	ldr	r3, [r7, #0]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d00b      	beq.n	8018aca <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018ab2:	683b      	ldr	r3, [r7, #0]
 8018ab4:	2201      	movs	r2, #1
 8018ab6:	601a      	str	r2, [r3, #0]
 8018ab8:	e007      	b.n	8018aca <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018aba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018abe:	3301      	adds	r3, #1
 8018ac0:	b2db      	uxtb	r3, r3
 8018ac2:	b25a      	sxtb	r2, r3
 8018ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8018aca:	2301      	movs	r3, #1
 8018acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8018ace:	e001      	b.n	8018ad4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8018ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ad6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	f383 8811 	msr	BASEPRI, r3
}
 8018ade:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8018ae2:	4618      	mov	r0, r3
 8018ae4:	3738      	adds	r7, #56	@ 0x38
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	bd80      	pop	{r7, pc}
	...

08018aec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b08c      	sub	sp, #48	@ 0x30
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	60f8      	str	r0, [r7, #12]
 8018af4:	60b9      	str	r1, [r7, #8]
 8018af6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018af8:	2300      	movs	r3, #0
 8018afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d10d      	bne.n	8018b22 <xQueueReceive+0x36>
	__asm volatile
 8018b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b0a:	b672      	cpsid	i
 8018b0c:	f383 8811 	msr	BASEPRI, r3
 8018b10:	f3bf 8f6f 	isb	sy
 8018b14:	f3bf 8f4f 	dsb	sy
 8018b18:	b662      	cpsie	i
 8018b1a:	623b      	str	r3, [r7, #32]
}
 8018b1c:	bf00      	nop
 8018b1e:	bf00      	nop
 8018b20:	e7fd      	b.n	8018b1e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018b22:	68bb      	ldr	r3, [r7, #8]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d103      	bne.n	8018b30 <xQueueReceive+0x44>
 8018b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d101      	bne.n	8018b34 <xQueueReceive+0x48>
 8018b30:	2301      	movs	r3, #1
 8018b32:	e000      	b.n	8018b36 <xQueueReceive+0x4a>
 8018b34:	2300      	movs	r3, #0
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d10d      	bne.n	8018b56 <xQueueReceive+0x6a>
	__asm volatile
 8018b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b3e:	b672      	cpsid	i
 8018b40:	f383 8811 	msr	BASEPRI, r3
 8018b44:	f3bf 8f6f 	isb	sy
 8018b48:	f3bf 8f4f 	dsb	sy
 8018b4c:	b662      	cpsie	i
 8018b4e:	61fb      	str	r3, [r7, #28]
}
 8018b50:	bf00      	nop
 8018b52:	bf00      	nop
 8018b54:	e7fd      	b.n	8018b52 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018b56:	f001 fa81 	bl	801a05c <xTaskGetSchedulerState>
 8018b5a:	4603      	mov	r3, r0
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d102      	bne.n	8018b66 <xQueueReceive+0x7a>
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d101      	bne.n	8018b6a <xQueueReceive+0x7e>
 8018b66:	2301      	movs	r3, #1
 8018b68:	e000      	b.n	8018b6c <xQueueReceive+0x80>
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d10d      	bne.n	8018b8c <xQueueReceive+0xa0>
	__asm volatile
 8018b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b74:	b672      	cpsid	i
 8018b76:	f383 8811 	msr	BASEPRI, r3
 8018b7a:	f3bf 8f6f 	isb	sy
 8018b7e:	f3bf 8f4f 	dsb	sy
 8018b82:	b662      	cpsie	i
 8018b84:	61bb      	str	r3, [r7, #24]
}
 8018b86:	bf00      	nop
 8018b88:	bf00      	nop
 8018b8a:	e7fd      	b.n	8018b88 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018b8c:	f001 fdb6 	bl	801a6fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018b94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d01f      	beq.n	8018bdc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018b9c:	68b9      	ldr	r1, [r7, #8]
 8018b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018ba0:	f000 faae 	bl	8019100 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ba6:	1e5a      	subs	r2, r3, #1
 8018ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018baa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bae:	691b      	ldr	r3, [r3, #16]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d00f      	beq.n	8018bd4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bb6:	3310      	adds	r3, #16
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f001 f87f 	bl	8019cbc <xTaskRemoveFromEventList>
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d007      	beq.n	8018bd4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8018cb8 <xQueueReceive+0x1cc>)
 8018bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018bca:	601a      	str	r2, [r3, #0]
 8018bcc:	f3bf 8f4f 	dsb	sy
 8018bd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018bd4:	f001 fdc8 	bl	801a768 <vPortExitCritical>
				return pdPASS;
 8018bd8:	2301      	movs	r3, #1
 8018bda:	e069      	b.n	8018cb0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d103      	bne.n	8018bea <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018be2:	f001 fdc1 	bl	801a768 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018be6:	2300      	movs	r3, #0
 8018be8:	e062      	b.n	8018cb0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d106      	bne.n	8018bfe <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018bf0:	f107 0310 	add.w	r3, r7, #16
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f001 f8c7 	bl	8019d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018bfa:	2301      	movs	r3, #1
 8018bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018bfe:	f001 fdb3 	bl	801a768 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018c02:	f000 fe1d 	bl	8019840 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018c06:	f001 fd79 	bl	801a6fc <vPortEnterCritical>
 8018c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018c10:	b25b      	sxtb	r3, r3
 8018c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c16:	d103      	bne.n	8018c20 <xQueueReceive+0x134>
 8018c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c1a:	2200      	movs	r2, #0
 8018c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018c26:	b25b      	sxtb	r3, r3
 8018c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c2c:	d103      	bne.n	8018c36 <xQueueReceive+0x14a>
 8018c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c30:	2200      	movs	r2, #0
 8018c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8018c36:	f001 fd97 	bl	801a768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018c3a:	1d3a      	adds	r2, r7, #4
 8018c3c:	f107 0310 	add.w	r3, r7, #16
 8018c40:	4611      	mov	r1, r2
 8018c42:	4618      	mov	r0, r3
 8018c44:	f001 f8b6 	bl	8019db4 <xTaskCheckForTimeOut>
 8018c48:	4603      	mov	r3, r0
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d123      	bne.n	8018c96 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c50:	f000 face 	bl	80191f0 <prvIsQueueEmpty>
 8018c54:	4603      	mov	r3, r0
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d017      	beq.n	8018c8a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c5c:	3324      	adds	r3, #36	@ 0x24
 8018c5e:	687a      	ldr	r2, [r7, #4]
 8018c60:	4611      	mov	r1, r2
 8018c62:	4618      	mov	r0, r3
 8018c64:	f001 f802 	bl	8019c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018c68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c6a:	f000 fa6f 	bl	801914c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018c6e:	f000 fdf5 	bl	801985c <xTaskResumeAll>
 8018c72:	4603      	mov	r3, r0
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d189      	bne.n	8018b8c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8018c78:	4b0f      	ldr	r3, [pc, #60]	@ (8018cb8 <xQueueReceive+0x1cc>)
 8018c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018c7e:	601a      	str	r2, [r3, #0]
 8018c80:	f3bf 8f4f 	dsb	sy
 8018c84:	f3bf 8f6f 	isb	sy
 8018c88:	e780      	b.n	8018b8c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c8c:	f000 fa5e 	bl	801914c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018c90:	f000 fde4 	bl	801985c <xTaskResumeAll>
 8018c94:	e77a      	b.n	8018b8c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c98:	f000 fa58 	bl	801914c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018c9c:	f000 fdde 	bl	801985c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018ca2:	f000 faa5 	bl	80191f0 <prvIsQueueEmpty>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	f43f af6f 	beq.w	8018b8c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018cae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	3730      	adds	r7, #48	@ 0x30
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd80      	pop	{r7, pc}
 8018cb8:	e000ed04 	.word	0xe000ed04

08018cbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b08e      	sub	sp, #56	@ 0x38
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
 8018cc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018cce:	2300      	movs	r3, #0
 8018cd0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d10d      	bne.n	8018cf4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8018cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018cdc:	b672      	cpsid	i
 8018cde:	f383 8811 	msr	BASEPRI, r3
 8018ce2:	f3bf 8f6f 	isb	sy
 8018ce6:	f3bf 8f4f 	dsb	sy
 8018cea:	b662      	cpsie	i
 8018cec:	623b      	str	r3, [r7, #32]
}
 8018cee:	bf00      	nop
 8018cf0:	bf00      	nop
 8018cf2:	e7fd      	b.n	8018cf0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d00d      	beq.n	8018d18 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8018cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d00:	b672      	cpsid	i
 8018d02:	f383 8811 	msr	BASEPRI, r3
 8018d06:	f3bf 8f6f 	isb	sy
 8018d0a:	f3bf 8f4f 	dsb	sy
 8018d0e:	b662      	cpsie	i
 8018d10:	61fb      	str	r3, [r7, #28]
}
 8018d12:	bf00      	nop
 8018d14:	bf00      	nop
 8018d16:	e7fd      	b.n	8018d14 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018d18:	f001 f9a0 	bl	801a05c <xTaskGetSchedulerState>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d102      	bne.n	8018d28 <xQueueSemaphoreTake+0x6c>
 8018d22:	683b      	ldr	r3, [r7, #0]
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d101      	bne.n	8018d2c <xQueueSemaphoreTake+0x70>
 8018d28:	2301      	movs	r3, #1
 8018d2a:	e000      	b.n	8018d2e <xQueueSemaphoreTake+0x72>
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d10d      	bne.n	8018d4e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8018d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d36:	b672      	cpsid	i
 8018d38:	f383 8811 	msr	BASEPRI, r3
 8018d3c:	f3bf 8f6f 	isb	sy
 8018d40:	f3bf 8f4f 	dsb	sy
 8018d44:	b662      	cpsie	i
 8018d46:	61bb      	str	r3, [r7, #24]
}
 8018d48:	bf00      	nop
 8018d4a:	bf00      	nop
 8018d4c:	e7fd      	b.n	8018d4a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018d4e:	f001 fcd5 	bl	801a6fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8018d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018d56:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8018d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d024      	beq.n	8018da8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8018d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d60:	1e5a      	subs	r2, r3, #1
 8018d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d64:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d104      	bne.n	8018d78 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018d6e:	f001 fb3f 	bl	801a3f0 <pvTaskIncrementMutexHeldCount>
 8018d72:	4602      	mov	r2, r0
 8018d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d76:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d7a:	691b      	ldr	r3, [r3, #16]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d00f      	beq.n	8018da0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d82:	3310      	adds	r3, #16
 8018d84:	4618      	mov	r0, r3
 8018d86:	f000 ff99 	bl	8019cbc <xTaskRemoveFromEventList>
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d007      	beq.n	8018da0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018d90:	4b55      	ldr	r3, [pc, #340]	@ (8018ee8 <xQueueSemaphoreTake+0x22c>)
 8018d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018d96:	601a      	str	r2, [r3, #0]
 8018d98:	f3bf 8f4f 	dsb	sy
 8018d9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018da0:	f001 fce2 	bl	801a768 <vPortExitCritical>
				return pdPASS;
 8018da4:	2301      	movs	r3, #1
 8018da6:	e09a      	b.n	8018ede <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018da8:	683b      	ldr	r3, [r7, #0]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d114      	bne.n	8018dd8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8018dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d00d      	beq.n	8018dd0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8018db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018db8:	b672      	cpsid	i
 8018dba:	f383 8811 	msr	BASEPRI, r3
 8018dbe:	f3bf 8f6f 	isb	sy
 8018dc2:	f3bf 8f4f 	dsb	sy
 8018dc6:	b662      	cpsie	i
 8018dc8:	617b      	str	r3, [r7, #20]
}
 8018dca:	bf00      	nop
 8018dcc:	bf00      	nop
 8018dce:	e7fd      	b.n	8018dcc <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8018dd0:	f001 fcca 	bl	801a768 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	e082      	b.n	8018ede <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d106      	bne.n	8018dec <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018dde:	f107 030c 	add.w	r3, r7, #12
 8018de2:	4618      	mov	r0, r3
 8018de4:	f000 ffd0 	bl	8019d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018de8:	2301      	movs	r3, #1
 8018dea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018dec:	f001 fcbc 	bl	801a768 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018df0:	f000 fd26 	bl	8019840 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018df4:	f001 fc82 	bl	801a6fc <vPortEnterCritical>
 8018df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018dfe:	b25b      	sxtb	r3, r3
 8018e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e04:	d103      	bne.n	8018e0e <xQueueSemaphoreTake+0x152>
 8018e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e08:	2200      	movs	r2, #0
 8018e0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8018e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018e14:	b25b      	sxtb	r3, r3
 8018e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e1a:	d103      	bne.n	8018e24 <xQueueSemaphoreTake+0x168>
 8018e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e1e:	2200      	movs	r2, #0
 8018e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8018e24:	f001 fca0 	bl	801a768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018e28:	463a      	mov	r2, r7
 8018e2a:	f107 030c 	add.w	r3, r7, #12
 8018e2e:	4611      	mov	r1, r2
 8018e30:	4618      	mov	r0, r3
 8018e32:	f000 ffbf 	bl	8019db4 <xTaskCheckForTimeOut>
 8018e36:	4603      	mov	r3, r0
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d132      	bne.n	8018ea2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018e3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018e3e:	f000 f9d7 	bl	80191f0 <prvIsQueueEmpty>
 8018e42:	4603      	mov	r3, r0
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d026      	beq.n	8018e96 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d109      	bne.n	8018e64 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8018e50:	f001 fc54 	bl	801a6fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e56:	689b      	ldr	r3, [r3, #8]
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f001 f91d 	bl	801a098 <xTaskPriorityInherit>
 8018e5e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8018e60:	f001 fc82 	bl	801a768 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e66:	3324      	adds	r3, #36	@ 0x24
 8018e68:	683a      	ldr	r2, [r7, #0]
 8018e6a:	4611      	mov	r1, r2
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	f000 fefd 	bl	8019c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018e72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018e74:	f000 f96a 	bl	801914c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018e78:	f000 fcf0 	bl	801985c <xTaskResumeAll>
 8018e7c:	4603      	mov	r3, r0
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	f47f af65 	bne.w	8018d4e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8018e84:	4b18      	ldr	r3, [pc, #96]	@ (8018ee8 <xQueueSemaphoreTake+0x22c>)
 8018e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018e8a:	601a      	str	r2, [r3, #0]
 8018e8c:	f3bf 8f4f 	dsb	sy
 8018e90:	f3bf 8f6f 	isb	sy
 8018e94:	e75b      	b.n	8018d4e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8018e96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018e98:	f000 f958 	bl	801914c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018e9c:	f000 fcde 	bl	801985c <xTaskResumeAll>
 8018ea0:	e755      	b.n	8018d4e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8018ea2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018ea4:	f000 f952 	bl	801914c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018ea8:	f000 fcd8 	bl	801985c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018eac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018eae:	f000 f99f 	bl	80191f0 <prvIsQueueEmpty>
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	f43f af4a 	beq.w	8018d4e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8018eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d00d      	beq.n	8018edc <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8018ec0:	f001 fc1c 	bl	801a6fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018ec4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018ec6:	f000 f899 	bl	8018ffc <prvGetDisinheritPriorityAfterTimeout>
 8018eca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8018ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ece:	689b      	ldr	r3, [r3, #8]
 8018ed0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	f001 f9ec 	bl	801a2b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8018ed8:	f001 fc46 	bl	801a768 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018edc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018ede:	4618      	mov	r0, r3
 8018ee0:	3738      	adds	r7, #56	@ 0x38
 8018ee2:	46bd      	mov	sp, r7
 8018ee4:	bd80      	pop	{r7, pc}
 8018ee6:	bf00      	nop
 8018ee8:	e000ed04 	.word	0xe000ed04

08018eec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018eec:	b580      	push	{r7, lr}
 8018eee:	b08e      	sub	sp, #56	@ 0x38
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	60f8      	str	r0, [r7, #12]
 8018ef4:	60b9      	str	r1, [r7, #8]
 8018ef6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8018efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d10d      	bne.n	8018f1e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8018f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f06:	b672      	cpsid	i
 8018f08:	f383 8811 	msr	BASEPRI, r3
 8018f0c:	f3bf 8f6f 	isb	sy
 8018f10:	f3bf 8f4f 	dsb	sy
 8018f14:	b662      	cpsie	i
 8018f16:	623b      	str	r3, [r7, #32]
}
 8018f18:	bf00      	nop
 8018f1a:	bf00      	nop
 8018f1c:	e7fd      	b.n	8018f1a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018f1e:	68bb      	ldr	r3, [r7, #8]
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d103      	bne.n	8018f2c <xQueueReceiveFromISR+0x40>
 8018f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d101      	bne.n	8018f30 <xQueueReceiveFromISR+0x44>
 8018f2c:	2301      	movs	r3, #1
 8018f2e:	e000      	b.n	8018f32 <xQueueReceiveFromISR+0x46>
 8018f30:	2300      	movs	r3, #0
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d10d      	bne.n	8018f52 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8018f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f3a:	b672      	cpsid	i
 8018f3c:	f383 8811 	msr	BASEPRI, r3
 8018f40:	f3bf 8f6f 	isb	sy
 8018f44:	f3bf 8f4f 	dsb	sy
 8018f48:	b662      	cpsie	i
 8018f4a:	61fb      	str	r3, [r7, #28]
}
 8018f4c:	bf00      	nop
 8018f4e:	bf00      	nop
 8018f50:	e7fd      	b.n	8018f4e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018f52:	f001 fcbb 	bl	801a8cc <vPortValidateInterruptPriority>
	__asm volatile
 8018f56:	f3ef 8211 	mrs	r2, BASEPRI
 8018f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f5e:	b672      	cpsid	i
 8018f60:	f383 8811 	msr	BASEPRI, r3
 8018f64:	f3bf 8f6f 	isb	sy
 8018f68:	f3bf 8f4f 	dsb	sy
 8018f6c:	b662      	cpsie	i
 8018f6e:	61ba      	str	r2, [r7, #24]
 8018f70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8018f72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f7a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d02f      	beq.n	8018fe2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8018f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8018f88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018f8c:	68b9      	ldr	r1, [r7, #8]
 8018f8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018f90:	f000 f8b6 	bl	8019100 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f96:	1e5a      	subs	r2, r3, #1
 8018f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f9a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8018f9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018fa4:	d112      	bne.n	8018fcc <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fa8:	691b      	ldr	r3, [r3, #16]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d016      	beq.n	8018fdc <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fb0:	3310      	adds	r3, #16
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	f000 fe82 	bl	8019cbc <xTaskRemoveFromEventList>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d00e      	beq.n	8018fdc <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d00b      	beq.n	8018fdc <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	2201      	movs	r2, #1
 8018fc8:	601a      	str	r2, [r3, #0]
 8018fca:	e007      	b.n	8018fdc <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8018fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018fd0:	3301      	adds	r3, #1
 8018fd2:	b2db      	uxtb	r3, r3
 8018fd4:	b25a      	sxtb	r2, r3
 8018fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8018fdc:	2301      	movs	r3, #1
 8018fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8018fe0:	e001      	b.n	8018fe6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8018fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018fe8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8018fea:	693b      	ldr	r3, [r7, #16]
 8018fec:	f383 8811 	msr	BASEPRI, r3
}
 8018ff0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	3738      	adds	r7, #56	@ 0x38
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	bd80      	pop	{r7, pc}

08018ffc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018ffc:	b480      	push	{r7}
 8018ffe:	b085      	sub	sp, #20
 8019000:	af00      	add	r7, sp, #0
 8019002:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019008:	2b00      	cmp	r3, #0
 801900a:	d006      	beq.n	801901a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	f1c3 0307 	rsb	r3, r3, #7
 8019016:	60fb      	str	r3, [r7, #12]
 8019018:	e001      	b.n	801901e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801901a:	2300      	movs	r3, #0
 801901c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801901e:	68fb      	ldr	r3, [r7, #12]
	}
 8019020:	4618      	mov	r0, r3
 8019022:	3714      	adds	r7, #20
 8019024:	46bd      	mov	sp, r7
 8019026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801902a:	4770      	bx	lr

0801902c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b086      	sub	sp, #24
 8019030:	af00      	add	r7, sp, #0
 8019032:	60f8      	str	r0, [r7, #12]
 8019034:	60b9      	str	r1, [r7, #8]
 8019036:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8019038:	2300      	movs	r3, #0
 801903a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019040:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019046:	2b00      	cmp	r3, #0
 8019048:	d10d      	bne.n	8019066 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d14d      	bne.n	80190ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	689b      	ldr	r3, [r3, #8]
 8019056:	4618      	mov	r0, r3
 8019058:	f001 f89e 	bl	801a198 <xTaskPriorityDisinherit>
 801905c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	2200      	movs	r2, #0
 8019062:	609a      	str	r2, [r3, #8]
 8019064:	e043      	b.n	80190ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	2b00      	cmp	r3, #0
 801906a:	d119      	bne.n	80190a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	6858      	ldr	r0, [r3, #4]
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019074:	461a      	mov	r2, r3
 8019076:	68b9      	ldr	r1, [r7, #8]
 8019078:	f00d fd8d 	bl	8026b96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	685a      	ldr	r2, [r3, #4]
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019084:	441a      	add	r2, r3
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	685a      	ldr	r2, [r3, #4]
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	689b      	ldr	r3, [r3, #8]
 8019092:	429a      	cmp	r2, r3
 8019094:	d32b      	bcc.n	80190ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	681a      	ldr	r2, [r3, #0]
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	605a      	str	r2, [r3, #4]
 801909e:	e026      	b.n	80190ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	68d8      	ldr	r0, [r3, #12]
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80190a8:	461a      	mov	r2, r3
 80190aa:	68b9      	ldr	r1, [r7, #8]
 80190ac:	f00d fd73 	bl	8026b96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	68da      	ldr	r2, [r3, #12]
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80190b8:	425b      	negs	r3, r3
 80190ba:	441a      	add	r2, r3
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	68da      	ldr	r2, [r3, #12]
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	429a      	cmp	r2, r3
 80190ca:	d207      	bcs.n	80190dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	689a      	ldr	r2, [r3, #8]
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80190d4:	425b      	negs	r3, r3
 80190d6:	441a      	add	r2, r3
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	2b02      	cmp	r3, #2
 80190e0:	d105      	bne.n	80190ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80190e2:	693b      	ldr	r3, [r7, #16]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d002      	beq.n	80190ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80190e8:	693b      	ldr	r3, [r7, #16]
 80190ea:	3b01      	subs	r3, #1
 80190ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80190ee:	693b      	ldr	r3, [r7, #16]
 80190f0:	1c5a      	adds	r2, r3, #1
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80190f6:	697b      	ldr	r3, [r7, #20]
}
 80190f8:	4618      	mov	r0, r3
 80190fa:	3718      	adds	r7, #24
 80190fc:	46bd      	mov	sp, r7
 80190fe:	bd80      	pop	{r7, pc}

08019100 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b082      	sub	sp, #8
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
 8019108:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801910e:	2b00      	cmp	r3, #0
 8019110:	d018      	beq.n	8019144 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	68da      	ldr	r2, [r3, #12]
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801911a:	441a      	add	r2, r3
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	68da      	ldr	r2, [r3, #12]
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	689b      	ldr	r3, [r3, #8]
 8019128:	429a      	cmp	r2, r3
 801912a:	d303      	bcc.n	8019134 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	681a      	ldr	r2, [r3, #0]
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	68d9      	ldr	r1, [r3, #12]
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801913c:	461a      	mov	r2, r3
 801913e:	6838      	ldr	r0, [r7, #0]
 8019140:	f00d fd29 	bl	8026b96 <memcpy>
	}
}
 8019144:	bf00      	nop
 8019146:	3708      	adds	r7, #8
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}

0801914c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801914c:	b580      	push	{r7, lr}
 801914e:	b084      	sub	sp, #16
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019154:	f001 fad2 	bl	801a6fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801915e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019160:	e011      	b.n	8019186 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019166:	2b00      	cmp	r3, #0
 8019168:	d012      	beq.n	8019190 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	3324      	adds	r3, #36	@ 0x24
 801916e:	4618      	mov	r0, r3
 8019170:	f000 fda4 	bl	8019cbc <xTaskRemoveFromEventList>
 8019174:	4603      	mov	r3, r0
 8019176:	2b00      	cmp	r3, #0
 8019178:	d001      	beq.n	801917e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801917a:	f000 fe83 	bl	8019e84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801917e:	7bfb      	ldrb	r3, [r7, #15]
 8019180:	3b01      	subs	r3, #1
 8019182:	b2db      	uxtb	r3, r3
 8019184:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801918a:	2b00      	cmp	r3, #0
 801918c:	dce9      	bgt.n	8019162 <prvUnlockQueue+0x16>
 801918e:	e000      	b.n	8019192 <prvUnlockQueue+0x46>
					break;
 8019190:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	22ff      	movs	r2, #255	@ 0xff
 8019196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801919a:	f001 fae5 	bl	801a768 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801919e:	f001 faad 	bl	801a6fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80191a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80191aa:	e011      	b.n	80191d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	691b      	ldr	r3, [r3, #16]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d012      	beq.n	80191da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	3310      	adds	r3, #16
 80191b8:	4618      	mov	r0, r3
 80191ba:	f000 fd7f 	bl	8019cbc <xTaskRemoveFromEventList>
 80191be:	4603      	mov	r3, r0
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d001      	beq.n	80191c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80191c4:	f000 fe5e 	bl	8019e84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80191c8:	7bbb      	ldrb	r3, [r7, #14]
 80191ca:	3b01      	subs	r3, #1
 80191cc:	b2db      	uxtb	r3, r3
 80191ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80191d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	dce9      	bgt.n	80191ac <prvUnlockQueue+0x60>
 80191d8:	e000      	b.n	80191dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80191da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	22ff      	movs	r2, #255	@ 0xff
 80191e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80191e4:	f001 fac0 	bl	801a768 <vPortExitCritical>
}
 80191e8:	bf00      	nop
 80191ea:	3710      	adds	r7, #16
 80191ec:	46bd      	mov	sp, r7
 80191ee:	bd80      	pop	{r7, pc}

080191f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80191f0:	b580      	push	{r7, lr}
 80191f2:	b084      	sub	sp, #16
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80191f8:	f001 fa80 	bl	801a6fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019200:	2b00      	cmp	r3, #0
 8019202:	d102      	bne.n	801920a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019204:	2301      	movs	r3, #1
 8019206:	60fb      	str	r3, [r7, #12]
 8019208:	e001      	b.n	801920e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801920a:	2300      	movs	r3, #0
 801920c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801920e:	f001 faab 	bl	801a768 <vPortExitCritical>

	return xReturn;
 8019212:	68fb      	ldr	r3, [r7, #12]
}
 8019214:	4618      	mov	r0, r3
 8019216:	3710      	adds	r7, #16
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}

0801921c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b084      	sub	sp, #16
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019224:	f001 fa6a 	bl	801a6fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019230:	429a      	cmp	r2, r3
 8019232:	d102      	bne.n	801923a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019234:	2301      	movs	r3, #1
 8019236:	60fb      	str	r3, [r7, #12]
 8019238:	e001      	b.n	801923e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801923a:	2300      	movs	r3, #0
 801923c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801923e:	f001 fa93 	bl	801a768 <vPortExitCritical>

	return xReturn;
 8019242:	68fb      	ldr	r3, [r7, #12]
}
 8019244:	4618      	mov	r0, r3
 8019246:	3710      	adds	r7, #16
 8019248:	46bd      	mov	sp, r7
 801924a:	bd80      	pop	{r7, pc}

0801924c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801924c:	b580      	push	{r7, lr}
 801924e:	b08e      	sub	sp, #56	@ 0x38
 8019250:	af04      	add	r7, sp, #16
 8019252:	60f8      	str	r0, [r7, #12]
 8019254:	60b9      	str	r1, [r7, #8]
 8019256:	607a      	str	r2, [r7, #4]
 8019258:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801925a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801925c:	2b00      	cmp	r3, #0
 801925e:	d10d      	bne.n	801927c <xTaskCreateStatic+0x30>
	__asm volatile
 8019260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019264:	b672      	cpsid	i
 8019266:	f383 8811 	msr	BASEPRI, r3
 801926a:	f3bf 8f6f 	isb	sy
 801926e:	f3bf 8f4f 	dsb	sy
 8019272:	b662      	cpsie	i
 8019274:	623b      	str	r3, [r7, #32]
}
 8019276:	bf00      	nop
 8019278:	bf00      	nop
 801927a:	e7fd      	b.n	8019278 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801927c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801927e:	2b00      	cmp	r3, #0
 8019280:	d10d      	bne.n	801929e <xTaskCreateStatic+0x52>
	__asm volatile
 8019282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019286:	b672      	cpsid	i
 8019288:	f383 8811 	msr	BASEPRI, r3
 801928c:	f3bf 8f6f 	isb	sy
 8019290:	f3bf 8f4f 	dsb	sy
 8019294:	b662      	cpsie	i
 8019296:	61fb      	str	r3, [r7, #28]
}
 8019298:	bf00      	nop
 801929a:	bf00      	nop
 801929c:	e7fd      	b.n	801929a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801929e:	23a4      	movs	r3, #164	@ 0xa4
 80192a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80192a2:	693b      	ldr	r3, [r7, #16]
 80192a4:	2ba4      	cmp	r3, #164	@ 0xa4
 80192a6:	d00d      	beq.n	80192c4 <xTaskCreateStatic+0x78>
	__asm volatile
 80192a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192ac:	b672      	cpsid	i
 80192ae:	f383 8811 	msr	BASEPRI, r3
 80192b2:	f3bf 8f6f 	isb	sy
 80192b6:	f3bf 8f4f 	dsb	sy
 80192ba:	b662      	cpsie	i
 80192bc:	61bb      	str	r3, [r7, #24]
}
 80192be:	bf00      	nop
 80192c0:	bf00      	nop
 80192c2:	e7fd      	b.n	80192c0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80192c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80192c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d01e      	beq.n	801930a <xTaskCreateStatic+0xbe>
 80192cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d01b      	beq.n	801930a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80192d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80192d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80192da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80192dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192de:	2202      	movs	r2, #2
 80192e0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80192e4:	2300      	movs	r3, #0
 80192e6:	9303      	str	r3, [sp, #12]
 80192e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ea:	9302      	str	r3, [sp, #8]
 80192ec:	f107 0314 	add.w	r3, r7, #20
 80192f0:	9301      	str	r3, [sp, #4]
 80192f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192f4:	9300      	str	r3, [sp, #0]
 80192f6:	683b      	ldr	r3, [r7, #0]
 80192f8:	687a      	ldr	r2, [r7, #4]
 80192fa:	68b9      	ldr	r1, [r7, #8]
 80192fc:	68f8      	ldr	r0, [r7, #12]
 80192fe:	f000 f851 	bl	80193a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019302:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019304:	f000 f8fa 	bl	80194fc <prvAddNewTaskToReadyList>
 8019308:	e001      	b.n	801930e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801930a:	2300      	movs	r3, #0
 801930c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801930e:	697b      	ldr	r3, [r7, #20]
	}
 8019310:	4618      	mov	r0, r3
 8019312:	3728      	adds	r7, #40	@ 0x28
 8019314:	46bd      	mov	sp, r7
 8019316:	bd80      	pop	{r7, pc}

08019318 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019318:	b580      	push	{r7, lr}
 801931a:	b08c      	sub	sp, #48	@ 0x30
 801931c:	af04      	add	r7, sp, #16
 801931e:	60f8      	str	r0, [r7, #12]
 8019320:	60b9      	str	r1, [r7, #8]
 8019322:	603b      	str	r3, [r7, #0]
 8019324:	4613      	mov	r3, r2
 8019326:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019328:	88fb      	ldrh	r3, [r7, #6]
 801932a:	009b      	lsls	r3, r3, #2
 801932c:	4618      	mov	r0, r3
 801932e:	f001 fb13 	bl	801a958 <pvPortMalloc>
 8019332:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019334:	697b      	ldr	r3, [r7, #20]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d00e      	beq.n	8019358 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801933a:	20a4      	movs	r0, #164	@ 0xa4
 801933c:	f001 fb0c 	bl	801a958 <pvPortMalloc>
 8019340:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019342:	69fb      	ldr	r3, [r7, #28]
 8019344:	2b00      	cmp	r3, #0
 8019346:	d003      	beq.n	8019350 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019348:	69fb      	ldr	r3, [r7, #28]
 801934a:	697a      	ldr	r2, [r7, #20]
 801934c:	631a      	str	r2, [r3, #48]	@ 0x30
 801934e:	e005      	b.n	801935c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019350:	6978      	ldr	r0, [r7, #20]
 8019352:	f001 fbd3 	bl	801aafc <vPortFree>
 8019356:	e001      	b.n	801935c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019358:	2300      	movs	r3, #0
 801935a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801935c:	69fb      	ldr	r3, [r7, #28]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d017      	beq.n	8019392 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019362:	69fb      	ldr	r3, [r7, #28]
 8019364:	2200      	movs	r2, #0
 8019366:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801936a:	88fa      	ldrh	r2, [r7, #6]
 801936c:	2300      	movs	r3, #0
 801936e:	9303      	str	r3, [sp, #12]
 8019370:	69fb      	ldr	r3, [r7, #28]
 8019372:	9302      	str	r3, [sp, #8]
 8019374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019376:	9301      	str	r3, [sp, #4]
 8019378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801937a:	9300      	str	r3, [sp, #0]
 801937c:	683b      	ldr	r3, [r7, #0]
 801937e:	68b9      	ldr	r1, [r7, #8]
 8019380:	68f8      	ldr	r0, [r7, #12]
 8019382:	f000 f80f 	bl	80193a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019386:	69f8      	ldr	r0, [r7, #28]
 8019388:	f000 f8b8 	bl	80194fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801938c:	2301      	movs	r3, #1
 801938e:	61bb      	str	r3, [r7, #24]
 8019390:	e002      	b.n	8019398 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019392:	f04f 33ff 	mov.w	r3, #4294967295
 8019396:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019398:	69bb      	ldr	r3, [r7, #24]
	}
 801939a:	4618      	mov	r0, r3
 801939c:	3720      	adds	r7, #32
 801939e:	46bd      	mov	sp, r7
 80193a0:	bd80      	pop	{r7, pc}
	...

080193a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80193a4:	b580      	push	{r7, lr}
 80193a6:	b088      	sub	sp, #32
 80193a8:	af00      	add	r7, sp, #0
 80193aa:	60f8      	str	r0, [r7, #12]
 80193ac:	60b9      	str	r1, [r7, #8]
 80193ae:	607a      	str	r2, [r7, #4]
 80193b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80193b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	009b      	lsls	r3, r3, #2
 80193ba:	461a      	mov	r2, r3
 80193bc:	21a5      	movs	r1, #165	@ 0xa5
 80193be:	f00d fb0a 	bl	80269d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80193c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80193c6:	6879      	ldr	r1, [r7, #4]
 80193c8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80193cc:	440b      	add	r3, r1
 80193ce:	009b      	lsls	r3, r3, #2
 80193d0:	4413      	add	r3, r2
 80193d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80193d4:	69bb      	ldr	r3, [r7, #24]
 80193d6:	f023 0307 	bic.w	r3, r3, #7
 80193da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80193dc:	69bb      	ldr	r3, [r7, #24]
 80193de:	f003 0307 	and.w	r3, r3, #7
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d00d      	beq.n	8019402 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80193e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193ea:	b672      	cpsid	i
 80193ec:	f383 8811 	msr	BASEPRI, r3
 80193f0:	f3bf 8f6f 	isb	sy
 80193f4:	f3bf 8f4f 	dsb	sy
 80193f8:	b662      	cpsie	i
 80193fa:	617b      	str	r3, [r7, #20]
}
 80193fc:	bf00      	nop
 80193fe:	bf00      	nop
 8019400:	e7fd      	b.n	80193fe <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019402:	68bb      	ldr	r3, [r7, #8]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d01f      	beq.n	8019448 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019408:	2300      	movs	r3, #0
 801940a:	61fb      	str	r3, [r7, #28]
 801940c:	e012      	b.n	8019434 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801940e:	68ba      	ldr	r2, [r7, #8]
 8019410:	69fb      	ldr	r3, [r7, #28]
 8019412:	4413      	add	r3, r2
 8019414:	7819      	ldrb	r1, [r3, #0]
 8019416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019418:	69fb      	ldr	r3, [r7, #28]
 801941a:	4413      	add	r3, r2
 801941c:	3334      	adds	r3, #52	@ 0x34
 801941e:	460a      	mov	r2, r1
 8019420:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019422:	68ba      	ldr	r2, [r7, #8]
 8019424:	69fb      	ldr	r3, [r7, #28]
 8019426:	4413      	add	r3, r2
 8019428:	781b      	ldrb	r3, [r3, #0]
 801942a:	2b00      	cmp	r3, #0
 801942c:	d006      	beq.n	801943c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801942e:	69fb      	ldr	r3, [r7, #28]
 8019430:	3301      	adds	r3, #1
 8019432:	61fb      	str	r3, [r7, #28]
 8019434:	69fb      	ldr	r3, [r7, #28]
 8019436:	2b0f      	cmp	r3, #15
 8019438:	d9e9      	bls.n	801940e <prvInitialiseNewTask+0x6a>
 801943a:	e000      	b.n	801943e <prvInitialiseNewTask+0x9a>
			{
				break;
 801943c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801943e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019440:	2200      	movs	r2, #0
 8019442:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8019446:	e003      	b.n	8019450 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801944a:	2200      	movs	r2, #0
 801944c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019452:	2b06      	cmp	r3, #6
 8019454:	d901      	bls.n	801945a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019456:	2306      	movs	r3, #6
 8019458:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801945a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801945c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801945e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019464:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8019466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019468:	2200      	movs	r2, #0
 801946a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801946c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801946e:	3304      	adds	r3, #4
 8019470:	4618      	mov	r0, r3
 8019472:	f7fe fe49 	bl	8018108 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019478:	3318      	adds	r3, #24
 801947a:	4618      	mov	r0, r3
 801947c:	f7fe fe44 	bl	8018108 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019484:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019488:	f1c3 0207 	rsb	r2, r3, #7
 801948c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801948e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019494:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8019496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019498:	2200      	movs	r2, #0
 801949a:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801949c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801949e:	2200      	movs	r2, #0
 80194a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80194a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194a6:	2200      	movs	r2, #0
 80194a8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80194ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194ae:	3350      	adds	r3, #80	@ 0x50
 80194b0:	224c      	movs	r2, #76	@ 0x4c
 80194b2:	2100      	movs	r1, #0
 80194b4:	4618      	mov	r0, r3
 80194b6:	f00d fa8e 	bl	80269d6 <memset>
 80194ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194bc:	4a0c      	ldr	r2, [pc, #48]	@ (80194f0 <prvInitialiseNewTask+0x14c>)
 80194be:	655a      	str	r2, [r3, #84]	@ 0x54
 80194c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194c2:	4a0c      	ldr	r2, [pc, #48]	@ (80194f4 <prvInitialiseNewTask+0x150>)
 80194c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80194c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194c8:	4a0b      	ldr	r2, [pc, #44]	@ (80194f8 <prvInitialiseNewTask+0x154>)
 80194ca:	65da      	str	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80194cc:	683a      	ldr	r2, [r7, #0]
 80194ce:	68f9      	ldr	r1, [r7, #12]
 80194d0:	69b8      	ldr	r0, [r7, #24]
 80194d2:	f001 f807 	bl	801a4e4 <pxPortInitialiseStack>
 80194d6:	4602      	mov	r2, r0
 80194d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80194dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d002      	beq.n	80194e8 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80194e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80194e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80194e8:	bf00      	nop
 80194ea:	3720      	adds	r7, #32
 80194ec:	46bd      	mov	sp, r7
 80194ee:	bd80      	pop	{r7, pc}
 80194f0:	2003ce04 	.word	0x2003ce04
 80194f4:	2003ce6c 	.word	0x2003ce6c
 80194f8:	2003ced4 	.word	0x2003ced4

080194fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b082      	sub	sp, #8
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019504:	f001 f8fa 	bl	801a6fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019508:	4b2a      	ldr	r3, [pc, #168]	@ (80195b4 <prvAddNewTaskToReadyList+0xb8>)
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	3301      	adds	r3, #1
 801950e:	4a29      	ldr	r2, [pc, #164]	@ (80195b4 <prvAddNewTaskToReadyList+0xb8>)
 8019510:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019512:	4b29      	ldr	r3, [pc, #164]	@ (80195b8 <prvAddNewTaskToReadyList+0xbc>)
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d109      	bne.n	801952e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801951a:	4a27      	ldr	r2, [pc, #156]	@ (80195b8 <prvAddNewTaskToReadyList+0xbc>)
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019520:	4b24      	ldr	r3, [pc, #144]	@ (80195b4 <prvAddNewTaskToReadyList+0xb8>)
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	2b01      	cmp	r3, #1
 8019526:	d110      	bne.n	801954a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019528:	f000 fcd2 	bl	8019ed0 <prvInitialiseTaskLists>
 801952c:	e00d      	b.n	801954a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801952e:	4b23      	ldr	r3, [pc, #140]	@ (80195bc <prvAddNewTaskToReadyList+0xc0>)
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d109      	bne.n	801954a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019536:	4b20      	ldr	r3, [pc, #128]	@ (80195b8 <prvAddNewTaskToReadyList+0xbc>)
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019540:	429a      	cmp	r2, r3
 8019542:	d802      	bhi.n	801954a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019544:	4a1c      	ldr	r2, [pc, #112]	@ (80195b8 <prvAddNewTaskToReadyList+0xbc>)
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801954a:	4b1d      	ldr	r3, [pc, #116]	@ (80195c0 <prvAddNewTaskToReadyList+0xc4>)
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	3301      	adds	r3, #1
 8019550:	4a1b      	ldr	r2, [pc, #108]	@ (80195c0 <prvAddNewTaskToReadyList+0xc4>)
 8019552:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019558:	2201      	movs	r2, #1
 801955a:	409a      	lsls	r2, r3
 801955c:	4b19      	ldr	r3, [pc, #100]	@ (80195c4 <prvAddNewTaskToReadyList+0xc8>)
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	4313      	orrs	r3, r2
 8019562:	4a18      	ldr	r2, [pc, #96]	@ (80195c4 <prvAddNewTaskToReadyList+0xc8>)
 8019564:	6013      	str	r3, [r2, #0]
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801956a:	4613      	mov	r3, r2
 801956c:	009b      	lsls	r3, r3, #2
 801956e:	4413      	add	r3, r2
 8019570:	009b      	lsls	r3, r3, #2
 8019572:	4a15      	ldr	r2, [pc, #84]	@ (80195c8 <prvAddNewTaskToReadyList+0xcc>)
 8019574:	441a      	add	r2, r3
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	3304      	adds	r3, #4
 801957a:	4619      	mov	r1, r3
 801957c:	4610      	mov	r0, r2
 801957e:	f7fe fdd0 	bl	8018122 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019582:	f001 f8f1 	bl	801a768 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019586:	4b0d      	ldr	r3, [pc, #52]	@ (80195bc <prvAddNewTaskToReadyList+0xc0>)
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	2b00      	cmp	r3, #0
 801958c:	d00e      	beq.n	80195ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801958e:	4b0a      	ldr	r3, [pc, #40]	@ (80195b8 <prvAddNewTaskToReadyList+0xbc>)
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019598:	429a      	cmp	r2, r3
 801959a:	d207      	bcs.n	80195ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801959c:	4b0b      	ldr	r3, [pc, #44]	@ (80195cc <prvAddNewTaskToReadyList+0xd0>)
 801959e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80195a2:	601a      	str	r2, [r3, #0]
 80195a4:	f3bf 8f4f 	dsb	sy
 80195a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80195ac:	bf00      	nop
 80195ae:	3708      	adds	r7, #8
 80195b0:	46bd      	mov	sp, r7
 80195b2:	bd80      	pop	{r7, pc}
 80195b4:	20011374 	.word	0x20011374
 80195b8:	20011274 	.word	0x20011274
 80195bc:	20011380 	.word	0x20011380
 80195c0:	20011390 	.word	0x20011390
 80195c4:	2001137c 	.word	0x2001137c
 80195c8:	20011278 	.word	0x20011278
 80195cc:	e000ed04 	.word	0xe000ed04

080195d0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b084      	sub	sp, #16
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80195d8:	f001 f890 	bl	801a6fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d102      	bne.n	80195e8 <vTaskDelete+0x18>
 80195e2:	4b3a      	ldr	r3, [pc, #232]	@ (80196cc <vTaskDelete+0xfc>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	e000      	b.n	80195ea <vTaskDelete+0x1a>
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	3304      	adds	r3, #4
 80195f0:	4618      	mov	r0, r3
 80195f2:	f7fe fdf3 	bl	80181dc <uxListRemove>
 80195f6:	4603      	mov	r3, r0
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d115      	bne.n	8019628 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019600:	4933      	ldr	r1, [pc, #204]	@ (80196d0 <vTaskDelete+0x100>)
 8019602:	4613      	mov	r3, r2
 8019604:	009b      	lsls	r3, r3, #2
 8019606:	4413      	add	r3, r2
 8019608:	009b      	lsls	r3, r3, #2
 801960a:	440b      	add	r3, r1
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d10a      	bne.n	8019628 <vTaskDelete+0x58>
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019616:	2201      	movs	r2, #1
 8019618:	fa02 f303 	lsl.w	r3, r2, r3
 801961c:	43da      	mvns	r2, r3
 801961e:	4b2d      	ldr	r3, [pc, #180]	@ (80196d4 <vTaskDelete+0x104>)
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	4013      	ands	r3, r2
 8019624:	4a2b      	ldr	r2, [pc, #172]	@ (80196d4 <vTaskDelete+0x104>)
 8019626:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801962c:	2b00      	cmp	r3, #0
 801962e:	d004      	beq.n	801963a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	3318      	adds	r3, #24
 8019634:	4618      	mov	r0, r3
 8019636:	f7fe fdd1 	bl	80181dc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801963a:	4b27      	ldr	r3, [pc, #156]	@ (80196d8 <vTaskDelete+0x108>)
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	3301      	adds	r3, #1
 8019640:	4a25      	ldr	r2, [pc, #148]	@ (80196d8 <vTaskDelete+0x108>)
 8019642:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8019644:	4b21      	ldr	r3, [pc, #132]	@ (80196cc <vTaskDelete+0xfc>)
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	68fa      	ldr	r2, [r7, #12]
 801964a:	429a      	cmp	r2, r3
 801964c:	d10b      	bne.n	8019666 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	3304      	adds	r3, #4
 8019652:	4619      	mov	r1, r3
 8019654:	4821      	ldr	r0, [pc, #132]	@ (80196dc <vTaskDelete+0x10c>)
 8019656:	f7fe fd64 	bl	8018122 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801965a:	4b21      	ldr	r3, [pc, #132]	@ (80196e0 <vTaskDelete+0x110>)
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	3301      	adds	r3, #1
 8019660:	4a1f      	ldr	r2, [pc, #124]	@ (80196e0 <vTaskDelete+0x110>)
 8019662:	6013      	str	r3, [r2, #0]
 8019664:	e009      	b.n	801967a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8019666:	4b1f      	ldr	r3, [pc, #124]	@ (80196e4 <vTaskDelete+0x114>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	3b01      	subs	r3, #1
 801966c:	4a1d      	ldr	r2, [pc, #116]	@ (80196e4 <vTaskDelete+0x114>)
 801966e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8019670:	68f8      	ldr	r0, [r7, #12]
 8019672:	f000 fc9b 	bl	8019fac <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8019676:	f000 fcd1 	bl	801a01c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 801967a:	f001 f875 	bl	801a768 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801967e:	4b1a      	ldr	r3, [pc, #104]	@ (80196e8 <vTaskDelete+0x118>)
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d01e      	beq.n	80196c4 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8019686:	4b11      	ldr	r3, [pc, #68]	@ (80196cc <vTaskDelete+0xfc>)
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	68fa      	ldr	r2, [r7, #12]
 801968c:	429a      	cmp	r2, r3
 801968e:	d119      	bne.n	80196c4 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8019690:	4b16      	ldr	r3, [pc, #88]	@ (80196ec <vTaskDelete+0x11c>)
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	2b00      	cmp	r3, #0
 8019696:	d00d      	beq.n	80196b4 <vTaskDelete+0xe4>
	__asm volatile
 8019698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801969c:	b672      	cpsid	i
 801969e:	f383 8811 	msr	BASEPRI, r3
 80196a2:	f3bf 8f6f 	isb	sy
 80196a6:	f3bf 8f4f 	dsb	sy
 80196aa:	b662      	cpsie	i
 80196ac:	60bb      	str	r3, [r7, #8]
}
 80196ae:	bf00      	nop
 80196b0:	bf00      	nop
 80196b2:	e7fd      	b.n	80196b0 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 80196b4:	4b0e      	ldr	r3, [pc, #56]	@ (80196f0 <vTaskDelete+0x120>)
 80196b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80196ba:	601a      	str	r2, [r3, #0]
 80196bc:	f3bf 8f4f 	dsb	sy
 80196c0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80196c4:	bf00      	nop
 80196c6:	3710      	adds	r7, #16
 80196c8:	46bd      	mov	sp, r7
 80196ca:	bd80      	pop	{r7, pc}
 80196cc:	20011274 	.word	0x20011274
 80196d0:	20011278 	.word	0x20011278
 80196d4:	2001137c 	.word	0x2001137c
 80196d8:	20011390 	.word	0x20011390
 80196dc:	20011348 	.word	0x20011348
 80196e0:	2001135c 	.word	0x2001135c
 80196e4:	20011374 	.word	0x20011374
 80196e8:	20011380 	.word	0x20011380
 80196ec:	2001139c 	.word	0x2001139c
 80196f0:	e000ed04 	.word	0xe000ed04

080196f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b084      	sub	sp, #16
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80196fc:	2300      	movs	r3, #0
 80196fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	2b00      	cmp	r3, #0
 8019704:	d01a      	beq.n	801973c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019706:	4b15      	ldr	r3, [pc, #84]	@ (801975c <vTaskDelay+0x68>)
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d00d      	beq.n	801972a <vTaskDelay+0x36>
	__asm volatile
 801970e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019712:	b672      	cpsid	i
 8019714:	f383 8811 	msr	BASEPRI, r3
 8019718:	f3bf 8f6f 	isb	sy
 801971c:	f3bf 8f4f 	dsb	sy
 8019720:	b662      	cpsie	i
 8019722:	60bb      	str	r3, [r7, #8]
}
 8019724:	bf00      	nop
 8019726:	bf00      	nop
 8019728:	e7fd      	b.n	8019726 <vTaskDelay+0x32>
			vTaskSuspendAll();
 801972a:	f000 f889 	bl	8019840 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801972e:	2100      	movs	r1, #0
 8019730:	6878      	ldr	r0, [r7, #4]
 8019732:	f000 fe71 	bl	801a418 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019736:	f000 f891 	bl	801985c <xTaskResumeAll>
 801973a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d107      	bne.n	8019752 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8019742:	4b07      	ldr	r3, [pc, #28]	@ (8019760 <vTaskDelay+0x6c>)
 8019744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019748:	601a      	str	r2, [r3, #0]
 801974a:	f3bf 8f4f 	dsb	sy
 801974e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019752:	bf00      	nop
 8019754:	3710      	adds	r7, #16
 8019756:	46bd      	mov	sp, r7
 8019758:	bd80      	pop	{r7, pc}
 801975a:	bf00      	nop
 801975c:	2001139c 	.word	0x2001139c
 8019760:	e000ed04 	.word	0xe000ed04

08019764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019764:	b580      	push	{r7, lr}
 8019766:	b08a      	sub	sp, #40	@ 0x28
 8019768:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801976a:	2300      	movs	r3, #0
 801976c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801976e:	2300      	movs	r3, #0
 8019770:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019772:	463a      	mov	r2, r7
 8019774:	1d39      	adds	r1, r7, #4
 8019776:	f107 0308 	add.w	r3, r7, #8
 801977a:	4618      	mov	r0, r3
 801977c:	f7e7 fc0e 	bl	8000f9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019780:	6839      	ldr	r1, [r7, #0]
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	68ba      	ldr	r2, [r7, #8]
 8019786:	9202      	str	r2, [sp, #8]
 8019788:	9301      	str	r3, [sp, #4]
 801978a:	2300      	movs	r3, #0
 801978c:	9300      	str	r3, [sp, #0]
 801978e:	2300      	movs	r3, #0
 8019790:	460a      	mov	r2, r1
 8019792:	4923      	ldr	r1, [pc, #140]	@ (8019820 <vTaskStartScheduler+0xbc>)
 8019794:	4823      	ldr	r0, [pc, #140]	@ (8019824 <vTaskStartScheduler+0xc0>)
 8019796:	f7ff fd59 	bl	801924c <xTaskCreateStatic>
 801979a:	4603      	mov	r3, r0
 801979c:	4a22      	ldr	r2, [pc, #136]	@ (8019828 <vTaskStartScheduler+0xc4>)
 801979e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80197a0:	4b21      	ldr	r3, [pc, #132]	@ (8019828 <vTaskStartScheduler+0xc4>)
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d002      	beq.n	80197ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80197a8:	2301      	movs	r3, #1
 80197aa:	617b      	str	r3, [r7, #20]
 80197ac:	e001      	b.n	80197b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80197ae:	2300      	movs	r3, #0
 80197b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80197b2:	697b      	ldr	r3, [r7, #20]
 80197b4:	2b01      	cmp	r3, #1
 80197b6:	d11d      	bne.n	80197f4 <vTaskStartScheduler+0x90>
	__asm volatile
 80197b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80197bc:	b672      	cpsid	i
 80197be:	f383 8811 	msr	BASEPRI, r3
 80197c2:	f3bf 8f6f 	isb	sy
 80197c6:	f3bf 8f4f 	dsb	sy
 80197ca:	b662      	cpsie	i
 80197cc:	613b      	str	r3, [r7, #16]
}
 80197ce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80197d0:	4b16      	ldr	r3, [pc, #88]	@ (801982c <vTaskStartScheduler+0xc8>)
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	3350      	adds	r3, #80	@ 0x50
 80197d6:	4a16      	ldr	r2, [pc, #88]	@ (8019830 <vTaskStartScheduler+0xcc>)
 80197d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80197da:	4b16      	ldr	r3, [pc, #88]	@ (8019834 <vTaskStartScheduler+0xd0>)
 80197dc:	f04f 32ff 	mov.w	r2, #4294967295
 80197e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80197e2:	4b15      	ldr	r3, [pc, #84]	@ (8019838 <vTaskStartScheduler+0xd4>)
 80197e4:	2201      	movs	r2, #1
 80197e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80197e8:	4b14      	ldr	r3, [pc, #80]	@ (801983c <vTaskStartScheduler+0xd8>)
 80197ea:	2200      	movs	r2, #0
 80197ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80197ee:	f000 ff07 	bl	801a600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80197f2:	e011      	b.n	8019818 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80197f4:	697b      	ldr	r3, [r7, #20]
 80197f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197fa:	d10d      	bne.n	8019818 <vTaskStartScheduler+0xb4>
	__asm volatile
 80197fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019800:	b672      	cpsid	i
 8019802:	f383 8811 	msr	BASEPRI, r3
 8019806:	f3bf 8f6f 	isb	sy
 801980a:	f3bf 8f4f 	dsb	sy
 801980e:	b662      	cpsie	i
 8019810:	60fb      	str	r3, [r7, #12]
}
 8019812:	bf00      	nop
 8019814:	bf00      	nop
 8019816:	e7fd      	b.n	8019814 <vTaskStartScheduler+0xb0>
}
 8019818:	bf00      	nop
 801981a:	3718      	adds	r7, #24
 801981c:	46bd      	mov	sp, r7
 801981e:	bd80      	pop	{r7, pc}
 8019820:	08028c5c 	.word	0x08028c5c
 8019824:	08019e9d 	.word	0x08019e9d
 8019828:	20011398 	.word	0x20011398
 801982c:	20011274 	.word	0x20011274
 8019830:	200100b8 	.word	0x200100b8
 8019834:	20011394 	.word	0x20011394
 8019838:	20011380 	.word	0x20011380
 801983c:	20011378 	.word	0x20011378

08019840 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019840:	b480      	push	{r7}
 8019842:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8019844:	4b04      	ldr	r3, [pc, #16]	@ (8019858 <vTaskSuspendAll+0x18>)
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	3301      	adds	r3, #1
 801984a:	4a03      	ldr	r2, [pc, #12]	@ (8019858 <vTaskSuspendAll+0x18>)
 801984c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801984e:	bf00      	nop
 8019850:	46bd      	mov	sp, r7
 8019852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019856:	4770      	bx	lr
 8019858:	2001139c 	.word	0x2001139c

0801985c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b084      	sub	sp, #16
 8019860:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8019862:	2300      	movs	r3, #0
 8019864:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8019866:	2300      	movs	r3, #0
 8019868:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801986a:	4b43      	ldr	r3, [pc, #268]	@ (8019978 <xTaskResumeAll+0x11c>)
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d10d      	bne.n	801988e <xTaskResumeAll+0x32>
	__asm volatile
 8019872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019876:	b672      	cpsid	i
 8019878:	f383 8811 	msr	BASEPRI, r3
 801987c:	f3bf 8f6f 	isb	sy
 8019880:	f3bf 8f4f 	dsb	sy
 8019884:	b662      	cpsie	i
 8019886:	603b      	str	r3, [r7, #0]
}
 8019888:	bf00      	nop
 801988a:	bf00      	nop
 801988c:	e7fd      	b.n	801988a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801988e:	f000 ff35 	bl	801a6fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019892:	4b39      	ldr	r3, [pc, #228]	@ (8019978 <xTaskResumeAll+0x11c>)
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	3b01      	subs	r3, #1
 8019898:	4a37      	ldr	r2, [pc, #220]	@ (8019978 <xTaskResumeAll+0x11c>)
 801989a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801989c:	4b36      	ldr	r3, [pc, #216]	@ (8019978 <xTaskResumeAll+0x11c>)
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d161      	bne.n	8019968 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80198a4:	4b35      	ldr	r3, [pc, #212]	@ (801997c <xTaskResumeAll+0x120>)
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d05d      	beq.n	8019968 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80198ac:	e02e      	b.n	801990c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198ae:	4b34      	ldr	r3, [pc, #208]	@ (8019980 <xTaskResumeAll+0x124>)
 80198b0:	68db      	ldr	r3, [r3, #12]
 80198b2:	68db      	ldr	r3, [r3, #12]
 80198b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	3318      	adds	r3, #24
 80198ba:	4618      	mov	r0, r3
 80198bc:	f7fe fc8e 	bl	80181dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	3304      	adds	r3, #4
 80198c4:	4618      	mov	r0, r3
 80198c6:	f7fe fc89 	bl	80181dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80198ce:	2201      	movs	r2, #1
 80198d0:	409a      	lsls	r2, r3
 80198d2:	4b2c      	ldr	r3, [pc, #176]	@ (8019984 <xTaskResumeAll+0x128>)
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	4313      	orrs	r3, r2
 80198d8:	4a2a      	ldr	r2, [pc, #168]	@ (8019984 <xTaskResumeAll+0x128>)
 80198da:	6013      	str	r3, [r2, #0]
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80198e0:	4613      	mov	r3, r2
 80198e2:	009b      	lsls	r3, r3, #2
 80198e4:	4413      	add	r3, r2
 80198e6:	009b      	lsls	r3, r3, #2
 80198e8:	4a27      	ldr	r2, [pc, #156]	@ (8019988 <xTaskResumeAll+0x12c>)
 80198ea:	441a      	add	r2, r3
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	3304      	adds	r3, #4
 80198f0:	4619      	mov	r1, r3
 80198f2:	4610      	mov	r0, r2
 80198f4:	f7fe fc15 	bl	8018122 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80198fc:	4b23      	ldr	r3, [pc, #140]	@ (801998c <xTaskResumeAll+0x130>)
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019902:	429a      	cmp	r2, r3
 8019904:	d302      	bcc.n	801990c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8019906:	4b22      	ldr	r3, [pc, #136]	@ (8019990 <xTaskResumeAll+0x134>)
 8019908:	2201      	movs	r2, #1
 801990a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801990c:	4b1c      	ldr	r3, [pc, #112]	@ (8019980 <xTaskResumeAll+0x124>)
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	2b00      	cmp	r3, #0
 8019912:	d1cc      	bne.n	80198ae <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d001      	beq.n	801991e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801991a:	f000 fb7f 	bl	801a01c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801991e:	4b1d      	ldr	r3, [pc, #116]	@ (8019994 <xTaskResumeAll+0x138>)
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	2b00      	cmp	r3, #0
 8019928:	d010      	beq.n	801994c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801992a:	f000 f859 	bl	80199e0 <xTaskIncrementTick>
 801992e:	4603      	mov	r3, r0
 8019930:	2b00      	cmp	r3, #0
 8019932:	d002      	beq.n	801993a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8019934:	4b16      	ldr	r3, [pc, #88]	@ (8019990 <xTaskResumeAll+0x134>)
 8019936:	2201      	movs	r2, #1
 8019938:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	3b01      	subs	r3, #1
 801993e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	2b00      	cmp	r3, #0
 8019944:	d1f1      	bne.n	801992a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8019946:	4b13      	ldr	r3, [pc, #76]	@ (8019994 <xTaskResumeAll+0x138>)
 8019948:	2200      	movs	r2, #0
 801994a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801994c:	4b10      	ldr	r3, [pc, #64]	@ (8019990 <xTaskResumeAll+0x134>)
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d009      	beq.n	8019968 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019954:	2301      	movs	r3, #1
 8019956:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8019958:	4b0f      	ldr	r3, [pc, #60]	@ (8019998 <xTaskResumeAll+0x13c>)
 801995a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801995e:	601a      	str	r2, [r3, #0]
 8019960:	f3bf 8f4f 	dsb	sy
 8019964:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019968:	f000 fefe 	bl	801a768 <vPortExitCritical>

	return xAlreadyYielded;
 801996c:	68bb      	ldr	r3, [r7, #8]
}
 801996e:	4618      	mov	r0, r3
 8019970:	3710      	adds	r7, #16
 8019972:	46bd      	mov	sp, r7
 8019974:	bd80      	pop	{r7, pc}
 8019976:	bf00      	nop
 8019978:	2001139c 	.word	0x2001139c
 801997c:	20011374 	.word	0x20011374
 8019980:	20011334 	.word	0x20011334
 8019984:	2001137c 	.word	0x2001137c
 8019988:	20011278 	.word	0x20011278
 801998c:	20011274 	.word	0x20011274
 8019990:	20011388 	.word	0x20011388
 8019994:	20011384 	.word	0x20011384
 8019998:	e000ed04 	.word	0xe000ed04

0801999c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801999c:	b480      	push	{r7}
 801999e:	b083      	sub	sp, #12
 80199a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80199a2:	4b05      	ldr	r3, [pc, #20]	@ (80199b8 <xTaskGetTickCount+0x1c>)
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80199a8:	687b      	ldr	r3, [r7, #4]
}
 80199aa:	4618      	mov	r0, r3
 80199ac:	370c      	adds	r7, #12
 80199ae:	46bd      	mov	sp, r7
 80199b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199b4:	4770      	bx	lr
 80199b6:	bf00      	nop
 80199b8:	20011378 	.word	0x20011378

080199bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b082      	sub	sp, #8
 80199c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80199c2:	f000 ff83 	bl	801a8cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80199c6:	2300      	movs	r3, #0
 80199c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80199ca:	4b04      	ldr	r3, [pc, #16]	@ (80199dc <xTaskGetTickCountFromISR+0x20>)
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80199d0:	683b      	ldr	r3, [r7, #0]
}
 80199d2:	4618      	mov	r0, r3
 80199d4:	3708      	adds	r7, #8
 80199d6:	46bd      	mov	sp, r7
 80199d8:	bd80      	pop	{r7, pc}
 80199da:	bf00      	nop
 80199dc:	20011378 	.word	0x20011378

080199e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b086      	sub	sp, #24
 80199e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80199e6:	2300      	movs	r3, #0
 80199e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80199ea:	4b50      	ldr	r3, [pc, #320]	@ (8019b2c <xTaskIncrementTick+0x14c>)
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	f040 808b 	bne.w	8019b0a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80199f4:	4b4e      	ldr	r3, [pc, #312]	@ (8019b30 <xTaskIncrementTick+0x150>)
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	3301      	adds	r3, #1
 80199fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80199fc:	4a4c      	ldr	r2, [pc, #304]	@ (8019b30 <xTaskIncrementTick+0x150>)
 80199fe:	693b      	ldr	r3, [r7, #16]
 8019a00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019a02:	693b      	ldr	r3, [r7, #16]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d123      	bne.n	8019a50 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8019a08:	4b4a      	ldr	r3, [pc, #296]	@ (8019b34 <xTaskIncrementTick+0x154>)
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d00d      	beq.n	8019a2e <xTaskIncrementTick+0x4e>
	__asm volatile
 8019a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a16:	b672      	cpsid	i
 8019a18:	f383 8811 	msr	BASEPRI, r3
 8019a1c:	f3bf 8f6f 	isb	sy
 8019a20:	f3bf 8f4f 	dsb	sy
 8019a24:	b662      	cpsie	i
 8019a26:	603b      	str	r3, [r7, #0]
}
 8019a28:	bf00      	nop
 8019a2a:	bf00      	nop
 8019a2c:	e7fd      	b.n	8019a2a <xTaskIncrementTick+0x4a>
 8019a2e:	4b41      	ldr	r3, [pc, #260]	@ (8019b34 <xTaskIncrementTick+0x154>)
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	60fb      	str	r3, [r7, #12]
 8019a34:	4b40      	ldr	r3, [pc, #256]	@ (8019b38 <xTaskIncrementTick+0x158>)
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	4a3e      	ldr	r2, [pc, #248]	@ (8019b34 <xTaskIncrementTick+0x154>)
 8019a3a:	6013      	str	r3, [r2, #0]
 8019a3c:	4a3e      	ldr	r2, [pc, #248]	@ (8019b38 <xTaskIncrementTick+0x158>)
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	6013      	str	r3, [r2, #0]
 8019a42:	4b3e      	ldr	r3, [pc, #248]	@ (8019b3c <xTaskIncrementTick+0x15c>)
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	3301      	adds	r3, #1
 8019a48:	4a3c      	ldr	r2, [pc, #240]	@ (8019b3c <xTaskIncrementTick+0x15c>)
 8019a4a:	6013      	str	r3, [r2, #0]
 8019a4c:	f000 fae6 	bl	801a01c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019a50:	4b3b      	ldr	r3, [pc, #236]	@ (8019b40 <xTaskIncrementTick+0x160>)
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	693a      	ldr	r2, [r7, #16]
 8019a56:	429a      	cmp	r2, r3
 8019a58:	d348      	bcc.n	8019aec <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019a5a:	4b36      	ldr	r3, [pc, #216]	@ (8019b34 <xTaskIncrementTick+0x154>)
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d104      	bne.n	8019a6e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019a64:	4b36      	ldr	r3, [pc, #216]	@ (8019b40 <xTaskIncrementTick+0x160>)
 8019a66:	f04f 32ff 	mov.w	r2, #4294967295
 8019a6a:	601a      	str	r2, [r3, #0]
					break;
 8019a6c:	e03e      	b.n	8019aec <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019a6e:	4b31      	ldr	r3, [pc, #196]	@ (8019b34 <xTaskIncrementTick+0x154>)
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	68db      	ldr	r3, [r3, #12]
 8019a74:	68db      	ldr	r3, [r3, #12]
 8019a76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019a78:	68bb      	ldr	r3, [r7, #8]
 8019a7a:	685b      	ldr	r3, [r3, #4]
 8019a7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8019a7e:	693a      	ldr	r2, [r7, #16]
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	429a      	cmp	r2, r3
 8019a84:	d203      	bcs.n	8019a8e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019a86:	4a2e      	ldr	r2, [pc, #184]	@ (8019b40 <xTaskIncrementTick+0x160>)
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019a8c:	e02e      	b.n	8019aec <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019a8e:	68bb      	ldr	r3, [r7, #8]
 8019a90:	3304      	adds	r3, #4
 8019a92:	4618      	mov	r0, r3
 8019a94:	f7fe fba2 	bl	80181dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019a98:	68bb      	ldr	r3, [r7, #8]
 8019a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d004      	beq.n	8019aaa <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019aa0:	68bb      	ldr	r3, [r7, #8]
 8019aa2:	3318      	adds	r3, #24
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	f7fe fb99 	bl	80181dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019aaa:	68bb      	ldr	r3, [r7, #8]
 8019aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019aae:	2201      	movs	r2, #1
 8019ab0:	409a      	lsls	r2, r3
 8019ab2:	4b24      	ldr	r3, [pc, #144]	@ (8019b44 <xTaskIncrementTick+0x164>)
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	4313      	orrs	r3, r2
 8019ab8:	4a22      	ldr	r2, [pc, #136]	@ (8019b44 <xTaskIncrementTick+0x164>)
 8019aba:	6013      	str	r3, [r2, #0]
 8019abc:	68bb      	ldr	r3, [r7, #8]
 8019abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019ac0:	4613      	mov	r3, r2
 8019ac2:	009b      	lsls	r3, r3, #2
 8019ac4:	4413      	add	r3, r2
 8019ac6:	009b      	lsls	r3, r3, #2
 8019ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8019b48 <xTaskIncrementTick+0x168>)
 8019aca:	441a      	add	r2, r3
 8019acc:	68bb      	ldr	r3, [r7, #8]
 8019ace:	3304      	adds	r3, #4
 8019ad0:	4619      	mov	r1, r3
 8019ad2:	4610      	mov	r0, r2
 8019ad4:	f7fe fb25 	bl	8018122 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019ad8:	68bb      	ldr	r3, [r7, #8]
 8019ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019adc:	4b1b      	ldr	r3, [pc, #108]	@ (8019b4c <xTaskIncrementTick+0x16c>)
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019ae2:	429a      	cmp	r2, r3
 8019ae4:	d3b9      	bcc.n	8019a5a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8019ae6:	2301      	movs	r3, #1
 8019ae8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019aea:	e7b6      	b.n	8019a5a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019aec:	4b17      	ldr	r3, [pc, #92]	@ (8019b4c <xTaskIncrementTick+0x16c>)
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019af2:	4915      	ldr	r1, [pc, #84]	@ (8019b48 <xTaskIncrementTick+0x168>)
 8019af4:	4613      	mov	r3, r2
 8019af6:	009b      	lsls	r3, r3, #2
 8019af8:	4413      	add	r3, r2
 8019afa:	009b      	lsls	r3, r3, #2
 8019afc:	440b      	add	r3, r1
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	2b01      	cmp	r3, #1
 8019b02:	d907      	bls.n	8019b14 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8019b04:	2301      	movs	r3, #1
 8019b06:	617b      	str	r3, [r7, #20]
 8019b08:	e004      	b.n	8019b14 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8019b0a:	4b11      	ldr	r3, [pc, #68]	@ (8019b50 <xTaskIncrementTick+0x170>)
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	3301      	adds	r3, #1
 8019b10:	4a0f      	ldr	r2, [pc, #60]	@ (8019b50 <xTaskIncrementTick+0x170>)
 8019b12:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8019b14:	4b0f      	ldr	r3, [pc, #60]	@ (8019b54 <xTaskIncrementTick+0x174>)
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d001      	beq.n	8019b20 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8019b1c:	2301      	movs	r3, #1
 8019b1e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8019b20:	697b      	ldr	r3, [r7, #20]
}
 8019b22:	4618      	mov	r0, r3
 8019b24:	3718      	adds	r7, #24
 8019b26:	46bd      	mov	sp, r7
 8019b28:	bd80      	pop	{r7, pc}
 8019b2a:	bf00      	nop
 8019b2c:	2001139c 	.word	0x2001139c
 8019b30:	20011378 	.word	0x20011378
 8019b34:	2001132c 	.word	0x2001132c
 8019b38:	20011330 	.word	0x20011330
 8019b3c:	2001138c 	.word	0x2001138c
 8019b40:	20011394 	.word	0x20011394
 8019b44:	2001137c 	.word	0x2001137c
 8019b48:	20011278 	.word	0x20011278
 8019b4c:	20011274 	.word	0x20011274
 8019b50:	20011384 	.word	0x20011384
 8019b54:	20011388 	.word	0x20011388

08019b58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b088      	sub	sp, #32
 8019b5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8019c54 <vTaskSwitchContext+0xfc>)
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d003      	beq.n	8019b6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019b66:	4b3c      	ldr	r3, [pc, #240]	@ (8019c58 <vTaskSwitchContext+0x100>)
 8019b68:	2201      	movs	r2, #1
 8019b6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019b6c:	e06e      	b.n	8019c4c <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8019b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8019c58 <vTaskSwitchContext+0x100>)
 8019b70:	2200      	movs	r2, #0
 8019b72:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8019b74:	4b39      	ldr	r3, [pc, #228]	@ (8019c5c <vTaskSwitchContext+0x104>)
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019b7a:	61fb      	str	r3, [r7, #28]
 8019b7c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8019b80:	61bb      	str	r3, [r7, #24]
 8019b82:	69fb      	ldr	r3, [r7, #28]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	69ba      	ldr	r2, [r7, #24]
 8019b88:	429a      	cmp	r2, r3
 8019b8a:	d111      	bne.n	8019bb0 <vTaskSwitchContext+0x58>
 8019b8c:	69fb      	ldr	r3, [r7, #28]
 8019b8e:	3304      	adds	r3, #4
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	69ba      	ldr	r2, [r7, #24]
 8019b94:	429a      	cmp	r2, r3
 8019b96:	d10b      	bne.n	8019bb0 <vTaskSwitchContext+0x58>
 8019b98:	69fb      	ldr	r3, [r7, #28]
 8019b9a:	3308      	adds	r3, #8
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	69ba      	ldr	r2, [r7, #24]
 8019ba0:	429a      	cmp	r2, r3
 8019ba2:	d105      	bne.n	8019bb0 <vTaskSwitchContext+0x58>
 8019ba4:	69fb      	ldr	r3, [r7, #28]
 8019ba6:	330c      	adds	r3, #12
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	69ba      	ldr	r2, [r7, #24]
 8019bac:	429a      	cmp	r2, r3
 8019bae:	d008      	beq.n	8019bc2 <vTaskSwitchContext+0x6a>
 8019bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8019c5c <vTaskSwitchContext+0x104>)
 8019bb2:	681a      	ldr	r2, [r3, #0]
 8019bb4:	4b29      	ldr	r3, [pc, #164]	@ (8019c5c <vTaskSwitchContext+0x104>)
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	3334      	adds	r3, #52	@ 0x34
 8019bba:	4619      	mov	r1, r3
 8019bbc:	4610      	mov	r0, r2
 8019bbe:	f7e7 f9db 	bl	8000f78 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019bc2:	4b27      	ldr	r3, [pc, #156]	@ (8019c60 <vTaskSwitchContext+0x108>)
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	fab3 f383 	clz	r3, r3
 8019bce:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8019bd0:	7afb      	ldrb	r3, [r7, #11]
 8019bd2:	f1c3 031f 	rsb	r3, r3, #31
 8019bd6:	617b      	str	r3, [r7, #20]
 8019bd8:	4922      	ldr	r1, [pc, #136]	@ (8019c64 <vTaskSwitchContext+0x10c>)
 8019bda:	697a      	ldr	r2, [r7, #20]
 8019bdc:	4613      	mov	r3, r2
 8019bde:	009b      	lsls	r3, r3, #2
 8019be0:	4413      	add	r3, r2
 8019be2:	009b      	lsls	r3, r3, #2
 8019be4:	440b      	add	r3, r1
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d10d      	bne.n	8019c08 <vTaskSwitchContext+0xb0>
	__asm volatile
 8019bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019bf0:	b672      	cpsid	i
 8019bf2:	f383 8811 	msr	BASEPRI, r3
 8019bf6:	f3bf 8f6f 	isb	sy
 8019bfa:	f3bf 8f4f 	dsb	sy
 8019bfe:	b662      	cpsie	i
 8019c00:	607b      	str	r3, [r7, #4]
}
 8019c02:	bf00      	nop
 8019c04:	bf00      	nop
 8019c06:	e7fd      	b.n	8019c04 <vTaskSwitchContext+0xac>
 8019c08:	697a      	ldr	r2, [r7, #20]
 8019c0a:	4613      	mov	r3, r2
 8019c0c:	009b      	lsls	r3, r3, #2
 8019c0e:	4413      	add	r3, r2
 8019c10:	009b      	lsls	r3, r3, #2
 8019c12:	4a14      	ldr	r2, [pc, #80]	@ (8019c64 <vTaskSwitchContext+0x10c>)
 8019c14:	4413      	add	r3, r2
 8019c16:	613b      	str	r3, [r7, #16]
 8019c18:	693b      	ldr	r3, [r7, #16]
 8019c1a:	685b      	ldr	r3, [r3, #4]
 8019c1c:	685a      	ldr	r2, [r3, #4]
 8019c1e:	693b      	ldr	r3, [r7, #16]
 8019c20:	605a      	str	r2, [r3, #4]
 8019c22:	693b      	ldr	r3, [r7, #16]
 8019c24:	685a      	ldr	r2, [r3, #4]
 8019c26:	693b      	ldr	r3, [r7, #16]
 8019c28:	3308      	adds	r3, #8
 8019c2a:	429a      	cmp	r2, r3
 8019c2c:	d104      	bne.n	8019c38 <vTaskSwitchContext+0xe0>
 8019c2e:	693b      	ldr	r3, [r7, #16]
 8019c30:	685b      	ldr	r3, [r3, #4]
 8019c32:	685a      	ldr	r2, [r3, #4]
 8019c34:	693b      	ldr	r3, [r7, #16]
 8019c36:	605a      	str	r2, [r3, #4]
 8019c38:	693b      	ldr	r3, [r7, #16]
 8019c3a:	685b      	ldr	r3, [r3, #4]
 8019c3c:	68db      	ldr	r3, [r3, #12]
 8019c3e:	4a07      	ldr	r2, [pc, #28]	@ (8019c5c <vTaskSwitchContext+0x104>)
 8019c40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019c42:	4b06      	ldr	r3, [pc, #24]	@ (8019c5c <vTaskSwitchContext+0x104>)
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	3350      	adds	r3, #80	@ 0x50
 8019c48:	4a07      	ldr	r2, [pc, #28]	@ (8019c68 <vTaskSwitchContext+0x110>)
 8019c4a:	6013      	str	r3, [r2, #0]
}
 8019c4c:	bf00      	nop
 8019c4e:	3720      	adds	r7, #32
 8019c50:	46bd      	mov	sp, r7
 8019c52:	bd80      	pop	{r7, pc}
 8019c54:	2001139c 	.word	0x2001139c
 8019c58:	20011388 	.word	0x20011388
 8019c5c:	20011274 	.word	0x20011274
 8019c60:	2001137c 	.word	0x2001137c
 8019c64:	20011278 	.word	0x20011278
 8019c68:	200100b8 	.word	0x200100b8

08019c6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b084      	sub	sp, #16
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
 8019c74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d10d      	bne.n	8019c98 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8019c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c80:	b672      	cpsid	i
 8019c82:	f383 8811 	msr	BASEPRI, r3
 8019c86:	f3bf 8f6f 	isb	sy
 8019c8a:	f3bf 8f4f 	dsb	sy
 8019c8e:	b662      	cpsie	i
 8019c90:	60fb      	str	r3, [r7, #12]
}
 8019c92:	bf00      	nop
 8019c94:	bf00      	nop
 8019c96:	e7fd      	b.n	8019c94 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019c98:	4b07      	ldr	r3, [pc, #28]	@ (8019cb8 <vTaskPlaceOnEventList+0x4c>)
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	3318      	adds	r3, #24
 8019c9e:	4619      	mov	r1, r3
 8019ca0:	6878      	ldr	r0, [r7, #4]
 8019ca2:	f7fe fa62 	bl	801816a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019ca6:	2101      	movs	r1, #1
 8019ca8:	6838      	ldr	r0, [r7, #0]
 8019caa:	f000 fbb5 	bl	801a418 <prvAddCurrentTaskToDelayedList>
}
 8019cae:	bf00      	nop
 8019cb0:	3710      	adds	r7, #16
 8019cb2:	46bd      	mov	sp, r7
 8019cb4:	bd80      	pop	{r7, pc}
 8019cb6:	bf00      	nop
 8019cb8:	20011274 	.word	0x20011274

08019cbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019cbc:	b580      	push	{r7, lr}
 8019cbe:	b086      	sub	sp, #24
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	68db      	ldr	r3, [r3, #12]
 8019cc8:	68db      	ldr	r3, [r3, #12]
 8019cca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019ccc:	693b      	ldr	r3, [r7, #16]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d10d      	bne.n	8019cee <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8019cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cd6:	b672      	cpsid	i
 8019cd8:	f383 8811 	msr	BASEPRI, r3
 8019cdc:	f3bf 8f6f 	isb	sy
 8019ce0:	f3bf 8f4f 	dsb	sy
 8019ce4:	b662      	cpsie	i
 8019ce6:	60fb      	str	r3, [r7, #12]
}
 8019ce8:	bf00      	nop
 8019cea:	bf00      	nop
 8019cec:	e7fd      	b.n	8019cea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019cee:	693b      	ldr	r3, [r7, #16]
 8019cf0:	3318      	adds	r3, #24
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f7fe fa72 	bl	80181dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8019d70 <xTaskRemoveFromEventList+0xb4>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d11c      	bne.n	8019d3a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019d00:	693b      	ldr	r3, [r7, #16]
 8019d02:	3304      	adds	r3, #4
 8019d04:	4618      	mov	r0, r3
 8019d06:	f7fe fa69 	bl	80181dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019d0a:	693b      	ldr	r3, [r7, #16]
 8019d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019d0e:	2201      	movs	r2, #1
 8019d10:	409a      	lsls	r2, r3
 8019d12:	4b18      	ldr	r3, [pc, #96]	@ (8019d74 <xTaskRemoveFromEventList+0xb8>)
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	4313      	orrs	r3, r2
 8019d18:	4a16      	ldr	r2, [pc, #88]	@ (8019d74 <xTaskRemoveFromEventList+0xb8>)
 8019d1a:	6013      	str	r3, [r2, #0]
 8019d1c:	693b      	ldr	r3, [r7, #16]
 8019d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019d20:	4613      	mov	r3, r2
 8019d22:	009b      	lsls	r3, r3, #2
 8019d24:	4413      	add	r3, r2
 8019d26:	009b      	lsls	r3, r3, #2
 8019d28:	4a13      	ldr	r2, [pc, #76]	@ (8019d78 <xTaskRemoveFromEventList+0xbc>)
 8019d2a:	441a      	add	r2, r3
 8019d2c:	693b      	ldr	r3, [r7, #16]
 8019d2e:	3304      	adds	r3, #4
 8019d30:	4619      	mov	r1, r3
 8019d32:	4610      	mov	r0, r2
 8019d34:	f7fe f9f5 	bl	8018122 <vListInsertEnd>
 8019d38:	e005      	b.n	8019d46 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019d3a:	693b      	ldr	r3, [r7, #16]
 8019d3c:	3318      	adds	r3, #24
 8019d3e:	4619      	mov	r1, r3
 8019d40:	480e      	ldr	r0, [pc, #56]	@ (8019d7c <xTaskRemoveFromEventList+0xc0>)
 8019d42:	f7fe f9ee 	bl	8018122 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019d46:	693b      	ldr	r3, [r7, #16]
 8019d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8019d80 <xTaskRemoveFromEventList+0xc4>)
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019d50:	429a      	cmp	r2, r3
 8019d52:	d905      	bls.n	8019d60 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019d54:	2301      	movs	r3, #1
 8019d56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8019d58:	4b0a      	ldr	r3, [pc, #40]	@ (8019d84 <xTaskRemoveFromEventList+0xc8>)
 8019d5a:	2201      	movs	r2, #1
 8019d5c:	601a      	str	r2, [r3, #0]
 8019d5e:	e001      	b.n	8019d64 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8019d60:	2300      	movs	r3, #0
 8019d62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8019d64:	697b      	ldr	r3, [r7, #20]
}
 8019d66:	4618      	mov	r0, r3
 8019d68:	3718      	adds	r7, #24
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	bd80      	pop	{r7, pc}
 8019d6e:	bf00      	nop
 8019d70:	2001139c 	.word	0x2001139c
 8019d74:	2001137c 	.word	0x2001137c
 8019d78:	20011278 	.word	0x20011278
 8019d7c:	20011334 	.word	0x20011334
 8019d80:	20011274 	.word	0x20011274
 8019d84:	20011388 	.word	0x20011388

08019d88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019d88:	b480      	push	{r7}
 8019d8a:	b083      	sub	sp, #12
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019d90:	4b06      	ldr	r3, [pc, #24]	@ (8019dac <vTaskInternalSetTimeOutState+0x24>)
 8019d92:	681a      	ldr	r2, [r3, #0]
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019d98:	4b05      	ldr	r3, [pc, #20]	@ (8019db0 <vTaskInternalSetTimeOutState+0x28>)
 8019d9a:	681a      	ldr	r2, [r3, #0]
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	605a      	str	r2, [r3, #4]
}
 8019da0:	bf00      	nop
 8019da2:	370c      	adds	r7, #12
 8019da4:	46bd      	mov	sp, r7
 8019da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019daa:	4770      	bx	lr
 8019dac:	2001138c 	.word	0x2001138c
 8019db0:	20011378 	.word	0x20011378

08019db4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019db4:	b580      	push	{r7, lr}
 8019db6:	b088      	sub	sp, #32
 8019db8:	af00      	add	r7, sp, #0
 8019dba:	6078      	str	r0, [r7, #4]
 8019dbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d10d      	bne.n	8019de0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8019dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019dc8:	b672      	cpsid	i
 8019dca:	f383 8811 	msr	BASEPRI, r3
 8019dce:	f3bf 8f6f 	isb	sy
 8019dd2:	f3bf 8f4f 	dsb	sy
 8019dd6:	b662      	cpsie	i
 8019dd8:	613b      	str	r3, [r7, #16]
}
 8019dda:	bf00      	nop
 8019ddc:	bf00      	nop
 8019dde:	e7fd      	b.n	8019ddc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8019de0:	683b      	ldr	r3, [r7, #0]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d10d      	bne.n	8019e02 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8019de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019dea:	b672      	cpsid	i
 8019dec:	f383 8811 	msr	BASEPRI, r3
 8019df0:	f3bf 8f6f 	isb	sy
 8019df4:	f3bf 8f4f 	dsb	sy
 8019df8:	b662      	cpsie	i
 8019dfa:	60fb      	str	r3, [r7, #12]
}
 8019dfc:	bf00      	nop
 8019dfe:	bf00      	nop
 8019e00:	e7fd      	b.n	8019dfe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8019e02:	f000 fc7b 	bl	801a6fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019e06:	4b1d      	ldr	r3, [pc, #116]	@ (8019e7c <xTaskCheckForTimeOut+0xc8>)
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	685b      	ldr	r3, [r3, #4]
 8019e10:	69ba      	ldr	r2, [r7, #24]
 8019e12:	1ad3      	subs	r3, r2, r3
 8019e14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019e16:	683b      	ldr	r3, [r7, #0]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e1e:	d102      	bne.n	8019e26 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019e20:	2300      	movs	r3, #0
 8019e22:	61fb      	str	r3, [r7, #28]
 8019e24:	e023      	b.n	8019e6e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681a      	ldr	r2, [r3, #0]
 8019e2a:	4b15      	ldr	r3, [pc, #84]	@ (8019e80 <xTaskCheckForTimeOut+0xcc>)
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	429a      	cmp	r2, r3
 8019e30:	d007      	beq.n	8019e42 <xTaskCheckForTimeOut+0x8e>
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	685b      	ldr	r3, [r3, #4]
 8019e36:	69ba      	ldr	r2, [r7, #24]
 8019e38:	429a      	cmp	r2, r3
 8019e3a:	d302      	bcc.n	8019e42 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019e3c:	2301      	movs	r3, #1
 8019e3e:	61fb      	str	r3, [r7, #28]
 8019e40:	e015      	b.n	8019e6e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019e42:	683b      	ldr	r3, [r7, #0]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	697a      	ldr	r2, [r7, #20]
 8019e48:	429a      	cmp	r2, r3
 8019e4a:	d20b      	bcs.n	8019e64 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019e4c:	683b      	ldr	r3, [r7, #0]
 8019e4e:	681a      	ldr	r2, [r3, #0]
 8019e50:	697b      	ldr	r3, [r7, #20]
 8019e52:	1ad2      	subs	r2, r2, r3
 8019e54:	683b      	ldr	r3, [r7, #0]
 8019e56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019e58:	6878      	ldr	r0, [r7, #4]
 8019e5a:	f7ff ff95 	bl	8019d88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019e5e:	2300      	movs	r3, #0
 8019e60:	61fb      	str	r3, [r7, #28]
 8019e62:	e004      	b.n	8019e6e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8019e64:	683b      	ldr	r3, [r7, #0]
 8019e66:	2200      	movs	r2, #0
 8019e68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019e6a:	2301      	movs	r3, #1
 8019e6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8019e6e:	f000 fc7b 	bl	801a768 <vPortExitCritical>

	return xReturn;
 8019e72:	69fb      	ldr	r3, [r7, #28]
}
 8019e74:	4618      	mov	r0, r3
 8019e76:	3720      	adds	r7, #32
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	bd80      	pop	{r7, pc}
 8019e7c:	20011378 	.word	0x20011378
 8019e80:	2001138c 	.word	0x2001138c

08019e84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019e84:	b480      	push	{r7}
 8019e86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019e88:	4b03      	ldr	r3, [pc, #12]	@ (8019e98 <vTaskMissedYield+0x14>)
 8019e8a:	2201      	movs	r2, #1
 8019e8c:	601a      	str	r2, [r3, #0]
}
 8019e8e:	bf00      	nop
 8019e90:	46bd      	mov	sp, r7
 8019e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e96:	4770      	bx	lr
 8019e98:	20011388 	.word	0x20011388

08019e9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b082      	sub	sp, #8
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019ea4:	f000 f854 	bl	8019f50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019ea8:	4b07      	ldr	r3, [pc, #28]	@ (8019ec8 <prvIdleTask+0x2c>)
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	2b01      	cmp	r3, #1
 8019eae:	d907      	bls.n	8019ec0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8019eb0:	4b06      	ldr	r3, [pc, #24]	@ (8019ecc <prvIdleTask+0x30>)
 8019eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019eb6:	601a      	str	r2, [r3, #0]
 8019eb8:	f3bf 8f4f 	dsb	sy
 8019ebc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8019ec0:	f7e8 fbae 	bl	8002620 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8019ec4:	e7ee      	b.n	8019ea4 <prvIdleTask+0x8>
 8019ec6:	bf00      	nop
 8019ec8:	20011278 	.word	0x20011278
 8019ecc:	e000ed04 	.word	0xe000ed04

08019ed0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b082      	sub	sp, #8
 8019ed4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019ed6:	2300      	movs	r3, #0
 8019ed8:	607b      	str	r3, [r7, #4]
 8019eda:	e00c      	b.n	8019ef6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019edc:	687a      	ldr	r2, [r7, #4]
 8019ede:	4613      	mov	r3, r2
 8019ee0:	009b      	lsls	r3, r3, #2
 8019ee2:	4413      	add	r3, r2
 8019ee4:	009b      	lsls	r3, r3, #2
 8019ee6:	4a12      	ldr	r2, [pc, #72]	@ (8019f30 <prvInitialiseTaskLists+0x60>)
 8019ee8:	4413      	add	r3, r2
 8019eea:	4618      	mov	r0, r3
 8019eec:	f7fe f8ec 	bl	80180c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	3301      	adds	r3, #1
 8019ef4:	607b      	str	r3, [r7, #4]
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	2b06      	cmp	r3, #6
 8019efa:	d9ef      	bls.n	8019edc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019efc:	480d      	ldr	r0, [pc, #52]	@ (8019f34 <prvInitialiseTaskLists+0x64>)
 8019efe:	f7fe f8e3 	bl	80180c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019f02:	480d      	ldr	r0, [pc, #52]	@ (8019f38 <prvInitialiseTaskLists+0x68>)
 8019f04:	f7fe f8e0 	bl	80180c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019f08:	480c      	ldr	r0, [pc, #48]	@ (8019f3c <prvInitialiseTaskLists+0x6c>)
 8019f0a:	f7fe f8dd 	bl	80180c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019f0e:	480c      	ldr	r0, [pc, #48]	@ (8019f40 <prvInitialiseTaskLists+0x70>)
 8019f10:	f7fe f8da 	bl	80180c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019f14:	480b      	ldr	r0, [pc, #44]	@ (8019f44 <prvInitialiseTaskLists+0x74>)
 8019f16:	f7fe f8d7 	bl	80180c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8019f48 <prvInitialiseTaskLists+0x78>)
 8019f1c:	4a05      	ldr	r2, [pc, #20]	@ (8019f34 <prvInitialiseTaskLists+0x64>)
 8019f1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019f20:	4b0a      	ldr	r3, [pc, #40]	@ (8019f4c <prvInitialiseTaskLists+0x7c>)
 8019f22:	4a05      	ldr	r2, [pc, #20]	@ (8019f38 <prvInitialiseTaskLists+0x68>)
 8019f24:	601a      	str	r2, [r3, #0]
}
 8019f26:	bf00      	nop
 8019f28:	3708      	adds	r7, #8
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	bd80      	pop	{r7, pc}
 8019f2e:	bf00      	nop
 8019f30:	20011278 	.word	0x20011278
 8019f34:	20011304 	.word	0x20011304
 8019f38:	20011318 	.word	0x20011318
 8019f3c:	20011334 	.word	0x20011334
 8019f40:	20011348 	.word	0x20011348
 8019f44:	20011360 	.word	0x20011360
 8019f48:	2001132c 	.word	0x2001132c
 8019f4c:	20011330 	.word	0x20011330

08019f50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b082      	sub	sp, #8
 8019f54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019f56:	e019      	b.n	8019f8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8019f58:	f000 fbd0 	bl	801a6fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019f5c:	4b10      	ldr	r3, [pc, #64]	@ (8019fa0 <prvCheckTasksWaitingTermination+0x50>)
 8019f5e:	68db      	ldr	r3, [r3, #12]
 8019f60:	68db      	ldr	r3, [r3, #12]
 8019f62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	3304      	adds	r3, #4
 8019f68:	4618      	mov	r0, r3
 8019f6a:	f7fe f937 	bl	80181dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8019fa4 <prvCheckTasksWaitingTermination+0x54>)
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	3b01      	subs	r3, #1
 8019f74:	4a0b      	ldr	r2, [pc, #44]	@ (8019fa4 <prvCheckTasksWaitingTermination+0x54>)
 8019f76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019f78:	4b0b      	ldr	r3, [pc, #44]	@ (8019fa8 <prvCheckTasksWaitingTermination+0x58>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	3b01      	subs	r3, #1
 8019f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8019fa8 <prvCheckTasksWaitingTermination+0x58>)
 8019f80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8019f82:	f000 fbf1 	bl	801a768 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8019f86:	6878      	ldr	r0, [r7, #4]
 8019f88:	f000 f810 	bl	8019fac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019f8c:	4b06      	ldr	r3, [pc, #24]	@ (8019fa8 <prvCheckTasksWaitingTermination+0x58>)
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d1e1      	bne.n	8019f58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019f94:	bf00      	nop
 8019f96:	bf00      	nop
 8019f98:	3708      	adds	r7, #8
 8019f9a:	46bd      	mov	sp, r7
 8019f9c:	bd80      	pop	{r7, pc}
 8019f9e:	bf00      	nop
 8019fa0:	20011348 	.word	0x20011348
 8019fa4:	20011374 	.word	0x20011374
 8019fa8:	2001135c 	.word	0x2001135c

08019fac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b084      	sub	sp, #16
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	3350      	adds	r3, #80	@ 0x50
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f00c fd29 	bl	8026a10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d108      	bne.n	8019fda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f000 fd95 	bl	801aafc <vPortFree>
				vPortFree( pxTCB );
 8019fd2:	6878      	ldr	r0, [r7, #4]
 8019fd4:	f000 fd92 	bl	801aafc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019fd8:	e01b      	b.n	801a012 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8019fe0:	2b01      	cmp	r3, #1
 8019fe2:	d103      	bne.n	8019fec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8019fe4:	6878      	ldr	r0, [r7, #4]
 8019fe6:	f000 fd89 	bl	801aafc <vPortFree>
	}
 8019fea:	e012      	b.n	801a012 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8019ff2:	2b02      	cmp	r3, #2
 8019ff4:	d00d      	beq.n	801a012 <prvDeleteTCB+0x66>
	__asm volatile
 8019ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ffa:	b672      	cpsid	i
 8019ffc:	f383 8811 	msr	BASEPRI, r3
 801a000:	f3bf 8f6f 	isb	sy
 801a004:	f3bf 8f4f 	dsb	sy
 801a008:	b662      	cpsie	i
 801a00a:	60fb      	str	r3, [r7, #12]
}
 801a00c:	bf00      	nop
 801a00e:	bf00      	nop
 801a010:	e7fd      	b.n	801a00e <prvDeleteTCB+0x62>
	}
 801a012:	bf00      	nop
 801a014:	3710      	adds	r7, #16
 801a016:	46bd      	mov	sp, r7
 801a018:	bd80      	pop	{r7, pc}
	...

0801a01c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a01c:	b480      	push	{r7}
 801a01e:	b083      	sub	sp, #12
 801a020:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a022:	4b0c      	ldr	r3, [pc, #48]	@ (801a054 <prvResetNextTaskUnblockTime+0x38>)
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d104      	bne.n	801a036 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a02c:	4b0a      	ldr	r3, [pc, #40]	@ (801a058 <prvResetNextTaskUnblockTime+0x3c>)
 801a02e:	f04f 32ff 	mov.w	r2, #4294967295
 801a032:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a034:	e008      	b.n	801a048 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a036:	4b07      	ldr	r3, [pc, #28]	@ (801a054 <prvResetNextTaskUnblockTime+0x38>)
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	68db      	ldr	r3, [r3, #12]
 801a03c:	68db      	ldr	r3, [r3, #12]
 801a03e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	685b      	ldr	r3, [r3, #4]
 801a044:	4a04      	ldr	r2, [pc, #16]	@ (801a058 <prvResetNextTaskUnblockTime+0x3c>)
 801a046:	6013      	str	r3, [r2, #0]
}
 801a048:	bf00      	nop
 801a04a:	370c      	adds	r7, #12
 801a04c:	46bd      	mov	sp, r7
 801a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a052:	4770      	bx	lr
 801a054:	2001132c 	.word	0x2001132c
 801a058:	20011394 	.word	0x20011394

0801a05c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a05c:	b480      	push	{r7}
 801a05e:	b083      	sub	sp, #12
 801a060:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a062:	4b0b      	ldr	r3, [pc, #44]	@ (801a090 <xTaskGetSchedulerState+0x34>)
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d102      	bne.n	801a070 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a06a:	2301      	movs	r3, #1
 801a06c:	607b      	str	r3, [r7, #4]
 801a06e:	e008      	b.n	801a082 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a070:	4b08      	ldr	r3, [pc, #32]	@ (801a094 <xTaskGetSchedulerState+0x38>)
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	2b00      	cmp	r3, #0
 801a076:	d102      	bne.n	801a07e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a078:	2302      	movs	r3, #2
 801a07a:	607b      	str	r3, [r7, #4]
 801a07c:	e001      	b.n	801a082 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a07e:	2300      	movs	r3, #0
 801a080:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a082:	687b      	ldr	r3, [r7, #4]
	}
 801a084:	4618      	mov	r0, r3
 801a086:	370c      	adds	r7, #12
 801a088:	46bd      	mov	sp, r7
 801a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a08e:	4770      	bx	lr
 801a090:	20011380 	.word	0x20011380
 801a094:	2001139c 	.word	0x2001139c

0801a098 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a098:	b580      	push	{r7, lr}
 801a09a:	b084      	sub	sp, #16
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a0a4:	2300      	movs	r3, #0
 801a0a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d069      	beq.n	801a182 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a0ae:	68bb      	ldr	r3, [r7, #8]
 801a0b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a0b2:	4b36      	ldr	r3, [pc, #216]	@ (801a18c <xTaskPriorityInherit+0xf4>)
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0b8:	429a      	cmp	r2, r3
 801a0ba:	d259      	bcs.n	801a170 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a0bc:	68bb      	ldr	r3, [r7, #8]
 801a0be:	699b      	ldr	r3, [r3, #24]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	db06      	blt.n	801a0d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a0c4:	4b31      	ldr	r3, [pc, #196]	@ (801a18c <xTaskPriorityInherit+0xf4>)
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0ca:	f1c3 0207 	rsb	r2, r3, #7
 801a0ce:	68bb      	ldr	r3, [r7, #8]
 801a0d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a0d2:	68bb      	ldr	r3, [r7, #8]
 801a0d4:	6959      	ldr	r1, [r3, #20]
 801a0d6:	68bb      	ldr	r3, [r7, #8]
 801a0d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a0da:	4613      	mov	r3, r2
 801a0dc:	009b      	lsls	r3, r3, #2
 801a0de:	4413      	add	r3, r2
 801a0e0:	009b      	lsls	r3, r3, #2
 801a0e2:	4a2b      	ldr	r2, [pc, #172]	@ (801a190 <xTaskPriorityInherit+0xf8>)
 801a0e4:	4413      	add	r3, r2
 801a0e6:	4299      	cmp	r1, r3
 801a0e8:	d13a      	bne.n	801a160 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a0ea:	68bb      	ldr	r3, [r7, #8]
 801a0ec:	3304      	adds	r3, #4
 801a0ee:	4618      	mov	r0, r3
 801a0f0:	f7fe f874 	bl	80181dc <uxListRemove>
 801a0f4:	4603      	mov	r3, r0
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d115      	bne.n	801a126 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801a0fa:	68bb      	ldr	r3, [r7, #8]
 801a0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a0fe:	4924      	ldr	r1, [pc, #144]	@ (801a190 <xTaskPriorityInherit+0xf8>)
 801a100:	4613      	mov	r3, r2
 801a102:	009b      	lsls	r3, r3, #2
 801a104:	4413      	add	r3, r2
 801a106:	009b      	lsls	r3, r3, #2
 801a108:	440b      	add	r3, r1
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d10a      	bne.n	801a126 <xTaskPriorityInherit+0x8e>
 801a110:	68bb      	ldr	r3, [r7, #8]
 801a112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a114:	2201      	movs	r2, #1
 801a116:	fa02 f303 	lsl.w	r3, r2, r3
 801a11a:	43da      	mvns	r2, r3
 801a11c:	4b1d      	ldr	r3, [pc, #116]	@ (801a194 <xTaskPriorityInherit+0xfc>)
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	4013      	ands	r3, r2
 801a122:	4a1c      	ldr	r2, [pc, #112]	@ (801a194 <xTaskPriorityInherit+0xfc>)
 801a124:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a126:	4b19      	ldr	r3, [pc, #100]	@ (801a18c <xTaskPriorityInherit+0xf4>)
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a12c:	68bb      	ldr	r3, [r7, #8]
 801a12e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a130:	68bb      	ldr	r3, [r7, #8]
 801a132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a134:	2201      	movs	r2, #1
 801a136:	409a      	lsls	r2, r3
 801a138:	4b16      	ldr	r3, [pc, #88]	@ (801a194 <xTaskPriorityInherit+0xfc>)
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	4313      	orrs	r3, r2
 801a13e:	4a15      	ldr	r2, [pc, #84]	@ (801a194 <xTaskPriorityInherit+0xfc>)
 801a140:	6013      	str	r3, [r2, #0]
 801a142:	68bb      	ldr	r3, [r7, #8]
 801a144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a146:	4613      	mov	r3, r2
 801a148:	009b      	lsls	r3, r3, #2
 801a14a:	4413      	add	r3, r2
 801a14c:	009b      	lsls	r3, r3, #2
 801a14e:	4a10      	ldr	r2, [pc, #64]	@ (801a190 <xTaskPriorityInherit+0xf8>)
 801a150:	441a      	add	r2, r3
 801a152:	68bb      	ldr	r3, [r7, #8]
 801a154:	3304      	adds	r3, #4
 801a156:	4619      	mov	r1, r3
 801a158:	4610      	mov	r0, r2
 801a15a:	f7fd ffe2 	bl	8018122 <vListInsertEnd>
 801a15e:	e004      	b.n	801a16a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a160:	4b0a      	ldr	r3, [pc, #40]	@ (801a18c <xTaskPriorityInherit+0xf4>)
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a166:	68bb      	ldr	r3, [r7, #8]
 801a168:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a16a:	2301      	movs	r3, #1
 801a16c:	60fb      	str	r3, [r7, #12]
 801a16e:	e008      	b.n	801a182 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a170:	68bb      	ldr	r3, [r7, #8]
 801a172:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a174:	4b05      	ldr	r3, [pc, #20]	@ (801a18c <xTaskPriorityInherit+0xf4>)
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a17a:	429a      	cmp	r2, r3
 801a17c:	d201      	bcs.n	801a182 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a17e:	2301      	movs	r3, #1
 801a180:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a182:	68fb      	ldr	r3, [r7, #12]
	}
 801a184:	4618      	mov	r0, r3
 801a186:	3710      	adds	r7, #16
 801a188:	46bd      	mov	sp, r7
 801a18a:	bd80      	pop	{r7, pc}
 801a18c:	20011274 	.word	0x20011274
 801a190:	20011278 	.word	0x20011278
 801a194:	2001137c 	.word	0x2001137c

0801a198 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a198:	b580      	push	{r7, lr}
 801a19a:	b086      	sub	sp, #24
 801a19c:	af00      	add	r7, sp, #0
 801a19e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d074      	beq.n	801a298 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a1ae:	4b3d      	ldr	r3, [pc, #244]	@ (801a2a4 <xTaskPriorityDisinherit+0x10c>)
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	693a      	ldr	r2, [r7, #16]
 801a1b4:	429a      	cmp	r2, r3
 801a1b6:	d00d      	beq.n	801a1d4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801a1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1bc:	b672      	cpsid	i
 801a1be:	f383 8811 	msr	BASEPRI, r3
 801a1c2:	f3bf 8f6f 	isb	sy
 801a1c6:	f3bf 8f4f 	dsb	sy
 801a1ca:	b662      	cpsie	i
 801a1cc:	60fb      	str	r3, [r7, #12]
}
 801a1ce:	bf00      	nop
 801a1d0:	bf00      	nop
 801a1d2:	e7fd      	b.n	801a1d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801a1d4:	693b      	ldr	r3, [r7, #16]
 801a1d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d10d      	bne.n	801a1f8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 801a1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1e0:	b672      	cpsid	i
 801a1e2:	f383 8811 	msr	BASEPRI, r3
 801a1e6:	f3bf 8f6f 	isb	sy
 801a1ea:	f3bf 8f4f 	dsb	sy
 801a1ee:	b662      	cpsie	i
 801a1f0:	60bb      	str	r3, [r7, #8]
}
 801a1f2:	bf00      	nop
 801a1f4:	bf00      	nop
 801a1f6:	e7fd      	b.n	801a1f4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801a1f8:	693b      	ldr	r3, [r7, #16]
 801a1fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a1fc:	1e5a      	subs	r2, r3, #1
 801a1fe:	693b      	ldr	r3, [r7, #16]
 801a200:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a202:	693b      	ldr	r3, [r7, #16]
 801a204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a206:	693b      	ldr	r3, [r7, #16]
 801a208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a20a:	429a      	cmp	r2, r3
 801a20c:	d044      	beq.n	801a298 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a20e:	693b      	ldr	r3, [r7, #16]
 801a210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a212:	2b00      	cmp	r3, #0
 801a214:	d140      	bne.n	801a298 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a216:	693b      	ldr	r3, [r7, #16]
 801a218:	3304      	adds	r3, #4
 801a21a:	4618      	mov	r0, r3
 801a21c:	f7fd ffde 	bl	80181dc <uxListRemove>
 801a220:	4603      	mov	r3, r0
 801a222:	2b00      	cmp	r3, #0
 801a224:	d115      	bne.n	801a252 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a226:	693b      	ldr	r3, [r7, #16]
 801a228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a22a:	491f      	ldr	r1, [pc, #124]	@ (801a2a8 <xTaskPriorityDisinherit+0x110>)
 801a22c:	4613      	mov	r3, r2
 801a22e:	009b      	lsls	r3, r3, #2
 801a230:	4413      	add	r3, r2
 801a232:	009b      	lsls	r3, r3, #2
 801a234:	440b      	add	r3, r1
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d10a      	bne.n	801a252 <xTaskPriorityDisinherit+0xba>
 801a23c:	693b      	ldr	r3, [r7, #16]
 801a23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a240:	2201      	movs	r2, #1
 801a242:	fa02 f303 	lsl.w	r3, r2, r3
 801a246:	43da      	mvns	r2, r3
 801a248:	4b18      	ldr	r3, [pc, #96]	@ (801a2ac <xTaskPriorityDisinherit+0x114>)
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	4013      	ands	r3, r2
 801a24e:	4a17      	ldr	r2, [pc, #92]	@ (801a2ac <xTaskPriorityDisinherit+0x114>)
 801a250:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a252:	693b      	ldr	r3, [r7, #16]
 801a254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a256:	693b      	ldr	r3, [r7, #16]
 801a258:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a25a:	693b      	ldr	r3, [r7, #16]
 801a25c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a25e:	f1c3 0207 	rsb	r2, r3, #7
 801a262:	693b      	ldr	r3, [r7, #16]
 801a264:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a266:	693b      	ldr	r3, [r7, #16]
 801a268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a26a:	2201      	movs	r2, #1
 801a26c:	409a      	lsls	r2, r3
 801a26e:	4b0f      	ldr	r3, [pc, #60]	@ (801a2ac <xTaskPriorityDisinherit+0x114>)
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	4313      	orrs	r3, r2
 801a274:	4a0d      	ldr	r2, [pc, #52]	@ (801a2ac <xTaskPriorityDisinherit+0x114>)
 801a276:	6013      	str	r3, [r2, #0]
 801a278:	693b      	ldr	r3, [r7, #16]
 801a27a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a27c:	4613      	mov	r3, r2
 801a27e:	009b      	lsls	r3, r3, #2
 801a280:	4413      	add	r3, r2
 801a282:	009b      	lsls	r3, r3, #2
 801a284:	4a08      	ldr	r2, [pc, #32]	@ (801a2a8 <xTaskPriorityDisinherit+0x110>)
 801a286:	441a      	add	r2, r3
 801a288:	693b      	ldr	r3, [r7, #16]
 801a28a:	3304      	adds	r3, #4
 801a28c:	4619      	mov	r1, r3
 801a28e:	4610      	mov	r0, r2
 801a290:	f7fd ff47 	bl	8018122 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a294:	2301      	movs	r3, #1
 801a296:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a298:	697b      	ldr	r3, [r7, #20]
	}
 801a29a:	4618      	mov	r0, r3
 801a29c:	3718      	adds	r7, #24
 801a29e:	46bd      	mov	sp, r7
 801a2a0:	bd80      	pop	{r7, pc}
 801a2a2:	bf00      	nop
 801a2a4:	20011274 	.word	0x20011274
 801a2a8:	20011278 	.word	0x20011278
 801a2ac:	2001137c 	.word	0x2001137c

0801a2b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b088      	sub	sp, #32
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	6078      	str	r0, [r7, #4]
 801a2b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801a2be:	2301      	movs	r3, #1
 801a2c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	f000 8089 	beq.w	801a3dc <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801a2ca:	69bb      	ldr	r3, [r7, #24]
 801a2cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d10d      	bne.n	801a2ee <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 801a2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a2d6:	b672      	cpsid	i
 801a2d8:	f383 8811 	msr	BASEPRI, r3
 801a2dc:	f3bf 8f6f 	isb	sy
 801a2e0:	f3bf 8f4f 	dsb	sy
 801a2e4:	b662      	cpsie	i
 801a2e6:	60fb      	str	r3, [r7, #12]
}
 801a2e8:	bf00      	nop
 801a2ea:	bf00      	nop
 801a2ec:	e7fd      	b.n	801a2ea <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a2ee:	69bb      	ldr	r3, [r7, #24]
 801a2f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a2f2:	683a      	ldr	r2, [r7, #0]
 801a2f4:	429a      	cmp	r2, r3
 801a2f6:	d902      	bls.n	801a2fe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a2f8:	683b      	ldr	r3, [r7, #0]
 801a2fa:	61fb      	str	r3, [r7, #28]
 801a2fc:	e002      	b.n	801a304 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801a2fe:	69bb      	ldr	r3, [r7, #24]
 801a300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a302:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a304:	69bb      	ldr	r3, [r7, #24]
 801a306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a308:	69fa      	ldr	r2, [r7, #28]
 801a30a:	429a      	cmp	r2, r3
 801a30c:	d066      	beq.n	801a3dc <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a30e:	69bb      	ldr	r3, [r7, #24]
 801a310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a312:	697a      	ldr	r2, [r7, #20]
 801a314:	429a      	cmp	r2, r3
 801a316:	d161      	bne.n	801a3dc <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801a318:	4b32      	ldr	r3, [pc, #200]	@ (801a3e4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	69ba      	ldr	r2, [r7, #24]
 801a31e:	429a      	cmp	r2, r3
 801a320:	d10d      	bne.n	801a33e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 801a322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a326:	b672      	cpsid	i
 801a328:	f383 8811 	msr	BASEPRI, r3
 801a32c:	f3bf 8f6f 	isb	sy
 801a330:	f3bf 8f4f 	dsb	sy
 801a334:	b662      	cpsie	i
 801a336:	60bb      	str	r3, [r7, #8]
}
 801a338:	bf00      	nop
 801a33a:	bf00      	nop
 801a33c:	e7fd      	b.n	801a33a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801a33e:	69bb      	ldr	r3, [r7, #24]
 801a340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a342:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801a344:	69bb      	ldr	r3, [r7, #24]
 801a346:	69fa      	ldr	r2, [r7, #28]
 801a348:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a34a:	69bb      	ldr	r3, [r7, #24]
 801a34c:	699b      	ldr	r3, [r3, #24]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	db04      	blt.n	801a35c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a352:	69fb      	ldr	r3, [r7, #28]
 801a354:	f1c3 0207 	rsb	r2, r3, #7
 801a358:	69bb      	ldr	r3, [r7, #24]
 801a35a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a35c:	69bb      	ldr	r3, [r7, #24]
 801a35e:	6959      	ldr	r1, [r3, #20]
 801a360:	693a      	ldr	r2, [r7, #16]
 801a362:	4613      	mov	r3, r2
 801a364:	009b      	lsls	r3, r3, #2
 801a366:	4413      	add	r3, r2
 801a368:	009b      	lsls	r3, r3, #2
 801a36a:	4a1f      	ldr	r2, [pc, #124]	@ (801a3e8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801a36c:	4413      	add	r3, r2
 801a36e:	4299      	cmp	r1, r3
 801a370:	d134      	bne.n	801a3dc <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a372:	69bb      	ldr	r3, [r7, #24]
 801a374:	3304      	adds	r3, #4
 801a376:	4618      	mov	r0, r3
 801a378:	f7fd ff30 	bl	80181dc <uxListRemove>
 801a37c:	4603      	mov	r3, r0
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d115      	bne.n	801a3ae <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a382:	69bb      	ldr	r3, [r7, #24]
 801a384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a386:	4918      	ldr	r1, [pc, #96]	@ (801a3e8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801a388:	4613      	mov	r3, r2
 801a38a:	009b      	lsls	r3, r3, #2
 801a38c:	4413      	add	r3, r2
 801a38e:	009b      	lsls	r3, r3, #2
 801a390:	440b      	add	r3, r1
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	2b00      	cmp	r3, #0
 801a396:	d10a      	bne.n	801a3ae <vTaskPriorityDisinheritAfterTimeout+0xfe>
 801a398:	69bb      	ldr	r3, [r7, #24]
 801a39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a39c:	2201      	movs	r2, #1
 801a39e:	fa02 f303 	lsl.w	r3, r2, r3
 801a3a2:	43da      	mvns	r2, r3
 801a3a4:	4b11      	ldr	r3, [pc, #68]	@ (801a3ec <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	4013      	ands	r3, r2
 801a3aa:	4a10      	ldr	r2, [pc, #64]	@ (801a3ec <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a3ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801a3ae:	69bb      	ldr	r3, [r7, #24]
 801a3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a3b2:	2201      	movs	r2, #1
 801a3b4:	409a      	lsls	r2, r3
 801a3b6:	4b0d      	ldr	r3, [pc, #52]	@ (801a3ec <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	4313      	orrs	r3, r2
 801a3bc:	4a0b      	ldr	r2, [pc, #44]	@ (801a3ec <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801a3be:	6013      	str	r3, [r2, #0]
 801a3c0:	69bb      	ldr	r3, [r7, #24]
 801a3c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a3c4:	4613      	mov	r3, r2
 801a3c6:	009b      	lsls	r3, r3, #2
 801a3c8:	4413      	add	r3, r2
 801a3ca:	009b      	lsls	r3, r3, #2
 801a3cc:	4a06      	ldr	r2, [pc, #24]	@ (801a3e8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801a3ce:	441a      	add	r2, r3
 801a3d0:	69bb      	ldr	r3, [r7, #24]
 801a3d2:	3304      	adds	r3, #4
 801a3d4:	4619      	mov	r1, r3
 801a3d6:	4610      	mov	r0, r2
 801a3d8:	f7fd fea3 	bl	8018122 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a3dc:	bf00      	nop
 801a3de:	3720      	adds	r7, #32
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	bd80      	pop	{r7, pc}
 801a3e4:	20011274 	.word	0x20011274
 801a3e8:	20011278 	.word	0x20011278
 801a3ec:	2001137c 	.word	0x2001137c

0801a3f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801a3f0:	b480      	push	{r7}
 801a3f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801a3f4:	4b07      	ldr	r3, [pc, #28]	@ (801a414 <pvTaskIncrementMutexHeldCount+0x24>)
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d004      	beq.n	801a406 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801a3fc:	4b05      	ldr	r3, [pc, #20]	@ (801a414 <pvTaskIncrementMutexHeldCount+0x24>)
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801a402:	3201      	adds	r2, #1
 801a404:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801a406:	4b03      	ldr	r3, [pc, #12]	@ (801a414 <pvTaskIncrementMutexHeldCount+0x24>)
 801a408:	681b      	ldr	r3, [r3, #0]
	}
 801a40a:	4618      	mov	r0, r3
 801a40c:	46bd      	mov	sp, r7
 801a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a412:	4770      	bx	lr
 801a414:	20011274 	.word	0x20011274

0801a418 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a418:	b580      	push	{r7, lr}
 801a41a:	b084      	sub	sp, #16
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
 801a420:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a422:	4b29      	ldr	r3, [pc, #164]	@ (801a4c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a428:	4b28      	ldr	r3, [pc, #160]	@ (801a4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	3304      	adds	r3, #4
 801a42e:	4618      	mov	r0, r3
 801a430:	f7fd fed4 	bl	80181dc <uxListRemove>
 801a434:	4603      	mov	r3, r0
 801a436:	2b00      	cmp	r3, #0
 801a438:	d10b      	bne.n	801a452 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801a43a:	4b24      	ldr	r3, [pc, #144]	@ (801a4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a440:	2201      	movs	r2, #1
 801a442:	fa02 f303 	lsl.w	r3, r2, r3
 801a446:	43da      	mvns	r2, r3
 801a448:	4b21      	ldr	r3, [pc, #132]	@ (801a4d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	4013      	ands	r3, r2
 801a44e:	4a20      	ldr	r2, [pc, #128]	@ (801a4d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a450:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a458:	d10a      	bne.n	801a470 <prvAddCurrentTaskToDelayedList+0x58>
 801a45a:	683b      	ldr	r3, [r7, #0]
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d007      	beq.n	801a470 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a460:	4b1a      	ldr	r3, [pc, #104]	@ (801a4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	3304      	adds	r3, #4
 801a466:	4619      	mov	r1, r3
 801a468:	481a      	ldr	r0, [pc, #104]	@ (801a4d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801a46a:	f7fd fe5a 	bl	8018122 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a46e:	e026      	b.n	801a4be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a470:	68fa      	ldr	r2, [r7, #12]
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	4413      	add	r3, r2
 801a476:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a478:	4b14      	ldr	r3, [pc, #80]	@ (801a4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	68ba      	ldr	r2, [r7, #8]
 801a47e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a480:	68ba      	ldr	r2, [r7, #8]
 801a482:	68fb      	ldr	r3, [r7, #12]
 801a484:	429a      	cmp	r2, r3
 801a486:	d209      	bcs.n	801a49c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a488:	4b13      	ldr	r3, [pc, #76]	@ (801a4d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801a48a:	681a      	ldr	r2, [r3, #0]
 801a48c:	4b0f      	ldr	r3, [pc, #60]	@ (801a4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	3304      	adds	r3, #4
 801a492:	4619      	mov	r1, r3
 801a494:	4610      	mov	r0, r2
 801a496:	f7fd fe68 	bl	801816a <vListInsert>
}
 801a49a:	e010      	b.n	801a4be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a49c:	4b0f      	ldr	r3, [pc, #60]	@ (801a4dc <prvAddCurrentTaskToDelayedList+0xc4>)
 801a49e:	681a      	ldr	r2, [r3, #0]
 801a4a0:	4b0a      	ldr	r3, [pc, #40]	@ (801a4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	3304      	adds	r3, #4
 801a4a6:	4619      	mov	r1, r3
 801a4a8:	4610      	mov	r0, r2
 801a4aa:	f7fd fe5e 	bl	801816a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a4ae:	4b0c      	ldr	r3, [pc, #48]	@ (801a4e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	68ba      	ldr	r2, [r7, #8]
 801a4b4:	429a      	cmp	r2, r3
 801a4b6:	d202      	bcs.n	801a4be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801a4b8:	4a09      	ldr	r2, [pc, #36]	@ (801a4e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a4ba:	68bb      	ldr	r3, [r7, #8]
 801a4bc:	6013      	str	r3, [r2, #0]
}
 801a4be:	bf00      	nop
 801a4c0:	3710      	adds	r7, #16
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	bd80      	pop	{r7, pc}
 801a4c6:	bf00      	nop
 801a4c8:	20011378 	.word	0x20011378
 801a4cc:	20011274 	.word	0x20011274
 801a4d0:	2001137c 	.word	0x2001137c
 801a4d4:	20011360 	.word	0x20011360
 801a4d8:	20011330 	.word	0x20011330
 801a4dc:	2001132c 	.word	0x2001132c
 801a4e0:	20011394 	.word	0x20011394

0801a4e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a4e4:	b480      	push	{r7}
 801a4e6:	b085      	sub	sp, #20
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	60f8      	str	r0, [r7, #12]
 801a4ec:	60b9      	str	r1, [r7, #8]
 801a4ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	3b04      	subs	r3, #4
 801a4f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801a4fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	3b04      	subs	r3, #4
 801a502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a504:	68bb      	ldr	r3, [r7, #8]
 801a506:	f023 0201 	bic.w	r2, r3, #1
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	3b04      	subs	r3, #4
 801a512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a514:	4a0c      	ldr	r2, [pc, #48]	@ (801a548 <pxPortInitialiseStack+0x64>)
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	3b14      	subs	r3, #20
 801a51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a520:	687a      	ldr	r2, [r7, #4]
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	3b04      	subs	r3, #4
 801a52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	f06f 0202 	mvn.w	r2, #2
 801a532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	3b20      	subs	r3, #32
 801a538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a53a:	68fb      	ldr	r3, [r7, #12]
}
 801a53c:	4618      	mov	r0, r3
 801a53e:	3714      	adds	r7, #20
 801a540:	46bd      	mov	sp, r7
 801a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a546:	4770      	bx	lr
 801a548:	0801a54d 	.word	0x0801a54d

0801a54c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a54c:	b480      	push	{r7}
 801a54e:	b085      	sub	sp, #20
 801a550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a552:	2300      	movs	r3, #0
 801a554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a556:	4b15      	ldr	r3, [pc, #84]	@ (801a5ac <prvTaskExitError+0x60>)
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a55e:	d00d      	beq.n	801a57c <prvTaskExitError+0x30>
	__asm volatile
 801a560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a564:	b672      	cpsid	i
 801a566:	f383 8811 	msr	BASEPRI, r3
 801a56a:	f3bf 8f6f 	isb	sy
 801a56e:	f3bf 8f4f 	dsb	sy
 801a572:	b662      	cpsie	i
 801a574:	60fb      	str	r3, [r7, #12]
}
 801a576:	bf00      	nop
 801a578:	bf00      	nop
 801a57a:	e7fd      	b.n	801a578 <prvTaskExitError+0x2c>
	__asm volatile
 801a57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a580:	b672      	cpsid	i
 801a582:	f383 8811 	msr	BASEPRI, r3
 801a586:	f3bf 8f6f 	isb	sy
 801a58a:	f3bf 8f4f 	dsb	sy
 801a58e:	b662      	cpsie	i
 801a590:	60bb      	str	r3, [r7, #8]
}
 801a592:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a594:	bf00      	nop
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d0fc      	beq.n	801a596 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a59c:	bf00      	nop
 801a59e:	bf00      	nop
 801a5a0:	3714      	adds	r7, #20
 801a5a2:	46bd      	mov	sp, r7
 801a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a8:	4770      	bx	lr
 801a5aa:	bf00      	nop
 801a5ac:	2001009c 	.word	0x2001009c

0801a5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801a5b0:	4b07      	ldr	r3, [pc, #28]	@ (801a5d0 <pxCurrentTCBConst2>)
 801a5b2:	6819      	ldr	r1, [r3, #0]
 801a5b4:	6808      	ldr	r0, [r1, #0]
 801a5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5ba:	f380 8809 	msr	PSP, r0
 801a5be:	f3bf 8f6f 	isb	sy
 801a5c2:	f04f 0000 	mov.w	r0, #0
 801a5c6:	f380 8811 	msr	BASEPRI, r0
 801a5ca:	4770      	bx	lr
 801a5cc:	f3af 8000 	nop.w

0801a5d0 <pxCurrentTCBConst2>:
 801a5d0:	20011274 	.word	0x20011274
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801a5d4:	bf00      	nop
 801a5d6:	bf00      	nop

0801a5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a5d8:	4808      	ldr	r0, [pc, #32]	@ (801a5fc <prvPortStartFirstTask+0x24>)
 801a5da:	6800      	ldr	r0, [r0, #0]
 801a5dc:	6800      	ldr	r0, [r0, #0]
 801a5de:	f380 8808 	msr	MSP, r0
 801a5e2:	f04f 0000 	mov.w	r0, #0
 801a5e6:	f380 8814 	msr	CONTROL, r0
 801a5ea:	b662      	cpsie	i
 801a5ec:	b661      	cpsie	f
 801a5ee:	f3bf 8f4f 	dsb	sy
 801a5f2:	f3bf 8f6f 	isb	sy
 801a5f6:	df00      	svc	0
 801a5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a5fa:	bf00      	nop
 801a5fc:	e000ed08 	.word	0xe000ed08

0801a600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a600:	b580      	push	{r7, lr}
 801a602:	b084      	sub	sp, #16
 801a604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a606:	4b37      	ldr	r3, [pc, #220]	@ (801a6e4 <xPortStartScheduler+0xe4>)
 801a608:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	781b      	ldrb	r3, [r3, #0]
 801a60e:	b2db      	uxtb	r3, r3
 801a610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	22ff      	movs	r2, #255	@ 0xff
 801a616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	781b      	ldrb	r3, [r3, #0]
 801a61c:	b2db      	uxtb	r3, r3
 801a61e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a620:	78fb      	ldrb	r3, [r7, #3]
 801a622:	b2db      	uxtb	r3, r3
 801a624:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801a628:	b2da      	uxtb	r2, r3
 801a62a:	4b2f      	ldr	r3, [pc, #188]	@ (801a6e8 <xPortStartScheduler+0xe8>)
 801a62c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a62e:	4b2f      	ldr	r3, [pc, #188]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a630:	2207      	movs	r2, #7
 801a632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a634:	e009      	b.n	801a64a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801a636:	4b2d      	ldr	r3, [pc, #180]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	3b01      	subs	r3, #1
 801a63c:	4a2b      	ldr	r2, [pc, #172]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a63e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a640:	78fb      	ldrb	r3, [r7, #3]
 801a642:	b2db      	uxtb	r3, r3
 801a644:	005b      	lsls	r3, r3, #1
 801a646:	b2db      	uxtb	r3, r3
 801a648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a64a:	78fb      	ldrb	r3, [r7, #3]
 801a64c:	b2db      	uxtb	r3, r3
 801a64e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a652:	2b80      	cmp	r3, #128	@ 0x80
 801a654:	d0ef      	beq.n	801a636 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a656:	4b25      	ldr	r3, [pc, #148]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	f1c3 0307 	rsb	r3, r3, #7
 801a65e:	2b04      	cmp	r3, #4
 801a660:	d00d      	beq.n	801a67e <xPortStartScheduler+0x7e>
	__asm volatile
 801a662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a666:	b672      	cpsid	i
 801a668:	f383 8811 	msr	BASEPRI, r3
 801a66c:	f3bf 8f6f 	isb	sy
 801a670:	f3bf 8f4f 	dsb	sy
 801a674:	b662      	cpsie	i
 801a676:	60bb      	str	r3, [r7, #8]
}
 801a678:	bf00      	nop
 801a67a:	bf00      	nop
 801a67c:	e7fd      	b.n	801a67a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a67e:	4b1b      	ldr	r3, [pc, #108]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	021b      	lsls	r3, r3, #8
 801a684:	4a19      	ldr	r2, [pc, #100]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a686:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a688:	4b18      	ldr	r3, [pc, #96]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801a690:	4a16      	ldr	r2, [pc, #88]	@ (801a6ec <xPortStartScheduler+0xec>)
 801a692:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	b2da      	uxtb	r2, r3
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a69c:	4b14      	ldr	r3, [pc, #80]	@ (801a6f0 <xPortStartScheduler+0xf0>)
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	4a13      	ldr	r2, [pc, #76]	@ (801a6f0 <xPortStartScheduler+0xf0>)
 801a6a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801a6a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a6a8:	4b11      	ldr	r3, [pc, #68]	@ (801a6f0 <xPortStartScheduler+0xf0>)
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	4a10      	ldr	r2, [pc, #64]	@ (801a6f0 <xPortStartScheduler+0xf0>)
 801a6ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801a6b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a6b4:	f000 f8dc 	bl	801a870 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a6b8:	4b0e      	ldr	r3, [pc, #56]	@ (801a6f4 <xPortStartScheduler+0xf4>)
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a6be:	f000 f8fb 	bl	801a8b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a6c2:	4b0d      	ldr	r3, [pc, #52]	@ (801a6f8 <xPortStartScheduler+0xf8>)
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	4a0c      	ldr	r2, [pc, #48]	@ (801a6f8 <xPortStartScheduler+0xf8>)
 801a6c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801a6cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a6ce:	f7ff ff83 	bl	801a5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a6d2:	f7ff fa41 	bl	8019b58 <vTaskSwitchContext>
	prvTaskExitError();
 801a6d6:	f7ff ff39 	bl	801a54c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a6da:	2300      	movs	r3, #0
}
 801a6dc:	4618      	mov	r0, r3
 801a6de:	3710      	adds	r7, #16
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bd80      	pop	{r7, pc}
 801a6e4:	e000e400 	.word	0xe000e400
 801a6e8:	200113a0 	.word	0x200113a0
 801a6ec:	200113a4 	.word	0x200113a4
 801a6f0:	e000ed20 	.word	0xe000ed20
 801a6f4:	2001009c 	.word	0x2001009c
 801a6f8:	e000ef34 	.word	0xe000ef34

0801a6fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a6fc:	b480      	push	{r7}
 801a6fe:	b083      	sub	sp, #12
 801a700:	af00      	add	r7, sp, #0
	__asm volatile
 801a702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a706:	b672      	cpsid	i
 801a708:	f383 8811 	msr	BASEPRI, r3
 801a70c:	f3bf 8f6f 	isb	sy
 801a710:	f3bf 8f4f 	dsb	sy
 801a714:	b662      	cpsie	i
 801a716:	607b      	str	r3, [r7, #4]
}
 801a718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a71a:	4b11      	ldr	r3, [pc, #68]	@ (801a760 <vPortEnterCritical+0x64>)
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	3301      	adds	r3, #1
 801a720:	4a0f      	ldr	r2, [pc, #60]	@ (801a760 <vPortEnterCritical+0x64>)
 801a722:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a724:	4b0e      	ldr	r3, [pc, #56]	@ (801a760 <vPortEnterCritical+0x64>)
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	2b01      	cmp	r3, #1
 801a72a:	d112      	bne.n	801a752 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a72c:	4b0d      	ldr	r3, [pc, #52]	@ (801a764 <vPortEnterCritical+0x68>)
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	b2db      	uxtb	r3, r3
 801a732:	2b00      	cmp	r3, #0
 801a734:	d00d      	beq.n	801a752 <vPortEnterCritical+0x56>
	__asm volatile
 801a736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a73a:	b672      	cpsid	i
 801a73c:	f383 8811 	msr	BASEPRI, r3
 801a740:	f3bf 8f6f 	isb	sy
 801a744:	f3bf 8f4f 	dsb	sy
 801a748:	b662      	cpsie	i
 801a74a:	603b      	str	r3, [r7, #0]
}
 801a74c:	bf00      	nop
 801a74e:	bf00      	nop
 801a750:	e7fd      	b.n	801a74e <vPortEnterCritical+0x52>
	}
}
 801a752:	bf00      	nop
 801a754:	370c      	adds	r7, #12
 801a756:	46bd      	mov	sp, r7
 801a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a75c:	4770      	bx	lr
 801a75e:	bf00      	nop
 801a760:	2001009c 	.word	0x2001009c
 801a764:	e000ed04 	.word	0xe000ed04

0801a768 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a768:	b480      	push	{r7}
 801a76a:	b083      	sub	sp, #12
 801a76c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a76e:	4b13      	ldr	r3, [pc, #76]	@ (801a7bc <vPortExitCritical+0x54>)
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	2b00      	cmp	r3, #0
 801a774:	d10d      	bne.n	801a792 <vPortExitCritical+0x2a>
	__asm volatile
 801a776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a77a:	b672      	cpsid	i
 801a77c:	f383 8811 	msr	BASEPRI, r3
 801a780:	f3bf 8f6f 	isb	sy
 801a784:	f3bf 8f4f 	dsb	sy
 801a788:	b662      	cpsie	i
 801a78a:	607b      	str	r3, [r7, #4]
}
 801a78c:	bf00      	nop
 801a78e:	bf00      	nop
 801a790:	e7fd      	b.n	801a78e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801a792:	4b0a      	ldr	r3, [pc, #40]	@ (801a7bc <vPortExitCritical+0x54>)
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	3b01      	subs	r3, #1
 801a798:	4a08      	ldr	r2, [pc, #32]	@ (801a7bc <vPortExitCritical+0x54>)
 801a79a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a79c:	4b07      	ldr	r3, [pc, #28]	@ (801a7bc <vPortExitCritical+0x54>)
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d105      	bne.n	801a7b0 <vPortExitCritical+0x48>
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a7a8:	683b      	ldr	r3, [r7, #0]
 801a7aa:	f383 8811 	msr	BASEPRI, r3
}
 801a7ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a7b0:	bf00      	nop
 801a7b2:	370c      	adds	r7, #12
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ba:	4770      	bx	lr
 801a7bc:	2001009c 	.word	0x2001009c

0801a7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a7c0:	f3ef 8009 	mrs	r0, PSP
 801a7c4:	f3bf 8f6f 	isb	sy
 801a7c8:	4b15      	ldr	r3, [pc, #84]	@ (801a820 <pxCurrentTCBConst>)
 801a7ca:	681a      	ldr	r2, [r3, #0]
 801a7cc:	f01e 0f10 	tst.w	lr, #16
 801a7d0:	bf08      	it	eq
 801a7d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a7d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7da:	6010      	str	r0, [r2, #0]
 801a7dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a7e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801a7e4:	b672      	cpsid	i
 801a7e6:	f380 8811 	msr	BASEPRI, r0
 801a7ea:	f3bf 8f4f 	dsb	sy
 801a7ee:	f3bf 8f6f 	isb	sy
 801a7f2:	b662      	cpsie	i
 801a7f4:	f7ff f9b0 	bl	8019b58 <vTaskSwitchContext>
 801a7f8:	f04f 0000 	mov.w	r0, #0
 801a7fc:	f380 8811 	msr	BASEPRI, r0
 801a800:	bc09      	pop	{r0, r3}
 801a802:	6819      	ldr	r1, [r3, #0]
 801a804:	6808      	ldr	r0, [r1, #0]
 801a806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a80a:	f01e 0f10 	tst.w	lr, #16
 801a80e:	bf08      	it	eq
 801a810:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a814:	f380 8809 	msr	PSP, r0
 801a818:	f3bf 8f6f 	isb	sy
 801a81c:	4770      	bx	lr
 801a81e:	bf00      	nop

0801a820 <pxCurrentTCBConst>:
 801a820:	20011274 	.word	0x20011274
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a824:	bf00      	nop
 801a826:	bf00      	nop

0801a828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b082      	sub	sp, #8
 801a82c:	af00      	add	r7, sp, #0
	__asm volatile
 801a82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a832:	b672      	cpsid	i
 801a834:	f383 8811 	msr	BASEPRI, r3
 801a838:	f3bf 8f6f 	isb	sy
 801a83c:	f3bf 8f4f 	dsb	sy
 801a840:	b662      	cpsie	i
 801a842:	607b      	str	r3, [r7, #4]
}
 801a844:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a846:	f7ff f8cb 	bl	80199e0 <xTaskIncrementTick>
 801a84a:	4603      	mov	r3, r0
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d003      	beq.n	801a858 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a850:	4b06      	ldr	r3, [pc, #24]	@ (801a86c <SysTick_Handler+0x44>)
 801a852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a856:	601a      	str	r2, [r3, #0]
 801a858:	2300      	movs	r3, #0
 801a85a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a85c:	683b      	ldr	r3, [r7, #0]
 801a85e:	f383 8811 	msr	BASEPRI, r3
}
 801a862:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a864:	bf00      	nop
 801a866:	3708      	adds	r7, #8
 801a868:	46bd      	mov	sp, r7
 801a86a:	bd80      	pop	{r7, pc}
 801a86c:	e000ed04 	.word	0xe000ed04

0801a870 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a870:	b480      	push	{r7}
 801a872:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a874:	4b0b      	ldr	r3, [pc, #44]	@ (801a8a4 <vPortSetupTimerInterrupt+0x34>)
 801a876:	2200      	movs	r2, #0
 801a878:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a87a:	4b0b      	ldr	r3, [pc, #44]	@ (801a8a8 <vPortSetupTimerInterrupt+0x38>)
 801a87c:	2200      	movs	r2, #0
 801a87e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a880:	4b0a      	ldr	r3, [pc, #40]	@ (801a8ac <vPortSetupTimerInterrupt+0x3c>)
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	4a0a      	ldr	r2, [pc, #40]	@ (801a8b0 <vPortSetupTimerInterrupt+0x40>)
 801a886:	fba2 2303 	umull	r2, r3, r2, r3
 801a88a:	099b      	lsrs	r3, r3, #6
 801a88c:	4a09      	ldr	r2, [pc, #36]	@ (801a8b4 <vPortSetupTimerInterrupt+0x44>)
 801a88e:	3b01      	subs	r3, #1
 801a890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a892:	4b04      	ldr	r3, [pc, #16]	@ (801a8a4 <vPortSetupTimerInterrupt+0x34>)
 801a894:	2207      	movs	r2, #7
 801a896:	601a      	str	r2, [r3, #0]
}
 801a898:	bf00      	nop
 801a89a:	46bd      	mov	sp, r7
 801a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a0:	4770      	bx	lr
 801a8a2:	bf00      	nop
 801a8a4:	e000e010 	.word	0xe000e010
 801a8a8:	e000e018 	.word	0xe000e018
 801a8ac:	20010000 	.word	0x20010000
 801a8b0:	10624dd3 	.word	0x10624dd3
 801a8b4:	e000e014 	.word	0xe000e014

0801a8b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a8b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801a8c8 <vPortEnableVFP+0x10>
 801a8bc:	6801      	ldr	r1, [r0, #0]
 801a8be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801a8c2:	6001      	str	r1, [r0, #0]
 801a8c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a8c6:	bf00      	nop
 801a8c8:	e000ed88 	.word	0xe000ed88

0801a8cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a8cc:	b480      	push	{r7}
 801a8ce:	b085      	sub	sp, #20
 801a8d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a8d2:	f3ef 8305 	mrs	r3, IPSR
 801a8d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	2b0f      	cmp	r3, #15
 801a8dc:	d917      	bls.n	801a90e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a8de:	4a1a      	ldr	r2, [pc, #104]	@ (801a948 <vPortValidateInterruptPriority+0x7c>)
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	4413      	add	r3, r2
 801a8e4:	781b      	ldrb	r3, [r3, #0]
 801a8e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a8e8:	4b18      	ldr	r3, [pc, #96]	@ (801a94c <vPortValidateInterruptPriority+0x80>)
 801a8ea:	781b      	ldrb	r3, [r3, #0]
 801a8ec:	7afa      	ldrb	r2, [r7, #11]
 801a8ee:	429a      	cmp	r2, r3
 801a8f0:	d20d      	bcs.n	801a90e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 801a8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a8f6:	b672      	cpsid	i
 801a8f8:	f383 8811 	msr	BASEPRI, r3
 801a8fc:	f3bf 8f6f 	isb	sy
 801a900:	f3bf 8f4f 	dsb	sy
 801a904:	b662      	cpsie	i
 801a906:	607b      	str	r3, [r7, #4]
}
 801a908:	bf00      	nop
 801a90a:	bf00      	nop
 801a90c:	e7fd      	b.n	801a90a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a90e:	4b10      	ldr	r3, [pc, #64]	@ (801a950 <vPortValidateInterruptPriority+0x84>)
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801a916:	4b0f      	ldr	r3, [pc, #60]	@ (801a954 <vPortValidateInterruptPriority+0x88>)
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	429a      	cmp	r2, r3
 801a91c:	d90d      	bls.n	801a93a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801a91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a922:	b672      	cpsid	i
 801a924:	f383 8811 	msr	BASEPRI, r3
 801a928:	f3bf 8f6f 	isb	sy
 801a92c:	f3bf 8f4f 	dsb	sy
 801a930:	b662      	cpsie	i
 801a932:	603b      	str	r3, [r7, #0]
}
 801a934:	bf00      	nop
 801a936:	bf00      	nop
 801a938:	e7fd      	b.n	801a936 <vPortValidateInterruptPriority+0x6a>
	}
 801a93a:	bf00      	nop
 801a93c:	3714      	adds	r7, #20
 801a93e:	46bd      	mov	sp, r7
 801a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a944:	4770      	bx	lr
 801a946:	bf00      	nop
 801a948:	e000e3f0 	.word	0xe000e3f0
 801a94c:	200113a0 	.word	0x200113a0
 801a950:	e000ed0c 	.word	0xe000ed0c
 801a954:	200113a4 	.word	0x200113a4

0801a958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	b08a      	sub	sp, #40	@ 0x28
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a960:	2300      	movs	r3, #0
 801a962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a964:	f7fe ff6c 	bl	8019840 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a968:	4b5f      	ldr	r3, [pc, #380]	@ (801aae8 <pvPortMalloc+0x190>)
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d101      	bne.n	801a974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a970:	f000 f924 	bl	801abbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a974:	4b5d      	ldr	r3, [pc, #372]	@ (801aaec <pvPortMalloc+0x194>)
 801a976:	681a      	ldr	r2, [r3, #0]
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	4013      	ands	r3, r2
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	f040 8094 	bne.w	801aaaa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	2b00      	cmp	r3, #0
 801a986:	d020      	beq.n	801a9ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 801a988:	2208      	movs	r2, #8
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	4413      	add	r3, r2
 801a98e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	f003 0307 	and.w	r3, r3, #7
 801a996:	2b00      	cmp	r3, #0
 801a998:	d017      	beq.n	801a9ca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	f023 0307 	bic.w	r3, r3, #7
 801a9a0:	3308      	adds	r3, #8
 801a9a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	f003 0307 	and.w	r3, r3, #7
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d00d      	beq.n	801a9ca <pvPortMalloc+0x72>
	__asm volatile
 801a9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a9b2:	b672      	cpsid	i
 801a9b4:	f383 8811 	msr	BASEPRI, r3
 801a9b8:	f3bf 8f6f 	isb	sy
 801a9bc:	f3bf 8f4f 	dsb	sy
 801a9c0:	b662      	cpsie	i
 801a9c2:	617b      	str	r3, [r7, #20]
}
 801a9c4:	bf00      	nop
 801a9c6:	bf00      	nop
 801a9c8:	e7fd      	b.n	801a9c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d06c      	beq.n	801aaaa <pvPortMalloc+0x152>
 801a9d0:	4b47      	ldr	r3, [pc, #284]	@ (801aaf0 <pvPortMalloc+0x198>)
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	687a      	ldr	r2, [r7, #4]
 801a9d6:	429a      	cmp	r2, r3
 801a9d8:	d867      	bhi.n	801aaaa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a9da:	4b46      	ldr	r3, [pc, #280]	@ (801aaf4 <pvPortMalloc+0x19c>)
 801a9dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a9de:	4b45      	ldr	r3, [pc, #276]	@ (801aaf4 <pvPortMalloc+0x19c>)
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a9e4:	e004      	b.n	801a9f0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 801a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9f2:	685b      	ldr	r3, [r3, #4]
 801a9f4:	687a      	ldr	r2, [r7, #4]
 801a9f6:	429a      	cmp	r2, r3
 801a9f8:	d903      	bls.n	801aa02 <pvPortMalloc+0xaa>
 801a9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d1f1      	bne.n	801a9e6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801aa02:	4b39      	ldr	r3, [pc, #228]	@ (801aae8 <pvPortMalloc+0x190>)
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aa08:	429a      	cmp	r2, r3
 801aa0a:	d04e      	beq.n	801aaaa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801aa0c:	6a3b      	ldr	r3, [r7, #32]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	2208      	movs	r2, #8
 801aa12:	4413      	add	r3, r2
 801aa14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa18:	681a      	ldr	r2, [r3, #0]
 801aa1a:	6a3b      	ldr	r3, [r7, #32]
 801aa1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801aa1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa20:	685a      	ldr	r2, [r3, #4]
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	1ad2      	subs	r2, r2, r3
 801aa26:	2308      	movs	r3, #8
 801aa28:	005b      	lsls	r3, r3, #1
 801aa2a:	429a      	cmp	r2, r3
 801aa2c:	d922      	bls.n	801aa74 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801aa2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	4413      	add	r3, r2
 801aa34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801aa36:	69bb      	ldr	r3, [r7, #24]
 801aa38:	f003 0307 	and.w	r3, r3, #7
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d00d      	beq.n	801aa5c <pvPortMalloc+0x104>
	__asm volatile
 801aa40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aa44:	b672      	cpsid	i
 801aa46:	f383 8811 	msr	BASEPRI, r3
 801aa4a:	f3bf 8f6f 	isb	sy
 801aa4e:	f3bf 8f4f 	dsb	sy
 801aa52:	b662      	cpsie	i
 801aa54:	613b      	str	r3, [r7, #16]
}
 801aa56:	bf00      	nop
 801aa58:	bf00      	nop
 801aa5a:	e7fd      	b.n	801aa58 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801aa5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa5e:	685a      	ldr	r2, [r3, #4]
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	1ad2      	subs	r2, r2, r3
 801aa64:	69bb      	ldr	r3, [r7, #24]
 801aa66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa6a:	687a      	ldr	r2, [r7, #4]
 801aa6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801aa6e:	69b8      	ldr	r0, [r7, #24]
 801aa70:	f000 f906 	bl	801ac80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801aa74:	4b1e      	ldr	r3, [pc, #120]	@ (801aaf0 <pvPortMalloc+0x198>)
 801aa76:	681a      	ldr	r2, [r3, #0]
 801aa78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa7a:	685b      	ldr	r3, [r3, #4]
 801aa7c:	1ad3      	subs	r3, r2, r3
 801aa7e:	4a1c      	ldr	r2, [pc, #112]	@ (801aaf0 <pvPortMalloc+0x198>)
 801aa80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801aa82:	4b1b      	ldr	r3, [pc, #108]	@ (801aaf0 <pvPortMalloc+0x198>)
 801aa84:	681a      	ldr	r2, [r3, #0]
 801aa86:	4b1c      	ldr	r3, [pc, #112]	@ (801aaf8 <pvPortMalloc+0x1a0>)
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	429a      	cmp	r2, r3
 801aa8c:	d203      	bcs.n	801aa96 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801aa8e:	4b18      	ldr	r3, [pc, #96]	@ (801aaf0 <pvPortMalloc+0x198>)
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	4a19      	ldr	r2, [pc, #100]	@ (801aaf8 <pvPortMalloc+0x1a0>)
 801aa94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801aa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa98:	685a      	ldr	r2, [r3, #4]
 801aa9a:	4b14      	ldr	r3, [pc, #80]	@ (801aaec <pvPortMalloc+0x194>)
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	431a      	orrs	r2, r3
 801aaa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aaa2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801aaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801aaaa:	f7fe fed7 	bl	801985c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801aaae:	69fb      	ldr	r3, [r7, #28]
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d101      	bne.n	801aab8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801aab4:	f7e6 fa6b 	bl	8000f8e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801aab8:	69fb      	ldr	r3, [r7, #28]
 801aaba:	f003 0307 	and.w	r3, r3, #7
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d00d      	beq.n	801aade <pvPortMalloc+0x186>
	__asm volatile
 801aac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aac6:	b672      	cpsid	i
 801aac8:	f383 8811 	msr	BASEPRI, r3
 801aacc:	f3bf 8f6f 	isb	sy
 801aad0:	f3bf 8f4f 	dsb	sy
 801aad4:	b662      	cpsie	i
 801aad6:	60fb      	str	r3, [r7, #12]
}
 801aad8:	bf00      	nop
 801aada:	bf00      	nop
 801aadc:	e7fd      	b.n	801aada <pvPortMalloc+0x182>
	return pvReturn;
 801aade:	69fb      	ldr	r3, [r7, #28]
}
 801aae0:	4618      	mov	r0, r3
 801aae2:	3728      	adds	r7, #40	@ 0x28
 801aae4:	46bd      	mov	sp, r7
 801aae6:	bd80      	pop	{r7, pc}
 801aae8:	200193b0 	.word	0x200193b0
 801aaec:	200193bc 	.word	0x200193bc
 801aaf0:	200193b4 	.word	0x200193b4
 801aaf4:	200193a8 	.word	0x200193a8
 801aaf8:	200193b8 	.word	0x200193b8

0801aafc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b086      	sub	sp, #24
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d04e      	beq.n	801abac <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801ab0e:	2308      	movs	r3, #8
 801ab10:	425b      	negs	r3, r3
 801ab12:	697a      	ldr	r2, [r7, #20]
 801ab14:	4413      	add	r3, r2
 801ab16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801ab18:	697b      	ldr	r3, [r7, #20]
 801ab1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ab1c:	693b      	ldr	r3, [r7, #16]
 801ab1e:	685a      	ldr	r2, [r3, #4]
 801ab20:	4b24      	ldr	r3, [pc, #144]	@ (801abb4 <vPortFree+0xb8>)
 801ab22:	681b      	ldr	r3, [r3, #0]
 801ab24:	4013      	ands	r3, r2
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d10d      	bne.n	801ab46 <vPortFree+0x4a>
	__asm volatile
 801ab2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab2e:	b672      	cpsid	i
 801ab30:	f383 8811 	msr	BASEPRI, r3
 801ab34:	f3bf 8f6f 	isb	sy
 801ab38:	f3bf 8f4f 	dsb	sy
 801ab3c:	b662      	cpsie	i
 801ab3e:	60fb      	str	r3, [r7, #12]
}
 801ab40:	bf00      	nop
 801ab42:	bf00      	nop
 801ab44:	e7fd      	b.n	801ab42 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801ab46:	693b      	ldr	r3, [r7, #16]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d00d      	beq.n	801ab6a <vPortFree+0x6e>
	__asm volatile
 801ab4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab52:	b672      	cpsid	i
 801ab54:	f383 8811 	msr	BASEPRI, r3
 801ab58:	f3bf 8f6f 	isb	sy
 801ab5c:	f3bf 8f4f 	dsb	sy
 801ab60:	b662      	cpsie	i
 801ab62:	60bb      	str	r3, [r7, #8]
}
 801ab64:	bf00      	nop
 801ab66:	bf00      	nop
 801ab68:	e7fd      	b.n	801ab66 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ab6a:	693b      	ldr	r3, [r7, #16]
 801ab6c:	685a      	ldr	r2, [r3, #4]
 801ab6e:	4b11      	ldr	r3, [pc, #68]	@ (801abb4 <vPortFree+0xb8>)
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	4013      	ands	r3, r2
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d019      	beq.n	801abac <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801ab78:	693b      	ldr	r3, [r7, #16]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d115      	bne.n	801abac <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801ab80:	693b      	ldr	r3, [r7, #16]
 801ab82:	685a      	ldr	r2, [r3, #4]
 801ab84:	4b0b      	ldr	r3, [pc, #44]	@ (801abb4 <vPortFree+0xb8>)
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	43db      	mvns	r3, r3
 801ab8a:	401a      	ands	r2, r3
 801ab8c:	693b      	ldr	r3, [r7, #16]
 801ab8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801ab90:	f7fe fe56 	bl	8019840 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801ab94:	693b      	ldr	r3, [r7, #16]
 801ab96:	685a      	ldr	r2, [r3, #4]
 801ab98:	4b07      	ldr	r3, [pc, #28]	@ (801abb8 <vPortFree+0xbc>)
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	4413      	add	r3, r2
 801ab9e:	4a06      	ldr	r2, [pc, #24]	@ (801abb8 <vPortFree+0xbc>)
 801aba0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801aba2:	6938      	ldr	r0, [r7, #16]
 801aba4:	f000 f86c 	bl	801ac80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801aba8:	f7fe fe58 	bl	801985c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801abac:	bf00      	nop
 801abae:	3718      	adds	r7, #24
 801abb0:	46bd      	mov	sp, r7
 801abb2:	bd80      	pop	{r7, pc}
 801abb4:	200193bc 	.word	0x200193bc
 801abb8:	200193b4 	.word	0x200193b4

0801abbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801abbc:	b480      	push	{r7}
 801abbe:	b085      	sub	sp, #20
 801abc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801abc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801abc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801abc8:	4b27      	ldr	r3, [pc, #156]	@ (801ac68 <prvHeapInit+0xac>)
 801abca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	f003 0307 	and.w	r3, r3, #7
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d00c      	beq.n	801abf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	3307      	adds	r3, #7
 801abda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	f023 0307 	bic.w	r3, r3, #7
 801abe2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801abe4:	68ba      	ldr	r2, [r7, #8]
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	1ad3      	subs	r3, r2, r3
 801abea:	4a1f      	ldr	r2, [pc, #124]	@ (801ac68 <prvHeapInit+0xac>)
 801abec:	4413      	add	r3, r2
 801abee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801abf4:	4a1d      	ldr	r2, [pc, #116]	@ (801ac6c <prvHeapInit+0xb0>)
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801abfa:	4b1c      	ldr	r3, [pc, #112]	@ (801ac6c <prvHeapInit+0xb0>)
 801abfc:	2200      	movs	r2, #0
 801abfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	68ba      	ldr	r2, [r7, #8]
 801ac04:	4413      	add	r3, r2
 801ac06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801ac08:	2208      	movs	r2, #8
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	1a9b      	subs	r3, r3, r2
 801ac0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	f023 0307 	bic.w	r3, r3, #7
 801ac16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	4a15      	ldr	r2, [pc, #84]	@ (801ac70 <prvHeapInit+0xb4>)
 801ac1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801ac1e:	4b14      	ldr	r3, [pc, #80]	@ (801ac70 <prvHeapInit+0xb4>)
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	2200      	movs	r2, #0
 801ac24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801ac26:	4b12      	ldr	r3, [pc, #72]	@ (801ac70 <prvHeapInit+0xb4>)
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	2200      	movs	r2, #0
 801ac2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801ac32:	683b      	ldr	r3, [r7, #0]
 801ac34:	68fa      	ldr	r2, [r7, #12]
 801ac36:	1ad2      	subs	r2, r2, r3
 801ac38:	683b      	ldr	r3, [r7, #0]
 801ac3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801ac3c:	4b0c      	ldr	r3, [pc, #48]	@ (801ac70 <prvHeapInit+0xb4>)
 801ac3e:	681a      	ldr	r2, [r3, #0]
 801ac40:	683b      	ldr	r3, [r7, #0]
 801ac42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ac44:	683b      	ldr	r3, [r7, #0]
 801ac46:	685b      	ldr	r3, [r3, #4]
 801ac48:	4a0a      	ldr	r2, [pc, #40]	@ (801ac74 <prvHeapInit+0xb8>)
 801ac4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ac4c:	683b      	ldr	r3, [r7, #0]
 801ac4e:	685b      	ldr	r3, [r3, #4]
 801ac50:	4a09      	ldr	r2, [pc, #36]	@ (801ac78 <prvHeapInit+0xbc>)
 801ac52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801ac54:	4b09      	ldr	r3, [pc, #36]	@ (801ac7c <prvHeapInit+0xc0>)
 801ac56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801ac5a:	601a      	str	r2, [r3, #0]
}
 801ac5c:	bf00      	nop
 801ac5e:	3714      	adds	r7, #20
 801ac60:	46bd      	mov	sp, r7
 801ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac66:	4770      	bx	lr
 801ac68:	200113a8 	.word	0x200113a8
 801ac6c:	200193a8 	.word	0x200193a8
 801ac70:	200193b0 	.word	0x200193b0
 801ac74:	200193b8 	.word	0x200193b8
 801ac78:	200193b4 	.word	0x200193b4
 801ac7c:	200193bc 	.word	0x200193bc

0801ac80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801ac80:	b480      	push	{r7}
 801ac82:	b085      	sub	sp, #20
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801ac88:	4b28      	ldr	r3, [pc, #160]	@ (801ad2c <prvInsertBlockIntoFreeList+0xac>)
 801ac8a:	60fb      	str	r3, [r7, #12]
 801ac8c:	e002      	b.n	801ac94 <prvInsertBlockIntoFreeList+0x14>
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	60fb      	str	r3, [r7, #12]
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	687a      	ldr	r2, [r7, #4]
 801ac9a:	429a      	cmp	r2, r3
 801ac9c:	d8f7      	bhi.n	801ac8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	685b      	ldr	r3, [r3, #4]
 801aca6:	68ba      	ldr	r2, [r7, #8]
 801aca8:	4413      	add	r3, r2
 801acaa:	687a      	ldr	r2, [r7, #4]
 801acac:	429a      	cmp	r2, r3
 801acae:	d108      	bne.n	801acc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801acb0:	68fb      	ldr	r3, [r7, #12]
 801acb2:	685a      	ldr	r2, [r3, #4]
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	685b      	ldr	r3, [r3, #4]
 801acb8:	441a      	add	r2, r3
 801acba:	68fb      	ldr	r3, [r7, #12]
 801acbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	685b      	ldr	r3, [r3, #4]
 801acca:	68ba      	ldr	r2, [r7, #8]
 801accc:	441a      	add	r2, r3
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	429a      	cmp	r2, r3
 801acd4:	d118      	bne.n	801ad08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	681a      	ldr	r2, [r3, #0]
 801acda:	4b15      	ldr	r3, [pc, #84]	@ (801ad30 <prvInsertBlockIntoFreeList+0xb0>)
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	429a      	cmp	r2, r3
 801ace0:	d00d      	beq.n	801acfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	685a      	ldr	r2, [r3, #4]
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	685b      	ldr	r3, [r3, #4]
 801acec:	441a      	add	r2, r3
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	681a      	ldr	r2, [r3, #0]
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	601a      	str	r2, [r3, #0]
 801acfc:	e008      	b.n	801ad10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801acfe:	4b0c      	ldr	r3, [pc, #48]	@ (801ad30 <prvInsertBlockIntoFreeList+0xb0>)
 801ad00:	681a      	ldr	r2, [r3, #0]
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	601a      	str	r2, [r3, #0]
 801ad06:	e003      	b.n	801ad10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	681a      	ldr	r2, [r3, #0]
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ad10:	68fa      	ldr	r2, [r7, #12]
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	429a      	cmp	r2, r3
 801ad16:	d002      	beq.n	801ad1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	687a      	ldr	r2, [r7, #4]
 801ad1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ad1e:	bf00      	nop
 801ad20:	3714      	adds	r7, #20
 801ad22:	46bd      	mov	sp, r7
 801ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad28:	4770      	bx	lr
 801ad2a:	bf00      	nop
 801ad2c:	200193a8 	.word	0x200193a8
 801ad30:	200193b0 	.word	0x200193b0

0801ad34 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801ad34:	b580      	push	{r7, lr}
 801ad36:	b084      	sub	sp, #16
 801ad38:	af00      	add	r7, sp, #0
 801ad3a:	6078      	str	r0, [r7, #4]
 801ad3c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801ad3e:	f007 fb79 	bl	8022434 <sys_timeouts_sleeptime>
 801ad42:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801ad44:	68fb      	ldr	r3, [r7, #12]
 801ad46:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad4a:	d10b      	bne.n	801ad64 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801ad4c:	4813      	ldr	r0, [pc, #76]	@ (801ad9c <tcpip_timeouts_mbox_fetch+0x68>)
 801ad4e:	f00a fc44 	bl	80255da <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801ad52:	2200      	movs	r2, #0
 801ad54:	6839      	ldr	r1, [r7, #0]
 801ad56:	6878      	ldr	r0, [r7, #4]
 801ad58:	f00a fbb6 	bl	80254c8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801ad5c:	480f      	ldr	r0, [pc, #60]	@ (801ad9c <tcpip_timeouts_mbox_fetch+0x68>)
 801ad5e:	f00a fc2d 	bl	80255bc <sys_mutex_lock>
    return;
 801ad62:	e018      	b.n	801ad96 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d102      	bne.n	801ad70 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801ad6a:	f007 fb29 	bl	80223c0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801ad6e:	e7e6      	b.n	801ad3e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801ad70:	480a      	ldr	r0, [pc, #40]	@ (801ad9c <tcpip_timeouts_mbox_fetch+0x68>)
 801ad72:	f00a fc32 	bl	80255da <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801ad76:	68fa      	ldr	r2, [r7, #12]
 801ad78:	6839      	ldr	r1, [r7, #0]
 801ad7a:	6878      	ldr	r0, [r7, #4]
 801ad7c:	f00a fba4 	bl	80254c8 <sys_arch_mbox_fetch>
 801ad80:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801ad82:	4806      	ldr	r0, [pc, #24]	@ (801ad9c <tcpip_timeouts_mbox_fetch+0x68>)
 801ad84:	f00a fc1a 	bl	80255bc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801ad88:	68bb      	ldr	r3, [r7, #8]
 801ad8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad8e:	d102      	bne.n	801ad96 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801ad90:	f007 fb16 	bl	80223c0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801ad94:	e7d3      	b.n	801ad3e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801ad96:	3710      	adds	r7, #16
 801ad98:	46bd      	mov	sp, r7
 801ad9a:	bd80      	pop	{r7, pc}
 801ad9c:	200193cc 	.word	0x200193cc

0801ada0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b084      	sub	sp, #16
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801ada8:	4810      	ldr	r0, [pc, #64]	@ (801adec <tcpip_thread+0x4c>)
 801adaa:	f00a fc07 	bl	80255bc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801adae:	4b10      	ldr	r3, [pc, #64]	@ (801adf0 <tcpip_thread+0x50>)
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d005      	beq.n	801adc2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801adb6:	4b0e      	ldr	r3, [pc, #56]	@ (801adf0 <tcpip_thread+0x50>)
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	4a0e      	ldr	r2, [pc, #56]	@ (801adf4 <tcpip_thread+0x54>)
 801adbc:	6812      	ldr	r2, [r2, #0]
 801adbe:	4610      	mov	r0, r2
 801adc0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801adc2:	f107 030c 	add.w	r3, r7, #12
 801adc6:	4619      	mov	r1, r3
 801adc8:	480b      	ldr	r0, [pc, #44]	@ (801adf8 <tcpip_thread+0x58>)
 801adca:	f7ff ffb3 	bl	801ad34 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d106      	bne.n	801ade2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801add4:	4b09      	ldr	r3, [pc, #36]	@ (801adfc <tcpip_thread+0x5c>)
 801add6:	2291      	movs	r2, #145	@ 0x91
 801add8:	4909      	ldr	r1, [pc, #36]	@ (801ae00 <tcpip_thread+0x60>)
 801adda:	480a      	ldr	r0, [pc, #40]	@ (801ae04 <tcpip_thread+0x64>)
 801addc:	f00b fd5c 	bl	8026898 <iprintf>
      continue;
 801ade0:	e003      	b.n	801adea <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	4618      	mov	r0, r3
 801ade6:	f000 f80f 	bl	801ae08 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801adea:	e7ea      	b.n	801adc2 <tcpip_thread+0x22>
 801adec:	200193cc 	.word	0x200193cc
 801adf0:	200193c0 	.word	0x200193c0
 801adf4:	200193c4 	.word	0x200193c4
 801adf8:	200193c8 	.word	0x200193c8
 801adfc:	08028c64 	.word	0x08028c64
 801ae00:	08028c94 	.word	0x08028c94
 801ae04:	08028cb4 	.word	0x08028cb4

0801ae08 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801ae08:	b580      	push	{r7, lr}
 801ae0a:	b082      	sub	sp, #8
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	781b      	ldrb	r3, [r3, #0]
 801ae14:	2b02      	cmp	r3, #2
 801ae16:	d026      	beq.n	801ae66 <tcpip_thread_handle_msg+0x5e>
 801ae18:	2b02      	cmp	r3, #2
 801ae1a:	dc2b      	bgt.n	801ae74 <tcpip_thread_handle_msg+0x6c>
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d002      	beq.n	801ae26 <tcpip_thread_handle_msg+0x1e>
 801ae20:	2b01      	cmp	r3, #1
 801ae22:	d015      	beq.n	801ae50 <tcpip_thread_handle_msg+0x48>
 801ae24:	e026      	b.n	801ae74 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	68db      	ldr	r3, [r3, #12]
 801ae2a:	687a      	ldr	r2, [r7, #4]
 801ae2c:	6850      	ldr	r0, [r2, #4]
 801ae2e:	687a      	ldr	r2, [r7, #4]
 801ae30:	6892      	ldr	r2, [r2, #8]
 801ae32:	4611      	mov	r1, r2
 801ae34:	4798      	blx	r3
 801ae36:	4603      	mov	r3, r0
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d004      	beq.n	801ae46 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	685b      	ldr	r3, [r3, #4]
 801ae40:	4618      	mov	r0, r3
 801ae42:	f001 fdb3 	bl	801c9ac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801ae46:	6879      	ldr	r1, [r7, #4]
 801ae48:	2009      	movs	r0, #9
 801ae4a:	f000 ff0d 	bl	801bc68 <memp_free>
      break;
 801ae4e:	e018      	b.n	801ae82 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	685b      	ldr	r3, [r3, #4]
 801ae54:	687a      	ldr	r2, [r7, #4]
 801ae56:	6892      	ldr	r2, [r2, #8]
 801ae58:	4610      	mov	r0, r2
 801ae5a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801ae5c:	6879      	ldr	r1, [r7, #4]
 801ae5e:	2008      	movs	r0, #8
 801ae60:	f000 ff02 	bl	801bc68 <memp_free>
      break;
 801ae64:	e00d      	b.n	801ae82 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	685b      	ldr	r3, [r3, #4]
 801ae6a:	687a      	ldr	r2, [r7, #4]
 801ae6c:	6892      	ldr	r2, [r2, #8]
 801ae6e:	4610      	mov	r0, r2
 801ae70:	4798      	blx	r3
      break;
 801ae72:	e006      	b.n	801ae82 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801ae74:	4b05      	ldr	r3, [pc, #20]	@ (801ae8c <tcpip_thread_handle_msg+0x84>)
 801ae76:	22cf      	movs	r2, #207	@ 0xcf
 801ae78:	4905      	ldr	r1, [pc, #20]	@ (801ae90 <tcpip_thread_handle_msg+0x88>)
 801ae7a:	4806      	ldr	r0, [pc, #24]	@ (801ae94 <tcpip_thread_handle_msg+0x8c>)
 801ae7c:	f00b fd0c 	bl	8026898 <iprintf>
      break;
 801ae80:	bf00      	nop
  }
}
 801ae82:	bf00      	nop
 801ae84:	3708      	adds	r7, #8
 801ae86:	46bd      	mov	sp, r7
 801ae88:	bd80      	pop	{r7, pc}
 801ae8a:	bf00      	nop
 801ae8c:	08028c64 	.word	0x08028c64
 801ae90:	08028c94 	.word	0x08028c94
 801ae94:	08028cb4 	.word	0x08028cb4

0801ae98 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801ae98:	b580      	push	{r7, lr}
 801ae9a:	b086      	sub	sp, #24
 801ae9c:	af00      	add	r7, sp, #0
 801ae9e:	60f8      	str	r0, [r7, #12]
 801aea0:	60b9      	str	r1, [r7, #8]
 801aea2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801aea4:	481a      	ldr	r0, [pc, #104]	@ (801af10 <tcpip_inpkt+0x78>)
 801aea6:	f00a fb4e 	bl	8025546 <sys_mbox_valid>
 801aeaa:	4603      	mov	r3, r0
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d105      	bne.n	801aebc <tcpip_inpkt+0x24>
 801aeb0:	4b18      	ldr	r3, [pc, #96]	@ (801af14 <tcpip_inpkt+0x7c>)
 801aeb2:	22fc      	movs	r2, #252	@ 0xfc
 801aeb4:	4918      	ldr	r1, [pc, #96]	@ (801af18 <tcpip_inpkt+0x80>)
 801aeb6:	4819      	ldr	r0, [pc, #100]	@ (801af1c <tcpip_inpkt+0x84>)
 801aeb8:	f00b fcee 	bl	8026898 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801aebc:	2009      	movs	r0, #9
 801aebe:	f000 fe5d 	bl	801bb7c <memp_malloc>
 801aec2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801aec4:	697b      	ldr	r3, [r7, #20]
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d102      	bne.n	801aed0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801aeca:	f04f 33ff 	mov.w	r3, #4294967295
 801aece:	e01a      	b.n	801af06 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801aed0:	697b      	ldr	r3, [r7, #20]
 801aed2:	2200      	movs	r2, #0
 801aed4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801aed6:	697b      	ldr	r3, [r7, #20]
 801aed8:	68fa      	ldr	r2, [r7, #12]
 801aeda:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801aedc:	697b      	ldr	r3, [r7, #20]
 801aede:	68ba      	ldr	r2, [r7, #8]
 801aee0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801aee2:	697b      	ldr	r3, [r7, #20]
 801aee4:	687a      	ldr	r2, [r7, #4]
 801aee6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801aee8:	6979      	ldr	r1, [r7, #20]
 801aeea:	4809      	ldr	r0, [pc, #36]	@ (801af10 <tcpip_inpkt+0x78>)
 801aeec:	f00a fad2 	bl	8025494 <sys_mbox_trypost>
 801aef0:	4603      	mov	r3, r0
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d006      	beq.n	801af04 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801aef6:	6979      	ldr	r1, [r7, #20]
 801aef8:	2009      	movs	r0, #9
 801aefa:	f000 feb5 	bl	801bc68 <memp_free>
    return ERR_MEM;
 801aefe:	f04f 33ff 	mov.w	r3, #4294967295
 801af02:	e000      	b.n	801af06 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801af04:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801af06:	4618      	mov	r0, r3
 801af08:	3718      	adds	r7, #24
 801af0a:	46bd      	mov	sp, r7
 801af0c:	bd80      	pop	{r7, pc}
 801af0e:	bf00      	nop
 801af10:	200193c8 	.word	0x200193c8
 801af14:	08028c64 	.word	0x08028c64
 801af18:	08028cdc 	.word	0x08028cdc
 801af1c:	08028cb4 	.word	0x08028cb4

0801af20 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801af20:	b580      	push	{r7, lr}
 801af22:	b082      	sub	sp, #8
 801af24:	af00      	add	r7, sp, #0
 801af26:	6078      	str	r0, [r7, #4]
 801af28:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801af2a:	683b      	ldr	r3, [r7, #0]
 801af2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801af30:	f003 0318 	and.w	r3, r3, #24
 801af34:	2b00      	cmp	r3, #0
 801af36:	d006      	beq.n	801af46 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801af38:	4a08      	ldr	r2, [pc, #32]	@ (801af5c <tcpip_input+0x3c>)
 801af3a:	6839      	ldr	r1, [r7, #0]
 801af3c:	6878      	ldr	r0, [r7, #4]
 801af3e:	f7ff ffab 	bl	801ae98 <tcpip_inpkt>
 801af42:	4603      	mov	r3, r0
 801af44:	e005      	b.n	801af52 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801af46:	4a06      	ldr	r2, [pc, #24]	@ (801af60 <tcpip_input+0x40>)
 801af48:	6839      	ldr	r1, [r7, #0]
 801af4a:	6878      	ldr	r0, [r7, #4]
 801af4c:	f7ff ffa4 	bl	801ae98 <tcpip_inpkt>
 801af50:	4603      	mov	r3, r0
}
 801af52:	4618      	mov	r0, r3
 801af54:	3708      	adds	r7, #8
 801af56:	46bd      	mov	sp, r7
 801af58:	bd80      	pop	{r7, pc}
 801af5a:	bf00      	nop
 801af5c:	080252a5 	.word	0x080252a5
 801af60:	080241ad 	.word	0x080241ad

0801af64 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801af64:	b580      	push	{r7, lr}
 801af66:	b084      	sub	sp, #16
 801af68:	af00      	add	r7, sp, #0
 801af6a:	6078      	str	r0, [r7, #4]
 801af6c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801af6e:	4819      	ldr	r0, [pc, #100]	@ (801afd4 <tcpip_try_callback+0x70>)
 801af70:	f00a fae9 	bl	8025546 <sys_mbox_valid>
 801af74:	4603      	mov	r3, r0
 801af76:	2b00      	cmp	r3, #0
 801af78:	d106      	bne.n	801af88 <tcpip_try_callback+0x24>
 801af7a:	4b17      	ldr	r3, [pc, #92]	@ (801afd8 <tcpip_try_callback+0x74>)
 801af7c:	f240 125d 	movw	r2, #349	@ 0x15d
 801af80:	4916      	ldr	r1, [pc, #88]	@ (801afdc <tcpip_try_callback+0x78>)
 801af82:	4817      	ldr	r0, [pc, #92]	@ (801afe0 <tcpip_try_callback+0x7c>)
 801af84:	f00b fc88 	bl	8026898 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801af88:	2008      	movs	r0, #8
 801af8a:	f000 fdf7 	bl	801bb7c <memp_malloc>
 801af8e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	2b00      	cmp	r3, #0
 801af94:	d102      	bne.n	801af9c <tcpip_try_callback+0x38>
    return ERR_MEM;
 801af96:	f04f 33ff 	mov.w	r3, #4294967295
 801af9a:	e017      	b.n	801afcc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	2201      	movs	r2, #1
 801afa0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	687a      	ldr	r2, [r7, #4]
 801afa6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	683a      	ldr	r2, [r7, #0]
 801afac:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801afae:	68f9      	ldr	r1, [r7, #12]
 801afb0:	4808      	ldr	r0, [pc, #32]	@ (801afd4 <tcpip_try_callback+0x70>)
 801afb2:	f00a fa6f 	bl	8025494 <sys_mbox_trypost>
 801afb6:	4603      	mov	r3, r0
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d006      	beq.n	801afca <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801afbc:	68f9      	ldr	r1, [r7, #12]
 801afbe:	2008      	movs	r0, #8
 801afc0:	f000 fe52 	bl	801bc68 <memp_free>
    return ERR_MEM;
 801afc4:	f04f 33ff 	mov.w	r3, #4294967295
 801afc8:	e000      	b.n	801afcc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801afca:	2300      	movs	r3, #0
}
 801afcc:	4618      	mov	r0, r3
 801afce:	3710      	adds	r7, #16
 801afd0:	46bd      	mov	sp, r7
 801afd2:	bd80      	pop	{r7, pc}
 801afd4:	200193c8 	.word	0x200193c8
 801afd8:	08028c64 	.word	0x08028c64
 801afdc:	08028cdc 	.word	0x08028cdc
 801afe0:	08028cb4 	.word	0x08028cb4

0801afe4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b084      	sub	sp, #16
 801afe8:	af02      	add	r7, sp, #8
 801afea:	6078      	str	r0, [r7, #4]
 801afec:	6039      	str	r1, [r7, #0]
  lwip_init();
 801afee:	f000 f92d 	bl	801b24c <lwip_init>

  tcpip_init_done = initfunc;
 801aff2:	4a17      	ldr	r2, [pc, #92]	@ (801b050 <tcpip_init+0x6c>)
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801aff8:	4a16      	ldr	r2, [pc, #88]	@ (801b054 <tcpip_init+0x70>)
 801affa:	683b      	ldr	r3, [r7, #0]
 801affc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801affe:	2106      	movs	r1, #6
 801b000:	4815      	ldr	r0, [pc, #84]	@ (801b058 <tcpip_init+0x74>)
 801b002:	f00a fa25 	bl	8025450 <sys_mbox_new>
 801b006:	4603      	mov	r3, r0
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d006      	beq.n	801b01a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801b00c:	4b13      	ldr	r3, [pc, #76]	@ (801b05c <tcpip_init+0x78>)
 801b00e:	f240 2261 	movw	r2, #609	@ 0x261
 801b012:	4913      	ldr	r1, [pc, #76]	@ (801b060 <tcpip_init+0x7c>)
 801b014:	4813      	ldr	r0, [pc, #76]	@ (801b064 <tcpip_init+0x80>)
 801b016:	f00b fc3f 	bl	8026898 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801b01a:	4813      	ldr	r0, [pc, #76]	@ (801b068 <tcpip_init+0x84>)
 801b01c:	f00a fab2 	bl	8025584 <sys_mutex_new>
 801b020:	4603      	mov	r3, r0
 801b022:	2b00      	cmp	r3, #0
 801b024:	d006      	beq.n	801b034 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801b026:	4b0d      	ldr	r3, [pc, #52]	@ (801b05c <tcpip_init+0x78>)
 801b028:	f240 2265 	movw	r2, #613	@ 0x265
 801b02c:	490f      	ldr	r1, [pc, #60]	@ (801b06c <tcpip_init+0x88>)
 801b02e:	480d      	ldr	r0, [pc, #52]	@ (801b064 <tcpip_init+0x80>)
 801b030:	f00b fc32 	bl	8026898 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801b034:	2300      	movs	r3, #0
 801b036:	9300      	str	r3, [sp, #0]
 801b038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b03c:	2200      	movs	r2, #0
 801b03e:	490c      	ldr	r1, [pc, #48]	@ (801b070 <tcpip_init+0x8c>)
 801b040:	480c      	ldr	r0, [pc, #48]	@ (801b074 <tcpip_init+0x90>)
 801b042:	f00a fad7 	bl	80255f4 <sys_thread_new>
}
 801b046:	bf00      	nop
 801b048:	3708      	adds	r7, #8
 801b04a:	46bd      	mov	sp, r7
 801b04c:	bd80      	pop	{r7, pc}
 801b04e:	bf00      	nop
 801b050:	200193c0 	.word	0x200193c0
 801b054:	200193c4 	.word	0x200193c4
 801b058:	200193c8 	.word	0x200193c8
 801b05c:	08028c64 	.word	0x08028c64
 801b060:	08028cec 	.word	0x08028cec
 801b064:	08028cb4 	.word	0x08028cb4
 801b068:	200193cc 	.word	0x200193cc
 801b06c:	08028d10 	.word	0x08028d10
 801b070:	0801ada1 	.word	0x0801ada1
 801b074:	08028d34 	.word	0x08028d34

0801b078 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801b078:	b480      	push	{r7}
 801b07a:	b083      	sub	sp, #12
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	4603      	mov	r3, r0
 801b080:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801b082:	88fb      	ldrh	r3, [r7, #6]
 801b084:	021b      	lsls	r3, r3, #8
 801b086:	b21a      	sxth	r2, r3
 801b088:	88fb      	ldrh	r3, [r7, #6]
 801b08a:	0a1b      	lsrs	r3, r3, #8
 801b08c:	b29b      	uxth	r3, r3
 801b08e:	b21b      	sxth	r3, r3
 801b090:	4313      	orrs	r3, r2
 801b092:	b21b      	sxth	r3, r3
 801b094:	b29b      	uxth	r3, r3
}
 801b096:	4618      	mov	r0, r3
 801b098:	370c      	adds	r7, #12
 801b09a:	46bd      	mov	sp, r7
 801b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a0:	4770      	bx	lr

0801b0a2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801b0a2:	b480      	push	{r7}
 801b0a4:	b083      	sub	sp, #12
 801b0a6:	af00      	add	r7, sp, #0
 801b0a8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	061a      	lsls	r2, r3, #24
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	021b      	lsls	r3, r3, #8
 801b0b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801b0b6:	431a      	orrs	r2, r3
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	0a1b      	lsrs	r3, r3, #8
 801b0bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b0c0:	431a      	orrs	r2, r3
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	0e1b      	lsrs	r3, r3, #24
 801b0c6:	4313      	orrs	r3, r2
}
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	370c      	adds	r7, #12
 801b0cc:	46bd      	mov	sp, r7
 801b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0d2:	4770      	bx	lr

0801b0d4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801b0d4:	b480      	push	{r7}
 801b0d6:	b089      	sub	sp, #36	@ 0x24
 801b0d8:	af00      	add	r7, sp, #0
 801b0da:	6078      	str	r0, [r7, #4]
 801b0dc:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 801b0ea:	69fb      	ldr	r3, [r7, #28]
 801b0ec:	f003 0301 	and.w	r3, r3, #1
 801b0f0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801b0f2:	693b      	ldr	r3, [r7, #16]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d00d      	beq.n	801b114 <lwip_standard_chksum+0x40>
 801b0f8:	683b      	ldr	r3, [r7, #0]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	dd0a      	ble.n	801b114 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801b0fe:	69fa      	ldr	r2, [r7, #28]
 801b100:	1c53      	adds	r3, r2, #1
 801b102:	61fb      	str	r3, [r7, #28]
 801b104:	f107 030e 	add.w	r3, r7, #14
 801b108:	3301      	adds	r3, #1
 801b10a:	7812      	ldrb	r2, [r2, #0]
 801b10c:	701a      	strb	r2, [r3, #0]
    len--;
 801b10e:	683b      	ldr	r3, [r7, #0]
 801b110:	3b01      	subs	r3, #1
 801b112:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801b114:	69fb      	ldr	r3, [r7, #28]
 801b116:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 801b118:	e00a      	b.n	801b130 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 801b11a:	69bb      	ldr	r3, [r7, #24]
 801b11c:	1c9a      	adds	r2, r3, #2
 801b11e:	61ba      	str	r2, [r7, #24]
 801b120:	881b      	ldrh	r3, [r3, #0]
 801b122:	461a      	mov	r2, r3
 801b124:	697b      	ldr	r3, [r7, #20]
 801b126:	4413      	add	r3, r2
 801b128:	617b      	str	r3, [r7, #20]
    len -= 2;
 801b12a:	683b      	ldr	r3, [r7, #0]
 801b12c:	3b02      	subs	r3, #2
 801b12e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801b130:	683b      	ldr	r3, [r7, #0]
 801b132:	2b01      	cmp	r3, #1
 801b134:	dcf1      	bgt.n	801b11a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801b136:	683b      	ldr	r3, [r7, #0]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	dd04      	ble.n	801b146 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 801b13c:	f107 030e 	add.w	r3, r7, #14
 801b140:	69ba      	ldr	r2, [r7, #24]
 801b142:	7812      	ldrb	r2, [r2, #0]
 801b144:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801b146:	89fb      	ldrh	r3, [r7, #14]
 801b148:	461a      	mov	r2, r3
 801b14a:	697b      	ldr	r3, [r7, #20]
 801b14c:	4413      	add	r3, r2
 801b14e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801b150:	697b      	ldr	r3, [r7, #20]
 801b152:	0c1a      	lsrs	r2, r3, #16
 801b154:	697b      	ldr	r3, [r7, #20]
 801b156:	b29b      	uxth	r3, r3
 801b158:	4413      	add	r3, r2
 801b15a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 801b15c:	697b      	ldr	r3, [r7, #20]
 801b15e:	0c1a      	lsrs	r2, r3, #16
 801b160:	697b      	ldr	r3, [r7, #20]
 801b162:	b29b      	uxth	r3, r3
 801b164:	4413      	add	r3, r2
 801b166:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801b168:	693b      	ldr	r3, [r7, #16]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d007      	beq.n	801b17e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801b16e:	697b      	ldr	r3, [r7, #20]
 801b170:	021b      	lsls	r3, r3, #8
 801b172:	b29a      	uxth	r2, r3
 801b174:	697b      	ldr	r3, [r7, #20]
 801b176:	0a1b      	lsrs	r3, r3, #8
 801b178:	b2db      	uxtb	r3, r3
 801b17a:	4313      	orrs	r3, r2
 801b17c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801b17e:	697b      	ldr	r3, [r7, #20]
 801b180:	b29b      	uxth	r3, r3
}
 801b182:	4618      	mov	r0, r3
 801b184:	3724      	adds	r7, #36	@ 0x24
 801b186:	46bd      	mov	sp, r7
 801b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b18c:	4770      	bx	lr

0801b18e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801b18e:	b580      	push	{r7, lr}
 801b190:	b082      	sub	sp, #8
 801b192:	af00      	add	r7, sp, #0
 801b194:	6078      	str	r0, [r7, #4]
 801b196:	460b      	mov	r3, r1
 801b198:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801b19a:	887b      	ldrh	r3, [r7, #2]
 801b19c:	4619      	mov	r1, r3
 801b19e:	6878      	ldr	r0, [r7, #4]
 801b1a0:	f7ff ff98 	bl	801b0d4 <lwip_standard_chksum>
 801b1a4:	4603      	mov	r3, r0
 801b1a6:	43db      	mvns	r3, r3
 801b1a8:	b29b      	uxth	r3, r3
}
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	3708      	adds	r7, #8
 801b1ae:	46bd      	mov	sp, r7
 801b1b0:	bd80      	pop	{r7, pc}

0801b1b2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801b1b2:	b580      	push	{r7, lr}
 801b1b4:	b086      	sub	sp, #24
 801b1b6:	af00      	add	r7, sp, #0
 801b1b8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 801b1ba:	2300      	movs	r3, #0
 801b1bc:	60fb      	str	r3, [r7, #12]

  acc = 0;
 801b1be:	2300      	movs	r3, #0
 801b1c0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	613b      	str	r3, [r7, #16]
 801b1c6:	e02b      	b.n	801b220 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 801b1c8:	693b      	ldr	r3, [r7, #16]
 801b1ca:	685a      	ldr	r2, [r3, #4]
 801b1cc:	693b      	ldr	r3, [r7, #16]
 801b1ce:	895b      	ldrh	r3, [r3, #10]
 801b1d0:	4619      	mov	r1, r3
 801b1d2:	4610      	mov	r0, r2
 801b1d4:	f7ff ff7e 	bl	801b0d4 <lwip_standard_chksum>
 801b1d8:	4603      	mov	r3, r0
 801b1da:	461a      	mov	r2, r3
 801b1dc:	697b      	ldr	r3, [r7, #20]
 801b1de:	4413      	add	r3, r2
 801b1e0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801b1e2:	697b      	ldr	r3, [r7, #20]
 801b1e4:	0c1a      	lsrs	r2, r3, #16
 801b1e6:	697b      	ldr	r3, [r7, #20]
 801b1e8:	b29b      	uxth	r3, r3
 801b1ea:	4413      	add	r3, r2
 801b1ec:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 801b1ee:	693b      	ldr	r3, [r7, #16]
 801b1f0:	895b      	ldrh	r3, [r3, #10]
 801b1f2:	f003 0301 	and.w	r3, r3, #1
 801b1f6:	b29b      	uxth	r3, r3
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d00e      	beq.n	801b21a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 801b1fc:	68fb      	ldr	r3, [r7, #12]
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	bf0c      	ite	eq
 801b202:	2301      	moveq	r3, #1
 801b204:	2300      	movne	r3, #0
 801b206:	b2db      	uxtb	r3, r3
 801b208:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 801b20a:	697b      	ldr	r3, [r7, #20]
 801b20c:	021b      	lsls	r3, r3, #8
 801b20e:	b29a      	uxth	r2, r3
 801b210:	697b      	ldr	r3, [r7, #20]
 801b212:	0a1b      	lsrs	r3, r3, #8
 801b214:	b2db      	uxtb	r3, r3
 801b216:	4313      	orrs	r3, r2
 801b218:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801b21a:	693b      	ldr	r3, [r7, #16]
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	613b      	str	r3, [r7, #16]
 801b220:	693b      	ldr	r3, [r7, #16]
 801b222:	2b00      	cmp	r3, #0
 801b224:	d1d0      	bne.n	801b1c8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d007      	beq.n	801b23c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 801b22c:	697b      	ldr	r3, [r7, #20]
 801b22e:	021b      	lsls	r3, r3, #8
 801b230:	b29a      	uxth	r2, r3
 801b232:	697b      	ldr	r3, [r7, #20]
 801b234:	0a1b      	lsrs	r3, r3, #8
 801b236:	b2db      	uxtb	r3, r3
 801b238:	4313      	orrs	r3, r2
 801b23a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 801b23c:	697b      	ldr	r3, [r7, #20]
 801b23e:	b29b      	uxth	r3, r3
 801b240:	43db      	mvns	r3, r3
 801b242:	b29b      	uxth	r3, r3
}
 801b244:	4618      	mov	r0, r3
 801b246:	3718      	adds	r7, #24
 801b248:	46bd      	mov	sp, r7
 801b24a:	bd80      	pop	{r7, pc}

0801b24c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801b24c:	b580      	push	{r7, lr}
 801b24e:	b082      	sub	sp, #8
 801b250:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801b252:	2300      	movs	r3, #0
 801b254:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801b256:	f00a f987 	bl	8025568 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801b25a:	f000 f8d3 	bl	801b404 <mem_init>
  memp_init();
 801b25e:	f000 fc1f 	bl	801baa0 <memp_init>
  pbuf_init();
  netif_init();
 801b262:	f000 fd2b 	bl	801bcbc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801b266:	f007 f91d 	bl	80224a4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801b26a:	f001 fe49 	bl	801cf00 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801b26e:	f007 f85f 	bl	8022330 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801b272:	bf00      	nop
 801b274:	3708      	adds	r7, #8
 801b276:	46bd      	mov	sp, r7
 801b278:	bd80      	pop	{r7, pc}
	...

0801b27c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801b27c:	b480      	push	{r7}
 801b27e:	b083      	sub	sp, #12
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 801b284:	4b04      	ldr	r3, [pc, #16]	@ (801b298 <ptr_to_mem+0x1c>)
 801b286:	681a      	ldr	r2, [r3, #0]
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	4413      	add	r3, r2
}
 801b28c:	4618      	mov	r0, r3
 801b28e:	370c      	adds	r7, #12
 801b290:	46bd      	mov	sp, r7
 801b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b296:	4770      	bx	lr
 801b298:	200393ec 	.word	0x200393ec

0801b29c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801b29c:	b480      	push	{r7}
 801b29e:	b083      	sub	sp, #12
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801b2a4:	4b04      	ldr	r3, [pc, #16]	@ (801b2b8 <mem_to_ptr+0x1c>)
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	687a      	ldr	r2, [r7, #4]
 801b2aa:	1ad3      	subs	r3, r2, r3
}
 801b2ac:	4618      	mov	r0, r3
 801b2ae:	370c      	adds	r7, #12
 801b2b0:	46bd      	mov	sp, r7
 801b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2b6:	4770      	bx	lr
 801b2b8:	200393ec 	.word	0x200393ec

0801b2bc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801b2bc:	b590      	push	{r4, r7, lr}
 801b2be:	b085      	sub	sp, #20
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b2c4:	4b45      	ldr	r3, [pc, #276]	@ (801b3dc <plug_holes+0x120>)
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	687a      	ldr	r2, [r7, #4]
 801b2ca:	429a      	cmp	r2, r3
 801b2cc:	d206      	bcs.n	801b2dc <plug_holes+0x20>
 801b2ce:	4b44      	ldr	r3, [pc, #272]	@ (801b3e0 <plug_holes+0x124>)
 801b2d0:	f240 12df 	movw	r2, #479	@ 0x1df
 801b2d4:	4943      	ldr	r1, [pc, #268]	@ (801b3e4 <plug_holes+0x128>)
 801b2d6:	4844      	ldr	r0, [pc, #272]	@ (801b3e8 <plug_holes+0x12c>)
 801b2d8:	f00b fade 	bl	8026898 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b2dc:	4b43      	ldr	r3, [pc, #268]	@ (801b3ec <plug_holes+0x130>)
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	687a      	ldr	r2, [r7, #4]
 801b2e2:	429a      	cmp	r2, r3
 801b2e4:	d306      	bcc.n	801b2f4 <plug_holes+0x38>
 801b2e6:	4b3e      	ldr	r3, [pc, #248]	@ (801b3e0 <plug_holes+0x124>)
 801b2e8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801b2ec:	4940      	ldr	r1, [pc, #256]	@ (801b3f0 <plug_holes+0x134>)
 801b2ee:	483e      	ldr	r0, [pc, #248]	@ (801b3e8 <plug_holes+0x12c>)
 801b2f0:	f00b fad2 	bl	8026898 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	7a1b      	ldrb	r3, [r3, #8]
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d006      	beq.n	801b30a <plug_holes+0x4e>
 801b2fc:	4b38      	ldr	r3, [pc, #224]	@ (801b3e0 <plug_holes+0x124>)
 801b2fe:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801b302:	493c      	ldr	r1, [pc, #240]	@ (801b3f4 <plug_holes+0x138>)
 801b304:	4838      	ldr	r0, [pc, #224]	@ (801b3e8 <plug_holes+0x12c>)
 801b306:	f00b fac7 	bl	8026898 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	4a3a      	ldr	r2, [pc, #232]	@ (801b3f8 <plug_holes+0x13c>)
 801b310:	4293      	cmp	r3, r2
 801b312:	d906      	bls.n	801b322 <plug_holes+0x66>
 801b314:	4b32      	ldr	r3, [pc, #200]	@ (801b3e0 <plug_holes+0x124>)
 801b316:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 801b31a:	4938      	ldr	r1, [pc, #224]	@ (801b3fc <plug_holes+0x140>)
 801b31c:	4832      	ldr	r0, [pc, #200]	@ (801b3e8 <plug_holes+0x12c>)
 801b31e:	f00b fabb 	bl	8026898 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	4618      	mov	r0, r3
 801b328:	f7ff ffa8 	bl	801b27c <ptr_to_mem>
 801b32c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801b32e:	687a      	ldr	r2, [r7, #4]
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	429a      	cmp	r2, r3
 801b334:	d024      	beq.n	801b380 <plug_holes+0xc4>
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	7a1b      	ldrb	r3, [r3, #8]
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d120      	bne.n	801b380 <plug_holes+0xc4>
 801b33e:	4b2b      	ldr	r3, [pc, #172]	@ (801b3ec <plug_holes+0x130>)
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	68fa      	ldr	r2, [r7, #12]
 801b344:	429a      	cmp	r2, r3
 801b346:	d01b      	beq.n	801b380 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801b348:	4b2d      	ldr	r3, [pc, #180]	@ (801b400 <plug_holes+0x144>)
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	68fa      	ldr	r2, [r7, #12]
 801b34e:	429a      	cmp	r2, r3
 801b350:	d102      	bne.n	801b358 <plug_holes+0x9c>
      lfree = mem;
 801b352:	4a2b      	ldr	r2, [pc, #172]	@ (801b400 <plug_holes+0x144>)
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	681a      	ldr	r2, [r3, #0]
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801b360:	68fb      	ldr	r3, [r7, #12]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	4a24      	ldr	r2, [pc, #144]	@ (801b3f8 <plug_holes+0x13c>)
 801b366:	4293      	cmp	r3, r2
 801b368:	d00a      	beq.n	801b380 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	4618      	mov	r0, r3
 801b370:	f7ff ff84 	bl	801b27c <ptr_to_mem>
 801b374:	4604      	mov	r4, r0
 801b376:	6878      	ldr	r0, [r7, #4]
 801b378:	f7ff ff90 	bl	801b29c <mem_to_ptr>
 801b37c:	4603      	mov	r3, r0
 801b37e:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	685b      	ldr	r3, [r3, #4]
 801b384:	4618      	mov	r0, r3
 801b386:	f7ff ff79 	bl	801b27c <ptr_to_mem>
 801b38a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801b38c:	68ba      	ldr	r2, [r7, #8]
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	429a      	cmp	r2, r3
 801b392:	d01f      	beq.n	801b3d4 <plug_holes+0x118>
 801b394:	68bb      	ldr	r3, [r7, #8]
 801b396:	7a1b      	ldrb	r3, [r3, #8]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d11b      	bne.n	801b3d4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801b39c:	4b18      	ldr	r3, [pc, #96]	@ (801b400 <plug_holes+0x144>)
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	687a      	ldr	r2, [r7, #4]
 801b3a2:	429a      	cmp	r2, r3
 801b3a4:	d102      	bne.n	801b3ac <plug_holes+0xf0>
      lfree = pmem;
 801b3a6:	4a16      	ldr	r2, [pc, #88]	@ (801b400 <plug_holes+0x144>)
 801b3a8:	68bb      	ldr	r3, [r7, #8]
 801b3aa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	681a      	ldr	r2, [r3, #0]
 801b3b0:	68bb      	ldr	r3, [r7, #8]
 801b3b2:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	4a0f      	ldr	r2, [pc, #60]	@ (801b3f8 <plug_holes+0x13c>)
 801b3ba:	4293      	cmp	r3, r2
 801b3bc:	d00a      	beq.n	801b3d4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	681b      	ldr	r3, [r3, #0]
 801b3c2:	4618      	mov	r0, r3
 801b3c4:	f7ff ff5a 	bl	801b27c <ptr_to_mem>
 801b3c8:	4604      	mov	r4, r0
 801b3ca:	68b8      	ldr	r0, [r7, #8]
 801b3cc:	f7ff ff66 	bl	801b29c <mem_to_ptr>
 801b3d0:	4603      	mov	r3, r0
 801b3d2:	6063      	str	r3, [r4, #4]
    }
  }
}
 801b3d4:	bf00      	nop
 801b3d6:	3714      	adds	r7, #20
 801b3d8:	46bd      	mov	sp, r7
 801b3da:	bd90      	pop	{r4, r7, pc}
 801b3dc:	200393ec 	.word	0x200393ec
 801b3e0:	08028d44 	.word	0x08028d44
 801b3e4:	08028d74 	.word	0x08028d74
 801b3e8:	08028d8c 	.word	0x08028d8c
 801b3ec:	200393f0 	.word	0x200393f0
 801b3f0:	08028db4 	.word	0x08028db4
 801b3f4:	08028dd0 	.word	0x08028dd0
 801b3f8:	0001ffe8 	.word	0x0001ffe8
 801b3fc:	08028dec 	.word	0x08028dec
 801b400:	200393f8 	.word	0x200393f8

0801b404 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801b404:	b580      	push	{r7, lr}
 801b406:	b082      	sub	sp, #8
 801b408:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b40a:	4b1d      	ldr	r3, [pc, #116]	@ (801b480 <mem_init+0x7c>)
 801b40c:	3303      	adds	r3, #3
 801b40e:	f023 0303 	bic.w	r3, r3, #3
 801b412:	461a      	mov	r2, r3
 801b414:	4b1b      	ldr	r3, [pc, #108]	@ (801b484 <mem_init+0x80>)
 801b416:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801b418:	4b1a      	ldr	r3, [pc, #104]	@ (801b484 <mem_init+0x80>)
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	4a19      	ldr	r2, [pc, #100]	@ (801b488 <mem_init+0x84>)
 801b422:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	2200      	movs	r2, #0
 801b428:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	2200      	movs	r2, #0
 801b42e:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801b430:	4815      	ldr	r0, [pc, #84]	@ (801b488 <mem_init+0x84>)
 801b432:	f7ff ff23 	bl	801b27c <ptr_to_mem>
 801b436:	4603      	mov	r3, r0
 801b438:	4a14      	ldr	r2, [pc, #80]	@ (801b48c <mem_init+0x88>)
 801b43a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801b43c:	4b13      	ldr	r3, [pc, #76]	@ (801b48c <mem_init+0x88>)
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	2201      	movs	r2, #1
 801b442:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 801b444:	4b11      	ldr	r3, [pc, #68]	@ (801b48c <mem_init+0x88>)
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	4a0f      	ldr	r2, [pc, #60]	@ (801b488 <mem_init+0x84>)
 801b44a:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801b44c:	4b0f      	ldr	r3, [pc, #60]	@ (801b48c <mem_init+0x88>)
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	4a0d      	ldr	r2, [pc, #52]	@ (801b488 <mem_init+0x84>)
 801b452:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801b454:	4b0b      	ldr	r3, [pc, #44]	@ (801b484 <mem_init+0x80>)
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	4a0d      	ldr	r2, [pc, #52]	@ (801b490 <mem_init+0x8c>)
 801b45a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801b45c:	480d      	ldr	r0, [pc, #52]	@ (801b494 <mem_init+0x90>)
 801b45e:	f00a f891 	bl	8025584 <sys_mutex_new>
 801b462:	4603      	mov	r3, r0
 801b464:	2b00      	cmp	r3, #0
 801b466:	d006      	beq.n	801b476 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801b468:	4b0b      	ldr	r3, [pc, #44]	@ (801b498 <mem_init+0x94>)
 801b46a:	f240 221f 	movw	r2, #543	@ 0x21f
 801b46e:	490b      	ldr	r1, [pc, #44]	@ (801b49c <mem_init+0x98>)
 801b470:	480b      	ldr	r0, [pc, #44]	@ (801b4a0 <mem_init+0x9c>)
 801b472:	f00b fa11 	bl	8026898 <iprintf>
  }
}
 801b476:	bf00      	nop
 801b478:	3708      	adds	r7, #8
 801b47a:	46bd      	mov	sp, r7
 801b47c:	bd80      	pop	{r7, pc}
 801b47e:	bf00      	nop
 801b480:	200193e8 	.word	0x200193e8
 801b484:	200393ec 	.word	0x200393ec
 801b488:	0001ffe8 	.word	0x0001ffe8
 801b48c:	200393f0 	.word	0x200393f0
 801b490:	200393f8 	.word	0x200393f8
 801b494:	200393f4 	.word	0x200393f4
 801b498:	08028d44 	.word	0x08028d44
 801b49c:	08028e18 	.word	0x08028e18
 801b4a0:	08028d8c 	.word	0x08028d8c

0801b4a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801b4a4:	b580      	push	{r7, lr}
 801b4a6:	b086      	sub	sp, #24
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801b4ac:	6878      	ldr	r0, [r7, #4]
 801b4ae:	f7ff fef5 	bl	801b29c <mem_to_ptr>
 801b4b2:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	4618      	mov	r0, r3
 801b4ba:	f7ff fedf 	bl	801b27c <ptr_to_mem>
 801b4be:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	685b      	ldr	r3, [r3, #4]
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	f7ff fed9 	bl	801b27c <ptr_to_mem>
 801b4ca:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	4a11      	ldr	r2, [pc, #68]	@ (801b518 <mem_link_valid+0x74>)
 801b4d2:	4293      	cmp	r3, r2
 801b4d4:	d818      	bhi.n	801b508 <mem_link_valid+0x64>
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	685b      	ldr	r3, [r3, #4]
 801b4da:	4a0f      	ldr	r2, [pc, #60]	@ (801b518 <mem_link_valid+0x74>)
 801b4dc:	4293      	cmp	r3, r2
 801b4de:	d813      	bhi.n	801b508 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b4e4:	697a      	ldr	r2, [r7, #20]
 801b4e6:	429a      	cmp	r2, r3
 801b4e8:	d004      	beq.n	801b4f4 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	697a      	ldr	r2, [r7, #20]
 801b4f0:	429a      	cmp	r2, r3
 801b4f2:	d109      	bne.n	801b508 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801b4f4:	4b09      	ldr	r3, [pc, #36]	@ (801b51c <mem_link_valid+0x78>)
 801b4f6:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801b4f8:	693a      	ldr	r2, [r7, #16]
 801b4fa:	429a      	cmp	r2, r3
 801b4fc:	d006      	beq.n	801b50c <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801b4fe:	693b      	ldr	r3, [r7, #16]
 801b500:	685b      	ldr	r3, [r3, #4]
 801b502:	697a      	ldr	r2, [r7, #20]
 801b504:	429a      	cmp	r2, r3
 801b506:	d001      	beq.n	801b50c <mem_link_valid+0x68>
    return 0;
 801b508:	2300      	movs	r3, #0
 801b50a:	e000      	b.n	801b50e <mem_link_valid+0x6a>
  }
  return 1;
 801b50c:	2301      	movs	r3, #1
}
 801b50e:	4618      	mov	r0, r3
 801b510:	3718      	adds	r7, #24
 801b512:	46bd      	mov	sp, r7
 801b514:	bd80      	pop	{r7, pc}
 801b516:	bf00      	nop
 801b518:	0001ffe8 	.word	0x0001ffe8
 801b51c:	200393f0 	.word	0x200393f0

0801b520 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801b520:	b580      	push	{r7, lr}
 801b522:	b088      	sub	sp, #32
 801b524:	af00      	add	r7, sp, #0
 801b526:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d070      	beq.n	801b610 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	f003 0303 	and.w	r3, r3, #3
 801b534:	2b00      	cmp	r3, #0
 801b536:	d00d      	beq.n	801b554 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801b538:	4b37      	ldr	r3, [pc, #220]	@ (801b618 <mem_free+0xf8>)
 801b53a:	f240 2273 	movw	r2, #627	@ 0x273
 801b53e:	4937      	ldr	r1, [pc, #220]	@ (801b61c <mem_free+0xfc>)
 801b540:	4837      	ldr	r0, [pc, #220]	@ (801b620 <mem_free+0x100>)
 801b542:	f00b f9a9 	bl	8026898 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801b546:	f00a f87b 	bl	8025640 <sys_arch_protect>
 801b54a:	60f8      	str	r0, [r7, #12]
 801b54c:	68f8      	ldr	r0, [r7, #12]
 801b54e:	f00a f885 	bl	802565c <sys_arch_unprotect>
    return;
 801b552:	e05e      	b.n	801b612 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	3b0c      	subs	r3, #12
 801b558:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801b55a:	4b32      	ldr	r3, [pc, #200]	@ (801b624 <mem_free+0x104>)
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	69fa      	ldr	r2, [r7, #28]
 801b560:	429a      	cmp	r2, r3
 801b562:	d306      	bcc.n	801b572 <mem_free+0x52>
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	f103 020c 	add.w	r2, r3, #12
 801b56a:	4b2f      	ldr	r3, [pc, #188]	@ (801b628 <mem_free+0x108>)
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	429a      	cmp	r2, r3
 801b570:	d90d      	bls.n	801b58e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801b572:	4b29      	ldr	r3, [pc, #164]	@ (801b618 <mem_free+0xf8>)
 801b574:	f240 227f 	movw	r2, #639	@ 0x27f
 801b578:	492c      	ldr	r1, [pc, #176]	@ (801b62c <mem_free+0x10c>)
 801b57a:	4829      	ldr	r0, [pc, #164]	@ (801b620 <mem_free+0x100>)
 801b57c:	f00b f98c 	bl	8026898 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801b580:	f00a f85e 	bl	8025640 <sys_arch_protect>
 801b584:	6138      	str	r0, [r7, #16]
 801b586:	6938      	ldr	r0, [r7, #16]
 801b588:	f00a f868 	bl	802565c <sys_arch_unprotect>
    return;
 801b58c:	e041      	b.n	801b612 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801b58e:	4828      	ldr	r0, [pc, #160]	@ (801b630 <mem_free+0x110>)
 801b590:	f00a f814 	bl	80255bc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801b594:	69fb      	ldr	r3, [r7, #28]
 801b596:	7a1b      	ldrb	r3, [r3, #8]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d110      	bne.n	801b5be <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801b59c:	4b1e      	ldr	r3, [pc, #120]	@ (801b618 <mem_free+0xf8>)
 801b59e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801b5a2:	4924      	ldr	r1, [pc, #144]	@ (801b634 <mem_free+0x114>)
 801b5a4:	481e      	ldr	r0, [pc, #120]	@ (801b620 <mem_free+0x100>)
 801b5a6:	f00b f977 	bl	8026898 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801b5aa:	4821      	ldr	r0, [pc, #132]	@ (801b630 <mem_free+0x110>)
 801b5ac:	f00a f815 	bl	80255da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801b5b0:	f00a f846 	bl	8025640 <sys_arch_protect>
 801b5b4:	6178      	str	r0, [r7, #20]
 801b5b6:	6978      	ldr	r0, [r7, #20]
 801b5b8:	f00a f850 	bl	802565c <sys_arch_unprotect>
    return;
 801b5bc:	e029      	b.n	801b612 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801b5be:	69f8      	ldr	r0, [r7, #28]
 801b5c0:	f7ff ff70 	bl	801b4a4 <mem_link_valid>
 801b5c4:	4603      	mov	r3, r0
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d110      	bne.n	801b5ec <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801b5ca:	4b13      	ldr	r3, [pc, #76]	@ (801b618 <mem_free+0xf8>)
 801b5cc:	f240 2295 	movw	r2, #661	@ 0x295
 801b5d0:	4919      	ldr	r1, [pc, #100]	@ (801b638 <mem_free+0x118>)
 801b5d2:	4813      	ldr	r0, [pc, #76]	@ (801b620 <mem_free+0x100>)
 801b5d4:	f00b f960 	bl	8026898 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801b5d8:	4815      	ldr	r0, [pc, #84]	@ (801b630 <mem_free+0x110>)
 801b5da:	f009 fffe 	bl	80255da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801b5de:	f00a f82f 	bl	8025640 <sys_arch_protect>
 801b5e2:	61b8      	str	r0, [r7, #24]
 801b5e4:	69b8      	ldr	r0, [r7, #24]
 801b5e6:	f00a f839 	bl	802565c <sys_arch_unprotect>
    return;
 801b5ea:	e012      	b.n	801b612 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801b5ec:	69fb      	ldr	r3, [r7, #28]
 801b5ee:	2200      	movs	r2, #0
 801b5f0:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 801b5f2:	4b12      	ldr	r3, [pc, #72]	@ (801b63c <mem_free+0x11c>)
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	69fa      	ldr	r2, [r7, #28]
 801b5f8:	429a      	cmp	r2, r3
 801b5fa:	d202      	bcs.n	801b602 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801b5fc:	4a0f      	ldr	r2, [pc, #60]	@ (801b63c <mem_free+0x11c>)
 801b5fe:	69fb      	ldr	r3, [r7, #28]
 801b600:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801b602:	69f8      	ldr	r0, [r7, #28]
 801b604:	f7ff fe5a 	bl	801b2bc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801b608:	4809      	ldr	r0, [pc, #36]	@ (801b630 <mem_free+0x110>)
 801b60a:	f009 ffe6 	bl	80255da <sys_mutex_unlock>
 801b60e:	e000      	b.n	801b612 <mem_free+0xf2>
    return;
 801b610:	bf00      	nop
}
 801b612:	3720      	adds	r7, #32
 801b614:	46bd      	mov	sp, r7
 801b616:	bd80      	pop	{r7, pc}
 801b618:	08028d44 	.word	0x08028d44
 801b61c:	08028e34 	.word	0x08028e34
 801b620:	08028d8c 	.word	0x08028d8c
 801b624:	200393ec 	.word	0x200393ec
 801b628:	200393f0 	.word	0x200393f0
 801b62c:	08028e58 	.word	0x08028e58
 801b630:	200393f4 	.word	0x200393f4
 801b634:	08028e74 	.word	0x08028e74
 801b638:	08028e9c 	.word	0x08028e9c
 801b63c:	200393f8 	.word	0x200393f8

0801b640 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801b640:	b580      	push	{r7, lr}
 801b642:	b08a      	sub	sp, #40	@ 0x28
 801b644:	af00      	add	r7, sp, #0
 801b646:	6078      	str	r0, [r7, #4]
 801b648:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801b64a:	683b      	ldr	r3, [r7, #0]
 801b64c:	3303      	adds	r3, #3
 801b64e:	f023 0303 	bic.w	r3, r3, #3
 801b652:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 801b654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b656:	2b0b      	cmp	r3, #11
 801b658:	d801      	bhi.n	801b65e <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801b65a:	230c      	movs	r3, #12
 801b65c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b660:	4a6e      	ldr	r2, [pc, #440]	@ (801b81c <mem_trim+0x1dc>)
 801b662:	4293      	cmp	r3, r2
 801b664:	d803      	bhi.n	801b66e <mem_trim+0x2e>
 801b666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b668:	683b      	ldr	r3, [r7, #0]
 801b66a:	429a      	cmp	r2, r3
 801b66c:	d201      	bcs.n	801b672 <mem_trim+0x32>
    return NULL;
 801b66e:	2300      	movs	r3, #0
 801b670:	e0d0      	b.n	801b814 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801b672:	4b6b      	ldr	r3, [pc, #428]	@ (801b820 <mem_trim+0x1e0>)
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	687a      	ldr	r2, [r7, #4]
 801b678:	429a      	cmp	r2, r3
 801b67a:	d304      	bcc.n	801b686 <mem_trim+0x46>
 801b67c:	4b69      	ldr	r3, [pc, #420]	@ (801b824 <mem_trim+0x1e4>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	687a      	ldr	r2, [r7, #4]
 801b682:	429a      	cmp	r2, r3
 801b684:	d306      	bcc.n	801b694 <mem_trim+0x54>
 801b686:	4b68      	ldr	r3, [pc, #416]	@ (801b828 <mem_trim+0x1e8>)
 801b688:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801b68c:	4967      	ldr	r1, [pc, #412]	@ (801b82c <mem_trim+0x1ec>)
 801b68e:	4868      	ldr	r0, [pc, #416]	@ (801b830 <mem_trim+0x1f0>)
 801b690:	f00b f902 	bl	8026898 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801b694:	4b62      	ldr	r3, [pc, #392]	@ (801b820 <mem_trim+0x1e0>)
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	687a      	ldr	r2, [r7, #4]
 801b69a:	429a      	cmp	r2, r3
 801b69c:	d304      	bcc.n	801b6a8 <mem_trim+0x68>
 801b69e:	4b61      	ldr	r3, [pc, #388]	@ (801b824 <mem_trim+0x1e4>)
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	687a      	ldr	r2, [r7, #4]
 801b6a4:	429a      	cmp	r2, r3
 801b6a6:	d307      	bcc.n	801b6b8 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801b6a8:	f009 ffca 	bl	8025640 <sys_arch_protect>
 801b6ac:	60b8      	str	r0, [r7, #8]
 801b6ae:	68b8      	ldr	r0, [r7, #8]
 801b6b0:	f009 ffd4 	bl	802565c <sys_arch_unprotect>
    return rmem;
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	e0ad      	b.n	801b814 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	3b0c      	subs	r3, #12
 801b6bc:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801b6be:	6a38      	ldr	r0, [r7, #32]
 801b6c0:	f7ff fdec 	bl	801b29c <mem_to_ptr>
 801b6c4:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b6c6:	6a3b      	ldr	r3, [r7, #32]
 801b6c8:	681a      	ldr	r2, [r3, #0]
 801b6ca:	69fb      	ldr	r3, [r7, #28]
 801b6cc:	1ad3      	subs	r3, r2, r3
 801b6ce:	3b0c      	subs	r3, #12
 801b6d0:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801b6d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b6d4:	69bb      	ldr	r3, [r7, #24]
 801b6d6:	429a      	cmp	r2, r3
 801b6d8:	d906      	bls.n	801b6e8 <mem_trim+0xa8>
 801b6da:	4b53      	ldr	r3, [pc, #332]	@ (801b828 <mem_trim+0x1e8>)
 801b6dc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 801b6e0:	4954      	ldr	r1, [pc, #336]	@ (801b834 <mem_trim+0x1f4>)
 801b6e2:	4853      	ldr	r0, [pc, #332]	@ (801b830 <mem_trim+0x1f0>)
 801b6e4:	f00b f8d8 	bl	8026898 <iprintf>
  if (newsize > size) {
 801b6e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b6ea:	69bb      	ldr	r3, [r7, #24]
 801b6ec:	429a      	cmp	r2, r3
 801b6ee:	d901      	bls.n	801b6f4 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 801b6f0:	2300      	movs	r3, #0
 801b6f2:	e08f      	b.n	801b814 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 801b6f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b6f6:	69bb      	ldr	r3, [r7, #24]
 801b6f8:	429a      	cmp	r2, r3
 801b6fa:	d101      	bne.n	801b700 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	e089      	b.n	801b814 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801b700:	484d      	ldr	r0, [pc, #308]	@ (801b838 <mem_trim+0x1f8>)
 801b702:	f009 ff5b 	bl	80255bc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801b706:	6a3b      	ldr	r3, [r7, #32]
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	4618      	mov	r0, r3
 801b70c:	f7ff fdb6 	bl	801b27c <ptr_to_mem>
 801b710:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 801b712:	697b      	ldr	r3, [r7, #20]
 801b714:	7a1b      	ldrb	r3, [r3, #8]
 801b716:	2b00      	cmp	r3, #0
 801b718:	d13c      	bne.n	801b794 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b71a:	6a3b      	ldr	r3, [r7, #32]
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	4a3f      	ldr	r2, [pc, #252]	@ (801b81c <mem_trim+0x1dc>)
 801b720:	4293      	cmp	r3, r2
 801b722:	d106      	bne.n	801b732 <mem_trim+0xf2>
 801b724:	4b40      	ldr	r3, [pc, #256]	@ (801b828 <mem_trim+0x1e8>)
 801b726:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801b72a:	4944      	ldr	r1, [pc, #272]	@ (801b83c <mem_trim+0x1fc>)
 801b72c:	4840      	ldr	r0, [pc, #256]	@ (801b830 <mem_trim+0x1f0>)
 801b72e:	f00b f8b3 	bl	8026898 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801b732:	697b      	ldr	r3, [r7, #20]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b738:	69fa      	ldr	r2, [r7, #28]
 801b73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b73c:	4413      	add	r3, r2
 801b73e:	330c      	adds	r3, #12
 801b740:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 801b742:	4b3f      	ldr	r3, [pc, #252]	@ (801b840 <mem_trim+0x200>)
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	697a      	ldr	r2, [r7, #20]
 801b748:	429a      	cmp	r2, r3
 801b74a:	d105      	bne.n	801b758 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 801b74c:	6938      	ldr	r0, [r7, #16]
 801b74e:	f7ff fd95 	bl	801b27c <ptr_to_mem>
 801b752:	4603      	mov	r3, r0
 801b754:	4a3a      	ldr	r2, [pc, #232]	@ (801b840 <mem_trim+0x200>)
 801b756:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801b758:	6938      	ldr	r0, [r7, #16]
 801b75a:	f7ff fd8f 	bl	801b27c <ptr_to_mem>
 801b75e:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 801b760:	697b      	ldr	r3, [r7, #20]
 801b762:	2200      	movs	r2, #0
 801b764:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 801b766:	697b      	ldr	r3, [r7, #20]
 801b768:	68fa      	ldr	r2, [r7, #12]
 801b76a:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801b76c:	697b      	ldr	r3, [r7, #20]
 801b76e:	69fa      	ldr	r2, [r7, #28]
 801b770:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 801b772:	6a3b      	ldr	r3, [r7, #32]
 801b774:	693a      	ldr	r2, [r7, #16]
 801b776:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b778:	697b      	ldr	r3, [r7, #20]
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	4a27      	ldr	r2, [pc, #156]	@ (801b81c <mem_trim+0x1dc>)
 801b77e:	4293      	cmp	r3, r2
 801b780:	d044      	beq.n	801b80c <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b782:	697b      	ldr	r3, [r7, #20]
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	4618      	mov	r0, r3
 801b788:	f7ff fd78 	bl	801b27c <ptr_to_mem>
 801b78c:	4602      	mov	r2, r0
 801b78e:	693b      	ldr	r3, [r7, #16]
 801b790:	6053      	str	r3, [r2, #4]
 801b792:	e03b      	b.n	801b80c <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801b794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b796:	3318      	adds	r3, #24
 801b798:	69ba      	ldr	r2, [r7, #24]
 801b79a:	429a      	cmp	r2, r3
 801b79c:	d336      	bcc.n	801b80c <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b79e:	69fa      	ldr	r2, [r7, #28]
 801b7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7a2:	4413      	add	r3, r2
 801b7a4:	330c      	adds	r3, #12
 801b7a6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b7a8:	6a3b      	ldr	r3, [r7, #32]
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	4a1b      	ldr	r2, [pc, #108]	@ (801b81c <mem_trim+0x1dc>)
 801b7ae:	4293      	cmp	r3, r2
 801b7b0:	d106      	bne.n	801b7c0 <mem_trim+0x180>
 801b7b2:	4b1d      	ldr	r3, [pc, #116]	@ (801b828 <mem_trim+0x1e8>)
 801b7b4:	f240 3216 	movw	r2, #790	@ 0x316
 801b7b8:	4920      	ldr	r1, [pc, #128]	@ (801b83c <mem_trim+0x1fc>)
 801b7ba:	481d      	ldr	r0, [pc, #116]	@ (801b830 <mem_trim+0x1f0>)
 801b7bc:	f00b f86c 	bl	8026898 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801b7c0:	6938      	ldr	r0, [r7, #16]
 801b7c2:	f7ff fd5b 	bl	801b27c <ptr_to_mem>
 801b7c6:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 801b7c8:	4b1d      	ldr	r3, [pc, #116]	@ (801b840 <mem_trim+0x200>)
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	697a      	ldr	r2, [r7, #20]
 801b7ce:	429a      	cmp	r2, r3
 801b7d0:	d202      	bcs.n	801b7d8 <mem_trim+0x198>
      lfree = mem2;
 801b7d2:	4a1b      	ldr	r2, [pc, #108]	@ (801b840 <mem_trim+0x200>)
 801b7d4:	697b      	ldr	r3, [r7, #20]
 801b7d6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801b7d8:	697b      	ldr	r3, [r7, #20]
 801b7da:	2200      	movs	r2, #0
 801b7dc:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 801b7de:	6a3b      	ldr	r3, [r7, #32]
 801b7e0:	681a      	ldr	r2, [r3, #0]
 801b7e2:	697b      	ldr	r3, [r7, #20]
 801b7e4:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 801b7e6:	697b      	ldr	r3, [r7, #20]
 801b7e8:	69fa      	ldr	r2, [r7, #28]
 801b7ea:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 801b7ec:	6a3b      	ldr	r3, [r7, #32]
 801b7ee:	693a      	ldr	r2, [r7, #16]
 801b7f0:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b7f2:	697b      	ldr	r3, [r7, #20]
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	4a09      	ldr	r2, [pc, #36]	@ (801b81c <mem_trim+0x1dc>)
 801b7f8:	4293      	cmp	r3, r2
 801b7fa:	d007      	beq.n	801b80c <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b7fc:	697b      	ldr	r3, [r7, #20]
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	4618      	mov	r0, r3
 801b802:	f7ff fd3b 	bl	801b27c <ptr_to_mem>
 801b806:	4602      	mov	r2, r0
 801b808:	693b      	ldr	r3, [r7, #16]
 801b80a:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801b80c:	480a      	ldr	r0, [pc, #40]	@ (801b838 <mem_trim+0x1f8>)
 801b80e:	f009 fee4 	bl	80255da <sys_mutex_unlock>
  return rmem;
 801b812:	687b      	ldr	r3, [r7, #4]
}
 801b814:	4618      	mov	r0, r3
 801b816:	3728      	adds	r7, #40	@ 0x28
 801b818:	46bd      	mov	sp, r7
 801b81a:	bd80      	pop	{r7, pc}
 801b81c:	0001ffe8 	.word	0x0001ffe8
 801b820:	200393ec 	.word	0x200393ec
 801b824:	200393f0 	.word	0x200393f0
 801b828:	08028d44 	.word	0x08028d44
 801b82c:	08028ed0 	.word	0x08028ed0
 801b830:	08028d8c 	.word	0x08028d8c
 801b834:	08028ee8 	.word	0x08028ee8
 801b838:	200393f4 	.word	0x200393f4
 801b83c:	08028f08 	.word	0x08028f08
 801b840:	200393f8 	.word	0x200393f8

0801b844 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801b844:	b580      	push	{r7, lr}
 801b846:	b088      	sub	sp, #32
 801b848:	af00      	add	r7, sp, #0
 801b84a:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d101      	bne.n	801b856 <mem_malloc+0x12>
    return NULL;
 801b852:	2300      	movs	r3, #0
 801b854:	e0d9      	b.n	801ba0a <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	3303      	adds	r3, #3
 801b85a:	f023 0303 	bic.w	r3, r3, #3
 801b85e:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 801b860:	69bb      	ldr	r3, [r7, #24]
 801b862:	2b0b      	cmp	r3, #11
 801b864:	d801      	bhi.n	801b86a <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801b866:	230c      	movs	r3, #12
 801b868:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801b86a:	69bb      	ldr	r3, [r7, #24]
 801b86c:	4a69      	ldr	r2, [pc, #420]	@ (801ba14 <mem_malloc+0x1d0>)
 801b86e:	4293      	cmp	r3, r2
 801b870:	d803      	bhi.n	801b87a <mem_malloc+0x36>
 801b872:	69ba      	ldr	r2, [r7, #24]
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	429a      	cmp	r2, r3
 801b878:	d201      	bcs.n	801b87e <mem_malloc+0x3a>
    return NULL;
 801b87a:	2300      	movs	r3, #0
 801b87c:	e0c5      	b.n	801ba0a <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801b87e:	4866      	ldr	r0, [pc, #408]	@ (801ba18 <mem_malloc+0x1d4>)
 801b880:	f009 fe9c 	bl	80255bc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b884:	4b65      	ldr	r3, [pc, #404]	@ (801ba1c <mem_malloc+0x1d8>)
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	4618      	mov	r0, r3
 801b88a:	f7ff fd07 	bl	801b29c <mem_to_ptr>
 801b88e:	61f8      	str	r0, [r7, #28]
 801b890:	e0b0      	b.n	801b9f4 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801b892:	69f8      	ldr	r0, [r7, #28]
 801b894:	f7ff fcf2 	bl	801b27c <ptr_to_mem>
 801b898:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801b89a:	693b      	ldr	r3, [r7, #16]
 801b89c:	7a1b      	ldrb	r3, [r3, #8]
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	f040 80a2 	bne.w	801b9e8 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b8a4:	693b      	ldr	r3, [r7, #16]
 801b8a6:	681a      	ldr	r2, [r3, #0]
 801b8a8:	69fb      	ldr	r3, [r7, #28]
 801b8aa:	1ad3      	subs	r3, r2, r3
 801b8ac:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 801b8ae:	69ba      	ldr	r2, [r7, #24]
 801b8b0:	429a      	cmp	r2, r3
 801b8b2:	f200 8099 	bhi.w	801b9e8 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801b8b6:	693b      	ldr	r3, [r7, #16]
 801b8b8:	681a      	ldr	r2, [r3, #0]
 801b8ba:	69fb      	ldr	r3, [r7, #28]
 801b8bc:	1ad3      	subs	r3, r2, r3
 801b8be:	f1a3 020c 	sub.w	r2, r3, #12
 801b8c2:	69bb      	ldr	r3, [r7, #24]
 801b8c4:	3318      	adds	r3, #24
 801b8c6:	429a      	cmp	r2, r3
 801b8c8:	d331      	bcc.n	801b92e <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801b8ca:	69fa      	ldr	r2, [r7, #28]
 801b8cc:	69bb      	ldr	r3, [r7, #24]
 801b8ce:	4413      	add	r3, r2
 801b8d0:	330c      	adds	r3, #12
 801b8d2:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	4a4f      	ldr	r2, [pc, #316]	@ (801ba14 <mem_malloc+0x1d0>)
 801b8d8:	4293      	cmp	r3, r2
 801b8da:	d106      	bne.n	801b8ea <mem_malloc+0xa6>
 801b8dc:	4b50      	ldr	r3, [pc, #320]	@ (801ba20 <mem_malloc+0x1dc>)
 801b8de:	f240 3287 	movw	r2, #903	@ 0x387
 801b8e2:	4950      	ldr	r1, [pc, #320]	@ (801ba24 <mem_malloc+0x1e0>)
 801b8e4:	4850      	ldr	r0, [pc, #320]	@ (801ba28 <mem_malloc+0x1e4>)
 801b8e6:	f00a ffd7 	bl	8026898 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801b8ea:	68f8      	ldr	r0, [r7, #12]
 801b8ec:	f7ff fcc6 	bl	801b27c <ptr_to_mem>
 801b8f0:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 801b8f2:	68bb      	ldr	r3, [r7, #8]
 801b8f4:	2200      	movs	r2, #0
 801b8f6:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 801b8f8:	693b      	ldr	r3, [r7, #16]
 801b8fa:	681a      	ldr	r2, [r3, #0]
 801b8fc:	68bb      	ldr	r3, [r7, #8]
 801b8fe:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 801b900:	68bb      	ldr	r3, [r7, #8]
 801b902:	69fa      	ldr	r2, [r7, #28]
 801b904:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801b906:	693b      	ldr	r3, [r7, #16]
 801b908:	68fa      	ldr	r2, [r7, #12]
 801b90a:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 801b90c:	693b      	ldr	r3, [r7, #16]
 801b90e:	2201      	movs	r2, #1
 801b910:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801b912:	68bb      	ldr	r3, [r7, #8]
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	4a3f      	ldr	r2, [pc, #252]	@ (801ba14 <mem_malloc+0x1d0>)
 801b918:	4293      	cmp	r3, r2
 801b91a:	d00b      	beq.n	801b934 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801b91c:	68bb      	ldr	r3, [r7, #8]
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	4618      	mov	r0, r3
 801b922:	f7ff fcab 	bl	801b27c <ptr_to_mem>
 801b926:	4602      	mov	r2, r0
 801b928:	68fb      	ldr	r3, [r7, #12]
 801b92a:	6053      	str	r3, [r2, #4]
 801b92c:	e002      	b.n	801b934 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801b92e:	693b      	ldr	r3, [r7, #16]
 801b930:	2201      	movs	r2, #1
 801b932:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801b934:	4b39      	ldr	r3, [pc, #228]	@ (801ba1c <mem_malloc+0x1d8>)
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	693a      	ldr	r2, [r7, #16]
 801b93a:	429a      	cmp	r2, r3
 801b93c:	d127      	bne.n	801b98e <mem_malloc+0x14a>
          struct mem *cur = lfree;
 801b93e:	4b37      	ldr	r3, [pc, #220]	@ (801ba1c <mem_malloc+0x1d8>)
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801b944:	e005      	b.n	801b952 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801b946:	697b      	ldr	r3, [r7, #20]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	4618      	mov	r0, r3
 801b94c:	f7ff fc96 	bl	801b27c <ptr_to_mem>
 801b950:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 801b952:	697b      	ldr	r3, [r7, #20]
 801b954:	7a1b      	ldrb	r3, [r3, #8]
 801b956:	2b00      	cmp	r3, #0
 801b958:	d004      	beq.n	801b964 <mem_malloc+0x120>
 801b95a:	4b34      	ldr	r3, [pc, #208]	@ (801ba2c <mem_malloc+0x1e8>)
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	697a      	ldr	r2, [r7, #20]
 801b960:	429a      	cmp	r2, r3
 801b962:	d1f0      	bne.n	801b946 <mem_malloc+0x102>
          }
          lfree = cur;
 801b964:	4a2d      	ldr	r2, [pc, #180]	@ (801ba1c <mem_malloc+0x1d8>)
 801b966:	697b      	ldr	r3, [r7, #20]
 801b968:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801b96a:	4b2c      	ldr	r3, [pc, #176]	@ (801ba1c <mem_malloc+0x1d8>)
 801b96c:	681a      	ldr	r2, [r3, #0]
 801b96e:	4b2f      	ldr	r3, [pc, #188]	@ (801ba2c <mem_malloc+0x1e8>)
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	429a      	cmp	r2, r3
 801b974:	d00b      	beq.n	801b98e <mem_malloc+0x14a>
 801b976:	4b29      	ldr	r3, [pc, #164]	@ (801ba1c <mem_malloc+0x1d8>)
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	7a1b      	ldrb	r3, [r3, #8]
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d006      	beq.n	801b98e <mem_malloc+0x14a>
 801b980:	4b27      	ldr	r3, [pc, #156]	@ (801ba20 <mem_malloc+0x1dc>)
 801b982:	f240 32b5 	movw	r2, #949	@ 0x3b5
 801b986:	492a      	ldr	r1, [pc, #168]	@ (801ba30 <mem_malloc+0x1ec>)
 801b988:	4827      	ldr	r0, [pc, #156]	@ (801ba28 <mem_malloc+0x1e4>)
 801b98a:	f00a ff85 	bl	8026898 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801b98e:	4822      	ldr	r0, [pc, #136]	@ (801ba18 <mem_malloc+0x1d4>)
 801b990:	f009 fe23 	bl	80255da <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b994:	693a      	ldr	r2, [r7, #16]
 801b996:	69bb      	ldr	r3, [r7, #24]
 801b998:	4413      	add	r3, r2
 801b99a:	330c      	adds	r3, #12
 801b99c:	4a23      	ldr	r2, [pc, #140]	@ (801ba2c <mem_malloc+0x1e8>)
 801b99e:	6812      	ldr	r2, [r2, #0]
 801b9a0:	4293      	cmp	r3, r2
 801b9a2:	d906      	bls.n	801b9b2 <mem_malloc+0x16e>
 801b9a4:	4b1e      	ldr	r3, [pc, #120]	@ (801ba20 <mem_malloc+0x1dc>)
 801b9a6:	f240 32b9 	movw	r2, #953	@ 0x3b9
 801b9aa:	4922      	ldr	r1, [pc, #136]	@ (801ba34 <mem_malloc+0x1f0>)
 801b9ac:	481e      	ldr	r0, [pc, #120]	@ (801ba28 <mem_malloc+0x1e4>)
 801b9ae:	f00a ff73 	bl	8026898 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801b9b2:	693b      	ldr	r3, [r7, #16]
 801b9b4:	f003 0303 	and.w	r3, r3, #3
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d006      	beq.n	801b9ca <mem_malloc+0x186>
 801b9bc:	4b18      	ldr	r3, [pc, #96]	@ (801ba20 <mem_malloc+0x1dc>)
 801b9be:	f240 32bb 	movw	r2, #955	@ 0x3bb
 801b9c2:	491d      	ldr	r1, [pc, #116]	@ (801ba38 <mem_malloc+0x1f4>)
 801b9c4:	4818      	ldr	r0, [pc, #96]	@ (801ba28 <mem_malloc+0x1e4>)
 801b9c6:	f00a ff67 	bl	8026898 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801b9ca:	693b      	ldr	r3, [r7, #16]
 801b9cc:	f003 0303 	and.w	r3, r3, #3
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	d006      	beq.n	801b9e2 <mem_malloc+0x19e>
 801b9d4:	4b12      	ldr	r3, [pc, #72]	@ (801ba20 <mem_malloc+0x1dc>)
 801b9d6:	f240 32bd 	movw	r2, #957	@ 0x3bd
 801b9da:	4918      	ldr	r1, [pc, #96]	@ (801ba3c <mem_malloc+0x1f8>)
 801b9dc:	4812      	ldr	r0, [pc, #72]	@ (801ba28 <mem_malloc+0x1e4>)
 801b9de:	f00a ff5b 	bl	8026898 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801b9e2:	693b      	ldr	r3, [r7, #16]
 801b9e4:	330c      	adds	r3, #12
 801b9e6:	e010      	b.n	801ba0a <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 801b9e8:	69f8      	ldr	r0, [r7, #28]
 801b9ea:	f7ff fc47 	bl	801b27c <ptr_to_mem>
 801b9ee:	4603      	mov	r3, r0
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b9f4:	69ba      	ldr	r2, [r7, #24]
 801b9f6:	4b07      	ldr	r3, [pc, #28]	@ (801ba14 <mem_malloc+0x1d0>)
 801b9f8:	1a9b      	subs	r3, r3, r2
 801b9fa:	69fa      	ldr	r2, [r7, #28]
 801b9fc:	429a      	cmp	r2, r3
 801b9fe:	f4ff af48 	bcc.w	801b892 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801ba02:	4805      	ldr	r0, [pc, #20]	@ (801ba18 <mem_malloc+0x1d4>)
 801ba04:	f009 fde9 	bl	80255da <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801ba08:	2300      	movs	r3, #0
}
 801ba0a:	4618      	mov	r0, r3
 801ba0c:	3720      	adds	r7, #32
 801ba0e:	46bd      	mov	sp, r7
 801ba10:	bd80      	pop	{r7, pc}
 801ba12:	bf00      	nop
 801ba14:	0001ffe8 	.word	0x0001ffe8
 801ba18:	200393f4 	.word	0x200393f4
 801ba1c:	200393f8 	.word	0x200393f8
 801ba20:	08028d44 	.word	0x08028d44
 801ba24:	08028f08 	.word	0x08028f08
 801ba28:	08028d8c 	.word	0x08028d8c
 801ba2c:	200393f0 	.word	0x200393f0
 801ba30:	08028f1c 	.word	0x08028f1c
 801ba34:	08028f38 	.word	0x08028f38
 801ba38:	08028f68 	.word	0x08028f68
 801ba3c:	08028f98 	.word	0x08028f98

0801ba40 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801ba40:	b480      	push	{r7}
 801ba42:	b085      	sub	sp, #20
 801ba44:	af00      	add	r7, sp, #0
 801ba46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	689b      	ldr	r3, [r3, #8]
 801ba4c:	2200      	movs	r2, #0
 801ba4e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	685b      	ldr	r3, [r3, #4]
 801ba54:	3303      	adds	r3, #3
 801ba56:	f023 0303 	bic.w	r3, r3, #3
 801ba5a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	60fb      	str	r3, [r7, #12]
 801ba60:	e011      	b.n	801ba86 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	689b      	ldr	r3, [r3, #8]
 801ba66:	681a      	ldr	r2, [r3, #0]
 801ba68:	68bb      	ldr	r3, [r7, #8]
 801ba6a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	689b      	ldr	r3, [r3, #8]
 801ba70:	68ba      	ldr	r2, [r7, #8]
 801ba72:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	881b      	ldrh	r3, [r3, #0]
 801ba78:	461a      	mov	r2, r3
 801ba7a:	68bb      	ldr	r3, [r7, #8]
 801ba7c:	4413      	add	r3, r2
 801ba7e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	3301      	adds	r3, #1
 801ba84:	60fb      	str	r3, [r7, #12]
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	885b      	ldrh	r3, [r3, #2]
 801ba8a:	461a      	mov	r2, r3
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	4293      	cmp	r3, r2
 801ba90:	dbe7      	blt.n	801ba62 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801ba92:	bf00      	nop
 801ba94:	bf00      	nop
 801ba96:	3714      	adds	r7, #20
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba9e:	4770      	bx	lr

0801baa0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801baa0:	b580      	push	{r7, lr}
 801baa2:	b082      	sub	sp, #8
 801baa4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801baa6:	2300      	movs	r3, #0
 801baa8:	80fb      	strh	r3, [r7, #6]
 801baaa:	e009      	b.n	801bac0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801baac:	88fb      	ldrh	r3, [r7, #6]
 801baae:	4a08      	ldr	r2, [pc, #32]	@ (801bad0 <memp_init+0x30>)
 801bab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bab4:	4618      	mov	r0, r3
 801bab6:	f7ff ffc3 	bl	801ba40 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801baba:	88fb      	ldrh	r3, [r7, #6]
 801babc:	3301      	adds	r3, #1
 801babe:	80fb      	strh	r3, [r7, #6]
 801bac0:	88fb      	ldrh	r3, [r7, #6]
 801bac2:	2b0c      	cmp	r3, #12
 801bac4:	d9f2      	bls.n	801baac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801bac6:	bf00      	nop
 801bac8:	bf00      	nop
 801baca:	3708      	adds	r7, #8
 801bacc:	46bd      	mov	sp, r7
 801bace:	bd80      	pop	{r7, pc}
 801bad0:	0802ce90 	.word	0x0802ce90

0801bad4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801bad4:	b580      	push	{r7, lr}
 801bad6:	b084      	sub	sp, #16
 801bad8:	af00      	add	r7, sp, #0
 801bada:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801badc:	f009 fdb0 	bl	8025640 <sys_arch_protect>
 801bae0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	689b      	ldr	r3, [r3, #8]
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801baea:	68bb      	ldr	r3, [r7, #8]
 801baec:	2b00      	cmp	r3, #0
 801baee:	d015      	beq.n	801bb1c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	689b      	ldr	r3, [r3, #8]
 801baf4:	68ba      	ldr	r2, [r7, #8]
 801baf6:	6812      	ldr	r2, [r2, #0]
 801baf8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801bafa:	68bb      	ldr	r3, [r7, #8]
 801bafc:	f003 0303 	and.w	r3, r3, #3
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d006      	beq.n	801bb12 <do_memp_malloc_pool+0x3e>
 801bb04:	4b09      	ldr	r3, [pc, #36]	@ (801bb2c <do_memp_malloc_pool+0x58>)
 801bb06:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801bb0a:	4909      	ldr	r1, [pc, #36]	@ (801bb30 <do_memp_malloc_pool+0x5c>)
 801bb0c:	4809      	ldr	r0, [pc, #36]	@ (801bb34 <do_memp_malloc_pool+0x60>)
 801bb0e:	f00a fec3 	bl	8026898 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801bb12:	68f8      	ldr	r0, [r7, #12]
 801bb14:	f009 fda2 	bl	802565c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801bb18:	68bb      	ldr	r3, [r7, #8]
 801bb1a:	e003      	b.n	801bb24 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801bb1c:	68f8      	ldr	r0, [r7, #12]
 801bb1e:	f009 fd9d 	bl	802565c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801bb22:	2300      	movs	r3, #0
}
 801bb24:	4618      	mov	r0, r3
 801bb26:	3710      	adds	r7, #16
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	bd80      	pop	{r7, pc}
 801bb2c:	08028fbc 	.word	0x08028fbc
 801bb30:	08028fec 	.word	0x08028fec
 801bb34:	08029010 	.word	0x08029010

0801bb38 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801bb38:	b580      	push	{r7, lr}
 801bb3a:	b082      	sub	sp, #8
 801bb3c:	af00      	add	r7, sp, #0
 801bb3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d106      	bne.n	801bb54 <memp_malloc_pool+0x1c>
 801bb46:	4b0a      	ldr	r3, [pc, #40]	@ (801bb70 <memp_malloc_pool+0x38>)
 801bb48:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801bb4c:	4909      	ldr	r1, [pc, #36]	@ (801bb74 <memp_malloc_pool+0x3c>)
 801bb4e:	480a      	ldr	r0, [pc, #40]	@ (801bb78 <memp_malloc_pool+0x40>)
 801bb50:	f00a fea2 	bl	8026898 <iprintf>
  if (desc == NULL) {
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d101      	bne.n	801bb5e <memp_malloc_pool+0x26>
    return NULL;
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	e003      	b.n	801bb66 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801bb5e:	6878      	ldr	r0, [r7, #4]
 801bb60:	f7ff ffb8 	bl	801bad4 <do_memp_malloc_pool>
 801bb64:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801bb66:	4618      	mov	r0, r3
 801bb68:	3708      	adds	r7, #8
 801bb6a:	46bd      	mov	sp, r7
 801bb6c:	bd80      	pop	{r7, pc}
 801bb6e:	bf00      	nop
 801bb70:	08028fbc 	.word	0x08028fbc
 801bb74:	08029038 	.word	0x08029038
 801bb78:	08029010 	.word	0x08029010

0801bb7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801bb7c:	b580      	push	{r7, lr}
 801bb7e:	b084      	sub	sp, #16
 801bb80:	af00      	add	r7, sp, #0
 801bb82:	4603      	mov	r3, r0
 801bb84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801bb86:	79fb      	ldrb	r3, [r7, #7]
 801bb88:	2b0c      	cmp	r3, #12
 801bb8a:	d908      	bls.n	801bb9e <memp_malloc+0x22>
 801bb8c:	4b0a      	ldr	r3, [pc, #40]	@ (801bbb8 <memp_malloc+0x3c>)
 801bb8e:	f240 1257 	movw	r2, #343	@ 0x157
 801bb92:	490a      	ldr	r1, [pc, #40]	@ (801bbbc <memp_malloc+0x40>)
 801bb94:	480a      	ldr	r0, [pc, #40]	@ (801bbc0 <memp_malloc+0x44>)
 801bb96:	f00a fe7f 	bl	8026898 <iprintf>
 801bb9a:	2300      	movs	r3, #0
 801bb9c:	e008      	b.n	801bbb0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801bb9e:	79fb      	ldrb	r3, [r7, #7]
 801bba0:	4a08      	ldr	r2, [pc, #32]	@ (801bbc4 <memp_malloc+0x48>)
 801bba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bba6:	4618      	mov	r0, r3
 801bba8:	f7ff ff94 	bl	801bad4 <do_memp_malloc_pool>
 801bbac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801bbae:	68fb      	ldr	r3, [r7, #12]
}
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	3710      	adds	r7, #16
 801bbb4:	46bd      	mov	sp, r7
 801bbb6:	bd80      	pop	{r7, pc}
 801bbb8:	08028fbc 	.word	0x08028fbc
 801bbbc:	0802904c 	.word	0x0802904c
 801bbc0:	08029010 	.word	0x08029010
 801bbc4:	0802ce90 	.word	0x0802ce90

0801bbc8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801bbc8:	b580      	push	{r7, lr}
 801bbca:	b084      	sub	sp, #16
 801bbcc:	af00      	add	r7, sp, #0
 801bbce:	6078      	str	r0, [r7, #4]
 801bbd0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801bbd2:	683b      	ldr	r3, [r7, #0]
 801bbd4:	f003 0303 	and.w	r3, r3, #3
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d006      	beq.n	801bbea <do_memp_free_pool+0x22>
 801bbdc:	4b0d      	ldr	r3, [pc, #52]	@ (801bc14 <do_memp_free_pool+0x4c>)
 801bbde:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801bbe2:	490d      	ldr	r1, [pc, #52]	@ (801bc18 <do_memp_free_pool+0x50>)
 801bbe4:	480d      	ldr	r0, [pc, #52]	@ (801bc1c <do_memp_free_pool+0x54>)
 801bbe6:	f00a fe57 	bl	8026898 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801bbea:	683b      	ldr	r3, [r7, #0]
 801bbec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801bbee:	f009 fd27 	bl	8025640 <sys_arch_protect>
 801bbf2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	689b      	ldr	r3, [r3, #8]
 801bbf8:	681a      	ldr	r2, [r3, #0]
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	689b      	ldr	r3, [r3, #8]
 801bc02:	68fa      	ldr	r2, [r7, #12]
 801bc04:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801bc06:	68b8      	ldr	r0, [r7, #8]
 801bc08:	f009 fd28 	bl	802565c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801bc0c:	bf00      	nop
 801bc0e:	3710      	adds	r7, #16
 801bc10:	46bd      	mov	sp, r7
 801bc12:	bd80      	pop	{r7, pc}
 801bc14:	08028fbc 	.word	0x08028fbc
 801bc18:	0802906c 	.word	0x0802906c
 801bc1c:	08029010 	.word	0x08029010

0801bc20 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801bc20:	b580      	push	{r7, lr}
 801bc22:	b082      	sub	sp, #8
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	6078      	str	r0, [r7, #4]
 801bc28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d106      	bne.n	801bc3e <memp_free_pool+0x1e>
 801bc30:	4b0a      	ldr	r3, [pc, #40]	@ (801bc5c <memp_free_pool+0x3c>)
 801bc32:	f240 1295 	movw	r2, #405	@ 0x195
 801bc36:	490a      	ldr	r1, [pc, #40]	@ (801bc60 <memp_free_pool+0x40>)
 801bc38:	480a      	ldr	r0, [pc, #40]	@ (801bc64 <memp_free_pool+0x44>)
 801bc3a:	f00a fe2d 	bl	8026898 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d007      	beq.n	801bc54 <memp_free_pool+0x34>
 801bc44:	683b      	ldr	r3, [r7, #0]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d004      	beq.n	801bc54 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801bc4a:	6839      	ldr	r1, [r7, #0]
 801bc4c:	6878      	ldr	r0, [r7, #4]
 801bc4e:	f7ff ffbb 	bl	801bbc8 <do_memp_free_pool>
 801bc52:	e000      	b.n	801bc56 <memp_free_pool+0x36>
    return;
 801bc54:	bf00      	nop
}
 801bc56:	3708      	adds	r7, #8
 801bc58:	46bd      	mov	sp, r7
 801bc5a:	bd80      	pop	{r7, pc}
 801bc5c:	08028fbc 	.word	0x08028fbc
 801bc60:	08029038 	.word	0x08029038
 801bc64:	08029010 	.word	0x08029010

0801bc68 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801bc68:	b580      	push	{r7, lr}
 801bc6a:	b082      	sub	sp, #8
 801bc6c:	af00      	add	r7, sp, #0
 801bc6e:	4603      	mov	r3, r0
 801bc70:	6039      	str	r1, [r7, #0]
 801bc72:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801bc74:	79fb      	ldrb	r3, [r7, #7]
 801bc76:	2b0c      	cmp	r3, #12
 801bc78:	d907      	bls.n	801bc8a <memp_free+0x22>
 801bc7a:	4b0c      	ldr	r3, [pc, #48]	@ (801bcac <memp_free+0x44>)
 801bc7c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 801bc80:	490b      	ldr	r1, [pc, #44]	@ (801bcb0 <memp_free+0x48>)
 801bc82:	480c      	ldr	r0, [pc, #48]	@ (801bcb4 <memp_free+0x4c>)
 801bc84:	f00a fe08 	bl	8026898 <iprintf>
 801bc88:	e00c      	b.n	801bca4 <memp_free+0x3c>

  if (mem == NULL) {
 801bc8a:	683b      	ldr	r3, [r7, #0]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d008      	beq.n	801bca2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801bc90:	79fb      	ldrb	r3, [r7, #7]
 801bc92:	4a09      	ldr	r2, [pc, #36]	@ (801bcb8 <memp_free+0x50>)
 801bc94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bc98:	6839      	ldr	r1, [r7, #0]
 801bc9a:	4618      	mov	r0, r3
 801bc9c:	f7ff ff94 	bl	801bbc8 <do_memp_free_pool>
 801bca0:	e000      	b.n	801bca4 <memp_free+0x3c>
    return;
 801bca2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801bca4:	3708      	adds	r7, #8
 801bca6:	46bd      	mov	sp, r7
 801bca8:	bd80      	pop	{r7, pc}
 801bcaa:	bf00      	nop
 801bcac:	08028fbc 	.word	0x08028fbc
 801bcb0:	0802908c 	.word	0x0802908c
 801bcb4:	08029010 	.word	0x08029010
 801bcb8:	0802ce90 	.word	0x0802ce90

0801bcbc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801bcbc:	b480      	push	{r7}
 801bcbe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801bcc0:	bf00      	nop
 801bcc2:	46bd      	mov	sp, r7
 801bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcc8:	4770      	bx	lr
	...

0801bccc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801bccc:	b580      	push	{r7, lr}
 801bcce:	b086      	sub	sp, #24
 801bcd0:	af00      	add	r7, sp, #0
 801bcd2:	60f8      	str	r0, [r7, #12]
 801bcd4:	60b9      	str	r1, [r7, #8]
 801bcd6:	607a      	str	r2, [r7, #4]
 801bcd8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801bcda:	68fb      	ldr	r3, [r7, #12]
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d108      	bne.n	801bcf2 <netif_add+0x26>
 801bce0:	4b57      	ldr	r3, [pc, #348]	@ (801be40 <netif_add+0x174>)
 801bce2:	f240 1227 	movw	r2, #295	@ 0x127
 801bce6:	4957      	ldr	r1, [pc, #348]	@ (801be44 <netif_add+0x178>)
 801bce8:	4857      	ldr	r0, [pc, #348]	@ (801be48 <netif_add+0x17c>)
 801bcea:	f00a fdd5 	bl	8026898 <iprintf>
 801bcee:	2300      	movs	r3, #0
 801bcf0:	e0a2      	b.n	801be38 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801bcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d108      	bne.n	801bd0a <netif_add+0x3e>
 801bcf8:	4b51      	ldr	r3, [pc, #324]	@ (801be40 <netif_add+0x174>)
 801bcfa:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801bcfe:	4953      	ldr	r1, [pc, #332]	@ (801be4c <netif_add+0x180>)
 801bd00:	4851      	ldr	r0, [pc, #324]	@ (801be48 <netif_add+0x17c>)
 801bd02:	f00a fdc9 	bl	8026898 <iprintf>
 801bd06:	2300      	movs	r3, #0
 801bd08:	e096      	b.n	801be38 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801bd0a:	68bb      	ldr	r3, [r7, #8]
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d101      	bne.n	801bd14 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801bd10:	4b4f      	ldr	r3, [pc, #316]	@ (801be50 <netif_add+0x184>)
 801bd12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d101      	bne.n	801bd1e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801bd1a:	4b4d      	ldr	r3, [pc, #308]	@ (801be50 <netif_add+0x184>)
 801bd1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801bd1e:	683b      	ldr	r3, [r7, #0]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d101      	bne.n	801bd28 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801bd24:	4b4a      	ldr	r3, [pc, #296]	@ (801be50 <netif_add+0x184>)
 801bd26:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	2200      	movs	r2, #0
 801bd2c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801bd2e:	68fb      	ldr	r3, [r7, #12]
 801bd30:	2200      	movs	r2, #0
 801bd32:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	2200      	movs	r2, #0
 801bd38:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801bd3a:	68fb      	ldr	r3, [r7, #12]
 801bd3c:	4a45      	ldr	r2, [pc, #276]	@ (801be54 <netif_add+0x188>)
 801bd3e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	2200      	movs	r2, #0
 801bd44:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	2200      	movs	r2, #0
 801bd4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801bd4e:	68fb      	ldr	r3, [r7, #12]
 801bd50:	2200      	movs	r2, #0
 801bd52:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801bd54:	68fb      	ldr	r3, [r7, #12]
 801bd56:	6a3a      	ldr	r2, [r7, #32]
 801bd58:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801bd5a:	4b3f      	ldr	r3, [pc, #252]	@ (801be58 <netif_add+0x18c>)
 801bd5c:	781a      	ldrb	r2, [r3, #0]
 801bd5e:	68fb      	ldr	r3, [r7, #12]
 801bd60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bd68:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801bd6a:	683b      	ldr	r3, [r7, #0]
 801bd6c:	687a      	ldr	r2, [r7, #4]
 801bd6e:	68b9      	ldr	r1, [r7, #8]
 801bd70:	68f8      	ldr	r0, [r7, #12]
 801bd72:	f000 f913 	bl	801bf9c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801bd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd78:	68f8      	ldr	r0, [r7, #12]
 801bd7a:	4798      	blx	r3
 801bd7c:	4603      	mov	r3, r0
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d001      	beq.n	801bd86 <netif_add+0xba>
    return NULL;
 801bd82:	2300      	movs	r3, #0
 801bd84:	e058      	b.n	801be38 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801bd86:	68fb      	ldr	r3, [r7, #12]
 801bd88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bd8c:	2bff      	cmp	r3, #255	@ 0xff
 801bd8e:	d103      	bne.n	801bd98 <netif_add+0xcc>
        netif->num = 0;
 801bd90:	68fb      	ldr	r3, [r7, #12]
 801bd92:	2200      	movs	r2, #0
 801bd94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 801bd98:	2300      	movs	r3, #0
 801bd9a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801bd9c:	4b2f      	ldr	r3, [pc, #188]	@ (801be5c <netif_add+0x190>)
 801bd9e:	681b      	ldr	r3, [r3, #0]
 801bda0:	617b      	str	r3, [r7, #20]
 801bda2:	e02b      	b.n	801bdfc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bda4:	697a      	ldr	r2, [r7, #20]
 801bda6:	68fb      	ldr	r3, [r7, #12]
 801bda8:	429a      	cmp	r2, r3
 801bdaa:	d106      	bne.n	801bdba <netif_add+0xee>
 801bdac:	4b24      	ldr	r3, [pc, #144]	@ (801be40 <netif_add+0x174>)
 801bdae:	f240 128b 	movw	r2, #395	@ 0x18b
 801bdb2:	492b      	ldr	r1, [pc, #172]	@ (801be60 <netif_add+0x194>)
 801bdb4:	4824      	ldr	r0, [pc, #144]	@ (801be48 <netif_add+0x17c>)
 801bdb6:	f00a fd6f 	bl	8026898 <iprintf>
        num_netifs++;
 801bdba:	693b      	ldr	r3, [r7, #16]
 801bdbc:	3301      	adds	r3, #1
 801bdbe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801bdc0:	693b      	ldr	r3, [r7, #16]
 801bdc2:	2bff      	cmp	r3, #255	@ 0xff
 801bdc4:	dd06      	ble.n	801bdd4 <netif_add+0x108>
 801bdc6:	4b1e      	ldr	r3, [pc, #120]	@ (801be40 <netif_add+0x174>)
 801bdc8:	f240 128d 	movw	r2, #397	@ 0x18d
 801bdcc:	4925      	ldr	r1, [pc, #148]	@ (801be64 <netif_add+0x198>)
 801bdce:	481e      	ldr	r0, [pc, #120]	@ (801be48 <netif_add+0x17c>)
 801bdd0:	f00a fd62 	bl	8026898 <iprintf>
        if (netif2->num == netif->num) {
 801bdd4:	697b      	ldr	r3, [r7, #20]
 801bdd6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801bdda:	68fb      	ldr	r3, [r7, #12]
 801bddc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bde0:	429a      	cmp	r2, r3
 801bde2:	d108      	bne.n	801bdf6 <netif_add+0x12a>
          netif->num++;
 801bde4:	68fb      	ldr	r3, [r7, #12]
 801bde6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bdea:	3301      	adds	r3, #1
 801bdec:	b2da      	uxtb	r2, r3
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 801bdf4:	e005      	b.n	801be02 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801bdf6:	697b      	ldr	r3, [r7, #20]
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	617b      	str	r3, [r7, #20]
 801bdfc:	697b      	ldr	r3, [r7, #20]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d1d0      	bne.n	801bda4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801be02:	697b      	ldr	r3, [r7, #20]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d1be      	bne.n	801bd86 <netif_add+0xba>
  }
  if (netif->num == 254) {
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801be0e:	2bfe      	cmp	r3, #254	@ 0xfe
 801be10:	d103      	bne.n	801be1a <netif_add+0x14e>
    netif_num = 0;
 801be12:	4b11      	ldr	r3, [pc, #68]	@ (801be58 <netif_add+0x18c>)
 801be14:	2200      	movs	r2, #0
 801be16:	701a      	strb	r2, [r3, #0]
 801be18:	e006      	b.n	801be28 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801be1a:	68fb      	ldr	r3, [r7, #12]
 801be1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801be20:	3301      	adds	r3, #1
 801be22:	b2da      	uxtb	r2, r3
 801be24:	4b0c      	ldr	r3, [pc, #48]	@ (801be58 <netif_add+0x18c>)
 801be26:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801be28:	4b0c      	ldr	r3, [pc, #48]	@ (801be5c <netif_add+0x190>)
 801be2a:	681a      	ldr	r2, [r3, #0]
 801be2c:	68fb      	ldr	r3, [r7, #12]
 801be2e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801be30:	4a0a      	ldr	r2, [pc, #40]	@ (801be5c <netif_add+0x190>)
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801be36:	68fb      	ldr	r3, [r7, #12]
}
 801be38:	4618      	mov	r0, r3
 801be3a:	3718      	adds	r7, #24
 801be3c:	46bd      	mov	sp, r7
 801be3e:	bd80      	pop	{r7, pc}
 801be40:	080290a8 	.word	0x080290a8
 801be44:	0802913c 	.word	0x0802913c
 801be48:	080290f8 	.word	0x080290f8
 801be4c:	08029158 	.word	0x08029158
 801be50:	0802cf04 	.word	0x0802cf04
 801be54:	0801c277 	.word	0x0801c277
 801be58:	2003c4d0 	.word	0x2003c4d0
 801be5c:	2003c4c8 	.word	0x2003c4c8
 801be60:	0802917c 	.word	0x0802917c
 801be64:	08029190 	.word	0x08029190

0801be68 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801be68:	b580      	push	{r7, lr}
 801be6a:	b082      	sub	sp, #8
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	6078      	str	r0, [r7, #4]
 801be70:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801be72:	6839      	ldr	r1, [r7, #0]
 801be74:	6878      	ldr	r0, [r7, #4]
 801be76:	f002 fb8d 	bl	801e594 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801be7a:	6839      	ldr	r1, [r7, #0]
 801be7c:	6878      	ldr	r0, [r7, #4]
 801be7e:	f006 ffcb 	bl	8022e18 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801be82:	bf00      	nop
 801be84:	3708      	adds	r7, #8
 801be86:	46bd      	mov	sp, r7
 801be88:	bd80      	pop	{r7, pc}
	...

0801be8c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801be8c:	b580      	push	{r7, lr}
 801be8e:	b086      	sub	sp, #24
 801be90:	af00      	add	r7, sp, #0
 801be92:	60f8      	str	r0, [r7, #12]
 801be94:	60b9      	str	r1, [r7, #8]
 801be96:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801be98:	68bb      	ldr	r3, [r7, #8]
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d106      	bne.n	801beac <netif_do_set_ipaddr+0x20>
 801be9e:	4b1d      	ldr	r3, [pc, #116]	@ (801bf14 <netif_do_set_ipaddr+0x88>)
 801bea0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 801bea4:	491c      	ldr	r1, [pc, #112]	@ (801bf18 <netif_do_set_ipaddr+0x8c>)
 801bea6:	481d      	ldr	r0, [pc, #116]	@ (801bf1c <netif_do_set_ipaddr+0x90>)
 801bea8:	f00a fcf6 	bl	8026898 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d106      	bne.n	801bec0 <netif_do_set_ipaddr+0x34>
 801beb2:	4b18      	ldr	r3, [pc, #96]	@ (801bf14 <netif_do_set_ipaddr+0x88>)
 801beb4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 801beb8:	4917      	ldr	r1, [pc, #92]	@ (801bf18 <netif_do_set_ipaddr+0x8c>)
 801beba:	4818      	ldr	r0, [pc, #96]	@ (801bf1c <netif_do_set_ipaddr+0x90>)
 801bebc:	f00a fcec 	bl	8026898 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801bec0:	68bb      	ldr	r3, [r7, #8]
 801bec2:	681a      	ldr	r2, [r3, #0]
 801bec4:	68fb      	ldr	r3, [r7, #12]
 801bec6:	3304      	adds	r3, #4
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	429a      	cmp	r2, r3
 801becc:	d01c      	beq.n	801bf08 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801bece:	68bb      	ldr	r3, [r7, #8]
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	3304      	adds	r3, #4
 801bed8:	681a      	ldr	r2, [r3, #0]
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801bede:	f107 0314 	add.w	r3, r7, #20
 801bee2:	4619      	mov	r1, r3
 801bee4:	6878      	ldr	r0, [r7, #4]
 801bee6:	f7ff ffbf 	bl	801be68 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801beea:	68bb      	ldr	r3, [r7, #8]
 801beec:	2b00      	cmp	r3, #0
 801beee:	d002      	beq.n	801bef6 <netif_do_set_ipaddr+0x6a>
 801bef0:	68bb      	ldr	r3, [r7, #8]
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	e000      	b.n	801bef8 <netif_do_set_ipaddr+0x6c>
 801bef6:	2300      	movs	r3, #0
 801bef8:	68fa      	ldr	r2, [r7, #12]
 801befa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801befc:	2101      	movs	r1, #1
 801befe:	68f8      	ldr	r0, [r7, #12]
 801bf00:	f000 f8d2 	bl	801c0a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801bf04:	2301      	movs	r3, #1
 801bf06:	e000      	b.n	801bf0a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801bf08:	2300      	movs	r3, #0
}
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	3718      	adds	r7, #24
 801bf0e:	46bd      	mov	sp, r7
 801bf10:	bd80      	pop	{r7, pc}
 801bf12:	bf00      	nop
 801bf14:	080290a8 	.word	0x080290a8
 801bf18:	080291c0 	.word	0x080291c0
 801bf1c:	080290f8 	.word	0x080290f8

0801bf20 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801bf20:	b480      	push	{r7}
 801bf22:	b085      	sub	sp, #20
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	60f8      	str	r0, [r7, #12]
 801bf28:	60b9      	str	r1, [r7, #8]
 801bf2a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801bf2c:	68bb      	ldr	r3, [r7, #8]
 801bf2e:	681a      	ldr	r2, [r3, #0]
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	3308      	adds	r3, #8
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	429a      	cmp	r2, r3
 801bf38:	d00a      	beq.n	801bf50 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801bf3a:	68bb      	ldr	r3, [r7, #8]
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d002      	beq.n	801bf46 <netif_do_set_netmask+0x26>
 801bf40:	68bb      	ldr	r3, [r7, #8]
 801bf42:	681b      	ldr	r3, [r3, #0]
 801bf44:	e000      	b.n	801bf48 <netif_do_set_netmask+0x28>
 801bf46:	2300      	movs	r3, #0
 801bf48:	68fa      	ldr	r2, [r7, #12]
 801bf4a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801bf4c:	2301      	movs	r3, #1
 801bf4e:	e000      	b.n	801bf52 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801bf50:	2300      	movs	r3, #0
}
 801bf52:	4618      	mov	r0, r3
 801bf54:	3714      	adds	r7, #20
 801bf56:	46bd      	mov	sp, r7
 801bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf5c:	4770      	bx	lr

0801bf5e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801bf5e:	b480      	push	{r7}
 801bf60:	b085      	sub	sp, #20
 801bf62:	af00      	add	r7, sp, #0
 801bf64:	60f8      	str	r0, [r7, #12]
 801bf66:	60b9      	str	r1, [r7, #8]
 801bf68:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801bf6a:	68bb      	ldr	r3, [r7, #8]
 801bf6c:	681a      	ldr	r2, [r3, #0]
 801bf6e:	68fb      	ldr	r3, [r7, #12]
 801bf70:	330c      	adds	r3, #12
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	429a      	cmp	r2, r3
 801bf76:	d00a      	beq.n	801bf8e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801bf78:	68bb      	ldr	r3, [r7, #8]
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d002      	beq.n	801bf84 <netif_do_set_gw+0x26>
 801bf7e:	68bb      	ldr	r3, [r7, #8]
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	e000      	b.n	801bf86 <netif_do_set_gw+0x28>
 801bf84:	2300      	movs	r3, #0
 801bf86:	68fa      	ldr	r2, [r7, #12]
 801bf88:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801bf8a:	2301      	movs	r3, #1
 801bf8c:	e000      	b.n	801bf90 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801bf8e:	2300      	movs	r3, #0
}
 801bf90:	4618      	mov	r0, r3
 801bf92:	3714      	adds	r7, #20
 801bf94:	46bd      	mov	sp, r7
 801bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf9a:	4770      	bx	lr

0801bf9c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801bf9c:	b580      	push	{r7, lr}
 801bf9e:	b088      	sub	sp, #32
 801bfa0:	af00      	add	r7, sp, #0
 801bfa2:	60f8      	str	r0, [r7, #12]
 801bfa4:	60b9      	str	r1, [r7, #8]
 801bfa6:	607a      	str	r2, [r7, #4]
 801bfa8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801bfaa:	2300      	movs	r3, #0
 801bfac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801bfae:	2300      	movs	r3, #0
 801bfb0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801bfb2:	68bb      	ldr	r3, [r7, #8]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d101      	bne.n	801bfbc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801bfb8:	4b1c      	ldr	r3, [pc, #112]	@ (801c02c <netif_set_addr+0x90>)
 801bfba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d101      	bne.n	801bfc6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801bfc2:	4b1a      	ldr	r3, [pc, #104]	@ (801c02c <netif_set_addr+0x90>)
 801bfc4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801bfc6:	683b      	ldr	r3, [r7, #0]
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d101      	bne.n	801bfd0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801bfcc:	4b17      	ldr	r3, [pc, #92]	@ (801c02c <netif_set_addr+0x90>)
 801bfce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801bfd0:	68bb      	ldr	r3, [r7, #8]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d003      	beq.n	801bfde <netif_set_addr+0x42>
 801bfd6:	68bb      	ldr	r3, [r7, #8]
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d101      	bne.n	801bfe2 <netif_set_addr+0x46>
 801bfde:	2301      	movs	r3, #1
 801bfe0:	e000      	b.n	801bfe4 <netif_set_addr+0x48>
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	617b      	str	r3, [r7, #20]
  if (remove) {
 801bfe6:	697b      	ldr	r3, [r7, #20]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d006      	beq.n	801bffa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801bfec:	f107 0310 	add.w	r3, r7, #16
 801bff0:	461a      	mov	r2, r3
 801bff2:	68b9      	ldr	r1, [r7, #8]
 801bff4:	68f8      	ldr	r0, [r7, #12]
 801bff6:	f7ff ff49 	bl	801be8c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801bffa:	69fa      	ldr	r2, [r7, #28]
 801bffc:	6879      	ldr	r1, [r7, #4]
 801bffe:	68f8      	ldr	r0, [r7, #12]
 801c000:	f7ff ff8e 	bl	801bf20 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801c004:	69ba      	ldr	r2, [r7, #24]
 801c006:	6839      	ldr	r1, [r7, #0]
 801c008:	68f8      	ldr	r0, [r7, #12]
 801c00a:	f7ff ffa8 	bl	801bf5e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801c00e:	697b      	ldr	r3, [r7, #20]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d106      	bne.n	801c022 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801c014:	f107 0310 	add.w	r3, r7, #16
 801c018:	461a      	mov	r2, r3
 801c01a:	68b9      	ldr	r1, [r7, #8]
 801c01c:	68f8      	ldr	r0, [r7, #12]
 801c01e:	f7ff ff35 	bl	801be8c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801c022:	bf00      	nop
 801c024:	3720      	adds	r7, #32
 801c026:	46bd      	mov	sp, r7
 801c028:	bd80      	pop	{r7, pc}
 801c02a:	bf00      	nop
 801c02c:	0802cf04 	.word	0x0802cf04

0801c030 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801c030:	b480      	push	{r7}
 801c032:	b083      	sub	sp, #12
 801c034:	af00      	add	r7, sp, #0
 801c036:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801c038:	4a04      	ldr	r2, [pc, #16]	@ (801c04c <netif_set_default+0x1c>)
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801c03e:	bf00      	nop
 801c040:	370c      	adds	r7, #12
 801c042:	46bd      	mov	sp, r7
 801c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c048:	4770      	bx	lr
 801c04a:	bf00      	nop
 801c04c:	2003c4cc 	.word	0x2003c4cc

0801c050 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801c050:	b580      	push	{r7, lr}
 801c052:	b082      	sub	sp, #8
 801c054:	af00      	add	r7, sp, #0
 801c056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d107      	bne.n	801c06e <netif_set_up+0x1e>
 801c05e:	4b0f      	ldr	r3, [pc, #60]	@ (801c09c <netif_set_up+0x4c>)
 801c060:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801c064:	490e      	ldr	r1, [pc, #56]	@ (801c0a0 <netif_set_up+0x50>)
 801c066:	480f      	ldr	r0, [pc, #60]	@ (801c0a4 <netif_set_up+0x54>)
 801c068:	f00a fc16 	bl	8026898 <iprintf>
 801c06c:	e013      	b.n	801c096 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c074:	f003 0301 	and.w	r3, r3, #1
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d10c      	bne.n	801c096 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c082:	f043 0301 	orr.w	r3, r3, #1
 801c086:	b2da      	uxtb	r2, r3
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801c08e:	2103      	movs	r1, #3
 801c090:	6878      	ldr	r0, [r7, #4]
 801c092:	f000 f809 	bl	801c0a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801c096:	3708      	adds	r7, #8
 801c098:	46bd      	mov	sp, r7
 801c09a:	bd80      	pop	{r7, pc}
 801c09c:	080290a8 	.word	0x080290a8
 801c0a0:	08029230 	.word	0x08029230
 801c0a4:	080290f8 	.word	0x080290f8

0801c0a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801c0a8:	b580      	push	{r7, lr}
 801c0aa:	b082      	sub	sp, #8
 801c0ac:	af00      	add	r7, sp, #0
 801c0ae:	6078      	str	r0, [r7, #4]
 801c0b0:	460b      	mov	r3, r1
 801c0b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	d106      	bne.n	801c0c8 <netif_issue_reports+0x20>
 801c0ba:	4b18      	ldr	r3, [pc, #96]	@ (801c11c <netif_issue_reports+0x74>)
 801c0bc:	f240 326d 	movw	r2, #877	@ 0x36d
 801c0c0:	4917      	ldr	r1, [pc, #92]	@ (801c120 <netif_issue_reports+0x78>)
 801c0c2:	4818      	ldr	r0, [pc, #96]	@ (801c124 <netif_issue_reports+0x7c>)
 801c0c4:	f00a fbe8 	bl	8026898 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c0ce:	f003 0304 	and.w	r3, r3, #4
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d01e      	beq.n	801c114 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c0dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d017      	beq.n	801c114 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801c0e4:	78fb      	ldrb	r3, [r7, #3]
 801c0e6:	f003 0301 	and.w	r3, r3, #1
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d013      	beq.n	801c116 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	3304      	adds	r3, #4
 801c0f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d00e      	beq.n	801c116 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c0fe:	f003 0308 	and.w	r3, r3, #8
 801c102:	2b00      	cmp	r3, #0
 801c104:	d007      	beq.n	801c116 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	3304      	adds	r3, #4
 801c10a:	4619      	mov	r1, r3
 801c10c:	6878      	ldr	r0, [r7, #4]
 801c10e:	f007 fded 	bl	8023cec <etharp_request>
 801c112:	e000      	b.n	801c116 <netif_issue_reports+0x6e>
    return;
 801c114:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801c116:	3708      	adds	r7, #8
 801c118:	46bd      	mov	sp, r7
 801c11a:	bd80      	pop	{r7, pc}
 801c11c:	080290a8 	.word	0x080290a8
 801c120:	0802924c 	.word	0x0802924c
 801c124:	080290f8 	.word	0x080290f8

0801c128 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801c128:	b580      	push	{r7, lr}
 801c12a:	b082      	sub	sp, #8
 801c12c:	af00      	add	r7, sp, #0
 801c12e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d107      	bne.n	801c146 <netif_set_down+0x1e>
 801c136:	4b12      	ldr	r3, [pc, #72]	@ (801c180 <netif_set_down+0x58>)
 801c138:	f240 329b 	movw	r2, #923	@ 0x39b
 801c13c:	4911      	ldr	r1, [pc, #68]	@ (801c184 <netif_set_down+0x5c>)
 801c13e:	4812      	ldr	r0, [pc, #72]	@ (801c188 <netif_set_down+0x60>)
 801c140:	f00a fbaa 	bl	8026898 <iprintf>
 801c144:	e019      	b.n	801c17a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c14c:	f003 0301 	and.w	r3, r3, #1
 801c150:	2b00      	cmp	r3, #0
 801c152:	d012      	beq.n	801c17a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c15a:	f023 0301 	bic.w	r3, r3, #1
 801c15e:	b2da      	uxtb	r2, r3
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c16c:	f003 0308 	and.w	r3, r3, #8
 801c170:	2b00      	cmp	r3, #0
 801c172:	d002      	beq.n	801c17a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801c174:	6878      	ldr	r0, [r7, #4]
 801c176:	f007 f977 	bl	8023468 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801c17a:	3708      	adds	r7, #8
 801c17c:	46bd      	mov	sp, r7
 801c17e:	bd80      	pop	{r7, pc}
 801c180:	080290a8 	.word	0x080290a8
 801c184:	08029270 	.word	0x08029270
 801c188:	080290f8 	.word	0x080290f8

0801c18c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801c18c:	b580      	push	{r7, lr}
 801c18e:	b082      	sub	sp, #8
 801c190:	af00      	add	r7, sp, #0
 801c192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	2b00      	cmp	r3, #0
 801c198:	d107      	bne.n	801c1aa <netif_set_link_up+0x1e>
 801c19a:	4b13      	ldr	r3, [pc, #76]	@ (801c1e8 <netif_set_link_up+0x5c>)
 801c19c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801c1a0:	4912      	ldr	r1, [pc, #72]	@ (801c1ec <netif_set_link_up+0x60>)
 801c1a2:	4813      	ldr	r0, [pc, #76]	@ (801c1f0 <netif_set_link_up+0x64>)
 801c1a4:	f00a fb78 	bl	8026898 <iprintf>
 801c1a8:	e01b      	b.n	801c1e2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c1b0:	f003 0304 	and.w	r3, r3, #4
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d114      	bne.n	801c1e2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c1be:	f043 0304 	orr.w	r3, r3, #4
 801c1c2:	b2da      	uxtb	r2, r3
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801c1ca:	2103      	movs	r1, #3
 801c1cc:	6878      	ldr	r0, [r7, #4]
 801c1ce:	f7ff ff6b 	bl	801c0a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	69db      	ldr	r3, [r3, #28]
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	d003      	beq.n	801c1e2 <netif_set_link_up+0x56>
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	69db      	ldr	r3, [r3, #28]
 801c1de:	6878      	ldr	r0, [r7, #4]
 801c1e0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801c1e2:	3708      	adds	r7, #8
 801c1e4:	46bd      	mov	sp, r7
 801c1e6:	bd80      	pop	{r7, pc}
 801c1e8:	080290a8 	.word	0x080290a8
 801c1ec:	08029290 	.word	0x08029290
 801c1f0:	080290f8 	.word	0x080290f8

0801c1f4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801c1f4:	b580      	push	{r7, lr}
 801c1f6:	b082      	sub	sp, #8
 801c1f8:	af00      	add	r7, sp, #0
 801c1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d107      	bne.n	801c212 <netif_set_link_down+0x1e>
 801c202:	4b11      	ldr	r3, [pc, #68]	@ (801c248 <netif_set_link_down+0x54>)
 801c204:	f240 4206 	movw	r2, #1030	@ 0x406
 801c208:	4910      	ldr	r1, [pc, #64]	@ (801c24c <netif_set_link_down+0x58>)
 801c20a:	4811      	ldr	r0, [pc, #68]	@ (801c250 <netif_set_link_down+0x5c>)
 801c20c:	f00a fb44 	bl	8026898 <iprintf>
 801c210:	e017      	b.n	801c242 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c218:	f003 0304 	and.w	r3, r3, #4
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d010      	beq.n	801c242 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c226:	f023 0304 	bic.w	r3, r3, #4
 801c22a:	b2da      	uxtb	r2, r3
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	69db      	ldr	r3, [r3, #28]
 801c236:	2b00      	cmp	r3, #0
 801c238:	d003      	beq.n	801c242 <netif_set_link_down+0x4e>
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	69db      	ldr	r3, [r3, #28]
 801c23e:	6878      	ldr	r0, [r7, #4]
 801c240:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801c242:	3708      	adds	r7, #8
 801c244:	46bd      	mov	sp, r7
 801c246:	bd80      	pop	{r7, pc}
 801c248:	080290a8 	.word	0x080290a8
 801c24c:	080292b4 	.word	0x080292b4
 801c250:	080290f8 	.word	0x080290f8

0801c254 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801c254:	b480      	push	{r7}
 801c256:	b083      	sub	sp, #12
 801c258:	af00      	add	r7, sp, #0
 801c25a:	6078      	str	r0, [r7, #4]
 801c25c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	2b00      	cmp	r3, #0
 801c262:	d002      	beq.n	801c26a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	683a      	ldr	r2, [r7, #0]
 801c268:	61da      	str	r2, [r3, #28]
  }
}
 801c26a:	bf00      	nop
 801c26c:	370c      	adds	r7, #12
 801c26e:	46bd      	mov	sp, r7
 801c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c274:	4770      	bx	lr

0801c276 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801c276:	b480      	push	{r7}
 801c278:	b085      	sub	sp, #20
 801c27a:	af00      	add	r7, sp, #0
 801c27c:	60f8      	str	r0, [r7, #12]
 801c27e:	60b9      	str	r1, [r7, #8]
 801c280:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801c282:	f06f 030b 	mvn.w	r3, #11
}
 801c286:	4618      	mov	r0, r3
 801c288:	3714      	adds	r7, #20
 801c28a:	46bd      	mov	sp, r7
 801c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c290:	4770      	bx	lr
	...

0801c294 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801c294:	b480      	push	{r7}
 801c296:	b085      	sub	sp, #20
 801c298:	af00      	add	r7, sp, #0
 801c29a:	4603      	mov	r3, r0
 801c29c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801c29e:	79fb      	ldrb	r3, [r7, #7]
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d013      	beq.n	801c2cc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801c2a4:	4b0d      	ldr	r3, [pc, #52]	@ (801c2dc <netif_get_by_index+0x48>)
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	60fb      	str	r3, [r7, #12]
 801c2aa:	e00c      	b.n	801c2c6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801c2ac:	68fb      	ldr	r3, [r7, #12]
 801c2ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c2b2:	3301      	adds	r3, #1
 801c2b4:	b2db      	uxtb	r3, r3
 801c2b6:	79fa      	ldrb	r2, [r7, #7]
 801c2b8:	429a      	cmp	r2, r3
 801c2ba:	d101      	bne.n	801c2c0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	e006      	b.n	801c2ce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	60fb      	str	r3, [r7, #12]
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d1ef      	bne.n	801c2ac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801c2cc:	2300      	movs	r3, #0
}
 801c2ce:	4618      	mov	r0, r3
 801c2d0:	3714      	adds	r7, #20
 801c2d2:	46bd      	mov	sp, r7
 801c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2d8:	4770      	bx	lr
 801c2da:	bf00      	nop
 801c2dc:	2003c4c8 	.word	0x2003c4c8

0801c2e0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801c2e0:	b580      	push	{r7, lr}
 801c2e2:	b082      	sub	sp, #8
 801c2e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801c2e6:	f009 f9ab 	bl	8025640 <sys_arch_protect>
 801c2ea:	6038      	str	r0, [r7, #0]
 801c2ec:	4b0d      	ldr	r3, [pc, #52]	@ (801c324 <pbuf_free_ooseq+0x44>)
 801c2ee:	2200      	movs	r2, #0
 801c2f0:	701a      	strb	r2, [r3, #0]
 801c2f2:	6838      	ldr	r0, [r7, #0]
 801c2f4:	f009 f9b2 	bl	802565c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801c2f8:	4b0b      	ldr	r3, [pc, #44]	@ (801c328 <pbuf_free_ooseq+0x48>)
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	607b      	str	r3, [r7, #4]
 801c2fe:	e00a      	b.n	801c316 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c304:	2b00      	cmp	r3, #0
 801c306:	d003      	beq.n	801c310 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801c308:	6878      	ldr	r0, [r7, #4]
 801c30a:	f002 f981 	bl	801e610 <tcp_free_ooseq>
      return;
 801c30e:	e005      	b.n	801c31c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	68db      	ldr	r3, [r3, #12]
 801c314:	607b      	str	r3, [r7, #4]
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d1f1      	bne.n	801c300 <pbuf_free_ooseq+0x20>
    }
  }
}
 801c31c:	3708      	adds	r7, #8
 801c31e:	46bd      	mov	sp, r7
 801c320:	bd80      	pop	{r7, pc}
 801c322:	bf00      	nop
 801c324:	2003c4d1 	.word	0x2003c4d1
 801c328:	2003c4e0 	.word	0x2003c4e0

0801c32c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801c32c:	b580      	push	{r7, lr}
 801c32e:	b082      	sub	sp, #8
 801c330:	af00      	add	r7, sp, #0
 801c332:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801c334:	f7ff ffd4 	bl	801c2e0 <pbuf_free_ooseq>
}
 801c338:	bf00      	nop
 801c33a:	3708      	adds	r7, #8
 801c33c:	46bd      	mov	sp, r7
 801c33e:	bd80      	pop	{r7, pc}

0801c340 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801c340:	b580      	push	{r7, lr}
 801c342:	b082      	sub	sp, #8
 801c344:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801c346:	f009 f97b 	bl	8025640 <sys_arch_protect>
 801c34a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801c34c:	4b0f      	ldr	r3, [pc, #60]	@ (801c38c <pbuf_pool_is_empty+0x4c>)
 801c34e:	781b      	ldrb	r3, [r3, #0]
 801c350:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801c352:	4b0e      	ldr	r3, [pc, #56]	@ (801c38c <pbuf_pool_is_empty+0x4c>)
 801c354:	2201      	movs	r2, #1
 801c356:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801c358:	6878      	ldr	r0, [r7, #4]
 801c35a:	f009 f97f 	bl	802565c <sys_arch_unprotect>

  if (!queued) {
 801c35e:	78fb      	ldrb	r3, [r7, #3]
 801c360:	2b00      	cmp	r3, #0
 801c362:	d10f      	bne.n	801c384 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801c364:	2100      	movs	r1, #0
 801c366:	480a      	ldr	r0, [pc, #40]	@ (801c390 <pbuf_pool_is_empty+0x50>)
 801c368:	f7fe fdfc 	bl	801af64 <tcpip_try_callback>
 801c36c:	4603      	mov	r3, r0
 801c36e:	2b00      	cmp	r3, #0
 801c370:	d008      	beq.n	801c384 <pbuf_pool_is_empty+0x44>
 801c372:	f009 f965 	bl	8025640 <sys_arch_protect>
 801c376:	6078      	str	r0, [r7, #4]
 801c378:	4b04      	ldr	r3, [pc, #16]	@ (801c38c <pbuf_pool_is_empty+0x4c>)
 801c37a:	2200      	movs	r2, #0
 801c37c:	701a      	strb	r2, [r3, #0]
 801c37e:	6878      	ldr	r0, [r7, #4]
 801c380:	f009 f96c 	bl	802565c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801c384:	bf00      	nop
 801c386:	3708      	adds	r7, #8
 801c388:	46bd      	mov	sp, r7
 801c38a:	bd80      	pop	{r7, pc}
 801c38c:	2003c4d1 	.word	0x2003c4d1
 801c390:	0801c32d 	.word	0x0801c32d

0801c394 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801c394:	b480      	push	{r7}
 801c396:	b085      	sub	sp, #20
 801c398:	af00      	add	r7, sp, #0
 801c39a:	60f8      	str	r0, [r7, #12]
 801c39c:	60b9      	str	r1, [r7, #8]
 801c39e:	4611      	mov	r1, r2
 801c3a0:	461a      	mov	r2, r3
 801c3a2:	460b      	mov	r3, r1
 801c3a4:	80fb      	strh	r3, [r7, #6]
 801c3a6:	4613      	mov	r3, r2
 801c3a8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	2200      	movs	r2, #0
 801c3ae:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	68ba      	ldr	r2, [r7, #8]
 801c3b4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	88fa      	ldrh	r2, [r7, #6]
 801c3ba:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	88ba      	ldrh	r2, [r7, #4]
 801c3c0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801c3c2:	8b3b      	ldrh	r3, [r7, #24]
 801c3c4:	b2da      	uxtb	r2, r3
 801c3c6:	68fb      	ldr	r3, [r7, #12]
 801c3c8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	7f3a      	ldrb	r2, [r7, #28]
 801c3ce:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	2201      	movs	r2, #1
 801c3d4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	2200      	movs	r2, #0
 801c3da:	73da      	strb	r2, [r3, #15]
}
 801c3dc:	bf00      	nop
 801c3de:	3714      	adds	r7, #20
 801c3e0:	46bd      	mov	sp, r7
 801c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3e6:	4770      	bx	lr

0801c3e8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801c3e8:	b580      	push	{r7, lr}
 801c3ea:	b08c      	sub	sp, #48	@ 0x30
 801c3ec:	af02      	add	r7, sp, #8
 801c3ee:	4603      	mov	r3, r0
 801c3f0:	71fb      	strb	r3, [r7, #7]
 801c3f2:	460b      	mov	r3, r1
 801c3f4:	80bb      	strh	r3, [r7, #4]
 801c3f6:	4613      	mov	r3, r2
 801c3f8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801c3fa:	79fb      	ldrb	r3, [r7, #7]
 801c3fc:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801c3fe:	887b      	ldrh	r3, [r7, #2]
 801c400:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801c404:	d07f      	beq.n	801c506 <pbuf_alloc+0x11e>
 801c406:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801c40a:	f300 80c7 	bgt.w	801c59c <pbuf_alloc+0x1b4>
 801c40e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801c412:	d010      	beq.n	801c436 <pbuf_alloc+0x4e>
 801c414:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801c418:	f300 80c0 	bgt.w	801c59c <pbuf_alloc+0x1b4>
 801c41c:	2b01      	cmp	r3, #1
 801c41e:	d002      	beq.n	801c426 <pbuf_alloc+0x3e>
 801c420:	2b41      	cmp	r3, #65	@ 0x41
 801c422:	f040 80bb 	bne.w	801c59c <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801c426:	887a      	ldrh	r2, [r7, #2]
 801c428:	88bb      	ldrh	r3, [r7, #4]
 801c42a:	4619      	mov	r1, r3
 801c42c:	2000      	movs	r0, #0
 801c42e:	f000 f8d1 	bl	801c5d4 <pbuf_alloc_reference>
 801c432:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801c434:	e0bc      	b.n	801c5b0 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801c436:	2300      	movs	r3, #0
 801c438:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801c43a:	2300      	movs	r3, #0
 801c43c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801c43e:	88bb      	ldrh	r3, [r7, #4]
 801c440:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c442:	200c      	movs	r0, #12
 801c444:	f7ff fb9a 	bl	801bb7c <memp_malloc>
 801c448:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801c44a:	693b      	ldr	r3, [r7, #16]
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d109      	bne.n	801c464 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801c450:	f7ff ff76 	bl	801c340 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801c454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c456:	2b00      	cmp	r3, #0
 801c458:	d002      	beq.n	801c460 <pbuf_alloc+0x78>
            pbuf_free(p);
 801c45a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c45c:	f000 faa6 	bl	801c9ac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801c460:	2300      	movs	r3, #0
 801c462:	e0a6      	b.n	801c5b2 <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c464:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c466:	3303      	adds	r3, #3
 801c468:	b29b      	uxth	r3, r3
 801c46a:	f023 0303 	bic.w	r3, r3, #3
 801c46e:	b29b      	uxth	r3, r3
 801c470:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801c474:	b29b      	uxth	r3, r3
 801c476:	8b7a      	ldrh	r2, [r7, #26]
 801c478:	4293      	cmp	r3, r2
 801c47a:	bf28      	it	cs
 801c47c:	4613      	movcs	r3, r2
 801c47e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801c480:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c482:	3310      	adds	r3, #16
 801c484:	693a      	ldr	r2, [r7, #16]
 801c486:	4413      	add	r3, r2
 801c488:	3303      	adds	r3, #3
 801c48a:	f023 0303 	bic.w	r3, r3, #3
 801c48e:	4618      	mov	r0, r3
 801c490:	89f9      	ldrh	r1, [r7, #14]
 801c492:	8b7a      	ldrh	r2, [r7, #26]
 801c494:	2300      	movs	r3, #0
 801c496:	9301      	str	r3, [sp, #4]
 801c498:	887b      	ldrh	r3, [r7, #2]
 801c49a:	9300      	str	r3, [sp, #0]
 801c49c:	460b      	mov	r3, r1
 801c49e:	4601      	mov	r1, r0
 801c4a0:	6938      	ldr	r0, [r7, #16]
 801c4a2:	f7ff ff77 	bl	801c394 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801c4a6:	693b      	ldr	r3, [r7, #16]
 801c4a8:	685b      	ldr	r3, [r3, #4]
 801c4aa:	f003 0303 	and.w	r3, r3, #3
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d006      	beq.n	801c4c0 <pbuf_alloc+0xd8>
 801c4b2:	4b42      	ldr	r3, [pc, #264]	@ (801c5bc <pbuf_alloc+0x1d4>)
 801c4b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c4b8:	4941      	ldr	r1, [pc, #260]	@ (801c5c0 <pbuf_alloc+0x1d8>)
 801c4ba:	4842      	ldr	r0, [pc, #264]	@ (801c5c4 <pbuf_alloc+0x1dc>)
 801c4bc:	f00a f9ec 	bl	8026898 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801c4c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c4c2:	3303      	adds	r3, #3
 801c4c4:	f023 0303 	bic.w	r3, r3, #3
 801c4c8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 801c4cc:	d106      	bne.n	801c4dc <pbuf_alloc+0xf4>
 801c4ce:	4b3b      	ldr	r3, [pc, #236]	@ (801c5bc <pbuf_alloc+0x1d4>)
 801c4d0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801c4d4:	493c      	ldr	r1, [pc, #240]	@ (801c5c8 <pbuf_alloc+0x1e0>)
 801c4d6:	483b      	ldr	r0, [pc, #236]	@ (801c5c4 <pbuf_alloc+0x1dc>)
 801c4d8:	f00a f9de 	bl	8026898 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801c4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d102      	bne.n	801c4e8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801c4e2:	693b      	ldr	r3, [r7, #16]
 801c4e4:	627b      	str	r3, [r7, #36]	@ 0x24
 801c4e6:	e002      	b.n	801c4ee <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801c4e8:	69fb      	ldr	r3, [r7, #28]
 801c4ea:	693a      	ldr	r2, [r7, #16]
 801c4ec:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801c4ee:	693b      	ldr	r3, [r7, #16]
 801c4f0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801c4f2:	8b7a      	ldrh	r2, [r7, #26]
 801c4f4:	89fb      	ldrh	r3, [r7, #14]
 801c4f6:	1ad3      	subs	r3, r2, r3
 801c4f8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801c4fa:	2300      	movs	r3, #0
 801c4fc:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801c4fe:	8b7b      	ldrh	r3, [r7, #26]
 801c500:	2b00      	cmp	r3, #0
 801c502:	d19e      	bne.n	801c442 <pbuf_alloc+0x5a>
      break;
 801c504:	e054      	b.n	801c5b0 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801c506:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c508:	3303      	adds	r3, #3
 801c50a:	b29b      	uxth	r3, r3
 801c50c:	f023 0303 	bic.w	r3, r3, #3
 801c510:	b29a      	uxth	r2, r3
 801c512:	88bb      	ldrh	r3, [r7, #4]
 801c514:	3303      	adds	r3, #3
 801c516:	b29b      	uxth	r3, r3
 801c518:	f023 0303 	bic.w	r3, r3, #3
 801c51c:	b29b      	uxth	r3, r3
 801c51e:	4413      	add	r3, r2
 801c520:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801c522:	8b3b      	ldrh	r3, [r7, #24]
 801c524:	3310      	adds	r3, #16
 801c526:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801c528:	8b3a      	ldrh	r2, [r7, #24]
 801c52a:	88bb      	ldrh	r3, [r7, #4]
 801c52c:	3303      	adds	r3, #3
 801c52e:	f023 0303 	bic.w	r3, r3, #3
 801c532:	429a      	cmp	r2, r3
 801c534:	d306      	bcc.n	801c544 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801c536:	88bb      	ldrh	r3, [r7, #4]
 801c538:	3303      	adds	r3, #3
 801c53a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801c53e:	697a      	ldr	r2, [r7, #20]
 801c540:	429a      	cmp	r2, r3
 801c542:	d201      	bcs.n	801c548 <pbuf_alloc+0x160>
        return NULL;
 801c544:	2300      	movs	r3, #0
 801c546:	e034      	b.n	801c5b2 <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801c548:	6978      	ldr	r0, [r7, #20]
 801c54a:	f7ff f97b 	bl	801b844 <mem_malloc>
 801c54e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801c550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c552:	2b00      	cmp	r3, #0
 801c554:	d101      	bne.n	801c55a <pbuf_alloc+0x172>
        return NULL;
 801c556:	2300      	movs	r3, #0
 801c558:	e02b      	b.n	801c5b2 <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801c55a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c55c:	3310      	adds	r3, #16
 801c55e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c560:	4413      	add	r3, r2
 801c562:	3303      	adds	r3, #3
 801c564:	f023 0303 	bic.w	r3, r3, #3
 801c568:	4618      	mov	r0, r3
 801c56a:	88b9      	ldrh	r1, [r7, #4]
 801c56c:	88ba      	ldrh	r2, [r7, #4]
 801c56e:	2300      	movs	r3, #0
 801c570:	9301      	str	r3, [sp, #4]
 801c572:	887b      	ldrh	r3, [r7, #2]
 801c574:	9300      	str	r3, [sp, #0]
 801c576:	460b      	mov	r3, r1
 801c578:	4601      	mov	r1, r0
 801c57a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c57c:	f7ff ff0a 	bl	801c394 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801c580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c582:	685b      	ldr	r3, [r3, #4]
 801c584:	f003 0303 	and.w	r3, r3, #3
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d010      	beq.n	801c5ae <pbuf_alloc+0x1c6>
 801c58c:	4b0b      	ldr	r3, [pc, #44]	@ (801c5bc <pbuf_alloc+0x1d4>)
 801c58e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801c592:	490e      	ldr	r1, [pc, #56]	@ (801c5cc <pbuf_alloc+0x1e4>)
 801c594:	480b      	ldr	r0, [pc, #44]	@ (801c5c4 <pbuf_alloc+0x1dc>)
 801c596:	f00a f97f 	bl	8026898 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801c59a:	e008      	b.n	801c5ae <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801c59c:	4b07      	ldr	r3, [pc, #28]	@ (801c5bc <pbuf_alloc+0x1d4>)
 801c59e:	f240 1227 	movw	r2, #295	@ 0x127
 801c5a2:	490b      	ldr	r1, [pc, #44]	@ (801c5d0 <pbuf_alloc+0x1e8>)
 801c5a4:	4807      	ldr	r0, [pc, #28]	@ (801c5c4 <pbuf_alloc+0x1dc>)
 801c5a6:	f00a f977 	bl	8026898 <iprintf>
      return NULL;
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	e001      	b.n	801c5b2 <pbuf_alloc+0x1ca>
      break;
 801c5ae:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801c5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801c5b2:	4618      	mov	r0, r3
 801c5b4:	3728      	adds	r7, #40	@ 0x28
 801c5b6:	46bd      	mov	sp, r7
 801c5b8:	bd80      	pop	{r7, pc}
 801c5ba:	bf00      	nop
 801c5bc:	080292d8 	.word	0x080292d8
 801c5c0:	08029308 	.word	0x08029308
 801c5c4:	08029338 	.word	0x08029338
 801c5c8:	08029360 	.word	0x08029360
 801c5cc:	08029394 	.word	0x08029394
 801c5d0:	080293c0 	.word	0x080293c0

0801c5d4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	b086      	sub	sp, #24
 801c5d8:	af02      	add	r7, sp, #8
 801c5da:	6078      	str	r0, [r7, #4]
 801c5dc:	460b      	mov	r3, r1
 801c5de:	807b      	strh	r3, [r7, #2]
 801c5e0:	4613      	mov	r3, r2
 801c5e2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801c5e4:	883b      	ldrh	r3, [r7, #0]
 801c5e6:	2b41      	cmp	r3, #65	@ 0x41
 801c5e8:	d009      	beq.n	801c5fe <pbuf_alloc_reference+0x2a>
 801c5ea:	883b      	ldrh	r3, [r7, #0]
 801c5ec:	2b01      	cmp	r3, #1
 801c5ee:	d006      	beq.n	801c5fe <pbuf_alloc_reference+0x2a>
 801c5f0:	4b0f      	ldr	r3, [pc, #60]	@ (801c630 <pbuf_alloc_reference+0x5c>)
 801c5f2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801c5f6:	490f      	ldr	r1, [pc, #60]	@ (801c634 <pbuf_alloc_reference+0x60>)
 801c5f8:	480f      	ldr	r0, [pc, #60]	@ (801c638 <pbuf_alloc_reference+0x64>)
 801c5fa:	f00a f94d 	bl	8026898 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801c5fe:	200b      	movs	r0, #11
 801c600:	f7ff fabc 	bl	801bb7c <memp_malloc>
 801c604:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d101      	bne.n	801c610 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801c60c:	2300      	movs	r3, #0
 801c60e:	e00b      	b.n	801c628 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801c610:	8879      	ldrh	r1, [r7, #2]
 801c612:	887a      	ldrh	r2, [r7, #2]
 801c614:	2300      	movs	r3, #0
 801c616:	9301      	str	r3, [sp, #4]
 801c618:	883b      	ldrh	r3, [r7, #0]
 801c61a:	9300      	str	r3, [sp, #0]
 801c61c:	460b      	mov	r3, r1
 801c61e:	6879      	ldr	r1, [r7, #4]
 801c620:	68f8      	ldr	r0, [r7, #12]
 801c622:	f7ff feb7 	bl	801c394 <pbuf_init_alloced_pbuf>
  return p;
 801c626:	68fb      	ldr	r3, [r7, #12]
}
 801c628:	4618      	mov	r0, r3
 801c62a:	3710      	adds	r7, #16
 801c62c:	46bd      	mov	sp, r7
 801c62e:	bd80      	pop	{r7, pc}
 801c630:	080292d8 	.word	0x080292d8
 801c634:	080293dc 	.word	0x080293dc
 801c638:	08029338 	.word	0x08029338

0801c63c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801c63c:	b580      	push	{r7, lr}
 801c63e:	b088      	sub	sp, #32
 801c640:	af02      	add	r7, sp, #8
 801c642:	607b      	str	r3, [r7, #4]
 801c644:	4603      	mov	r3, r0
 801c646:	73fb      	strb	r3, [r7, #15]
 801c648:	460b      	mov	r3, r1
 801c64a:	81bb      	strh	r3, [r7, #12]
 801c64c:	4613      	mov	r3, r2
 801c64e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801c650:	7bfb      	ldrb	r3, [r7, #15]
 801c652:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c654:	8a7b      	ldrh	r3, [r7, #18]
 801c656:	3303      	adds	r3, #3
 801c658:	f023 0203 	bic.w	r2, r3, #3
 801c65c:	89bb      	ldrh	r3, [r7, #12]
 801c65e:	441a      	add	r2, r3
 801c660:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c662:	429a      	cmp	r2, r3
 801c664:	d901      	bls.n	801c66a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801c666:	2300      	movs	r3, #0
 801c668:	e018      	b.n	801c69c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801c66a:	6a3b      	ldr	r3, [r7, #32]
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d007      	beq.n	801c680 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801c670:	8a7b      	ldrh	r3, [r7, #18]
 801c672:	3303      	adds	r3, #3
 801c674:	f023 0303 	bic.w	r3, r3, #3
 801c678:	6a3a      	ldr	r2, [r7, #32]
 801c67a:	4413      	add	r3, r2
 801c67c:	617b      	str	r3, [r7, #20]
 801c67e:	e001      	b.n	801c684 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801c680:	2300      	movs	r3, #0
 801c682:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801c684:	6878      	ldr	r0, [r7, #4]
 801c686:	89b9      	ldrh	r1, [r7, #12]
 801c688:	89ba      	ldrh	r2, [r7, #12]
 801c68a:	2302      	movs	r3, #2
 801c68c:	9301      	str	r3, [sp, #4]
 801c68e:	897b      	ldrh	r3, [r7, #10]
 801c690:	9300      	str	r3, [sp, #0]
 801c692:	460b      	mov	r3, r1
 801c694:	6979      	ldr	r1, [r7, #20]
 801c696:	f7ff fe7d 	bl	801c394 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801c69a:	687b      	ldr	r3, [r7, #4]
}
 801c69c:	4618      	mov	r0, r3
 801c69e:	3718      	adds	r7, #24
 801c6a0:	46bd      	mov	sp, r7
 801c6a2:	bd80      	pop	{r7, pc}

0801c6a4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801c6a4:	b580      	push	{r7, lr}
 801c6a6:	b084      	sub	sp, #16
 801c6a8:	af00      	add	r7, sp, #0
 801c6aa:	6078      	str	r0, [r7, #4]
 801c6ac:	460b      	mov	r3, r1
 801c6ae:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d106      	bne.n	801c6c4 <pbuf_realloc+0x20>
 801c6b6:	4b39      	ldr	r3, [pc, #228]	@ (801c79c <pbuf_realloc+0xf8>)
 801c6b8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801c6bc:	4938      	ldr	r1, [pc, #224]	@ (801c7a0 <pbuf_realloc+0xfc>)
 801c6be:	4839      	ldr	r0, [pc, #228]	@ (801c7a4 <pbuf_realloc+0x100>)
 801c6c0:	f00a f8ea 	bl	8026898 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	891b      	ldrh	r3, [r3, #8]
 801c6c8:	887a      	ldrh	r2, [r7, #2]
 801c6ca:	429a      	cmp	r2, r3
 801c6cc:	d261      	bcs.n	801c792 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	891a      	ldrh	r2, [r3, #8]
 801c6d2:	887b      	ldrh	r3, [r7, #2]
 801c6d4:	1ad3      	subs	r3, r2, r3
 801c6d6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801c6d8:	887b      	ldrh	r3, [r7, #2]
 801c6da:	817b      	strh	r3, [r7, #10]
  q = p;
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801c6e0:	e018      	b.n	801c714 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801c6e2:	68fb      	ldr	r3, [r7, #12]
 801c6e4:	895b      	ldrh	r3, [r3, #10]
 801c6e6:	897a      	ldrh	r2, [r7, #10]
 801c6e8:	1ad3      	subs	r3, r2, r3
 801c6ea:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	891a      	ldrh	r2, [r3, #8]
 801c6f0:	893b      	ldrh	r3, [r7, #8]
 801c6f2:	1ad3      	subs	r3, r2, r3
 801c6f4:	b29a      	uxth	r2, r3
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	2b00      	cmp	r3, #0
 801c704:	d106      	bne.n	801c714 <pbuf_realloc+0x70>
 801c706:	4b25      	ldr	r3, [pc, #148]	@ (801c79c <pbuf_realloc+0xf8>)
 801c708:	f240 12af 	movw	r2, #431	@ 0x1af
 801c70c:	4926      	ldr	r1, [pc, #152]	@ (801c7a8 <pbuf_realloc+0x104>)
 801c70e:	4825      	ldr	r0, [pc, #148]	@ (801c7a4 <pbuf_realloc+0x100>)
 801c710:	f00a f8c2 	bl	8026898 <iprintf>
  while (rem_len > q->len) {
 801c714:	68fb      	ldr	r3, [r7, #12]
 801c716:	895b      	ldrh	r3, [r3, #10]
 801c718:	897a      	ldrh	r2, [r7, #10]
 801c71a:	429a      	cmp	r2, r3
 801c71c:	d8e1      	bhi.n	801c6e2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	7b1b      	ldrb	r3, [r3, #12]
 801c722:	f003 030f 	and.w	r3, r3, #15
 801c726:	2b00      	cmp	r3, #0
 801c728:	d11f      	bne.n	801c76a <pbuf_realloc+0xc6>
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	895b      	ldrh	r3, [r3, #10]
 801c72e:	897a      	ldrh	r2, [r7, #10]
 801c730:	429a      	cmp	r2, r3
 801c732:	d01a      	beq.n	801c76a <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801c734:	68fb      	ldr	r3, [r7, #12]
 801c736:	7b5b      	ldrb	r3, [r3, #13]
 801c738:	f003 0302 	and.w	r3, r3, #2
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d114      	bne.n	801c76a <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	685a      	ldr	r2, [r3, #4]
 801c744:	68fb      	ldr	r3, [r7, #12]
 801c746:	1ad2      	subs	r2, r2, r3
 801c748:	897b      	ldrh	r3, [r7, #10]
 801c74a:	4413      	add	r3, r2
 801c74c:	4619      	mov	r1, r3
 801c74e:	68f8      	ldr	r0, [r7, #12]
 801c750:	f7fe ff76 	bl	801b640 <mem_trim>
 801c754:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d106      	bne.n	801c76a <pbuf_realloc+0xc6>
 801c75c:	4b0f      	ldr	r3, [pc, #60]	@ (801c79c <pbuf_realloc+0xf8>)
 801c75e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801c762:	4912      	ldr	r1, [pc, #72]	@ (801c7ac <pbuf_realloc+0x108>)
 801c764:	480f      	ldr	r0, [pc, #60]	@ (801c7a4 <pbuf_realloc+0x100>)
 801c766:	f00a f897 	bl	8026898 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	897a      	ldrh	r2, [r7, #10]
 801c76e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	895a      	ldrh	r2, [r3, #10]
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d004      	beq.n	801c78a <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801c780:	68fb      	ldr	r3, [r7, #12]
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	4618      	mov	r0, r3
 801c786:	f000 f911 	bl	801c9ac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	2200      	movs	r2, #0
 801c78e:	601a      	str	r2, [r3, #0]
 801c790:	e000      	b.n	801c794 <pbuf_realloc+0xf0>
    return;
 801c792:	bf00      	nop

}
 801c794:	3710      	adds	r7, #16
 801c796:	46bd      	mov	sp, r7
 801c798:	bd80      	pop	{r7, pc}
 801c79a:	bf00      	nop
 801c79c:	080292d8 	.word	0x080292d8
 801c7a0:	080293f0 	.word	0x080293f0
 801c7a4:	08029338 	.word	0x08029338
 801c7a8:	08029408 	.word	0x08029408
 801c7ac:	08029420 	.word	0x08029420

0801c7b0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801c7b0:	b580      	push	{r7, lr}
 801c7b2:	b086      	sub	sp, #24
 801c7b4:	af00      	add	r7, sp, #0
 801c7b6:	60f8      	str	r0, [r7, #12]
 801c7b8:	60b9      	str	r1, [r7, #8]
 801c7ba:	4613      	mov	r3, r2
 801c7bc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801c7be:	68fb      	ldr	r3, [r7, #12]
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d106      	bne.n	801c7d2 <pbuf_add_header_impl+0x22>
 801c7c4:	4b2b      	ldr	r3, [pc, #172]	@ (801c874 <pbuf_add_header_impl+0xc4>)
 801c7c6:	f240 12df 	movw	r2, #479	@ 0x1df
 801c7ca:	492b      	ldr	r1, [pc, #172]	@ (801c878 <pbuf_add_header_impl+0xc8>)
 801c7cc:	482b      	ldr	r0, [pc, #172]	@ (801c87c <pbuf_add_header_impl+0xcc>)
 801c7ce:	f00a f863 	bl	8026898 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d003      	beq.n	801c7e0 <pbuf_add_header_impl+0x30>
 801c7d8:	68bb      	ldr	r3, [r7, #8]
 801c7da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c7de:	d301      	bcc.n	801c7e4 <pbuf_add_header_impl+0x34>
    return 1;
 801c7e0:	2301      	movs	r3, #1
 801c7e2:	e043      	b.n	801c86c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801c7e4:	68bb      	ldr	r3, [r7, #8]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d101      	bne.n	801c7ee <pbuf_add_header_impl+0x3e>
    return 0;
 801c7ea:	2300      	movs	r3, #0
 801c7ec:	e03e      	b.n	801c86c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801c7ee:	68bb      	ldr	r3, [r7, #8]
 801c7f0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801c7f2:	68fb      	ldr	r3, [r7, #12]
 801c7f4:	891a      	ldrh	r2, [r3, #8]
 801c7f6:	8a7b      	ldrh	r3, [r7, #18]
 801c7f8:	4413      	add	r3, r2
 801c7fa:	b29b      	uxth	r3, r3
 801c7fc:	8a7a      	ldrh	r2, [r7, #18]
 801c7fe:	429a      	cmp	r2, r3
 801c800:	d901      	bls.n	801c806 <pbuf_add_header_impl+0x56>
    return 1;
 801c802:	2301      	movs	r3, #1
 801c804:	e032      	b.n	801c86c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	7b1b      	ldrb	r3, [r3, #12]
 801c80a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c80c:	8a3b      	ldrh	r3, [r7, #16]
 801c80e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c812:	2b00      	cmp	r3, #0
 801c814:	d00c      	beq.n	801c830 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	685a      	ldr	r2, [r3, #4]
 801c81a:	68bb      	ldr	r3, [r7, #8]
 801c81c:	425b      	negs	r3, r3
 801c81e:	4413      	add	r3, r2
 801c820:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	3310      	adds	r3, #16
 801c826:	697a      	ldr	r2, [r7, #20]
 801c828:	429a      	cmp	r2, r3
 801c82a:	d20d      	bcs.n	801c848 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801c82c:	2301      	movs	r3, #1
 801c82e:	e01d      	b.n	801c86c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801c830:	79fb      	ldrb	r3, [r7, #7]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d006      	beq.n	801c844 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	685a      	ldr	r2, [r3, #4]
 801c83a:	68bb      	ldr	r3, [r7, #8]
 801c83c:	425b      	negs	r3, r3
 801c83e:	4413      	add	r3, r2
 801c840:	617b      	str	r3, [r7, #20]
 801c842:	e001      	b.n	801c848 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801c844:	2301      	movs	r3, #1
 801c846:	e011      	b.n	801c86c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	697a      	ldr	r2, [r7, #20]
 801c84c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	895a      	ldrh	r2, [r3, #10]
 801c852:	8a7b      	ldrh	r3, [r7, #18]
 801c854:	4413      	add	r3, r2
 801c856:	b29a      	uxth	r2, r3
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	891a      	ldrh	r2, [r3, #8]
 801c860:	8a7b      	ldrh	r3, [r7, #18]
 801c862:	4413      	add	r3, r2
 801c864:	b29a      	uxth	r2, r3
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	811a      	strh	r2, [r3, #8]


  return 0;
 801c86a:	2300      	movs	r3, #0
}
 801c86c:	4618      	mov	r0, r3
 801c86e:	3718      	adds	r7, #24
 801c870:	46bd      	mov	sp, r7
 801c872:	bd80      	pop	{r7, pc}
 801c874:	080292d8 	.word	0x080292d8
 801c878:	0802943c 	.word	0x0802943c
 801c87c:	08029338 	.word	0x08029338

0801c880 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801c880:	b580      	push	{r7, lr}
 801c882:	b082      	sub	sp, #8
 801c884:	af00      	add	r7, sp, #0
 801c886:	6078      	str	r0, [r7, #4]
 801c888:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801c88a:	2200      	movs	r2, #0
 801c88c:	6839      	ldr	r1, [r7, #0]
 801c88e:	6878      	ldr	r0, [r7, #4]
 801c890:	f7ff ff8e 	bl	801c7b0 <pbuf_add_header_impl>
 801c894:	4603      	mov	r3, r0
}
 801c896:	4618      	mov	r0, r3
 801c898:	3708      	adds	r7, #8
 801c89a:	46bd      	mov	sp, r7
 801c89c:	bd80      	pop	{r7, pc}
	...

0801c8a0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801c8a0:	b580      	push	{r7, lr}
 801c8a2:	b084      	sub	sp, #16
 801c8a4:	af00      	add	r7, sp, #0
 801c8a6:	6078      	str	r0, [r7, #4]
 801c8a8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d106      	bne.n	801c8be <pbuf_remove_header+0x1e>
 801c8b0:	4b20      	ldr	r3, [pc, #128]	@ (801c934 <pbuf_remove_header+0x94>)
 801c8b2:	f240 224b 	movw	r2, #587	@ 0x24b
 801c8b6:	4920      	ldr	r1, [pc, #128]	@ (801c938 <pbuf_remove_header+0x98>)
 801c8b8:	4820      	ldr	r0, [pc, #128]	@ (801c93c <pbuf_remove_header+0x9c>)
 801c8ba:	f009 ffed 	bl	8026898 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d003      	beq.n	801c8cc <pbuf_remove_header+0x2c>
 801c8c4:	683b      	ldr	r3, [r7, #0]
 801c8c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c8ca:	d301      	bcc.n	801c8d0 <pbuf_remove_header+0x30>
    return 1;
 801c8cc:	2301      	movs	r3, #1
 801c8ce:	e02c      	b.n	801c92a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801c8d0:	683b      	ldr	r3, [r7, #0]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d101      	bne.n	801c8da <pbuf_remove_header+0x3a>
    return 0;
 801c8d6:	2300      	movs	r3, #0
 801c8d8:	e027      	b.n	801c92a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801c8da:	683b      	ldr	r3, [r7, #0]
 801c8dc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	895b      	ldrh	r3, [r3, #10]
 801c8e2:	89fa      	ldrh	r2, [r7, #14]
 801c8e4:	429a      	cmp	r2, r3
 801c8e6:	d908      	bls.n	801c8fa <pbuf_remove_header+0x5a>
 801c8e8:	4b12      	ldr	r3, [pc, #72]	@ (801c934 <pbuf_remove_header+0x94>)
 801c8ea:	f240 2255 	movw	r2, #597	@ 0x255
 801c8ee:	4914      	ldr	r1, [pc, #80]	@ (801c940 <pbuf_remove_header+0xa0>)
 801c8f0:	4812      	ldr	r0, [pc, #72]	@ (801c93c <pbuf_remove_header+0x9c>)
 801c8f2:	f009 ffd1 	bl	8026898 <iprintf>
 801c8f6:	2301      	movs	r3, #1
 801c8f8:	e017      	b.n	801c92a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	685b      	ldr	r3, [r3, #4]
 801c8fe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	685a      	ldr	r2, [r3, #4]
 801c904:	683b      	ldr	r3, [r7, #0]
 801c906:	441a      	add	r2, r3
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	895a      	ldrh	r2, [r3, #10]
 801c910:	89fb      	ldrh	r3, [r7, #14]
 801c912:	1ad3      	subs	r3, r2, r3
 801c914:	b29a      	uxth	r2, r3
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	891a      	ldrh	r2, [r3, #8]
 801c91e:	89fb      	ldrh	r3, [r7, #14]
 801c920:	1ad3      	subs	r3, r2, r3
 801c922:	b29a      	uxth	r2, r3
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801c928:	2300      	movs	r3, #0
}
 801c92a:	4618      	mov	r0, r3
 801c92c:	3710      	adds	r7, #16
 801c92e:	46bd      	mov	sp, r7
 801c930:	bd80      	pop	{r7, pc}
 801c932:	bf00      	nop
 801c934:	080292d8 	.word	0x080292d8
 801c938:	0802943c 	.word	0x0802943c
 801c93c:	08029338 	.word	0x08029338
 801c940:	08029448 	.word	0x08029448

0801c944 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801c944:	b580      	push	{r7, lr}
 801c946:	b082      	sub	sp, #8
 801c948:	af00      	add	r7, sp, #0
 801c94a:	6078      	str	r0, [r7, #4]
 801c94c:	460b      	mov	r3, r1
 801c94e:	807b      	strh	r3, [r7, #2]
 801c950:	4613      	mov	r3, r2
 801c952:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801c954:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c958:	2b00      	cmp	r3, #0
 801c95a:	da08      	bge.n	801c96e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801c95c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c960:	425b      	negs	r3, r3
 801c962:	4619      	mov	r1, r3
 801c964:	6878      	ldr	r0, [r7, #4]
 801c966:	f7ff ff9b 	bl	801c8a0 <pbuf_remove_header>
 801c96a:	4603      	mov	r3, r0
 801c96c:	e007      	b.n	801c97e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801c96e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c972:	787a      	ldrb	r2, [r7, #1]
 801c974:	4619      	mov	r1, r3
 801c976:	6878      	ldr	r0, [r7, #4]
 801c978:	f7ff ff1a 	bl	801c7b0 <pbuf_add_header_impl>
 801c97c:	4603      	mov	r3, r0
  }
}
 801c97e:	4618      	mov	r0, r3
 801c980:	3708      	adds	r7, #8
 801c982:	46bd      	mov	sp, r7
 801c984:	bd80      	pop	{r7, pc}

0801c986 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801c986:	b580      	push	{r7, lr}
 801c988:	b082      	sub	sp, #8
 801c98a:	af00      	add	r7, sp, #0
 801c98c:	6078      	str	r0, [r7, #4]
 801c98e:	460b      	mov	r3, r1
 801c990:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801c992:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c996:	2201      	movs	r2, #1
 801c998:	4619      	mov	r1, r3
 801c99a:	6878      	ldr	r0, [r7, #4]
 801c99c:	f7ff ffd2 	bl	801c944 <pbuf_header_impl>
 801c9a0:	4603      	mov	r3, r0
}
 801c9a2:	4618      	mov	r0, r3
 801c9a4:	3708      	adds	r7, #8
 801c9a6:	46bd      	mov	sp, r7
 801c9a8:	bd80      	pop	{r7, pc}
	...

0801c9ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b088      	sub	sp, #32
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d10b      	bne.n	801c9d2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d106      	bne.n	801c9ce <pbuf_free+0x22>
 801c9c0:	4b3b      	ldr	r3, [pc, #236]	@ (801cab0 <pbuf_free+0x104>)
 801c9c2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801c9c6:	493b      	ldr	r1, [pc, #236]	@ (801cab4 <pbuf_free+0x108>)
 801c9c8:	483b      	ldr	r0, [pc, #236]	@ (801cab8 <pbuf_free+0x10c>)
 801c9ca:	f009 ff65 	bl	8026898 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801c9ce:	2300      	movs	r3, #0
 801c9d0:	e069      	b.n	801caa6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801c9d6:	e062      	b.n	801ca9e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801c9d8:	f008 fe32 	bl	8025640 <sys_arch_protect>
 801c9dc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	7b9b      	ldrb	r3, [r3, #14]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d106      	bne.n	801c9f4 <pbuf_free+0x48>
 801c9e6:	4b32      	ldr	r3, [pc, #200]	@ (801cab0 <pbuf_free+0x104>)
 801c9e8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801c9ec:	4933      	ldr	r1, [pc, #204]	@ (801cabc <pbuf_free+0x110>)
 801c9ee:	4832      	ldr	r0, [pc, #200]	@ (801cab8 <pbuf_free+0x10c>)
 801c9f0:	f009 ff52 	bl	8026898 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	7b9b      	ldrb	r3, [r3, #14]
 801c9f8:	3b01      	subs	r3, #1
 801c9fa:	b2da      	uxtb	r2, r3
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	739a      	strb	r2, [r3, #14]
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	7b9b      	ldrb	r3, [r3, #14]
 801ca04:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801ca06:	69b8      	ldr	r0, [r7, #24]
 801ca08:	f008 fe28 	bl	802565c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801ca0c:	7dfb      	ldrb	r3, [r7, #23]
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d143      	bne.n	801ca9a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	7b1b      	ldrb	r3, [r3, #12]
 801ca1c:	f003 030f 	and.w	r3, r3, #15
 801ca20:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	7b5b      	ldrb	r3, [r3, #13]
 801ca26:	f003 0302 	and.w	r3, r3, #2
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d011      	beq.n	801ca52 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801ca32:	68bb      	ldr	r3, [r7, #8]
 801ca34:	691b      	ldr	r3, [r3, #16]
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d106      	bne.n	801ca48 <pbuf_free+0x9c>
 801ca3a:	4b1d      	ldr	r3, [pc, #116]	@ (801cab0 <pbuf_free+0x104>)
 801ca3c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801ca40:	491f      	ldr	r1, [pc, #124]	@ (801cac0 <pbuf_free+0x114>)
 801ca42:	481d      	ldr	r0, [pc, #116]	@ (801cab8 <pbuf_free+0x10c>)
 801ca44:	f009 ff28 	bl	8026898 <iprintf>
        pc->custom_free_function(p);
 801ca48:	68bb      	ldr	r3, [r7, #8]
 801ca4a:	691b      	ldr	r3, [r3, #16]
 801ca4c:	6878      	ldr	r0, [r7, #4]
 801ca4e:	4798      	blx	r3
 801ca50:	e01d      	b.n	801ca8e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801ca52:	7bfb      	ldrb	r3, [r7, #15]
 801ca54:	2b02      	cmp	r3, #2
 801ca56:	d104      	bne.n	801ca62 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801ca58:	6879      	ldr	r1, [r7, #4]
 801ca5a:	200c      	movs	r0, #12
 801ca5c:	f7ff f904 	bl	801bc68 <memp_free>
 801ca60:	e015      	b.n	801ca8e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801ca62:	7bfb      	ldrb	r3, [r7, #15]
 801ca64:	2b01      	cmp	r3, #1
 801ca66:	d104      	bne.n	801ca72 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801ca68:	6879      	ldr	r1, [r7, #4]
 801ca6a:	200b      	movs	r0, #11
 801ca6c:	f7ff f8fc 	bl	801bc68 <memp_free>
 801ca70:	e00d      	b.n	801ca8e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801ca72:	7bfb      	ldrb	r3, [r7, #15]
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	d103      	bne.n	801ca80 <pbuf_free+0xd4>
          mem_free(p);
 801ca78:	6878      	ldr	r0, [r7, #4]
 801ca7a:	f7fe fd51 	bl	801b520 <mem_free>
 801ca7e:	e006      	b.n	801ca8e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801ca80:	4b0b      	ldr	r3, [pc, #44]	@ (801cab0 <pbuf_free+0x104>)
 801ca82:	f240 320f 	movw	r2, #783	@ 0x30f
 801ca86:	490f      	ldr	r1, [pc, #60]	@ (801cac4 <pbuf_free+0x118>)
 801ca88:	480b      	ldr	r0, [pc, #44]	@ (801cab8 <pbuf_free+0x10c>)
 801ca8a:	f009 ff05 	bl	8026898 <iprintf>
        }
      }
      count++;
 801ca8e:	7ffb      	ldrb	r3, [r7, #31]
 801ca90:	3301      	adds	r3, #1
 801ca92:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801ca94:	693b      	ldr	r3, [r7, #16]
 801ca96:	607b      	str	r3, [r7, #4]
 801ca98:	e001      	b.n	801ca9e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801ca9a:	2300      	movs	r3, #0
 801ca9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d199      	bne.n	801c9d8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801caa4:	7ffb      	ldrb	r3, [r7, #31]
}
 801caa6:	4618      	mov	r0, r3
 801caa8:	3720      	adds	r7, #32
 801caaa:	46bd      	mov	sp, r7
 801caac:	bd80      	pop	{r7, pc}
 801caae:	bf00      	nop
 801cab0:	080292d8 	.word	0x080292d8
 801cab4:	0802943c 	.word	0x0802943c
 801cab8:	08029338 	.word	0x08029338
 801cabc:	08029468 	.word	0x08029468
 801cac0:	08029480 	.word	0x08029480
 801cac4:	080294a4 	.word	0x080294a4

0801cac8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801cac8:	b480      	push	{r7}
 801caca:	b085      	sub	sp, #20
 801cacc:	af00      	add	r7, sp, #0
 801cace:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801cad0:	2300      	movs	r3, #0
 801cad2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801cad4:	e005      	b.n	801cae2 <pbuf_clen+0x1a>
    ++len;
 801cad6:	89fb      	ldrh	r3, [r7, #14]
 801cad8:	3301      	adds	r3, #1
 801cada:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d1f6      	bne.n	801cad6 <pbuf_clen+0xe>
  }
  return len;
 801cae8:	89fb      	ldrh	r3, [r7, #14]
}
 801caea:	4618      	mov	r0, r3
 801caec:	3714      	adds	r7, #20
 801caee:	46bd      	mov	sp, r7
 801caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caf4:	4770      	bx	lr
	...

0801caf8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801caf8:	b580      	push	{r7, lr}
 801cafa:	b084      	sub	sp, #16
 801cafc:	af00      	add	r7, sp, #0
 801cafe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	2b00      	cmp	r3, #0
 801cb04:	d016      	beq.n	801cb34 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801cb06:	f008 fd9b 	bl	8025640 <sys_arch_protect>
 801cb0a:	60f8      	str	r0, [r7, #12]
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	7b9b      	ldrb	r3, [r3, #14]
 801cb10:	3301      	adds	r3, #1
 801cb12:	b2da      	uxtb	r2, r3
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	739a      	strb	r2, [r3, #14]
 801cb18:	68f8      	ldr	r0, [r7, #12]
 801cb1a:	f008 fd9f 	bl	802565c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	7b9b      	ldrb	r3, [r3, #14]
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d106      	bne.n	801cb34 <pbuf_ref+0x3c>
 801cb26:	4b05      	ldr	r3, [pc, #20]	@ (801cb3c <pbuf_ref+0x44>)
 801cb28:	f240 3242 	movw	r2, #834	@ 0x342
 801cb2c:	4904      	ldr	r1, [pc, #16]	@ (801cb40 <pbuf_ref+0x48>)
 801cb2e:	4805      	ldr	r0, [pc, #20]	@ (801cb44 <pbuf_ref+0x4c>)
 801cb30:	f009 feb2 	bl	8026898 <iprintf>
  }
}
 801cb34:	bf00      	nop
 801cb36:	3710      	adds	r7, #16
 801cb38:	46bd      	mov	sp, r7
 801cb3a:	bd80      	pop	{r7, pc}
 801cb3c:	080292d8 	.word	0x080292d8
 801cb40:	080294b8 	.word	0x080294b8
 801cb44:	08029338 	.word	0x08029338

0801cb48 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801cb48:	b580      	push	{r7, lr}
 801cb4a:	b084      	sub	sp, #16
 801cb4c:	af00      	add	r7, sp, #0
 801cb4e:	6078      	str	r0, [r7, #4]
 801cb50:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d002      	beq.n	801cb5e <pbuf_cat+0x16>
 801cb58:	683b      	ldr	r3, [r7, #0]
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d107      	bne.n	801cb6e <pbuf_cat+0x26>
 801cb5e:	4b20      	ldr	r3, [pc, #128]	@ (801cbe0 <pbuf_cat+0x98>)
 801cb60:	f240 3259 	movw	r2, #857	@ 0x359
 801cb64:	491f      	ldr	r1, [pc, #124]	@ (801cbe4 <pbuf_cat+0x9c>)
 801cb66:	4820      	ldr	r0, [pc, #128]	@ (801cbe8 <pbuf_cat+0xa0>)
 801cb68:	f009 fe96 	bl	8026898 <iprintf>
 801cb6c:	e034      	b.n	801cbd8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	60fb      	str	r3, [r7, #12]
 801cb72:	e00a      	b.n	801cb8a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	891a      	ldrh	r2, [r3, #8]
 801cb78:	683b      	ldr	r3, [r7, #0]
 801cb7a:	891b      	ldrh	r3, [r3, #8]
 801cb7c:	4413      	add	r3, r2
 801cb7e:	b29a      	uxth	r2, r3
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801cb84:	68fb      	ldr	r3, [r7, #12]
 801cb86:	681b      	ldr	r3, [r3, #0]
 801cb88:	60fb      	str	r3, [r7, #12]
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d1f0      	bne.n	801cb74 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801cb92:	68fb      	ldr	r3, [r7, #12]
 801cb94:	891a      	ldrh	r2, [r3, #8]
 801cb96:	68fb      	ldr	r3, [r7, #12]
 801cb98:	895b      	ldrh	r3, [r3, #10]
 801cb9a:	429a      	cmp	r2, r3
 801cb9c:	d006      	beq.n	801cbac <pbuf_cat+0x64>
 801cb9e:	4b10      	ldr	r3, [pc, #64]	@ (801cbe0 <pbuf_cat+0x98>)
 801cba0:	f240 3262 	movw	r2, #866	@ 0x362
 801cba4:	4911      	ldr	r1, [pc, #68]	@ (801cbec <pbuf_cat+0xa4>)
 801cba6:	4810      	ldr	r0, [pc, #64]	@ (801cbe8 <pbuf_cat+0xa0>)
 801cba8:	f009 fe76 	bl	8026898 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801cbac:	68fb      	ldr	r3, [r7, #12]
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d006      	beq.n	801cbc2 <pbuf_cat+0x7a>
 801cbb4:	4b0a      	ldr	r3, [pc, #40]	@ (801cbe0 <pbuf_cat+0x98>)
 801cbb6:	f240 3263 	movw	r2, #867	@ 0x363
 801cbba:	490d      	ldr	r1, [pc, #52]	@ (801cbf0 <pbuf_cat+0xa8>)
 801cbbc:	480a      	ldr	r0, [pc, #40]	@ (801cbe8 <pbuf_cat+0xa0>)
 801cbbe:	f009 fe6b 	bl	8026898 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801cbc2:	68fb      	ldr	r3, [r7, #12]
 801cbc4:	891a      	ldrh	r2, [r3, #8]
 801cbc6:	683b      	ldr	r3, [r7, #0]
 801cbc8:	891b      	ldrh	r3, [r3, #8]
 801cbca:	4413      	add	r3, r2
 801cbcc:	b29a      	uxth	r2, r3
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801cbd2:	68fb      	ldr	r3, [r7, #12]
 801cbd4:	683a      	ldr	r2, [r7, #0]
 801cbd6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801cbd8:	3710      	adds	r7, #16
 801cbda:	46bd      	mov	sp, r7
 801cbdc:	bd80      	pop	{r7, pc}
 801cbde:	bf00      	nop
 801cbe0:	080292d8 	.word	0x080292d8
 801cbe4:	080294cc 	.word	0x080294cc
 801cbe8:	08029338 	.word	0x08029338
 801cbec:	08029504 	.word	0x08029504
 801cbf0:	08029534 	.word	0x08029534

0801cbf4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801cbf4:	b580      	push	{r7, lr}
 801cbf6:	b082      	sub	sp, #8
 801cbf8:	af00      	add	r7, sp, #0
 801cbfa:	6078      	str	r0, [r7, #4]
 801cbfc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801cbfe:	6839      	ldr	r1, [r7, #0]
 801cc00:	6878      	ldr	r0, [r7, #4]
 801cc02:	f7ff ffa1 	bl	801cb48 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801cc06:	6838      	ldr	r0, [r7, #0]
 801cc08:	f7ff ff76 	bl	801caf8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801cc0c:	bf00      	nop
 801cc0e:	3708      	adds	r7, #8
 801cc10:	46bd      	mov	sp, r7
 801cc12:	bd80      	pop	{r7, pc}

0801cc14 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b086      	sub	sp, #24
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	6078      	str	r0, [r7, #4]
 801cc1c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801cc1e:	2300      	movs	r3, #0
 801cc20:	617b      	str	r3, [r7, #20]
 801cc22:	2300      	movs	r3, #0
 801cc24:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d008      	beq.n	801cc3e <pbuf_copy+0x2a>
 801cc2c:	683b      	ldr	r3, [r7, #0]
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d005      	beq.n	801cc3e <pbuf_copy+0x2a>
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	891a      	ldrh	r2, [r3, #8]
 801cc36:	683b      	ldr	r3, [r7, #0]
 801cc38:	891b      	ldrh	r3, [r3, #8]
 801cc3a:	429a      	cmp	r2, r3
 801cc3c:	d209      	bcs.n	801cc52 <pbuf_copy+0x3e>
 801cc3e:	4b57      	ldr	r3, [pc, #348]	@ (801cd9c <pbuf_copy+0x188>)
 801cc40:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801cc44:	4956      	ldr	r1, [pc, #344]	@ (801cda0 <pbuf_copy+0x18c>)
 801cc46:	4857      	ldr	r0, [pc, #348]	@ (801cda4 <pbuf_copy+0x190>)
 801cc48:	f009 fe26 	bl	8026898 <iprintf>
 801cc4c:	f06f 030f 	mvn.w	r3, #15
 801cc50:	e09f      	b.n	801cd92 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	895b      	ldrh	r3, [r3, #10]
 801cc56:	461a      	mov	r2, r3
 801cc58:	697b      	ldr	r3, [r7, #20]
 801cc5a:	1ad2      	subs	r2, r2, r3
 801cc5c:	683b      	ldr	r3, [r7, #0]
 801cc5e:	895b      	ldrh	r3, [r3, #10]
 801cc60:	4619      	mov	r1, r3
 801cc62:	693b      	ldr	r3, [r7, #16]
 801cc64:	1acb      	subs	r3, r1, r3
 801cc66:	429a      	cmp	r2, r3
 801cc68:	d306      	bcc.n	801cc78 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801cc6a:	683b      	ldr	r3, [r7, #0]
 801cc6c:	895b      	ldrh	r3, [r3, #10]
 801cc6e:	461a      	mov	r2, r3
 801cc70:	693b      	ldr	r3, [r7, #16]
 801cc72:	1ad3      	subs	r3, r2, r3
 801cc74:	60fb      	str	r3, [r7, #12]
 801cc76:	e005      	b.n	801cc84 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	895b      	ldrh	r3, [r3, #10]
 801cc7c:	461a      	mov	r2, r3
 801cc7e:	697b      	ldr	r3, [r7, #20]
 801cc80:	1ad3      	subs	r3, r2, r3
 801cc82:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	685a      	ldr	r2, [r3, #4]
 801cc88:	697b      	ldr	r3, [r7, #20]
 801cc8a:	18d0      	adds	r0, r2, r3
 801cc8c:	683b      	ldr	r3, [r7, #0]
 801cc8e:	685a      	ldr	r2, [r3, #4]
 801cc90:	693b      	ldr	r3, [r7, #16]
 801cc92:	4413      	add	r3, r2
 801cc94:	68fa      	ldr	r2, [r7, #12]
 801cc96:	4619      	mov	r1, r3
 801cc98:	f009 ff7d 	bl	8026b96 <memcpy>
    offset_to += len;
 801cc9c:	697a      	ldr	r2, [r7, #20]
 801cc9e:	68fb      	ldr	r3, [r7, #12]
 801cca0:	4413      	add	r3, r2
 801cca2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801cca4:	693a      	ldr	r2, [r7, #16]
 801cca6:	68fb      	ldr	r3, [r7, #12]
 801cca8:	4413      	add	r3, r2
 801ccaa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	895b      	ldrh	r3, [r3, #10]
 801ccb0:	461a      	mov	r2, r3
 801ccb2:	697b      	ldr	r3, [r7, #20]
 801ccb4:	4293      	cmp	r3, r2
 801ccb6:	d906      	bls.n	801ccc6 <pbuf_copy+0xb2>
 801ccb8:	4b38      	ldr	r3, [pc, #224]	@ (801cd9c <pbuf_copy+0x188>)
 801ccba:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801ccbe:	493a      	ldr	r1, [pc, #232]	@ (801cda8 <pbuf_copy+0x194>)
 801ccc0:	4838      	ldr	r0, [pc, #224]	@ (801cda4 <pbuf_copy+0x190>)
 801ccc2:	f009 fde9 	bl	8026898 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801ccc6:	683b      	ldr	r3, [r7, #0]
 801ccc8:	895b      	ldrh	r3, [r3, #10]
 801ccca:	461a      	mov	r2, r3
 801cccc:	693b      	ldr	r3, [r7, #16]
 801ccce:	4293      	cmp	r3, r2
 801ccd0:	d906      	bls.n	801cce0 <pbuf_copy+0xcc>
 801ccd2:	4b32      	ldr	r3, [pc, #200]	@ (801cd9c <pbuf_copy+0x188>)
 801ccd4:	f240 32da 	movw	r2, #986	@ 0x3da
 801ccd8:	4934      	ldr	r1, [pc, #208]	@ (801cdac <pbuf_copy+0x198>)
 801ccda:	4832      	ldr	r0, [pc, #200]	@ (801cda4 <pbuf_copy+0x190>)
 801ccdc:	f009 fddc 	bl	8026898 <iprintf>
    if (offset_from >= p_from->len) {
 801cce0:	683b      	ldr	r3, [r7, #0]
 801cce2:	895b      	ldrh	r3, [r3, #10]
 801cce4:	461a      	mov	r2, r3
 801cce6:	693b      	ldr	r3, [r7, #16]
 801cce8:	4293      	cmp	r3, r2
 801ccea:	d304      	bcc.n	801ccf6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801ccec:	2300      	movs	r3, #0
 801ccee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801ccf0:	683b      	ldr	r3, [r7, #0]
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	895b      	ldrh	r3, [r3, #10]
 801ccfa:	461a      	mov	r2, r3
 801ccfc:	697b      	ldr	r3, [r7, #20]
 801ccfe:	4293      	cmp	r3, r2
 801cd00:	d114      	bne.n	801cd2c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801cd02:	2300      	movs	r3, #0
 801cd04:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d10c      	bne.n	801cd2c <pbuf_copy+0x118>
 801cd12:	683b      	ldr	r3, [r7, #0]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d009      	beq.n	801cd2c <pbuf_copy+0x118>
 801cd18:	4b20      	ldr	r3, [pc, #128]	@ (801cd9c <pbuf_copy+0x188>)
 801cd1a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801cd1e:	4924      	ldr	r1, [pc, #144]	@ (801cdb0 <pbuf_copy+0x19c>)
 801cd20:	4820      	ldr	r0, [pc, #128]	@ (801cda4 <pbuf_copy+0x190>)
 801cd22:	f009 fdb9 	bl	8026898 <iprintf>
 801cd26:	f06f 030f 	mvn.w	r3, #15
 801cd2a:	e032      	b.n	801cd92 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801cd2c:	683b      	ldr	r3, [r7, #0]
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d013      	beq.n	801cd5a <pbuf_copy+0x146>
 801cd32:	683b      	ldr	r3, [r7, #0]
 801cd34:	895a      	ldrh	r2, [r3, #10]
 801cd36:	683b      	ldr	r3, [r7, #0]
 801cd38:	891b      	ldrh	r3, [r3, #8]
 801cd3a:	429a      	cmp	r2, r3
 801cd3c:	d10d      	bne.n	801cd5a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801cd3e:	683b      	ldr	r3, [r7, #0]
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d009      	beq.n	801cd5a <pbuf_copy+0x146>
 801cd46:	4b15      	ldr	r3, [pc, #84]	@ (801cd9c <pbuf_copy+0x188>)
 801cd48:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801cd4c:	4919      	ldr	r1, [pc, #100]	@ (801cdb4 <pbuf_copy+0x1a0>)
 801cd4e:	4815      	ldr	r0, [pc, #84]	@ (801cda4 <pbuf_copy+0x190>)
 801cd50:	f009 fda2 	bl	8026898 <iprintf>
 801cd54:	f06f 0305 	mvn.w	r3, #5
 801cd58:	e01b      	b.n	801cd92 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d013      	beq.n	801cd88 <pbuf_copy+0x174>
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	895a      	ldrh	r2, [r3, #10]
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	891b      	ldrh	r3, [r3, #8]
 801cd68:	429a      	cmp	r2, r3
 801cd6a:	d10d      	bne.n	801cd88 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	681b      	ldr	r3, [r3, #0]
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d009      	beq.n	801cd88 <pbuf_copy+0x174>
 801cd74:	4b09      	ldr	r3, [pc, #36]	@ (801cd9c <pbuf_copy+0x188>)
 801cd76:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801cd7a:	490e      	ldr	r1, [pc, #56]	@ (801cdb4 <pbuf_copy+0x1a0>)
 801cd7c:	4809      	ldr	r0, [pc, #36]	@ (801cda4 <pbuf_copy+0x190>)
 801cd7e:	f009 fd8b 	bl	8026898 <iprintf>
 801cd82:	f06f 0305 	mvn.w	r3, #5
 801cd86:	e004      	b.n	801cd92 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801cd88:	683b      	ldr	r3, [r7, #0]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	f47f af61 	bne.w	801cc52 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801cd90:	2300      	movs	r3, #0
}
 801cd92:	4618      	mov	r0, r3
 801cd94:	3718      	adds	r7, #24
 801cd96:	46bd      	mov	sp, r7
 801cd98:	bd80      	pop	{r7, pc}
 801cd9a:	bf00      	nop
 801cd9c:	080292d8 	.word	0x080292d8
 801cda0:	08029580 	.word	0x08029580
 801cda4:	08029338 	.word	0x08029338
 801cda8:	080295b0 	.word	0x080295b0
 801cdac:	080295c8 	.word	0x080295c8
 801cdb0:	080295e4 	.word	0x080295e4
 801cdb4:	080295f4 	.word	0x080295f4

0801cdb8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801cdb8:	b580      	push	{r7, lr}
 801cdba:	b088      	sub	sp, #32
 801cdbc:	af00      	add	r7, sp, #0
 801cdbe:	60f8      	str	r0, [r7, #12]
 801cdc0:	60b9      	str	r1, [r7, #8]
 801cdc2:	4611      	mov	r1, r2
 801cdc4:	461a      	mov	r2, r3
 801cdc6:	460b      	mov	r3, r1
 801cdc8:	80fb      	strh	r3, [r7, #6]
 801cdca:	4613      	mov	r3, r2
 801cdcc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801cdce:	2300      	movs	r3, #0
 801cdd0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801cdd2:	2300      	movs	r3, #0
 801cdd4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801cdd6:	68fb      	ldr	r3, [r7, #12]
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d108      	bne.n	801cdee <pbuf_copy_partial+0x36>
 801cddc:	4b2b      	ldr	r3, [pc, #172]	@ (801ce8c <pbuf_copy_partial+0xd4>)
 801cdde:	f240 420a 	movw	r2, #1034	@ 0x40a
 801cde2:	492b      	ldr	r1, [pc, #172]	@ (801ce90 <pbuf_copy_partial+0xd8>)
 801cde4:	482b      	ldr	r0, [pc, #172]	@ (801ce94 <pbuf_copy_partial+0xdc>)
 801cde6:	f009 fd57 	bl	8026898 <iprintf>
 801cdea:	2300      	movs	r3, #0
 801cdec:	e04a      	b.n	801ce84 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801cdee:	68bb      	ldr	r3, [r7, #8]
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d108      	bne.n	801ce06 <pbuf_copy_partial+0x4e>
 801cdf4:	4b25      	ldr	r3, [pc, #148]	@ (801ce8c <pbuf_copy_partial+0xd4>)
 801cdf6:	f240 420b 	movw	r2, #1035	@ 0x40b
 801cdfa:	4927      	ldr	r1, [pc, #156]	@ (801ce98 <pbuf_copy_partial+0xe0>)
 801cdfc:	4825      	ldr	r0, [pc, #148]	@ (801ce94 <pbuf_copy_partial+0xdc>)
 801cdfe:	f009 fd4b 	bl	8026898 <iprintf>
 801ce02:	2300      	movs	r3, #0
 801ce04:	e03e      	b.n	801ce84 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	61fb      	str	r3, [r7, #28]
 801ce0a:	e034      	b.n	801ce76 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801ce0c:	88bb      	ldrh	r3, [r7, #4]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d00a      	beq.n	801ce28 <pbuf_copy_partial+0x70>
 801ce12:	69fb      	ldr	r3, [r7, #28]
 801ce14:	895b      	ldrh	r3, [r3, #10]
 801ce16:	88ba      	ldrh	r2, [r7, #4]
 801ce18:	429a      	cmp	r2, r3
 801ce1a:	d305      	bcc.n	801ce28 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801ce1c:	69fb      	ldr	r3, [r7, #28]
 801ce1e:	895b      	ldrh	r3, [r3, #10]
 801ce20:	88ba      	ldrh	r2, [r7, #4]
 801ce22:	1ad3      	subs	r3, r2, r3
 801ce24:	80bb      	strh	r3, [r7, #4]
 801ce26:	e023      	b.n	801ce70 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801ce28:	69fb      	ldr	r3, [r7, #28]
 801ce2a:	895a      	ldrh	r2, [r3, #10]
 801ce2c:	88bb      	ldrh	r3, [r7, #4]
 801ce2e:	1ad3      	subs	r3, r2, r3
 801ce30:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801ce32:	8b3a      	ldrh	r2, [r7, #24]
 801ce34:	88fb      	ldrh	r3, [r7, #6]
 801ce36:	429a      	cmp	r2, r3
 801ce38:	d901      	bls.n	801ce3e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801ce3a:	88fb      	ldrh	r3, [r7, #6]
 801ce3c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801ce3e:	8b7b      	ldrh	r3, [r7, #26]
 801ce40:	68ba      	ldr	r2, [r7, #8]
 801ce42:	18d0      	adds	r0, r2, r3
 801ce44:	69fb      	ldr	r3, [r7, #28]
 801ce46:	685a      	ldr	r2, [r3, #4]
 801ce48:	88bb      	ldrh	r3, [r7, #4]
 801ce4a:	4413      	add	r3, r2
 801ce4c:	8b3a      	ldrh	r2, [r7, #24]
 801ce4e:	4619      	mov	r1, r3
 801ce50:	f009 fea1 	bl	8026b96 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801ce54:	8afa      	ldrh	r2, [r7, #22]
 801ce56:	8b3b      	ldrh	r3, [r7, #24]
 801ce58:	4413      	add	r3, r2
 801ce5a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801ce5c:	8b7a      	ldrh	r2, [r7, #26]
 801ce5e:	8b3b      	ldrh	r3, [r7, #24]
 801ce60:	4413      	add	r3, r2
 801ce62:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801ce64:	88fa      	ldrh	r2, [r7, #6]
 801ce66:	8b3b      	ldrh	r3, [r7, #24]
 801ce68:	1ad3      	subs	r3, r2, r3
 801ce6a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801ce6c:	2300      	movs	r3, #0
 801ce6e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801ce70:	69fb      	ldr	r3, [r7, #28]
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	61fb      	str	r3, [r7, #28]
 801ce76:	88fb      	ldrh	r3, [r7, #6]
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d002      	beq.n	801ce82 <pbuf_copy_partial+0xca>
 801ce7c:	69fb      	ldr	r3, [r7, #28]
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d1c4      	bne.n	801ce0c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801ce82:	8afb      	ldrh	r3, [r7, #22]
}
 801ce84:	4618      	mov	r0, r3
 801ce86:	3720      	adds	r7, #32
 801ce88:	46bd      	mov	sp, r7
 801ce8a:	bd80      	pop	{r7, pc}
 801ce8c:	080292d8 	.word	0x080292d8
 801ce90:	08029620 	.word	0x08029620
 801ce94:	08029338 	.word	0x08029338
 801ce98:	08029640 	.word	0x08029640

0801ce9c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801ce9c:	b580      	push	{r7, lr}
 801ce9e:	b084      	sub	sp, #16
 801cea0:	af00      	add	r7, sp, #0
 801cea2:	4603      	mov	r3, r0
 801cea4:	603a      	str	r2, [r7, #0]
 801cea6:	71fb      	strb	r3, [r7, #7]
 801cea8:	460b      	mov	r3, r1
 801ceaa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801ceac:	683b      	ldr	r3, [r7, #0]
 801ceae:	8919      	ldrh	r1, [r3, #8]
 801ceb0:	88ba      	ldrh	r2, [r7, #4]
 801ceb2:	79fb      	ldrb	r3, [r7, #7]
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f7ff fa97 	bl	801c3e8 <pbuf_alloc>
 801ceba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801cebc:	68fb      	ldr	r3, [r7, #12]
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d101      	bne.n	801cec6 <pbuf_clone+0x2a>
    return NULL;
 801cec2:	2300      	movs	r3, #0
 801cec4:	e011      	b.n	801ceea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801cec6:	6839      	ldr	r1, [r7, #0]
 801cec8:	68f8      	ldr	r0, [r7, #12]
 801ceca:	f7ff fea3 	bl	801cc14 <pbuf_copy>
 801cece:	4603      	mov	r3, r0
 801ced0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801ced2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d006      	beq.n	801cee8 <pbuf_clone+0x4c>
 801ceda:	4b06      	ldr	r3, [pc, #24]	@ (801cef4 <pbuf_clone+0x58>)
 801cedc:	f240 5224 	movw	r2, #1316	@ 0x524
 801cee0:	4905      	ldr	r1, [pc, #20]	@ (801cef8 <pbuf_clone+0x5c>)
 801cee2:	4806      	ldr	r0, [pc, #24]	@ (801cefc <pbuf_clone+0x60>)
 801cee4:	f009 fcd8 	bl	8026898 <iprintf>
  return q;
 801cee8:	68fb      	ldr	r3, [r7, #12]
}
 801ceea:	4618      	mov	r0, r3
 801ceec:	3710      	adds	r7, #16
 801ceee:	46bd      	mov	sp, r7
 801cef0:	bd80      	pop	{r7, pc}
 801cef2:	bf00      	nop
 801cef4:	080292d8 	.word	0x080292d8
 801cef8:	0802974c 	.word	0x0802974c
 801cefc:	08029338 	.word	0x08029338

0801cf00 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801cf00:	b580      	push	{r7, lr}
 801cf02:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801cf04:	f008 ff70 	bl	8025de8 <rand>
 801cf08:	4603      	mov	r3, r0
 801cf0a:	b29b      	uxth	r3, r3
 801cf0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801cf10:	b29b      	uxth	r3, r3
 801cf12:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801cf16:	b29a      	uxth	r2, r3
 801cf18:	4b01      	ldr	r3, [pc, #4]	@ (801cf20 <tcp_init+0x20>)
 801cf1a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801cf1c:	bf00      	nop
 801cf1e:	bd80      	pop	{r7, pc}
 801cf20:	200100a0 	.word	0x200100a0

0801cf24 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801cf24:	b580      	push	{r7, lr}
 801cf26:	b082      	sub	sp, #8
 801cf28:	af00      	add	r7, sp, #0
 801cf2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	7d1b      	ldrb	r3, [r3, #20]
 801cf30:	2b01      	cmp	r3, #1
 801cf32:	d105      	bne.n	801cf40 <tcp_free+0x1c>
 801cf34:	4b06      	ldr	r3, [pc, #24]	@ (801cf50 <tcp_free+0x2c>)
 801cf36:	22d4      	movs	r2, #212	@ 0xd4
 801cf38:	4906      	ldr	r1, [pc, #24]	@ (801cf54 <tcp_free+0x30>)
 801cf3a:	4807      	ldr	r0, [pc, #28]	@ (801cf58 <tcp_free+0x34>)
 801cf3c:	f009 fcac 	bl	8026898 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801cf40:	6879      	ldr	r1, [r7, #4]
 801cf42:	2001      	movs	r0, #1
 801cf44:	f7fe fe90 	bl	801bc68 <memp_free>
}
 801cf48:	bf00      	nop
 801cf4a:	3708      	adds	r7, #8
 801cf4c:	46bd      	mov	sp, r7
 801cf4e:	bd80      	pop	{r7, pc}
 801cf50:	080297d8 	.word	0x080297d8
 801cf54:	08029808 	.word	0x08029808
 801cf58:	0802981c 	.word	0x0802981c

0801cf5c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801cf5c:	b580      	push	{r7, lr}
 801cf5e:	b082      	sub	sp, #8
 801cf60:	af00      	add	r7, sp, #0
 801cf62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	7d1b      	ldrb	r3, [r3, #20]
 801cf68:	2b01      	cmp	r3, #1
 801cf6a:	d105      	bne.n	801cf78 <tcp_free_listen+0x1c>
 801cf6c:	4b06      	ldr	r3, [pc, #24]	@ (801cf88 <tcp_free_listen+0x2c>)
 801cf6e:	22df      	movs	r2, #223	@ 0xdf
 801cf70:	4906      	ldr	r1, [pc, #24]	@ (801cf8c <tcp_free_listen+0x30>)
 801cf72:	4807      	ldr	r0, [pc, #28]	@ (801cf90 <tcp_free_listen+0x34>)
 801cf74:	f009 fc90 	bl	8026898 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801cf78:	6879      	ldr	r1, [r7, #4]
 801cf7a:	2002      	movs	r0, #2
 801cf7c:	f7fe fe74 	bl	801bc68 <memp_free>
}
 801cf80:	bf00      	nop
 801cf82:	3708      	adds	r7, #8
 801cf84:	46bd      	mov	sp, r7
 801cf86:	bd80      	pop	{r7, pc}
 801cf88:	080297d8 	.word	0x080297d8
 801cf8c:	08029844 	.word	0x08029844
 801cf90:	0802981c 	.word	0x0802981c

0801cf94 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801cf94:	b580      	push	{r7, lr}
 801cf96:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801cf98:	f000 fea4 	bl	801dce4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801cf9c:	4b07      	ldr	r3, [pc, #28]	@ (801cfbc <tcp_tmr+0x28>)
 801cf9e:	781b      	ldrb	r3, [r3, #0]
 801cfa0:	3301      	adds	r3, #1
 801cfa2:	b2da      	uxtb	r2, r3
 801cfa4:	4b05      	ldr	r3, [pc, #20]	@ (801cfbc <tcp_tmr+0x28>)
 801cfa6:	701a      	strb	r2, [r3, #0]
 801cfa8:	4b04      	ldr	r3, [pc, #16]	@ (801cfbc <tcp_tmr+0x28>)
 801cfaa:	781b      	ldrb	r3, [r3, #0]
 801cfac:	f003 0301 	and.w	r3, r3, #1
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d001      	beq.n	801cfb8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801cfb4:	f000 fb54 	bl	801d660 <tcp_slowtmr>
  }
}
 801cfb8:	bf00      	nop
 801cfba:	bd80      	pop	{r7, pc}
 801cfbc:	2003c4e9 	.word	0x2003c4e9

0801cfc0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b084      	sub	sp, #16
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
 801cfc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801cfca:	683b      	ldr	r3, [r7, #0]
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	d105      	bne.n	801cfdc <tcp_remove_listener+0x1c>
 801cfd0:	4b0d      	ldr	r3, [pc, #52]	@ (801d008 <tcp_remove_listener+0x48>)
 801cfd2:	22ff      	movs	r2, #255	@ 0xff
 801cfd4:	490d      	ldr	r1, [pc, #52]	@ (801d00c <tcp_remove_listener+0x4c>)
 801cfd6:	480e      	ldr	r0, [pc, #56]	@ (801d010 <tcp_remove_listener+0x50>)
 801cfd8:	f009 fc5e 	bl	8026898 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	60fb      	str	r3, [r7, #12]
 801cfe0:	e00a      	b.n	801cff8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801cfe2:	68fb      	ldr	r3, [r7, #12]
 801cfe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801cfe6:	683a      	ldr	r2, [r7, #0]
 801cfe8:	429a      	cmp	r2, r3
 801cfea:	d102      	bne.n	801cff2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801cfec:	68fb      	ldr	r3, [r7, #12]
 801cfee:	2200      	movs	r2, #0
 801cff0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	68db      	ldr	r3, [r3, #12]
 801cff6:	60fb      	str	r3, [r7, #12]
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d1f1      	bne.n	801cfe2 <tcp_remove_listener+0x22>
    }
  }
}
 801cffe:	bf00      	nop
 801d000:	bf00      	nop
 801d002:	3710      	adds	r7, #16
 801d004:	46bd      	mov	sp, r7
 801d006:	bd80      	pop	{r7, pc}
 801d008:	080297d8 	.word	0x080297d8
 801d00c:	08029860 	.word	0x08029860
 801d010:	0802981c 	.word	0x0802981c

0801d014 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801d014:	b580      	push	{r7, lr}
 801d016:	b084      	sub	sp, #16
 801d018:	af00      	add	r7, sp, #0
 801d01a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d106      	bne.n	801d030 <tcp_listen_closed+0x1c>
 801d022:	4b14      	ldr	r3, [pc, #80]	@ (801d074 <tcp_listen_closed+0x60>)
 801d024:	f240 1211 	movw	r2, #273	@ 0x111
 801d028:	4913      	ldr	r1, [pc, #76]	@ (801d078 <tcp_listen_closed+0x64>)
 801d02a:	4814      	ldr	r0, [pc, #80]	@ (801d07c <tcp_listen_closed+0x68>)
 801d02c:	f009 fc34 	bl	8026898 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	7d1b      	ldrb	r3, [r3, #20]
 801d034:	2b01      	cmp	r3, #1
 801d036:	d006      	beq.n	801d046 <tcp_listen_closed+0x32>
 801d038:	4b0e      	ldr	r3, [pc, #56]	@ (801d074 <tcp_listen_closed+0x60>)
 801d03a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801d03e:	4910      	ldr	r1, [pc, #64]	@ (801d080 <tcp_listen_closed+0x6c>)
 801d040:	480e      	ldr	r0, [pc, #56]	@ (801d07c <tcp_listen_closed+0x68>)
 801d042:	f009 fc29 	bl	8026898 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801d046:	2301      	movs	r3, #1
 801d048:	60fb      	str	r3, [r7, #12]
 801d04a:	e00b      	b.n	801d064 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801d04c:	4a0d      	ldr	r2, [pc, #52]	@ (801d084 <tcp_listen_closed+0x70>)
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d054:	681b      	ldr	r3, [r3, #0]
 801d056:	6879      	ldr	r1, [r7, #4]
 801d058:	4618      	mov	r0, r3
 801d05a:	f7ff ffb1 	bl	801cfc0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801d05e:	68fb      	ldr	r3, [r7, #12]
 801d060:	3301      	adds	r3, #1
 801d062:	60fb      	str	r3, [r7, #12]
 801d064:	68fb      	ldr	r3, [r7, #12]
 801d066:	2b03      	cmp	r3, #3
 801d068:	d9f0      	bls.n	801d04c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801d06a:	bf00      	nop
 801d06c:	bf00      	nop
 801d06e:	3710      	adds	r7, #16
 801d070:	46bd      	mov	sp, r7
 801d072:	bd80      	pop	{r7, pc}
 801d074:	080297d8 	.word	0x080297d8
 801d078:	08029888 	.word	0x08029888
 801d07c:	0802981c 	.word	0x0802981c
 801d080:	08029894 	.word	0x08029894
 801d084:	0802cedc 	.word	0x0802cedc

0801d088 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801d088:	b5b0      	push	{r4, r5, r7, lr}
 801d08a:	b088      	sub	sp, #32
 801d08c:	af04      	add	r7, sp, #16
 801d08e:	6078      	str	r0, [r7, #4]
 801d090:	460b      	mov	r3, r1
 801d092:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	2b00      	cmp	r3, #0
 801d098:	d106      	bne.n	801d0a8 <tcp_close_shutdown+0x20>
 801d09a:	4b63      	ldr	r3, [pc, #396]	@ (801d228 <tcp_close_shutdown+0x1a0>)
 801d09c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801d0a0:	4962      	ldr	r1, [pc, #392]	@ (801d22c <tcp_close_shutdown+0x1a4>)
 801d0a2:	4863      	ldr	r0, [pc, #396]	@ (801d230 <tcp_close_shutdown+0x1a8>)
 801d0a4:	f009 fbf8 	bl	8026898 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801d0a8:	78fb      	ldrb	r3, [r7, #3]
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d066      	beq.n	801d17c <tcp_close_shutdown+0xf4>
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	7d1b      	ldrb	r3, [r3, #20]
 801d0b2:	2b04      	cmp	r3, #4
 801d0b4:	d003      	beq.n	801d0be <tcp_close_shutdown+0x36>
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	7d1b      	ldrb	r3, [r3, #20]
 801d0ba:	2b07      	cmp	r3, #7
 801d0bc:	d15e      	bne.n	801d17c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	d104      	bne.n	801d0d0 <tcp_close_shutdown+0x48>
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d0ca:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801d0ce:	d055      	beq.n	801d17c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	8b5b      	ldrh	r3, [r3, #26]
 801d0d4:	f003 0310 	and.w	r3, r3, #16
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	d106      	bne.n	801d0ea <tcp_close_shutdown+0x62>
 801d0dc:	4b52      	ldr	r3, [pc, #328]	@ (801d228 <tcp_close_shutdown+0x1a0>)
 801d0de:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801d0e2:	4954      	ldr	r1, [pc, #336]	@ (801d234 <tcp_close_shutdown+0x1ac>)
 801d0e4:	4852      	ldr	r0, [pc, #328]	@ (801d230 <tcp_close_shutdown+0x1a8>)
 801d0e6:	f009 fbd7 	bl	8026898 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801d0f2:	687d      	ldr	r5, [r7, #4]
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	3304      	adds	r3, #4
 801d0f8:	687a      	ldr	r2, [r7, #4]
 801d0fa:	8ad2      	ldrh	r2, [r2, #22]
 801d0fc:	6879      	ldr	r1, [r7, #4]
 801d0fe:	8b09      	ldrh	r1, [r1, #24]
 801d100:	9102      	str	r1, [sp, #8]
 801d102:	9201      	str	r2, [sp, #4]
 801d104:	9300      	str	r3, [sp, #0]
 801d106:	462b      	mov	r3, r5
 801d108:	4622      	mov	r2, r4
 801d10a:	4601      	mov	r1, r0
 801d10c:	6878      	ldr	r0, [r7, #4]
 801d10e:	f004 fe8d 	bl	8021e2c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801d112:	6878      	ldr	r0, [r7, #4]
 801d114:	f001 f8c8 	bl	801e2a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801d118:	4b47      	ldr	r3, [pc, #284]	@ (801d238 <tcp_close_shutdown+0x1b0>)
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	687a      	ldr	r2, [r7, #4]
 801d11e:	429a      	cmp	r2, r3
 801d120:	d105      	bne.n	801d12e <tcp_close_shutdown+0xa6>
 801d122:	4b45      	ldr	r3, [pc, #276]	@ (801d238 <tcp_close_shutdown+0x1b0>)
 801d124:	681b      	ldr	r3, [r3, #0]
 801d126:	68db      	ldr	r3, [r3, #12]
 801d128:	4a43      	ldr	r2, [pc, #268]	@ (801d238 <tcp_close_shutdown+0x1b0>)
 801d12a:	6013      	str	r3, [r2, #0]
 801d12c:	e013      	b.n	801d156 <tcp_close_shutdown+0xce>
 801d12e:	4b42      	ldr	r3, [pc, #264]	@ (801d238 <tcp_close_shutdown+0x1b0>)
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	60fb      	str	r3, [r7, #12]
 801d134:	e00c      	b.n	801d150 <tcp_close_shutdown+0xc8>
 801d136:	68fb      	ldr	r3, [r7, #12]
 801d138:	68db      	ldr	r3, [r3, #12]
 801d13a:	687a      	ldr	r2, [r7, #4]
 801d13c:	429a      	cmp	r2, r3
 801d13e:	d104      	bne.n	801d14a <tcp_close_shutdown+0xc2>
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	68da      	ldr	r2, [r3, #12]
 801d144:	68fb      	ldr	r3, [r7, #12]
 801d146:	60da      	str	r2, [r3, #12]
 801d148:	e005      	b.n	801d156 <tcp_close_shutdown+0xce>
 801d14a:	68fb      	ldr	r3, [r7, #12]
 801d14c:	68db      	ldr	r3, [r3, #12]
 801d14e:	60fb      	str	r3, [r7, #12]
 801d150:	68fb      	ldr	r3, [r7, #12]
 801d152:	2b00      	cmp	r3, #0
 801d154:	d1ef      	bne.n	801d136 <tcp_close_shutdown+0xae>
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	2200      	movs	r2, #0
 801d15a:	60da      	str	r2, [r3, #12]
 801d15c:	4b37      	ldr	r3, [pc, #220]	@ (801d23c <tcp_close_shutdown+0x1b4>)
 801d15e:	2201      	movs	r2, #1
 801d160:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801d162:	4b37      	ldr	r3, [pc, #220]	@ (801d240 <tcp_close_shutdown+0x1b8>)
 801d164:	681b      	ldr	r3, [r3, #0]
 801d166:	687a      	ldr	r2, [r7, #4]
 801d168:	429a      	cmp	r2, r3
 801d16a:	d102      	bne.n	801d172 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801d16c:	f003 fd5c 	bl	8020c28 <tcp_trigger_input_pcb_close>
 801d170:	e002      	b.n	801d178 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801d172:	6878      	ldr	r0, [r7, #4]
 801d174:	f7ff fed6 	bl	801cf24 <tcp_free>
      }
      return ERR_OK;
 801d178:	2300      	movs	r3, #0
 801d17a:	e050      	b.n	801d21e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	7d1b      	ldrb	r3, [r3, #20]
 801d180:	2b02      	cmp	r3, #2
 801d182:	d03b      	beq.n	801d1fc <tcp_close_shutdown+0x174>
 801d184:	2b02      	cmp	r3, #2
 801d186:	dc44      	bgt.n	801d212 <tcp_close_shutdown+0x18a>
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d002      	beq.n	801d192 <tcp_close_shutdown+0x10a>
 801d18c:	2b01      	cmp	r3, #1
 801d18e:	d02a      	beq.n	801d1e6 <tcp_close_shutdown+0x15e>
 801d190:	e03f      	b.n	801d212 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801d192:	687b      	ldr	r3, [r7, #4]
 801d194:	8adb      	ldrh	r3, [r3, #22]
 801d196:	2b00      	cmp	r3, #0
 801d198:	d021      	beq.n	801d1de <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d19a:	4b2a      	ldr	r3, [pc, #168]	@ (801d244 <tcp_close_shutdown+0x1bc>)
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	687a      	ldr	r2, [r7, #4]
 801d1a0:	429a      	cmp	r2, r3
 801d1a2:	d105      	bne.n	801d1b0 <tcp_close_shutdown+0x128>
 801d1a4:	4b27      	ldr	r3, [pc, #156]	@ (801d244 <tcp_close_shutdown+0x1bc>)
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	68db      	ldr	r3, [r3, #12]
 801d1aa:	4a26      	ldr	r2, [pc, #152]	@ (801d244 <tcp_close_shutdown+0x1bc>)
 801d1ac:	6013      	str	r3, [r2, #0]
 801d1ae:	e013      	b.n	801d1d8 <tcp_close_shutdown+0x150>
 801d1b0:	4b24      	ldr	r3, [pc, #144]	@ (801d244 <tcp_close_shutdown+0x1bc>)
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	60bb      	str	r3, [r7, #8]
 801d1b6:	e00c      	b.n	801d1d2 <tcp_close_shutdown+0x14a>
 801d1b8:	68bb      	ldr	r3, [r7, #8]
 801d1ba:	68db      	ldr	r3, [r3, #12]
 801d1bc:	687a      	ldr	r2, [r7, #4]
 801d1be:	429a      	cmp	r2, r3
 801d1c0:	d104      	bne.n	801d1cc <tcp_close_shutdown+0x144>
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	68da      	ldr	r2, [r3, #12]
 801d1c6:	68bb      	ldr	r3, [r7, #8]
 801d1c8:	60da      	str	r2, [r3, #12]
 801d1ca:	e005      	b.n	801d1d8 <tcp_close_shutdown+0x150>
 801d1cc:	68bb      	ldr	r3, [r7, #8]
 801d1ce:	68db      	ldr	r3, [r3, #12]
 801d1d0:	60bb      	str	r3, [r7, #8]
 801d1d2:	68bb      	ldr	r3, [r7, #8]
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d1ef      	bne.n	801d1b8 <tcp_close_shutdown+0x130>
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	2200      	movs	r2, #0
 801d1dc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801d1de:	6878      	ldr	r0, [r7, #4]
 801d1e0:	f7ff fea0 	bl	801cf24 <tcp_free>
      break;
 801d1e4:	e01a      	b.n	801d21c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801d1e6:	6878      	ldr	r0, [r7, #4]
 801d1e8:	f7ff ff14 	bl	801d014 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801d1ec:	6879      	ldr	r1, [r7, #4]
 801d1ee:	4816      	ldr	r0, [pc, #88]	@ (801d248 <tcp_close_shutdown+0x1c0>)
 801d1f0:	f001 f8aa 	bl	801e348 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801d1f4:	6878      	ldr	r0, [r7, #4]
 801d1f6:	f7ff feb1 	bl	801cf5c <tcp_free_listen>
      break;
 801d1fa:	e00f      	b.n	801d21c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d1fc:	6879      	ldr	r1, [r7, #4]
 801d1fe:	480e      	ldr	r0, [pc, #56]	@ (801d238 <tcp_close_shutdown+0x1b0>)
 801d200:	f001 f8a2 	bl	801e348 <tcp_pcb_remove>
 801d204:	4b0d      	ldr	r3, [pc, #52]	@ (801d23c <tcp_close_shutdown+0x1b4>)
 801d206:	2201      	movs	r2, #1
 801d208:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801d20a:	6878      	ldr	r0, [r7, #4]
 801d20c:	f7ff fe8a 	bl	801cf24 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801d210:	e004      	b.n	801d21c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801d212:	6878      	ldr	r0, [r7, #4]
 801d214:	f000 f81a 	bl	801d24c <tcp_close_shutdown_fin>
 801d218:	4603      	mov	r3, r0
 801d21a:	e000      	b.n	801d21e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801d21c:	2300      	movs	r3, #0
}
 801d21e:	4618      	mov	r0, r3
 801d220:	3710      	adds	r7, #16
 801d222:	46bd      	mov	sp, r7
 801d224:	bdb0      	pop	{r4, r5, r7, pc}
 801d226:	bf00      	nop
 801d228:	080297d8 	.word	0x080297d8
 801d22c:	080298ac 	.word	0x080298ac
 801d230:	0802981c 	.word	0x0802981c
 801d234:	080298cc 	.word	0x080298cc
 801d238:	2003c4e0 	.word	0x2003c4e0
 801d23c:	2003c4e8 	.word	0x2003c4e8
 801d240:	2003c520 	.word	0x2003c520
 801d244:	2003c4d8 	.word	0x2003c4d8
 801d248:	2003c4dc 	.word	0x2003c4dc

0801d24c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801d24c:	b580      	push	{r7, lr}
 801d24e:	b084      	sub	sp, #16
 801d250:	af00      	add	r7, sp, #0
 801d252:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	2b00      	cmp	r3, #0
 801d258:	d106      	bne.n	801d268 <tcp_close_shutdown_fin+0x1c>
 801d25a:	4b2e      	ldr	r3, [pc, #184]	@ (801d314 <tcp_close_shutdown_fin+0xc8>)
 801d25c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801d260:	492d      	ldr	r1, [pc, #180]	@ (801d318 <tcp_close_shutdown_fin+0xcc>)
 801d262:	482e      	ldr	r0, [pc, #184]	@ (801d31c <tcp_close_shutdown_fin+0xd0>)
 801d264:	f009 fb18 	bl	8026898 <iprintf>

  switch (pcb->state) {
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	7d1b      	ldrb	r3, [r3, #20]
 801d26c:	2b07      	cmp	r3, #7
 801d26e:	d020      	beq.n	801d2b2 <tcp_close_shutdown_fin+0x66>
 801d270:	2b07      	cmp	r3, #7
 801d272:	dc2b      	bgt.n	801d2cc <tcp_close_shutdown_fin+0x80>
 801d274:	2b03      	cmp	r3, #3
 801d276:	d002      	beq.n	801d27e <tcp_close_shutdown_fin+0x32>
 801d278:	2b04      	cmp	r3, #4
 801d27a:	d00d      	beq.n	801d298 <tcp_close_shutdown_fin+0x4c>
 801d27c:	e026      	b.n	801d2cc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801d27e:	6878      	ldr	r0, [r7, #4]
 801d280:	f003 fee2 	bl	8021048 <tcp_send_fin>
 801d284:	4603      	mov	r3, r0
 801d286:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801d288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	d11f      	bne.n	801d2d0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	2205      	movs	r2, #5
 801d294:	751a      	strb	r2, [r3, #20]
      }
      break;
 801d296:	e01b      	b.n	801d2d0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801d298:	6878      	ldr	r0, [r7, #4]
 801d29a:	f003 fed5 	bl	8021048 <tcp_send_fin>
 801d29e:	4603      	mov	r3, r0
 801d2a0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801d2a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d114      	bne.n	801d2d4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	2205      	movs	r2, #5
 801d2ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 801d2b0:	e010      	b.n	801d2d4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801d2b2:	6878      	ldr	r0, [r7, #4]
 801d2b4:	f003 fec8 	bl	8021048 <tcp_send_fin>
 801d2b8:	4603      	mov	r3, r0
 801d2ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801d2bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	d109      	bne.n	801d2d8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	2209      	movs	r2, #9
 801d2c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 801d2ca:	e005      	b.n	801d2d8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	e01c      	b.n	801d30a <tcp_close_shutdown_fin+0xbe>
      break;
 801d2d0:	bf00      	nop
 801d2d2:	e002      	b.n	801d2da <tcp_close_shutdown_fin+0x8e>
      break;
 801d2d4:	bf00      	nop
 801d2d6:	e000      	b.n	801d2da <tcp_close_shutdown_fin+0x8e>
      break;
 801d2d8:	bf00      	nop
  }

  if (err == ERR_OK) {
 801d2da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	d103      	bne.n	801d2ea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801d2e2:	6878      	ldr	r0, [r7, #4]
 801d2e4:	f003 ffee 	bl	80212c4 <tcp_output>
 801d2e8:	e00d      	b.n	801d306 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801d2ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d2f2:	d108      	bne.n	801d306 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	8b5b      	ldrh	r3, [r3, #26]
 801d2f8:	f043 0308 	orr.w	r3, r3, #8
 801d2fc:	b29a      	uxth	r2, r3
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801d302:	2300      	movs	r3, #0
 801d304:	e001      	b.n	801d30a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801d306:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d30a:	4618      	mov	r0, r3
 801d30c:	3710      	adds	r7, #16
 801d30e:	46bd      	mov	sp, r7
 801d310:	bd80      	pop	{r7, pc}
 801d312:	bf00      	nop
 801d314:	080297d8 	.word	0x080297d8
 801d318:	08029888 	.word	0x08029888
 801d31c:	0802981c 	.word	0x0802981c

0801d320 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801d320:	b580      	push	{r7, lr}
 801d322:	b082      	sub	sp, #8
 801d324:	af00      	add	r7, sp, #0
 801d326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801d328:	687b      	ldr	r3, [r7, #4]
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d109      	bne.n	801d342 <tcp_close+0x22>
 801d32e:	4b0f      	ldr	r3, [pc, #60]	@ (801d36c <tcp_close+0x4c>)
 801d330:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801d334:	490e      	ldr	r1, [pc, #56]	@ (801d370 <tcp_close+0x50>)
 801d336:	480f      	ldr	r0, [pc, #60]	@ (801d374 <tcp_close+0x54>)
 801d338:	f009 faae 	bl	8026898 <iprintf>
 801d33c:	f06f 030f 	mvn.w	r3, #15
 801d340:	e00f      	b.n	801d362 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	7d1b      	ldrb	r3, [r3, #20]
 801d346:	2b01      	cmp	r3, #1
 801d348:	d006      	beq.n	801d358 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	8b5b      	ldrh	r3, [r3, #26]
 801d34e:	f043 0310 	orr.w	r3, r3, #16
 801d352:	b29a      	uxth	r2, r3
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801d358:	2101      	movs	r1, #1
 801d35a:	6878      	ldr	r0, [r7, #4]
 801d35c:	f7ff fe94 	bl	801d088 <tcp_close_shutdown>
 801d360:	4603      	mov	r3, r0
}
 801d362:	4618      	mov	r0, r3
 801d364:	3708      	adds	r7, #8
 801d366:	46bd      	mov	sp, r7
 801d368:	bd80      	pop	{r7, pc}
 801d36a:	bf00      	nop
 801d36c:	080297d8 	.word	0x080297d8
 801d370:	080298e8 	.word	0x080298e8
 801d374:	0802981c 	.word	0x0802981c

0801d378 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801d378:	b580      	push	{r7, lr}
 801d37a:	b08e      	sub	sp, #56	@ 0x38
 801d37c:	af04      	add	r7, sp, #16
 801d37e:	6078      	str	r0, [r7, #4]
 801d380:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	2b00      	cmp	r3, #0
 801d386:	d107      	bne.n	801d398 <tcp_abandon+0x20>
 801d388:	4b52      	ldr	r3, [pc, #328]	@ (801d4d4 <tcp_abandon+0x15c>)
 801d38a:	f240 223d 	movw	r2, #573	@ 0x23d
 801d38e:	4952      	ldr	r1, [pc, #328]	@ (801d4d8 <tcp_abandon+0x160>)
 801d390:	4852      	ldr	r0, [pc, #328]	@ (801d4dc <tcp_abandon+0x164>)
 801d392:	f009 fa81 	bl	8026898 <iprintf>
 801d396:	e099      	b.n	801d4cc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	7d1b      	ldrb	r3, [r3, #20]
 801d39c:	2b01      	cmp	r3, #1
 801d39e:	d106      	bne.n	801d3ae <tcp_abandon+0x36>
 801d3a0:	4b4c      	ldr	r3, [pc, #304]	@ (801d4d4 <tcp_abandon+0x15c>)
 801d3a2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801d3a6:	494e      	ldr	r1, [pc, #312]	@ (801d4e0 <tcp_abandon+0x168>)
 801d3a8:	484c      	ldr	r0, [pc, #304]	@ (801d4dc <tcp_abandon+0x164>)
 801d3aa:	f009 fa75 	bl	8026898 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	7d1b      	ldrb	r3, [r3, #20]
 801d3b2:	2b0a      	cmp	r3, #10
 801d3b4:	d107      	bne.n	801d3c6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801d3b6:	6879      	ldr	r1, [r7, #4]
 801d3b8:	484a      	ldr	r0, [pc, #296]	@ (801d4e4 <tcp_abandon+0x16c>)
 801d3ba:	f000 ffc5 	bl	801e348 <tcp_pcb_remove>
    tcp_free(pcb);
 801d3be:	6878      	ldr	r0, [r7, #4]
 801d3c0:	f7ff fdb0 	bl	801cf24 <tcp_free>
 801d3c4:	e082      	b.n	801d4cc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801d3c6:	2300      	movs	r3, #0
 801d3c8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801d3ca:	2300      	movs	r3, #0
 801d3cc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d3d2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d3d8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d3e0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	691b      	ldr	r3, [r3, #16]
 801d3e6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	7d1b      	ldrb	r3, [r3, #20]
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d126      	bne.n	801d43e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	8adb      	ldrh	r3, [r3, #22]
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d02e      	beq.n	801d456 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d3f8:	4b3b      	ldr	r3, [pc, #236]	@ (801d4e8 <tcp_abandon+0x170>)
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	687a      	ldr	r2, [r7, #4]
 801d3fe:	429a      	cmp	r2, r3
 801d400:	d105      	bne.n	801d40e <tcp_abandon+0x96>
 801d402:	4b39      	ldr	r3, [pc, #228]	@ (801d4e8 <tcp_abandon+0x170>)
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	68db      	ldr	r3, [r3, #12]
 801d408:	4a37      	ldr	r2, [pc, #220]	@ (801d4e8 <tcp_abandon+0x170>)
 801d40a:	6013      	str	r3, [r2, #0]
 801d40c:	e013      	b.n	801d436 <tcp_abandon+0xbe>
 801d40e:	4b36      	ldr	r3, [pc, #216]	@ (801d4e8 <tcp_abandon+0x170>)
 801d410:	681b      	ldr	r3, [r3, #0]
 801d412:	61fb      	str	r3, [r7, #28]
 801d414:	e00c      	b.n	801d430 <tcp_abandon+0xb8>
 801d416:	69fb      	ldr	r3, [r7, #28]
 801d418:	68db      	ldr	r3, [r3, #12]
 801d41a:	687a      	ldr	r2, [r7, #4]
 801d41c:	429a      	cmp	r2, r3
 801d41e:	d104      	bne.n	801d42a <tcp_abandon+0xb2>
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	68da      	ldr	r2, [r3, #12]
 801d424:	69fb      	ldr	r3, [r7, #28]
 801d426:	60da      	str	r2, [r3, #12]
 801d428:	e005      	b.n	801d436 <tcp_abandon+0xbe>
 801d42a:	69fb      	ldr	r3, [r7, #28]
 801d42c:	68db      	ldr	r3, [r3, #12]
 801d42e:	61fb      	str	r3, [r7, #28]
 801d430:	69fb      	ldr	r3, [r7, #28]
 801d432:	2b00      	cmp	r3, #0
 801d434:	d1ef      	bne.n	801d416 <tcp_abandon+0x9e>
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	2200      	movs	r2, #0
 801d43a:	60da      	str	r2, [r3, #12]
 801d43c:	e00b      	b.n	801d456 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801d43e:	683b      	ldr	r3, [r7, #0]
 801d440:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	8adb      	ldrh	r3, [r3, #22]
 801d446:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d448:	6879      	ldr	r1, [r7, #4]
 801d44a:	4828      	ldr	r0, [pc, #160]	@ (801d4ec <tcp_abandon+0x174>)
 801d44c:	f000 ff7c 	bl	801e348 <tcp_pcb_remove>
 801d450:	4b27      	ldr	r3, [pc, #156]	@ (801d4f0 <tcp_abandon+0x178>)
 801d452:	2201      	movs	r2, #1
 801d454:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d004      	beq.n	801d468 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d462:	4618      	mov	r0, r3
 801d464:	f000 fd1e 	bl	801dea4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	d004      	beq.n	801d47a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d474:	4618      	mov	r0, r3
 801d476:	f000 fd15 	bl	801dea4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d004      	beq.n	801d48c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801d482:	687b      	ldr	r3, [r7, #4]
 801d484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d486:	4618      	mov	r0, r3
 801d488:	f000 fd0c 	bl	801dea4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801d48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d00e      	beq.n	801d4b0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801d492:	6879      	ldr	r1, [r7, #4]
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	3304      	adds	r3, #4
 801d498:	687a      	ldr	r2, [r7, #4]
 801d49a:	8b12      	ldrh	r2, [r2, #24]
 801d49c:	9202      	str	r2, [sp, #8]
 801d49e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801d4a0:	9201      	str	r2, [sp, #4]
 801d4a2:	9300      	str	r3, [sp, #0]
 801d4a4:	460b      	mov	r3, r1
 801d4a6:	697a      	ldr	r2, [r7, #20]
 801d4a8:	69b9      	ldr	r1, [r7, #24]
 801d4aa:	6878      	ldr	r0, [r7, #4]
 801d4ac:	f004 fcbe 	bl	8021e2c <tcp_rst>
    }
    last_state = pcb->state;
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	7d1b      	ldrb	r3, [r3, #20]
 801d4b4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801d4b6:	6878      	ldr	r0, [r7, #4]
 801d4b8:	f7ff fd34 	bl	801cf24 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d4bc:	693b      	ldr	r3, [r7, #16]
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d004      	beq.n	801d4cc <tcp_abandon+0x154>
 801d4c2:	693b      	ldr	r3, [r7, #16]
 801d4c4:	f06f 010c 	mvn.w	r1, #12
 801d4c8:	68f8      	ldr	r0, [r7, #12]
 801d4ca:	4798      	blx	r3
  }
}
 801d4cc:	3728      	adds	r7, #40	@ 0x28
 801d4ce:	46bd      	mov	sp, r7
 801d4d0:	bd80      	pop	{r7, pc}
 801d4d2:	bf00      	nop
 801d4d4:	080297d8 	.word	0x080297d8
 801d4d8:	0802991c 	.word	0x0802991c
 801d4dc:	0802981c 	.word	0x0802981c
 801d4e0:	08029938 	.word	0x08029938
 801d4e4:	2003c4e4 	.word	0x2003c4e4
 801d4e8:	2003c4d8 	.word	0x2003c4d8
 801d4ec:	2003c4e0 	.word	0x2003c4e0
 801d4f0:	2003c4e8 	.word	0x2003c4e8

0801d4f4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801d4f4:	b580      	push	{r7, lr}
 801d4f6:	b082      	sub	sp, #8
 801d4f8:	af00      	add	r7, sp, #0
 801d4fa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801d4fc:	2101      	movs	r1, #1
 801d4fe:	6878      	ldr	r0, [r7, #4]
 801d500:	f7ff ff3a 	bl	801d378 <tcp_abandon>
}
 801d504:	bf00      	nop
 801d506:	3708      	adds	r7, #8
 801d508:	46bd      	mov	sp, r7
 801d50a:	bd80      	pop	{r7, pc}

0801d50c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801d50c:	b580      	push	{r7, lr}
 801d50e:	b084      	sub	sp, #16
 801d510:	af00      	add	r7, sp, #0
 801d512:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	2b00      	cmp	r3, #0
 801d518:	d106      	bne.n	801d528 <tcp_update_rcv_ann_wnd+0x1c>
 801d51a:	4b25      	ldr	r3, [pc, #148]	@ (801d5b0 <tcp_update_rcv_ann_wnd+0xa4>)
 801d51c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801d520:	4924      	ldr	r1, [pc, #144]	@ (801d5b4 <tcp_update_rcv_ann_wnd+0xa8>)
 801d522:	4825      	ldr	r0, [pc, #148]	@ (801d5b8 <tcp_update_rcv_ann_wnd+0xac>)
 801d524:	f009 f9b8 	bl	8026898 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d52c:	687a      	ldr	r2, [r7, #4]
 801d52e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801d530:	4413      	add	r3, r2
 801d532:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d538:	687a      	ldr	r2, [r7, #4]
 801d53a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801d53c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 801d540:	bf28      	it	cs
 801d542:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801d546:	b292      	uxth	r2, r2
 801d548:	4413      	add	r3, r2
 801d54a:	68fa      	ldr	r2, [r7, #12]
 801d54c:	1ad3      	subs	r3, r2, r3
 801d54e:	2b00      	cmp	r3, #0
 801d550:	db08      	blt.n	801d564 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d55e:	68fa      	ldr	r2, [r7, #12]
 801d560:	1ad3      	subs	r3, r2, r3
 801d562:	e020      	b.n	801d5a6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d56c:	1ad3      	subs	r3, r2, r3
 801d56e:	2b00      	cmp	r3, #0
 801d570:	dd03      	ble.n	801d57a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	2200      	movs	r2, #0
 801d576:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801d578:	e014      	b.n	801d5a4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d582:	1ad3      	subs	r3, r2, r3
 801d584:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801d586:	68bb      	ldr	r3, [r7, #8]
 801d588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d58c:	d306      	bcc.n	801d59c <tcp_update_rcv_ann_wnd+0x90>
 801d58e:	4b08      	ldr	r3, [pc, #32]	@ (801d5b0 <tcp_update_rcv_ann_wnd+0xa4>)
 801d590:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801d594:	4909      	ldr	r1, [pc, #36]	@ (801d5bc <tcp_update_rcv_ann_wnd+0xb0>)
 801d596:	4808      	ldr	r0, [pc, #32]	@ (801d5b8 <tcp_update_rcv_ann_wnd+0xac>)
 801d598:	f009 f97e 	bl	8026898 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801d59c:	68bb      	ldr	r3, [r7, #8]
 801d59e:	b29a      	uxth	r2, r3
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801d5a4:	2300      	movs	r3, #0
  }
}
 801d5a6:	4618      	mov	r0, r3
 801d5a8:	3710      	adds	r7, #16
 801d5aa:	46bd      	mov	sp, r7
 801d5ac:	bd80      	pop	{r7, pc}
 801d5ae:	bf00      	nop
 801d5b0:	080297d8 	.word	0x080297d8
 801d5b4:	08029a34 	.word	0x08029a34
 801d5b8:	0802981c 	.word	0x0802981c
 801d5bc:	08029a58 	.word	0x08029a58

0801d5c0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801d5c0:	b580      	push	{r7, lr}
 801d5c2:	b084      	sub	sp, #16
 801d5c4:	af00      	add	r7, sp, #0
 801d5c6:	6078      	str	r0, [r7, #4]
 801d5c8:	460b      	mov	r3, r1
 801d5ca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	d107      	bne.n	801d5e2 <tcp_recved+0x22>
 801d5d2:	4b1f      	ldr	r3, [pc, #124]	@ (801d650 <tcp_recved+0x90>)
 801d5d4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 801d5d8:	491e      	ldr	r1, [pc, #120]	@ (801d654 <tcp_recved+0x94>)
 801d5da:	481f      	ldr	r0, [pc, #124]	@ (801d658 <tcp_recved+0x98>)
 801d5dc:	f009 f95c 	bl	8026898 <iprintf>
 801d5e0:	e032      	b.n	801d648 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	7d1b      	ldrb	r3, [r3, #20]
 801d5e6:	2b01      	cmp	r3, #1
 801d5e8:	d106      	bne.n	801d5f8 <tcp_recved+0x38>
 801d5ea:	4b19      	ldr	r3, [pc, #100]	@ (801d650 <tcp_recved+0x90>)
 801d5ec:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801d5f0:	491a      	ldr	r1, [pc, #104]	@ (801d65c <tcp_recved+0x9c>)
 801d5f2:	4819      	ldr	r0, [pc, #100]	@ (801d658 <tcp_recved+0x98>)
 801d5f4:	f009 f950 	bl	8026898 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801d5f8:	687b      	ldr	r3, [r7, #4]
 801d5fa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801d5fc:	887b      	ldrh	r3, [r7, #2]
 801d5fe:	4413      	add	r3, r2
 801d600:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801d602:	89fb      	ldrh	r3, [r7, #14]
 801d604:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801d608:	d804      	bhi.n	801d614 <tcp_recved+0x54>
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d60e:	89fa      	ldrh	r2, [r7, #14]
 801d610:	429a      	cmp	r2, r3
 801d612:	d204      	bcs.n	801d61e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801d61a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801d61c:	e002      	b.n	801d624 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	89fa      	ldrh	r2, [r7, #14]
 801d622:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801d624:	6878      	ldr	r0, [r7, #4]
 801d626:	f7ff ff71 	bl	801d50c <tcp_update_rcv_ann_wnd>
 801d62a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801d62c:	68bb      	ldr	r3, [r7, #8]
 801d62e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801d632:	d309      	bcc.n	801d648 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	8b5b      	ldrh	r3, [r3, #26]
 801d638:	f043 0302 	orr.w	r3, r3, #2
 801d63c:	b29a      	uxth	r2, r3
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801d642:	6878      	ldr	r0, [r7, #4]
 801d644:	f003 fe3e 	bl	80212c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801d648:	3710      	adds	r7, #16
 801d64a:	46bd      	mov	sp, r7
 801d64c:	bd80      	pop	{r7, pc}
 801d64e:	bf00      	nop
 801d650:	080297d8 	.word	0x080297d8
 801d654:	08029a74 	.word	0x08029a74
 801d658:	0802981c 	.word	0x0802981c
 801d65c:	08029a8c 	.word	0x08029a8c

0801d660 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801d660:	b5b0      	push	{r4, r5, r7, lr}
 801d662:	b090      	sub	sp, #64	@ 0x40
 801d664:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801d666:	2300      	movs	r3, #0
 801d668:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801d66c:	4b95      	ldr	r3, [pc, #596]	@ (801d8c4 <tcp_slowtmr+0x264>)
 801d66e:	681b      	ldr	r3, [r3, #0]
 801d670:	3301      	adds	r3, #1
 801d672:	4a94      	ldr	r2, [pc, #592]	@ (801d8c4 <tcp_slowtmr+0x264>)
 801d674:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801d676:	4b94      	ldr	r3, [pc, #592]	@ (801d8c8 <tcp_slowtmr+0x268>)
 801d678:	781b      	ldrb	r3, [r3, #0]
 801d67a:	3301      	adds	r3, #1
 801d67c:	b2da      	uxtb	r2, r3
 801d67e:	4b92      	ldr	r3, [pc, #584]	@ (801d8c8 <tcp_slowtmr+0x268>)
 801d680:	701a      	strb	r2, [r3, #0]
 801d682:	e000      	b.n	801d686 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 801d684:	bf00      	nop
  prev = NULL;
 801d686:	2300      	movs	r3, #0
 801d688:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801d68a:	4b90      	ldr	r3, [pc, #576]	@ (801d8cc <tcp_slowtmr+0x26c>)
 801d68c:	681b      	ldr	r3, [r3, #0]
 801d68e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801d690:	e29d      	b.n	801dbce <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d694:	7d1b      	ldrb	r3, [r3, #20]
 801d696:	2b00      	cmp	r3, #0
 801d698:	d106      	bne.n	801d6a8 <tcp_slowtmr+0x48>
 801d69a:	4b8d      	ldr	r3, [pc, #564]	@ (801d8d0 <tcp_slowtmr+0x270>)
 801d69c:	f240 42be 	movw	r2, #1214	@ 0x4be
 801d6a0:	498c      	ldr	r1, [pc, #560]	@ (801d8d4 <tcp_slowtmr+0x274>)
 801d6a2:	488d      	ldr	r0, [pc, #564]	@ (801d8d8 <tcp_slowtmr+0x278>)
 801d6a4:	f009 f8f8 	bl	8026898 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801d6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6aa:	7d1b      	ldrb	r3, [r3, #20]
 801d6ac:	2b01      	cmp	r3, #1
 801d6ae:	d106      	bne.n	801d6be <tcp_slowtmr+0x5e>
 801d6b0:	4b87      	ldr	r3, [pc, #540]	@ (801d8d0 <tcp_slowtmr+0x270>)
 801d6b2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801d6b6:	4989      	ldr	r1, [pc, #548]	@ (801d8dc <tcp_slowtmr+0x27c>)
 801d6b8:	4887      	ldr	r0, [pc, #540]	@ (801d8d8 <tcp_slowtmr+0x278>)
 801d6ba:	f009 f8ed 	bl	8026898 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801d6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6c0:	7d1b      	ldrb	r3, [r3, #20]
 801d6c2:	2b0a      	cmp	r3, #10
 801d6c4:	d106      	bne.n	801d6d4 <tcp_slowtmr+0x74>
 801d6c6:	4b82      	ldr	r3, [pc, #520]	@ (801d8d0 <tcp_slowtmr+0x270>)
 801d6c8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801d6cc:	4984      	ldr	r1, [pc, #528]	@ (801d8e0 <tcp_slowtmr+0x280>)
 801d6ce:	4882      	ldr	r0, [pc, #520]	@ (801d8d8 <tcp_slowtmr+0x278>)
 801d6d0:	f009 f8e2 	bl	8026898 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801d6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6d6:	7f9a      	ldrb	r2, [r3, #30]
 801d6d8:	4b7b      	ldr	r3, [pc, #492]	@ (801d8c8 <tcp_slowtmr+0x268>)
 801d6da:	781b      	ldrb	r3, [r3, #0]
 801d6dc:	429a      	cmp	r2, r3
 801d6de:	d105      	bne.n	801d6ec <tcp_slowtmr+0x8c>
      prev = pcb;
 801d6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801d6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6e6:	68db      	ldr	r3, [r3, #12]
 801d6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801d6ea:	e270      	b.n	801dbce <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801d6ec:	4b76      	ldr	r3, [pc, #472]	@ (801d8c8 <tcp_slowtmr+0x268>)
 801d6ee:	781a      	ldrb	r2, [r3, #0]
 801d6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6f2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 801d6f4:	2300      	movs	r3, #0
 801d6f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801d6fa:	2300      	movs	r3, #0
 801d6fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801d700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d702:	7d1b      	ldrb	r3, [r3, #20]
 801d704:	2b02      	cmp	r3, #2
 801d706:	d10a      	bne.n	801d71e <tcp_slowtmr+0xbe>
 801d708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d70a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801d70e:	2b05      	cmp	r3, #5
 801d710:	d905      	bls.n	801d71e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801d712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d716:	3301      	adds	r3, #1
 801d718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d71c:	e11e      	b.n	801d95c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801d71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d720:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801d724:	2b0b      	cmp	r3, #11
 801d726:	d905      	bls.n	801d734 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801d728:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d72c:	3301      	adds	r3, #1
 801d72e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d732:	e113      	b.n	801d95c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 801d734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d736:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	d075      	beq.n	801d82a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801d73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d742:	2b00      	cmp	r3, #0
 801d744:	d006      	beq.n	801d754 <tcp_slowtmr+0xf4>
 801d746:	4b62      	ldr	r3, [pc, #392]	@ (801d8d0 <tcp_slowtmr+0x270>)
 801d748:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801d74c:	4965      	ldr	r1, [pc, #404]	@ (801d8e4 <tcp_slowtmr+0x284>)
 801d74e:	4862      	ldr	r0, [pc, #392]	@ (801d8d8 <tcp_slowtmr+0x278>)
 801d750:	f009 f8a2 	bl	8026898 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801d754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d758:	2b00      	cmp	r3, #0
 801d75a:	d106      	bne.n	801d76a <tcp_slowtmr+0x10a>
 801d75c:	4b5c      	ldr	r3, [pc, #368]	@ (801d8d0 <tcp_slowtmr+0x270>)
 801d75e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801d762:	4961      	ldr	r1, [pc, #388]	@ (801d8e8 <tcp_slowtmr+0x288>)
 801d764:	485c      	ldr	r0, [pc, #368]	@ (801d8d8 <tcp_slowtmr+0x278>)
 801d766:	f009 f897 	bl	8026898 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801d76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d76c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801d770:	2b0b      	cmp	r3, #11
 801d772:	d905      	bls.n	801d780 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 801d774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d778:	3301      	adds	r3, #1
 801d77a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d77e:	e0ed      	b.n	801d95c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801d780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d782:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801d786:	3b01      	subs	r3, #1
 801d788:	4a58      	ldr	r2, [pc, #352]	@ (801d8ec <tcp_slowtmr+0x28c>)
 801d78a:	5cd3      	ldrb	r3, [r2, r3]
 801d78c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801d78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d790:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801d794:	7c7a      	ldrb	r2, [r7, #17]
 801d796:	429a      	cmp	r2, r3
 801d798:	d907      	bls.n	801d7aa <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801d79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d79c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801d7a0:	3301      	adds	r3, #1
 801d7a2:	b2da      	uxtb	r2, r3
 801d7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7a6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801d7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801d7b0:	7c7a      	ldrb	r2, [r7, #17]
 801d7b2:	429a      	cmp	r2, r3
 801d7b4:	f200 80d2 	bhi.w	801d95c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801d7b8:	2301      	movs	r3, #1
 801d7ba:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801d7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d7c2:	2b00      	cmp	r3, #0
 801d7c4:	d108      	bne.n	801d7d8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801d7c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d7c8:	f004 fc24 	bl	8022014 <tcp_zero_window_probe>
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d014      	beq.n	801d7fc <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801d7d2:	2300      	movs	r3, #0
 801d7d4:	623b      	str	r3, [r7, #32]
 801d7d6:	e011      	b.n	801d7fc <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801d7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d7de:	4619      	mov	r1, r3
 801d7e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d7e2:	f003 fae9 	bl	8020db8 <tcp_split_unsent_seg>
 801d7e6:	4603      	mov	r3, r0
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d107      	bne.n	801d7fc <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801d7ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d7ee:	f003 fd69 	bl	80212c4 <tcp_output>
 801d7f2:	4603      	mov	r3, r0
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	d101      	bne.n	801d7fc <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801d7f8:	2300      	movs	r3, #0
 801d7fa:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801d7fc:	6a3b      	ldr	r3, [r7, #32]
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	f000 80ac 	beq.w	801d95c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 801d804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d806:	2200      	movs	r2, #0
 801d808:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801d80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d80e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801d812:	2b06      	cmp	r3, #6
 801d814:	f200 80a2 	bhi.w	801d95c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801d818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d81a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801d81e:	3301      	adds	r3, #1
 801d820:	b2da      	uxtb	r2, r3
 801d822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d824:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801d828:	e098      	b.n	801d95c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801d82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d82c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801d830:	2b00      	cmp	r3, #0
 801d832:	db0f      	blt.n	801d854 <tcp_slowtmr+0x1f4>
 801d834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d836:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801d83a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801d83e:	4293      	cmp	r3, r2
 801d840:	d008      	beq.n	801d854 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801d842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d844:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801d848:	b29b      	uxth	r3, r3
 801d84a:	3301      	adds	r3, #1
 801d84c:	b29b      	uxth	r3, r3
 801d84e:	b21a      	sxth	r2, r3
 801d850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d852:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801d854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d856:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801d85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d85c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801d860:	429a      	cmp	r2, r3
 801d862:	db7b      	blt.n	801d95c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801d864:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d866:	f004 f821 	bl	80218ac <tcp_rexmit_rto_prepare>
 801d86a:	4603      	mov	r3, r0
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	d007      	beq.n	801d880 <tcp_slowtmr+0x220>
 801d870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d874:	2b00      	cmp	r3, #0
 801d876:	d171      	bne.n	801d95c <tcp_slowtmr+0x2fc>
 801d878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d87a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	d06d      	beq.n	801d95c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801d880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d882:	7d1b      	ldrb	r3, [r3, #20]
 801d884:	2b02      	cmp	r3, #2
 801d886:	d03a      	beq.n	801d8fe <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801d888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d88a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801d88e:	2b0c      	cmp	r3, #12
 801d890:	bf28      	it	cs
 801d892:	230c      	movcs	r3, #12
 801d894:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801d896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d898:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801d89c:	10db      	asrs	r3, r3, #3
 801d89e:	b21b      	sxth	r3, r3
 801d8a0:	461a      	mov	r2, r3
 801d8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801d8a8:	4413      	add	r3, r2
 801d8aa:	7efa      	ldrb	r2, [r7, #27]
 801d8ac:	4910      	ldr	r1, [pc, #64]	@ (801d8f0 <tcp_slowtmr+0x290>)
 801d8ae:	5c8a      	ldrb	r2, [r1, r2]
 801d8b0:	4093      	lsls	r3, r2
 801d8b2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801d8b4:	697b      	ldr	r3, [r7, #20]
 801d8b6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801d8ba:	4293      	cmp	r3, r2
 801d8bc:	dc1a      	bgt.n	801d8f4 <tcp_slowtmr+0x294>
 801d8be:	697b      	ldr	r3, [r7, #20]
 801d8c0:	b21a      	sxth	r2, r3
 801d8c2:	e019      	b.n	801d8f8 <tcp_slowtmr+0x298>
 801d8c4:	2003c4d4 	.word	0x2003c4d4
 801d8c8:	2003c4ea 	.word	0x2003c4ea
 801d8cc:	2003c4e0 	.word	0x2003c4e0
 801d8d0:	080297d8 	.word	0x080297d8
 801d8d4:	08029b1c 	.word	0x08029b1c
 801d8d8:	0802981c 	.word	0x0802981c
 801d8dc:	08029b48 	.word	0x08029b48
 801d8e0:	08029b74 	.word	0x08029b74
 801d8e4:	08029ba4 	.word	0x08029ba4
 801d8e8:	08029bd8 	.word	0x08029bd8
 801d8ec:	0802ced4 	.word	0x0802ced4
 801d8f0:	0802cec4 	.word	0x0802cec4
 801d8f4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801d8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801d8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d900:	2200      	movs	r2, #0
 801d902:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801d904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d906:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801d90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d90c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801d910:	4293      	cmp	r3, r2
 801d912:	bf28      	it	cs
 801d914:	4613      	movcs	r3, r2
 801d916:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801d918:	8a7b      	ldrh	r3, [r7, #18]
 801d91a:	085b      	lsrs	r3, r3, #1
 801d91c:	b29a      	uxth	r2, r3
 801d91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d920:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801d924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d926:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801d92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d92c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d92e:	005b      	lsls	r3, r3, #1
 801d930:	b29b      	uxth	r3, r3
 801d932:	429a      	cmp	r2, r3
 801d934:	d206      	bcs.n	801d944 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801d936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d938:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d93a:	005b      	lsls	r3, r3, #1
 801d93c:	b29a      	uxth	r2, r3
 801d93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d940:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801d944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d946:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801d948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d94a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801d94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d950:	2200      	movs	r2, #0
 801d952:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801d956:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d958:	f004 f818 	bl	802198c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801d95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d95e:	7d1b      	ldrb	r3, [r3, #20]
 801d960:	2b06      	cmp	r3, #6
 801d962:	d111      	bne.n	801d988 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 801d964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d966:	8b5b      	ldrh	r3, [r3, #26]
 801d968:	f003 0310 	and.w	r3, r3, #16
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d00b      	beq.n	801d988 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d970:	4b9c      	ldr	r3, [pc, #624]	@ (801dbe4 <tcp_slowtmr+0x584>)
 801d972:	681a      	ldr	r2, [r3, #0]
 801d974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d976:	6a1b      	ldr	r3, [r3, #32]
 801d978:	1ad3      	subs	r3, r2, r3
 801d97a:	2b28      	cmp	r3, #40	@ 0x28
 801d97c:	d904      	bls.n	801d988 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801d97e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d982:	3301      	adds	r3, #1
 801d984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801d988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d98a:	7a5b      	ldrb	r3, [r3, #9]
 801d98c:	f003 0308 	and.w	r3, r3, #8
 801d990:	2b00      	cmp	r3, #0
 801d992:	d04a      	beq.n	801da2a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801d994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d996:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801d998:	2b04      	cmp	r3, #4
 801d99a:	d003      	beq.n	801d9a4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801d99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d99e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801d9a0:	2b07      	cmp	r3, #7
 801d9a2:	d142      	bne.n	801da2a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d9a4:	4b8f      	ldr	r3, [pc, #572]	@ (801dbe4 <tcp_slowtmr+0x584>)
 801d9a6:	681a      	ldr	r2, [r3, #0]
 801d9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9aa:	6a1b      	ldr	r3, [r3, #32]
 801d9ac:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801d9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9b0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801d9b4:	4b8c      	ldr	r3, [pc, #560]	@ (801dbe8 <tcp_slowtmr+0x588>)
 801d9b6:	440b      	add	r3, r1
 801d9b8:	498c      	ldr	r1, [pc, #560]	@ (801dbec <tcp_slowtmr+0x58c>)
 801d9ba:	fba1 1303 	umull	r1, r3, r1, r3
 801d9be:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d9c0:	429a      	cmp	r2, r3
 801d9c2:	d90a      	bls.n	801d9da <tcp_slowtmr+0x37a>
        ++pcb_remove;
 801d9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d9c8:	3301      	adds	r3, #1
 801d9ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801d9ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d9d2:	3301      	adds	r3, #1
 801d9d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801d9d8:	e027      	b.n	801da2a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801d9da:	4b82      	ldr	r3, [pc, #520]	@ (801dbe4 <tcp_slowtmr+0x584>)
 801d9dc:	681a      	ldr	r2, [r3, #0]
 801d9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9e0:	6a1b      	ldr	r3, [r3, #32]
 801d9e2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801d9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9e6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801d9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9ec:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801d9f0:	4618      	mov	r0, r3
 801d9f2:	4b7f      	ldr	r3, [pc, #508]	@ (801dbf0 <tcp_slowtmr+0x590>)
 801d9f4:	fb00 f303 	mul.w	r3, r0, r3
 801d9f8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801d9fa:	497c      	ldr	r1, [pc, #496]	@ (801dbec <tcp_slowtmr+0x58c>)
 801d9fc:	fba1 1303 	umull	r1, r3, r1, r3
 801da00:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801da02:	429a      	cmp	r2, r3
 801da04:	d911      	bls.n	801da2a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801da06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801da08:	f004 fac4 	bl	8021f94 <tcp_keepalive>
 801da0c:	4603      	mov	r3, r0
 801da0e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801da12:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801da16:	2b00      	cmp	r3, #0
 801da18:	d107      	bne.n	801da2a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801da1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da1c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801da20:	3301      	adds	r3, #1
 801da22:	b2da      	uxtb	r2, r3
 801da24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da26:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801da2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da2e:	2b00      	cmp	r3, #0
 801da30:	d011      	beq.n	801da56 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801da32:	4b6c      	ldr	r3, [pc, #432]	@ (801dbe4 <tcp_slowtmr+0x584>)
 801da34:	681a      	ldr	r2, [r3, #0]
 801da36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da38:	6a1b      	ldr	r3, [r3, #32]
 801da3a:	1ad2      	subs	r2, r2, r3
 801da3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da3e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801da42:	4619      	mov	r1, r3
 801da44:	460b      	mov	r3, r1
 801da46:	005b      	lsls	r3, r3, #1
 801da48:	440b      	add	r3, r1
 801da4a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801da4c:	429a      	cmp	r2, r3
 801da4e:	d302      	bcc.n	801da56 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801da50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801da52:	f000 fddd 	bl	801e610 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801da56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da58:	7d1b      	ldrb	r3, [r3, #20]
 801da5a:	2b03      	cmp	r3, #3
 801da5c:	d10b      	bne.n	801da76 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801da5e:	4b61      	ldr	r3, [pc, #388]	@ (801dbe4 <tcp_slowtmr+0x584>)
 801da60:	681a      	ldr	r2, [r3, #0]
 801da62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da64:	6a1b      	ldr	r3, [r3, #32]
 801da66:	1ad3      	subs	r3, r2, r3
 801da68:	2b28      	cmp	r3, #40	@ 0x28
 801da6a:	d904      	bls.n	801da76 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801da6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801da70:	3301      	adds	r3, #1
 801da72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801da76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da78:	7d1b      	ldrb	r3, [r3, #20]
 801da7a:	2b09      	cmp	r3, #9
 801da7c:	d10b      	bne.n	801da96 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801da7e:	4b59      	ldr	r3, [pc, #356]	@ (801dbe4 <tcp_slowtmr+0x584>)
 801da80:	681a      	ldr	r2, [r3, #0]
 801da82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da84:	6a1b      	ldr	r3, [r3, #32]
 801da86:	1ad3      	subs	r3, r2, r3
 801da88:	2bf0      	cmp	r3, #240	@ 0xf0
 801da8a:	d904      	bls.n	801da96 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801da8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801da90:	3301      	adds	r3, #1
 801da92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801da96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d060      	beq.n	801db60 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801da9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801daa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801daa4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801daa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801daa8:	f000 fbfe 	bl	801e2a8 <tcp_pcb_purge>
      if (prev != NULL) {
 801daac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d010      	beq.n	801dad4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801dab2:	4b50      	ldr	r3, [pc, #320]	@ (801dbf4 <tcp_slowtmr+0x594>)
 801dab4:	681b      	ldr	r3, [r3, #0]
 801dab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801dab8:	429a      	cmp	r2, r3
 801daba:	d106      	bne.n	801daca <tcp_slowtmr+0x46a>
 801dabc:	4b4e      	ldr	r3, [pc, #312]	@ (801dbf8 <tcp_slowtmr+0x598>)
 801dabe:	f240 526d 	movw	r2, #1389	@ 0x56d
 801dac2:	494e      	ldr	r1, [pc, #312]	@ (801dbfc <tcp_slowtmr+0x59c>)
 801dac4:	484e      	ldr	r0, [pc, #312]	@ (801dc00 <tcp_slowtmr+0x5a0>)
 801dac6:	f008 fee7 	bl	8026898 <iprintf>
        prev->next = pcb->next;
 801daca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dacc:	68da      	ldr	r2, [r3, #12]
 801dace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dad0:	60da      	str	r2, [r3, #12]
 801dad2:	e00f      	b.n	801daf4 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801dad4:	4b47      	ldr	r3, [pc, #284]	@ (801dbf4 <tcp_slowtmr+0x594>)
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801dada:	429a      	cmp	r2, r3
 801dadc:	d006      	beq.n	801daec <tcp_slowtmr+0x48c>
 801dade:	4b46      	ldr	r3, [pc, #280]	@ (801dbf8 <tcp_slowtmr+0x598>)
 801dae0:	f240 5271 	movw	r2, #1393	@ 0x571
 801dae4:	4947      	ldr	r1, [pc, #284]	@ (801dc04 <tcp_slowtmr+0x5a4>)
 801dae6:	4846      	ldr	r0, [pc, #280]	@ (801dc00 <tcp_slowtmr+0x5a0>)
 801dae8:	f008 fed6 	bl	8026898 <iprintf>
        tcp_active_pcbs = pcb->next;
 801daec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801daee:	68db      	ldr	r3, [r3, #12]
 801daf0:	4a40      	ldr	r2, [pc, #256]	@ (801dbf4 <tcp_slowtmr+0x594>)
 801daf2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801daf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801daf8:	2b00      	cmp	r3, #0
 801dafa:	d013      	beq.n	801db24 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801dafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dafe:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801db00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801db02:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801db04:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801db06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801db08:	3304      	adds	r3, #4
 801db0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801db0c:	8ad2      	ldrh	r2, [r2, #22]
 801db0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801db10:	8b09      	ldrh	r1, [r1, #24]
 801db12:	9102      	str	r1, [sp, #8]
 801db14:	9201      	str	r2, [sp, #4]
 801db16:	9300      	str	r3, [sp, #0]
 801db18:	462b      	mov	r3, r5
 801db1a:	4622      	mov	r2, r4
 801db1c:	4601      	mov	r1, r0
 801db1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801db20:	f004 f984 	bl	8021e2c <tcp_rst>
      err_arg = pcb->callback_arg;
 801db24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801db26:	691b      	ldr	r3, [r3, #16]
 801db28:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801db2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801db2c:	7d1b      	ldrb	r3, [r3, #20]
 801db2e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801db30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801db32:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801db34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801db36:	68db      	ldr	r3, [r3, #12]
 801db38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801db3a:	6838      	ldr	r0, [r7, #0]
 801db3c:	f7ff f9f2 	bl	801cf24 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801db40:	4b31      	ldr	r3, [pc, #196]	@ (801dc08 <tcp_slowtmr+0x5a8>)
 801db42:	2200      	movs	r2, #0
 801db44:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801db46:	68fb      	ldr	r3, [r7, #12]
 801db48:	2b00      	cmp	r3, #0
 801db4a:	d004      	beq.n	801db56 <tcp_slowtmr+0x4f6>
 801db4c:	68fb      	ldr	r3, [r7, #12]
 801db4e:	f06f 010c 	mvn.w	r1, #12
 801db52:	68b8      	ldr	r0, [r7, #8]
 801db54:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801db56:	4b2c      	ldr	r3, [pc, #176]	@ (801dc08 <tcp_slowtmr+0x5a8>)
 801db58:	781b      	ldrb	r3, [r3, #0]
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	d037      	beq.n	801dbce <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801db5e:	e592      	b.n	801d686 <tcp_slowtmr+0x26>
      prev = pcb;
 801db60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801db62:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801db64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801db66:	68db      	ldr	r3, [r3, #12]
 801db68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801db6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db6c:	7f1b      	ldrb	r3, [r3, #28]
 801db6e:	3301      	adds	r3, #1
 801db70:	b2da      	uxtb	r2, r3
 801db72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db74:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801db76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db78:	7f1a      	ldrb	r2, [r3, #28]
 801db7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db7c:	7f5b      	ldrb	r3, [r3, #29]
 801db7e:	429a      	cmp	r2, r3
 801db80:	d325      	bcc.n	801dbce <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801db82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db84:	2200      	movs	r2, #0
 801db86:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801db88:	4b1f      	ldr	r3, [pc, #124]	@ (801dc08 <tcp_slowtmr+0x5a8>)
 801db8a:	2200      	movs	r2, #0
 801db8c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801db8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801db94:	2b00      	cmp	r3, #0
 801db96:	d00b      	beq.n	801dbb0 <tcp_slowtmr+0x550>
 801db98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801db9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801dba0:	6912      	ldr	r2, [r2, #16]
 801dba2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801dba4:	4610      	mov	r0, r2
 801dba6:	4798      	blx	r3
 801dba8:	4603      	mov	r3, r0
 801dbaa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801dbae:	e002      	b.n	801dbb6 <tcp_slowtmr+0x556>
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801dbb6:	4b14      	ldr	r3, [pc, #80]	@ (801dc08 <tcp_slowtmr+0x5a8>)
 801dbb8:	781b      	ldrb	r3, [r3, #0]
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	f47f ad62 	bne.w	801d684 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801dbc0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	d102      	bne.n	801dbce <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801dbc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801dbca:	f003 fb7b 	bl	80212c4 <tcp_output>
  while (pcb != NULL) {
 801dbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	f47f ad5e 	bne.w	801d692 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801dbd6:	2300      	movs	r3, #0
 801dbd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801dbda:	4b0c      	ldr	r3, [pc, #48]	@ (801dc0c <tcp_slowtmr+0x5ac>)
 801dbdc:	681b      	ldr	r3, [r3, #0]
 801dbde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801dbe0:	e069      	b.n	801dcb6 <tcp_slowtmr+0x656>
 801dbe2:	bf00      	nop
 801dbe4:	2003c4d4 	.word	0x2003c4d4
 801dbe8:	000a4cb8 	.word	0x000a4cb8
 801dbec:	10624dd3 	.word	0x10624dd3
 801dbf0:	000124f8 	.word	0x000124f8
 801dbf4:	2003c4e0 	.word	0x2003c4e0
 801dbf8:	080297d8 	.word	0x080297d8
 801dbfc:	08029c10 	.word	0x08029c10
 801dc00:	0802981c 	.word	0x0802981c
 801dc04:	08029c3c 	.word	0x08029c3c
 801dc08:	2003c4e8 	.word	0x2003c4e8
 801dc0c:	2003c4e4 	.word	0x2003c4e4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801dc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dc12:	7d1b      	ldrb	r3, [r3, #20]
 801dc14:	2b0a      	cmp	r3, #10
 801dc16:	d006      	beq.n	801dc26 <tcp_slowtmr+0x5c6>
 801dc18:	4b2b      	ldr	r3, [pc, #172]	@ (801dcc8 <tcp_slowtmr+0x668>)
 801dc1a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801dc1e:	492b      	ldr	r1, [pc, #172]	@ (801dccc <tcp_slowtmr+0x66c>)
 801dc20:	482b      	ldr	r0, [pc, #172]	@ (801dcd0 <tcp_slowtmr+0x670>)
 801dc22:	f008 fe39 	bl	8026898 <iprintf>
    pcb_remove = 0;
 801dc26:	2300      	movs	r3, #0
 801dc28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801dc2c:	4b29      	ldr	r3, [pc, #164]	@ (801dcd4 <tcp_slowtmr+0x674>)
 801dc2e:	681a      	ldr	r2, [r3, #0]
 801dc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dc32:	6a1b      	ldr	r3, [r3, #32]
 801dc34:	1ad3      	subs	r3, r2, r3
 801dc36:	2bf0      	cmp	r3, #240	@ 0xf0
 801dc38:	d904      	bls.n	801dc44 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801dc3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801dc3e:	3301      	adds	r3, #1
 801dc40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801dc44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d02f      	beq.n	801dcac <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801dc4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801dc4e:	f000 fb2b 	bl	801e2a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801dc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d010      	beq.n	801dc7a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801dc58:	4b1f      	ldr	r3, [pc, #124]	@ (801dcd8 <tcp_slowtmr+0x678>)
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801dc5e:	429a      	cmp	r2, r3
 801dc60:	d106      	bne.n	801dc70 <tcp_slowtmr+0x610>
 801dc62:	4b19      	ldr	r3, [pc, #100]	@ (801dcc8 <tcp_slowtmr+0x668>)
 801dc64:	f240 52af 	movw	r2, #1455	@ 0x5af
 801dc68:	491c      	ldr	r1, [pc, #112]	@ (801dcdc <tcp_slowtmr+0x67c>)
 801dc6a:	4819      	ldr	r0, [pc, #100]	@ (801dcd0 <tcp_slowtmr+0x670>)
 801dc6c:	f008 fe14 	bl	8026898 <iprintf>
        prev->next = pcb->next;
 801dc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dc72:	68da      	ldr	r2, [r3, #12]
 801dc74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dc76:	60da      	str	r2, [r3, #12]
 801dc78:	e00f      	b.n	801dc9a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801dc7a:	4b17      	ldr	r3, [pc, #92]	@ (801dcd8 <tcp_slowtmr+0x678>)
 801dc7c:	681b      	ldr	r3, [r3, #0]
 801dc7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801dc80:	429a      	cmp	r2, r3
 801dc82:	d006      	beq.n	801dc92 <tcp_slowtmr+0x632>
 801dc84:	4b10      	ldr	r3, [pc, #64]	@ (801dcc8 <tcp_slowtmr+0x668>)
 801dc86:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801dc8a:	4915      	ldr	r1, [pc, #84]	@ (801dce0 <tcp_slowtmr+0x680>)
 801dc8c:	4810      	ldr	r0, [pc, #64]	@ (801dcd0 <tcp_slowtmr+0x670>)
 801dc8e:	f008 fe03 	bl	8026898 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801dc92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dc94:	68db      	ldr	r3, [r3, #12]
 801dc96:	4a10      	ldr	r2, [pc, #64]	@ (801dcd8 <tcp_slowtmr+0x678>)
 801dc98:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801dc9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dc9c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801dc9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dca0:	68db      	ldr	r3, [r3, #12]
 801dca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801dca4:	69f8      	ldr	r0, [r7, #28]
 801dca6:	f7ff f93d 	bl	801cf24 <tcp_free>
 801dcaa:	e004      	b.n	801dcb6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801dcac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dcae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801dcb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dcb2:	68db      	ldr	r3, [r3, #12]
 801dcb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801dcb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	d1a9      	bne.n	801dc10 <tcp_slowtmr+0x5b0>
    }
  }
}
 801dcbc:	bf00      	nop
 801dcbe:	bf00      	nop
 801dcc0:	3730      	adds	r7, #48	@ 0x30
 801dcc2:	46bd      	mov	sp, r7
 801dcc4:	bdb0      	pop	{r4, r5, r7, pc}
 801dcc6:	bf00      	nop
 801dcc8:	080297d8 	.word	0x080297d8
 801dccc:	08029c68 	.word	0x08029c68
 801dcd0:	0802981c 	.word	0x0802981c
 801dcd4:	2003c4d4 	.word	0x2003c4d4
 801dcd8:	2003c4e4 	.word	0x2003c4e4
 801dcdc:	08029c98 	.word	0x08029c98
 801dce0:	08029cc0 	.word	0x08029cc0

0801dce4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801dce4:	b580      	push	{r7, lr}
 801dce6:	b082      	sub	sp, #8
 801dce8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801dcea:	4b2d      	ldr	r3, [pc, #180]	@ (801dda0 <tcp_fasttmr+0xbc>)
 801dcec:	781b      	ldrb	r3, [r3, #0]
 801dcee:	3301      	adds	r3, #1
 801dcf0:	b2da      	uxtb	r2, r3
 801dcf2:	4b2b      	ldr	r3, [pc, #172]	@ (801dda0 <tcp_fasttmr+0xbc>)
 801dcf4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801dcf6:	4b2b      	ldr	r3, [pc, #172]	@ (801dda4 <tcp_fasttmr+0xc0>)
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801dcfc:	e048      	b.n	801dd90 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801dcfe:	687b      	ldr	r3, [r7, #4]
 801dd00:	7f9a      	ldrb	r2, [r3, #30]
 801dd02:	4b27      	ldr	r3, [pc, #156]	@ (801dda0 <tcp_fasttmr+0xbc>)
 801dd04:	781b      	ldrb	r3, [r3, #0]
 801dd06:	429a      	cmp	r2, r3
 801dd08:	d03f      	beq.n	801dd8a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801dd0a:	4b25      	ldr	r3, [pc, #148]	@ (801dda0 <tcp_fasttmr+0xbc>)
 801dd0c:	781a      	ldrb	r2, [r3, #0]
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	8b5b      	ldrh	r3, [r3, #26]
 801dd16:	f003 0301 	and.w	r3, r3, #1
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	d010      	beq.n	801dd40 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	8b5b      	ldrh	r3, [r3, #26]
 801dd22:	f043 0302 	orr.w	r3, r3, #2
 801dd26:	b29a      	uxth	r2, r3
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801dd2c:	6878      	ldr	r0, [r7, #4]
 801dd2e:	f003 fac9 	bl	80212c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	8b5b      	ldrh	r3, [r3, #26]
 801dd36:	f023 0303 	bic.w	r3, r3, #3
 801dd3a:	b29a      	uxth	r2, r3
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	8b5b      	ldrh	r3, [r3, #26]
 801dd44:	f003 0308 	and.w	r3, r3, #8
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d009      	beq.n	801dd60 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	8b5b      	ldrh	r3, [r3, #26]
 801dd50:	f023 0308 	bic.w	r3, r3, #8
 801dd54:	b29a      	uxth	r2, r3
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801dd5a:	6878      	ldr	r0, [r7, #4]
 801dd5c:	f7ff fa76 	bl	801d24c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	68db      	ldr	r3, [r3, #12]
 801dd64:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801dd6a:	2b00      	cmp	r3, #0
 801dd6c:	d00a      	beq.n	801dd84 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801dd6e:	4b0e      	ldr	r3, [pc, #56]	@ (801dda8 <tcp_fasttmr+0xc4>)
 801dd70:	2200      	movs	r2, #0
 801dd72:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801dd74:	6878      	ldr	r0, [r7, #4]
 801dd76:	f000 f819 	bl	801ddac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801dd7a:	4b0b      	ldr	r3, [pc, #44]	@ (801dda8 <tcp_fasttmr+0xc4>)
 801dd7c:	781b      	ldrb	r3, [r3, #0]
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	d000      	beq.n	801dd84 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801dd82:	e7b8      	b.n	801dcf6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801dd84:	683b      	ldr	r3, [r7, #0]
 801dd86:	607b      	str	r3, [r7, #4]
 801dd88:	e002      	b.n	801dd90 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	68db      	ldr	r3, [r3, #12]
 801dd8e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	2b00      	cmp	r3, #0
 801dd94:	d1b3      	bne.n	801dcfe <tcp_fasttmr+0x1a>
    }
  }
}
 801dd96:	bf00      	nop
 801dd98:	bf00      	nop
 801dd9a:	3708      	adds	r7, #8
 801dd9c:	46bd      	mov	sp, r7
 801dd9e:	bd80      	pop	{r7, pc}
 801dda0:	2003c4ea 	.word	0x2003c4ea
 801dda4:	2003c4e0 	.word	0x2003c4e0
 801dda8:	2003c4e8 	.word	0x2003c4e8

0801ddac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801ddac:	b590      	push	{r4, r7, lr}
 801ddae:	b085      	sub	sp, #20
 801ddb0:	af00      	add	r7, sp, #0
 801ddb2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d109      	bne.n	801ddce <tcp_process_refused_data+0x22>
 801ddba:	4b37      	ldr	r3, [pc, #220]	@ (801de98 <tcp_process_refused_data+0xec>)
 801ddbc:	f240 6209 	movw	r2, #1545	@ 0x609
 801ddc0:	4936      	ldr	r1, [pc, #216]	@ (801de9c <tcp_process_refused_data+0xf0>)
 801ddc2:	4837      	ldr	r0, [pc, #220]	@ (801dea0 <tcp_process_refused_data+0xf4>)
 801ddc4:	f008 fd68 	bl	8026898 <iprintf>
 801ddc8:	f06f 030f 	mvn.w	r3, #15
 801ddcc:	e060      	b.n	801de90 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ddd2:	7b5b      	ldrb	r3, [r3, #13]
 801ddd4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ddda:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	2200      	movs	r2, #0
 801dde0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d00b      	beq.n	801de04 <tcp_process_refused_data+0x58>
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801ddf2:	687b      	ldr	r3, [r7, #4]
 801ddf4:	6918      	ldr	r0, [r3, #16]
 801ddf6:	2300      	movs	r3, #0
 801ddf8:	68ba      	ldr	r2, [r7, #8]
 801ddfa:	6879      	ldr	r1, [r7, #4]
 801ddfc:	47a0      	blx	r4
 801ddfe:	4603      	mov	r3, r0
 801de00:	73fb      	strb	r3, [r7, #15]
 801de02:	e007      	b.n	801de14 <tcp_process_refused_data+0x68>
 801de04:	2300      	movs	r3, #0
 801de06:	68ba      	ldr	r2, [r7, #8]
 801de08:	6879      	ldr	r1, [r7, #4]
 801de0a:	2000      	movs	r0, #0
 801de0c:	f000 f8a4 	bl	801df58 <tcp_recv_null>
 801de10:	4603      	mov	r3, r0
 801de12:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801de14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de18:	2b00      	cmp	r3, #0
 801de1a:	d12a      	bne.n	801de72 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801de1c:	7bbb      	ldrb	r3, [r7, #14]
 801de1e:	f003 0320 	and.w	r3, r3, #32
 801de22:	2b00      	cmp	r3, #0
 801de24:	d033      	beq.n	801de8e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801de2a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801de2e:	d005      	beq.n	801de3c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801de34:	3301      	adds	r3, #1
 801de36:	b29a      	uxth	r2, r3
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801de42:	2b00      	cmp	r3, #0
 801de44:	d00b      	beq.n	801de5e <tcp_process_refused_data+0xb2>
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	6918      	ldr	r0, [r3, #16]
 801de50:	2300      	movs	r3, #0
 801de52:	2200      	movs	r2, #0
 801de54:	6879      	ldr	r1, [r7, #4]
 801de56:	47a0      	blx	r4
 801de58:	4603      	mov	r3, r0
 801de5a:	73fb      	strb	r3, [r7, #15]
 801de5c:	e001      	b.n	801de62 <tcp_process_refused_data+0xb6>
 801de5e:	2300      	movs	r3, #0
 801de60:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801de62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de66:	f113 0f0d 	cmn.w	r3, #13
 801de6a:	d110      	bne.n	801de8e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801de6c:	f06f 030c 	mvn.w	r3, #12
 801de70:	e00e      	b.n	801de90 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801de72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de76:	f113 0f0d 	cmn.w	r3, #13
 801de7a:	d102      	bne.n	801de82 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801de7c:	f06f 030c 	mvn.w	r3, #12
 801de80:	e006      	b.n	801de90 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	68ba      	ldr	r2, [r7, #8]
 801de86:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801de88:	f06f 0304 	mvn.w	r3, #4
 801de8c:	e000      	b.n	801de90 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801de8e:	2300      	movs	r3, #0
}
 801de90:	4618      	mov	r0, r3
 801de92:	3714      	adds	r7, #20
 801de94:	46bd      	mov	sp, r7
 801de96:	bd90      	pop	{r4, r7, pc}
 801de98:	080297d8 	.word	0x080297d8
 801de9c:	08029ce8 	.word	0x08029ce8
 801dea0:	0802981c 	.word	0x0802981c

0801dea4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801dea4:	b580      	push	{r7, lr}
 801dea6:	b084      	sub	sp, #16
 801dea8:	af00      	add	r7, sp, #0
 801deaa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801deac:	e007      	b.n	801debe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801deae:	687b      	ldr	r3, [r7, #4]
 801deb0:	681b      	ldr	r3, [r3, #0]
 801deb2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801deb4:	6878      	ldr	r0, [r7, #4]
 801deb6:	f000 f80a 	bl	801dece <tcp_seg_free>
    seg = next;
 801deba:	68fb      	ldr	r3, [r7, #12]
 801debc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	2b00      	cmp	r3, #0
 801dec2:	d1f4      	bne.n	801deae <tcp_segs_free+0xa>
  }
}
 801dec4:	bf00      	nop
 801dec6:	bf00      	nop
 801dec8:	3710      	adds	r7, #16
 801deca:	46bd      	mov	sp, r7
 801decc:	bd80      	pop	{r7, pc}

0801dece <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801dece:	b580      	push	{r7, lr}
 801ded0:	b082      	sub	sp, #8
 801ded2:	af00      	add	r7, sp, #0
 801ded4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	2b00      	cmp	r3, #0
 801deda:	d00c      	beq.n	801def6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	685b      	ldr	r3, [r3, #4]
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d004      	beq.n	801deee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	685b      	ldr	r3, [r3, #4]
 801dee8:	4618      	mov	r0, r3
 801deea:	f7fe fd5f 	bl	801c9ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801deee:	6879      	ldr	r1, [r7, #4]
 801def0:	2003      	movs	r0, #3
 801def2:	f7fd feb9 	bl	801bc68 <memp_free>
  }
}
 801def6:	bf00      	nop
 801def8:	3708      	adds	r7, #8
 801defa:	46bd      	mov	sp, r7
 801defc:	bd80      	pop	{r7, pc}
	...

0801df00 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801df00:	b580      	push	{r7, lr}
 801df02:	b084      	sub	sp, #16
 801df04:	af00      	add	r7, sp, #0
 801df06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d106      	bne.n	801df1c <tcp_seg_copy+0x1c>
 801df0e:	4b0f      	ldr	r3, [pc, #60]	@ (801df4c <tcp_seg_copy+0x4c>)
 801df10:	f240 6282 	movw	r2, #1666	@ 0x682
 801df14:	490e      	ldr	r1, [pc, #56]	@ (801df50 <tcp_seg_copy+0x50>)
 801df16:	480f      	ldr	r0, [pc, #60]	@ (801df54 <tcp_seg_copy+0x54>)
 801df18:	f008 fcbe 	bl	8026898 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801df1c:	2003      	movs	r0, #3
 801df1e:	f7fd fe2d 	bl	801bb7c <memp_malloc>
 801df22:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	2b00      	cmp	r3, #0
 801df28:	d101      	bne.n	801df2e <tcp_seg_copy+0x2e>
    return NULL;
 801df2a:	2300      	movs	r3, #0
 801df2c:	e00a      	b.n	801df44 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801df2e:	2210      	movs	r2, #16
 801df30:	6879      	ldr	r1, [r7, #4]
 801df32:	68f8      	ldr	r0, [r7, #12]
 801df34:	f008 fe2f 	bl	8026b96 <memcpy>
  pbuf_ref(cseg->p);
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	685b      	ldr	r3, [r3, #4]
 801df3c:	4618      	mov	r0, r3
 801df3e:	f7fe fddb 	bl	801caf8 <pbuf_ref>
  return cseg;
 801df42:	68fb      	ldr	r3, [r7, #12]
}
 801df44:	4618      	mov	r0, r3
 801df46:	3710      	adds	r7, #16
 801df48:	46bd      	mov	sp, r7
 801df4a:	bd80      	pop	{r7, pc}
 801df4c:	080297d8 	.word	0x080297d8
 801df50:	08029d2c 	.word	0x08029d2c
 801df54:	0802981c 	.word	0x0802981c

0801df58 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801df58:	b580      	push	{r7, lr}
 801df5a:	b084      	sub	sp, #16
 801df5c:	af00      	add	r7, sp, #0
 801df5e:	60f8      	str	r0, [r7, #12]
 801df60:	60b9      	str	r1, [r7, #8]
 801df62:	607a      	str	r2, [r7, #4]
 801df64:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801df66:	68bb      	ldr	r3, [r7, #8]
 801df68:	2b00      	cmp	r3, #0
 801df6a:	d109      	bne.n	801df80 <tcp_recv_null+0x28>
 801df6c:	4b12      	ldr	r3, [pc, #72]	@ (801dfb8 <tcp_recv_null+0x60>)
 801df6e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801df72:	4912      	ldr	r1, [pc, #72]	@ (801dfbc <tcp_recv_null+0x64>)
 801df74:	4812      	ldr	r0, [pc, #72]	@ (801dfc0 <tcp_recv_null+0x68>)
 801df76:	f008 fc8f 	bl	8026898 <iprintf>
 801df7a:	f06f 030f 	mvn.w	r3, #15
 801df7e:	e016      	b.n	801dfae <tcp_recv_null+0x56>

  if (p != NULL) {
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	2b00      	cmp	r3, #0
 801df84:	d009      	beq.n	801df9a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	891b      	ldrh	r3, [r3, #8]
 801df8a:	4619      	mov	r1, r3
 801df8c:	68b8      	ldr	r0, [r7, #8]
 801df8e:	f7ff fb17 	bl	801d5c0 <tcp_recved>
    pbuf_free(p);
 801df92:	6878      	ldr	r0, [r7, #4]
 801df94:	f7fe fd0a 	bl	801c9ac <pbuf_free>
 801df98:	e008      	b.n	801dfac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801df9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d104      	bne.n	801dfac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801dfa2:	68b8      	ldr	r0, [r7, #8]
 801dfa4:	f7ff f9bc 	bl	801d320 <tcp_close>
 801dfa8:	4603      	mov	r3, r0
 801dfaa:	e000      	b.n	801dfae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801dfac:	2300      	movs	r3, #0
}
 801dfae:	4618      	mov	r0, r3
 801dfb0:	3710      	adds	r7, #16
 801dfb2:	46bd      	mov	sp, r7
 801dfb4:	bd80      	pop	{r7, pc}
 801dfb6:	bf00      	nop
 801dfb8:	080297d8 	.word	0x080297d8
 801dfbc:	08029d48 	.word	0x08029d48
 801dfc0:	0802981c 	.word	0x0802981c

0801dfc4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801dfc4:	b580      	push	{r7, lr}
 801dfc6:	b086      	sub	sp, #24
 801dfc8:	af00      	add	r7, sp, #0
 801dfca:	4603      	mov	r3, r0
 801dfcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801dfce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	db01      	blt.n	801dfda <tcp_kill_prio+0x16>
 801dfd6:	79fb      	ldrb	r3, [r7, #7]
 801dfd8:	e000      	b.n	801dfdc <tcp_kill_prio+0x18>
 801dfda:	237f      	movs	r3, #127	@ 0x7f
 801dfdc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801dfde:	7afb      	ldrb	r3, [r7, #11]
 801dfe0:	2b00      	cmp	r3, #0
 801dfe2:	d034      	beq.n	801e04e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801dfe4:	7afb      	ldrb	r3, [r7, #11]
 801dfe6:	3b01      	subs	r3, #1
 801dfe8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801dfea:	2300      	movs	r3, #0
 801dfec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801dfee:	2300      	movs	r3, #0
 801dff0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dff2:	4b19      	ldr	r3, [pc, #100]	@ (801e058 <tcp_kill_prio+0x94>)
 801dff4:	681b      	ldr	r3, [r3, #0]
 801dff6:	617b      	str	r3, [r7, #20]
 801dff8:	e01f      	b.n	801e03a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801dffa:	697b      	ldr	r3, [r7, #20]
 801dffc:	7d5b      	ldrb	r3, [r3, #21]
 801dffe:	7afa      	ldrb	r2, [r7, #11]
 801e000:	429a      	cmp	r2, r3
 801e002:	d80c      	bhi.n	801e01e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801e004:	697b      	ldr	r3, [r7, #20]
 801e006:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801e008:	7afa      	ldrb	r2, [r7, #11]
 801e00a:	429a      	cmp	r2, r3
 801e00c:	d112      	bne.n	801e034 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801e00e:	4b13      	ldr	r3, [pc, #76]	@ (801e05c <tcp_kill_prio+0x98>)
 801e010:	681a      	ldr	r2, [r3, #0]
 801e012:	697b      	ldr	r3, [r7, #20]
 801e014:	6a1b      	ldr	r3, [r3, #32]
 801e016:	1ad3      	subs	r3, r2, r3
 801e018:	68fa      	ldr	r2, [r7, #12]
 801e01a:	429a      	cmp	r2, r3
 801e01c:	d80a      	bhi.n	801e034 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801e01e:	4b0f      	ldr	r3, [pc, #60]	@ (801e05c <tcp_kill_prio+0x98>)
 801e020:	681a      	ldr	r2, [r3, #0]
 801e022:	697b      	ldr	r3, [r7, #20]
 801e024:	6a1b      	ldr	r3, [r3, #32]
 801e026:	1ad3      	subs	r3, r2, r3
 801e028:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801e02a:	697b      	ldr	r3, [r7, #20]
 801e02c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801e02e:	697b      	ldr	r3, [r7, #20]
 801e030:	7d5b      	ldrb	r3, [r3, #21]
 801e032:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e034:	697b      	ldr	r3, [r7, #20]
 801e036:	68db      	ldr	r3, [r3, #12]
 801e038:	617b      	str	r3, [r7, #20]
 801e03a:	697b      	ldr	r3, [r7, #20]
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	d1dc      	bne.n	801dffa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801e040:	693b      	ldr	r3, [r7, #16]
 801e042:	2b00      	cmp	r3, #0
 801e044:	d004      	beq.n	801e050 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801e046:	6938      	ldr	r0, [r7, #16]
 801e048:	f7ff fa54 	bl	801d4f4 <tcp_abort>
 801e04c:	e000      	b.n	801e050 <tcp_kill_prio+0x8c>
    return;
 801e04e:	bf00      	nop
  }
}
 801e050:	3718      	adds	r7, #24
 801e052:	46bd      	mov	sp, r7
 801e054:	bd80      	pop	{r7, pc}
 801e056:	bf00      	nop
 801e058:	2003c4e0 	.word	0x2003c4e0
 801e05c:	2003c4d4 	.word	0x2003c4d4

0801e060 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801e060:	b580      	push	{r7, lr}
 801e062:	b086      	sub	sp, #24
 801e064:	af00      	add	r7, sp, #0
 801e066:	4603      	mov	r3, r0
 801e068:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801e06a:	79fb      	ldrb	r3, [r7, #7]
 801e06c:	2b08      	cmp	r3, #8
 801e06e:	d009      	beq.n	801e084 <tcp_kill_state+0x24>
 801e070:	79fb      	ldrb	r3, [r7, #7]
 801e072:	2b09      	cmp	r3, #9
 801e074:	d006      	beq.n	801e084 <tcp_kill_state+0x24>
 801e076:	4b1a      	ldr	r3, [pc, #104]	@ (801e0e0 <tcp_kill_state+0x80>)
 801e078:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801e07c:	4919      	ldr	r1, [pc, #100]	@ (801e0e4 <tcp_kill_state+0x84>)
 801e07e:	481a      	ldr	r0, [pc, #104]	@ (801e0e8 <tcp_kill_state+0x88>)
 801e080:	f008 fc0a 	bl	8026898 <iprintf>

  inactivity = 0;
 801e084:	2300      	movs	r3, #0
 801e086:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801e088:	2300      	movs	r3, #0
 801e08a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e08c:	4b17      	ldr	r3, [pc, #92]	@ (801e0ec <tcp_kill_state+0x8c>)
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	617b      	str	r3, [r7, #20]
 801e092:	e017      	b.n	801e0c4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801e094:	697b      	ldr	r3, [r7, #20]
 801e096:	7d1b      	ldrb	r3, [r3, #20]
 801e098:	79fa      	ldrb	r2, [r7, #7]
 801e09a:	429a      	cmp	r2, r3
 801e09c:	d10f      	bne.n	801e0be <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e09e:	4b14      	ldr	r3, [pc, #80]	@ (801e0f0 <tcp_kill_state+0x90>)
 801e0a0:	681a      	ldr	r2, [r3, #0]
 801e0a2:	697b      	ldr	r3, [r7, #20]
 801e0a4:	6a1b      	ldr	r3, [r3, #32]
 801e0a6:	1ad3      	subs	r3, r2, r3
 801e0a8:	68fa      	ldr	r2, [r7, #12]
 801e0aa:	429a      	cmp	r2, r3
 801e0ac:	d807      	bhi.n	801e0be <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801e0ae:	4b10      	ldr	r3, [pc, #64]	@ (801e0f0 <tcp_kill_state+0x90>)
 801e0b0:	681a      	ldr	r2, [r3, #0]
 801e0b2:	697b      	ldr	r3, [r7, #20]
 801e0b4:	6a1b      	ldr	r3, [r3, #32]
 801e0b6:	1ad3      	subs	r3, r2, r3
 801e0b8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801e0ba:	697b      	ldr	r3, [r7, #20]
 801e0bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e0be:	697b      	ldr	r3, [r7, #20]
 801e0c0:	68db      	ldr	r3, [r3, #12]
 801e0c2:	617b      	str	r3, [r7, #20]
 801e0c4:	697b      	ldr	r3, [r7, #20]
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	d1e4      	bne.n	801e094 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801e0ca:	693b      	ldr	r3, [r7, #16]
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	d003      	beq.n	801e0d8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801e0d0:	2100      	movs	r1, #0
 801e0d2:	6938      	ldr	r0, [r7, #16]
 801e0d4:	f7ff f950 	bl	801d378 <tcp_abandon>
  }
}
 801e0d8:	bf00      	nop
 801e0da:	3718      	adds	r7, #24
 801e0dc:	46bd      	mov	sp, r7
 801e0de:	bd80      	pop	{r7, pc}
 801e0e0:	080297d8 	.word	0x080297d8
 801e0e4:	08029d64 	.word	0x08029d64
 801e0e8:	0802981c 	.word	0x0802981c
 801e0ec:	2003c4e0 	.word	0x2003c4e0
 801e0f0:	2003c4d4 	.word	0x2003c4d4

0801e0f4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801e0f4:	b580      	push	{r7, lr}
 801e0f6:	b084      	sub	sp, #16
 801e0f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801e0fa:	2300      	movs	r3, #0
 801e0fc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801e0fe:	2300      	movs	r3, #0
 801e100:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e102:	4b12      	ldr	r3, [pc, #72]	@ (801e14c <tcp_kill_timewait+0x58>)
 801e104:	681b      	ldr	r3, [r3, #0]
 801e106:	60fb      	str	r3, [r7, #12]
 801e108:	e012      	b.n	801e130 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e10a:	4b11      	ldr	r3, [pc, #68]	@ (801e150 <tcp_kill_timewait+0x5c>)
 801e10c:	681a      	ldr	r2, [r3, #0]
 801e10e:	68fb      	ldr	r3, [r7, #12]
 801e110:	6a1b      	ldr	r3, [r3, #32]
 801e112:	1ad3      	subs	r3, r2, r3
 801e114:	687a      	ldr	r2, [r7, #4]
 801e116:	429a      	cmp	r2, r3
 801e118:	d807      	bhi.n	801e12a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801e11a:	4b0d      	ldr	r3, [pc, #52]	@ (801e150 <tcp_kill_timewait+0x5c>)
 801e11c:	681a      	ldr	r2, [r3, #0]
 801e11e:	68fb      	ldr	r3, [r7, #12]
 801e120:	6a1b      	ldr	r3, [r3, #32]
 801e122:	1ad3      	subs	r3, r2, r3
 801e124:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801e126:	68fb      	ldr	r3, [r7, #12]
 801e128:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	68db      	ldr	r3, [r3, #12]
 801e12e:	60fb      	str	r3, [r7, #12]
 801e130:	68fb      	ldr	r3, [r7, #12]
 801e132:	2b00      	cmp	r3, #0
 801e134:	d1e9      	bne.n	801e10a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801e136:	68bb      	ldr	r3, [r7, #8]
 801e138:	2b00      	cmp	r3, #0
 801e13a:	d002      	beq.n	801e142 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801e13c:	68b8      	ldr	r0, [r7, #8]
 801e13e:	f7ff f9d9 	bl	801d4f4 <tcp_abort>
  }
}
 801e142:	bf00      	nop
 801e144:	3710      	adds	r7, #16
 801e146:	46bd      	mov	sp, r7
 801e148:	bd80      	pop	{r7, pc}
 801e14a:	bf00      	nop
 801e14c:	2003c4e4 	.word	0x2003c4e4
 801e150:	2003c4d4 	.word	0x2003c4d4

0801e154 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801e154:	b580      	push	{r7, lr}
 801e156:	b082      	sub	sp, #8
 801e158:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801e15a:	4b10      	ldr	r3, [pc, #64]	@ (801e19c <tcp_handle_closepend+0x48>)
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801e160:	e014      	b.n	801e18c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	68db      	ldr	r3, [r3, #12]
 801e166:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	8b5b      	ldrh	r3, [r3, #26]
 801e16c:	f003 0308 	and.w	r3, r3, #8
 801e170:	2b00      	cmp	r3, #0
 801e172:	d009      	beq.n	801e188 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	8b5b      	ldrh	r3, [r3, #26]
 801e178:	f023 0308 	bic.w	r3, r3, #8
 801e17c:	b29a      	uxth	r2, r3
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801e182:	6878      	ldr	r0, [r7, #4]
 801e184:	f7ff f862 	bl	801d24c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801e188:	683b      	ldr	r3, [r7, #0]
 801e18a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d1e7      	bne.n	801e162 <tcp_handle_closepend+0xe>
  }
}
 801e192:	bf00      	nop
 801e194:	bf00      	nop
 801e196:	3708      	adds	r7, #8
 801e198:	46bd      	mov	sp, r7
 801e19a:	bd80      	pop	{r7, pc}
 801e19c:	2003c4e0 	.word	0x2003c4e0

0801e1a0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801e1a0:	b580      	push	{r7, lr}
 801e1a2:	b084      	sub	sp, #16
 801e1a4:	af00      	add	r7, sp, #0
 801e1a6:	4603      	mov	r3, r0
 801e1a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e1aa:	2001      	movs	r0, #1
 801e1ac:	f7fd fce6 	bl	801bb7c <memp_malloc>
 801e1b0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801e1b2:	68fb      	ldr	r3, [r7, #12]
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	d126      	bne.n	801e206 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801e1b8:	f7ff ffcc 	bl	801e154 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801e1bc:	f7ff ff9a 	bl	801e0f4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e1c0:	2001      	movs	r0, #1
 801e1c2:	f7fd fcdb 	bl	801bb7c <memp_malloc>
 801e1c6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801e1c8:	68fb      	ldr	r3, [r7, #12]
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d11b      	bne.n	801e206 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801e1ce:	2009      	movs	r0, #9
 801e1d0:	f7ff ff46 	bl	801e060 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e1d4:	2001      	movs	r0, #1
 801e1d6:	f7fd fcd1 	bl	801bb7c <memp_malloc>
 801e1da:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	d111      	bne.n	801e206 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801e1e2:	2008      	movs	r0, #8
 801e1e4:	f7ff ff3c 	bl	801e060 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e1e8:	2001      	movs	r0, #1
 801e1ea:	f7fd fcc7 	bl	801bb7c <memp_malloc>
 801e1ee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d107      	bne.n	801e206 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801e1f6:	79fb      	ldrb	r3, [r7, #7]
 801e1f8:	4618      	mov	r0, r3
 801e1fa:	f7ff fee3 	bl	801dfc4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e1fe:	2001      	movs	r0, #1
 801e200:	f7fd fcbc 	bl	801bb7c <memp_malloc>
 801e204:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	2b00      	cmp	r3, #0
 801e20a:	d03f      	beq.n	801e28c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801e20c:	229c      	movs	r2, #156	@ 0x9c
 801e20e:	2100      	movs	r1, #0
 801e210:	68f8      	ldr	r0, [r7, #12]
 801e212:	f008 fbe0 	bl	80269d6 <memset>
    pcb->prio = prio;
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	79fa      	ldrb	r2, [r7, #7]
 801e21a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801e21c:	68fb      	ldr	r3, [r7, #12]
 801e21e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801e222:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801e22c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801e22e:	68fb      	ldr	r3, [r7, #12]
 801e230:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801e232:	68fb      	ldr	r3, [r7, #12]
 801e234:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801e236:	68fb      	ldr	r3, [r7, #12]
 801e238:	22fb      	movs	r2, #251	@ 0xfb
 801e23a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801e23c:	68fb      	ldr	r3, [r7, #12]
 801e23e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801e242:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	2206      	movs	r2, #6
 801e248:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801e24c:	68fb      	ldr	r3, [r7, #12]
 801e24e:	2206      	movs	r2, #6
 801e250:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801e252:	68fb      	ldr	r3, [r7, #12]
 801e254:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e258:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801e25a:	68fb      	ldr	r3, [r7, #12]
 801e25c:	2201      	movs	r2, #1
 801e25e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801e262:	4b0d      	ldr	r3, [pc, #52]	@ (801e298 <tcp_alloc+0xf8>)
 801e264:	681a      	ldr	r2, [r3, #0]
 801e266:	68fb      	ldr	r3, [r7, #12]
 801e268:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801e26a:	4b0c      	ldr	r3, [pc, #48]	@ (801e29c <tcp_alloc+0xfc>)
 801e26c:	781a      	ldrb	r2, [r3, #0]
 801e26e:	68fb      	ldr	r3, [r7, #12]
 801e270:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801e278:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801e27c:	68fb      	ldr	r3, [r7, #12]
 801e27e:	4a08      	ldr	r2, [pc, #32]	@ (801e2a0 <tcp_alloc+0x100>)
 801e280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801e284:	68fb      	ldr	r3, [r7, #12]
 801e286:	4a07      	ldr	r2, [pc, #28]	@ (801e2a4 <tcp_alloc+0x104>)
 801e288:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801e28c:	68fb      	ldr	r3, [r7, #12]
}
 801e28e:	4618      	mov	r0, r3
 801e290:	3710      	adds	r7, #16
 801e292:	46bd      	mov	sp, r7
 801e294:	bd80      	pop	{r7, pc}
 801e296:	bf00      	nop
 801e298:	2003c4d4 	.word	0x2003c4d4
 801e29c:	2003c4ea 	.word	0x2003c4ea
 801e2a0:	0801df59 	.word	0x0801df59
 801e2a4:	006ddd00 	.word	0x006ddd00

0801e2a8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801e2a8:	b580      	push	{r7, lr}
 801e2aa:	b082      	sub	sp, #8
 801e2ac:	af00      	add	r7, sp, #0
 801e2ae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801e2b0:	687b      	ldr	r3, [r7, #4]
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d107      	bne.n	801e2c6 <tcp_pcb_purge+0x1e>
 801e2b6:	4b21      	ldr	r3, [pc, #132]	@ (801e33c <tcp_pcb_purge+0x94>)
 801e2b8:	f640 0251 	movw	r2, #2129	@ 0x851
 801e2bc:	4920      	ldr	r1, [pc, #128]	@ (801e340 <tcp_pcb_purge+0x98>)
 801e2be:	4821      	ldr	r0, [pc, #132]	@ (801e344 <tcp_pcb_purge+0x9c>)
 801e2c0:	f008 faea 	bl	8026898 <iprintf>
 801e2c4:	e037      	b.n	801e336 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801e2c6:	687b      	ldr	r3, [r7, #4]
 801e2c8:	7d1b      	ldrb	r3, [r3, #20]
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	d033      	beq.n	801e336 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801e2d2:	2b0a      	cmp	r3, #10
 801e2d4:	d02f      	beq.n	801e336 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801e2da:	2b01      	cmp	r3, #1
 801e2dc:	d02b      	beq.n	801e336 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	d007      	beq.n	801e2f6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801e2e6:	687b      	ldr	r3, [r7, #4]
 801e2e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e2ea:	4618      	mov	r0, r3
 801e2ec:	f7fe fb5e 	bl	801c9ac <pbuf_free>
      pcb->refused_data = NULL;
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	2200      	movs	r2, #0
 801e2f4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801e2f6:	687b      	ldr	r3, [r7, #4]
 801e2f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e2fa:	2b00      	cmp	r3, #0
 801e2fc:	d002      	beq.n	801e304 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801e2fe:	6878      	ldr	r0, [r7, #4]
 801e300:	f000 f986 	bl	801e610 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e30a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e310:	4618      	mov	r0, r3
 801e312:	f7ff fdc7 	bl	801dea4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e31a:	4618      	mov	r0, r3
 801e31c:	f7ff fdc2 	bl	801dea4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	2200      	movs	r2, #0
 801e324:	66da      	str	r2, [r3, #108]	@ 0x6c
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801e32a:	687b      	ldr	r3, [r7, #4]
 801e32c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	2200      	movs	r2, #0
 801e332:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801e336:	3708      	adds	r7, #8
 801e338:	46bd      	mov	sp, r7
 801e33a:	bd80      	pop	{r7, pc}
 801e33c:	080297d8 	.word	0x080297d8
 801e340:	08029e24 	.word	0x08029e24
 801e344:	0802981c 	.word	0x0802981c

0801e348 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801e348:	b580      	push	{r7, lr}
 801e34a:	b084      	sub	sp, #16
 801e34c:	af00      	add	r7, sp, #0
 801e34e:	6078      	str	r0, [r7, #4]
 801e350:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801e352:	683b      	ldr	r3, [r7, #0]
 801e354:	2b00      	cmp	r3, #0
 801e356:	d106      	bne.n	801e366 <tcp_pcb_remove+0x1e>
 801e358:	4b3e      	ldr	r3, [pc, #248]	@ (801e454 <tcp_pcb_remove+0x10c>)
 801e35a:	f640 0283 	movw	r2, #2179	@ 0x883
 801e35e:	493e      	ldr	r1, [pc, #248]	@ (801e458 <tcp_pcb_remove+0x110>)
 801e360:	483e      	ldr	r0, [pc, #248]	@ (801e45c <tcp_pcb_remove+0x114>)
 801e362:	f008 fa99 	bl	8026898 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d106      	bne.n	801e37a <tcp_pcb_remove+0x32>
 801e36c:	4b39      	ldr	r3, [pc, #228]	@ (801e454 <tcp_pcb_remove+0x10c>)
 801e36e:	f640 0284 	movw	r2, #2180	@ 0x884
 801e372:	493b      	ldr	r1, [pc, #236]	@ (801e460 <tcp_pcb_remove+0x118>)
 801e374:	4839      	ldr	r0, [pc, #228]	@ (801e45c <tcp_pcb_remove+0x114>)
 801e376:	f008 fa8f 	bl	8026898 <iprintf>

  TCP_RMV(pcblist, pcb);
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	681b      	ldr	r3, [r3, #0]
 801e37e:	683a      	ldr	r2, [r7, #0]
 801e380:	429a      	cmp	r2, r3
 801e382:	d105      	bne.n	801e390 <tcp_pcb_remove+0x48>
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	681b      	ldr	r3, [r3, #0]
 801e388:	68da      	ldr	r2, [r3, #12]
 801e38a:	687b      	ldr	r3, [r7, #4]
 801e38c:	601a      	str	r2, [r3, #0]
 801e38e:	e013      	b.n	801e3b8 <tcp_pcb_remove+0x70>
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	681b      	ldr	r3, [r3, #0]
 801e394:	60fb      	str	r3, [r7, #12]
 801e396:	e00c      	b.n	801e3b2 <tcp_pcb_remove+0x6a>
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	68db      	ldr	r3, [r3, #12]
 801e39c:	683a      	ldr	r2, [r7, #0]
 801e39e:	429a      	cmp	r2, r3
 801e3a0:	d104      	bne.n	801e3ac <tcp_pcb_remove+0x64>
 801e3a2:	683b      	ldr	r3, [r7, #0]
 801e3a4:	68da      	ldr	r2, [r3, #12]
 801e3a6:	68fb      	ldr	r3, [r7, #12]
 801e3a8:	60da      	str	r2, [r3, #12]
 801e3aa:	e005      	b.n	801e3b8 <tcp_pcb_remove+0x70>
 801e3ac:	68fb      	ldr	r3, [r7, #12]
 801e3ae:	68db      	ldr	r3, [r3, #12]
 801e3b0:	60fb      	str	r3, [r7, #12]
 801e3b2:	68fb      	ldr	r3, [r7, #12]
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d1ef      	bne.n	801e398 <tcp_pcb_remove+0x50>
 801e3b8:	683b      	ldr	r3, [r7, #0]
 801e3ba:	2200      	movs	r2, #0
 801e3bc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801e3be:	6838      	ldr	r0, [r7, #0]
 801e3c0:	f7ff ff72 	bl	801e2a8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801e3c4:	683b      	ldr	r3, [r7, #0]
 801e3c6:	7d1b      	ldrb	r3, [r3, #20]
 801e3c8:	2b0a      	cmp	r3, #10
 801e3ca:	d013      	beq.n	801e3f4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801e3cc:	683b      	ldr	r3, [r7, #0]
 801e3ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801e3d0:	2b01      	cmp	r3, #1
 801e3d2:	d00f      	beq.n	801e3f4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801e3d4:	683b      	ldr	r3, [r7, #0]
 801e3d6:	8b5b      	ldrh	r3, [r3, #26]
 801e3d8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d009      	beq.n	801e3f4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801e3e0:	683b      	ldr	r3, [r7, #0]
 801e3e2:	8b5b      	ldrh	r3, [r3, #26]
 801e3e4:	f043 0302 	orr.w	r3, r3, #2
 801e3e8:	b29a      	uxth	r2, r3
 801e3ea:	683b      	ldr	r3, [r7, #0]
 801e3ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801e3ee:	6838      	ldr	r0, [r7, #0]
 801e3f0:	f002 ff68 	bl	80212c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801e3f4:	683b      	ldr	r3, [r7, #0]
 801e3f6:	7d1b      	ldrb	r3, [r3, #20]
 801e3f8:	2b01      	cmp	r3, #1
 801e3fa:	d020      	beq.n	801e43e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801e3fc:	683b      	ldr	r3, [r7, #0]
 801e3fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e400:	2b00      	cmp	r3, #0
 801e402:	d006      	beq.n	801e412 <tcp_pcb_remove+0xca>
 801e404:	4b13      	ldr	r3, [pc, #76]	@ (801e454 <tcp_pcb_remove+0x10c>)
 801e406:	f640 0293 	movw	r2, #2195	@ 0x893
 801e40a:	4916      	ldr	r1, [pc, #88]	@ (801e464 <tcp_pcb_remove+0x11c>)
 801e40c:	4813      	ldr	r0, [pc, #76]	@ (801e45c <tcp_pcb_remove+0x114>)
 801e40e:	f008 fa43 	bl	8026898 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801e412:	683b      	ldr	r3, [r7, #0]
 801e414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e416:	2b00      	cmp	r3, #0
 801e418:	d006      	beq.n	801e428 <tcp_pcb_remove+0xe0>
 801e41a:	4b0e      	ldr	r3, [pc, #56]	@ (801e454 <tcp_pcb_remove+0x10c>)
 801e41c:	f640 0294 	movw	r2, #2196	@ 0x894
 801e420:	4911      	ldr	r1, [pc, #68]	@ (801e468 <tcp_pcb_remove+0x120>)
 801e422:	480e      	ldr	r0, [pc, #56]	@ (801e45c <tcp_pcb_remove+0x114>)
 801e424:	f008 fa38 	bl	8026898 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801e428:	683b      	ldr	r3, [r7, #0]
 801e42a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	d006      	beq.n	801e43e <tcp_pcb_remove+0xf6>
 801e430:	4b08      	ldr	r3, [pc, #32]	@ (801e454 <tcp_pcb_remove+0x10c>)
 801e432:	f640 0296 	movw	r2, #2198	@ 0x896
 801e436:	490d      	ldr	r1, [pc, #52]	@ (801e46c <tcp_pcb_remove+0x124>)
 801e438:	4808      	ldr	r0, [pc, #32]	@ (801e45c <tcp_pcb_remove+0x114>)
 801e43a:	f008 fa2d 	bl	8026898 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801e43e:	683b      	ldr	r3, [r7, #0]
 801e440:	2200      	movs	r2, #0
 801e442:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801e444:	683b      	ldr	r3, [r7, #0]
 801e446:	2200      	movs	r2, #0
 801e448:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801e44a:	bf00      	nop
 801e44c:	3710      	adds	r7, #16
 801e44e:	46bd      	mov	sp, r7
 801e450:	bd80      	pop	{r7, pc}
 801e452:	bf00      	nop
 801e454:	080297d8 	.word	0x080297d8
 801e458:	08029e40 	.word	0x08029e40
 801e45c:	0802981c 	.word	0x0802981c
 801e460:	08029e5c 	.word	0x08029e5c
 801e464:	08029e7c 	.word	0x08029e7c
 801e468:	08029e94 	.word	0x08029e94
 801e46c:	08029eb0 	.word	0x08029eb0

0801e470 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801e470:	b580      	push	{r7, lr}
 801e472:	b082      	sub	sp, #8
 801e474:	af00      	add	r7, sp, #0
 801e476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	d106      	bne.n	801e48c <tcp_next_iss+0x1c>
 801e47e:	4b0a      	ldr	r3, [pc, #40]	@ (801e4a8 <tcp_next_iss+0x38>)
 801e480:	f640 02af 	movw	r2, #2223	@ 0x8af
 801e484:	4909      	ldr	r1, [pc, #36]	@ (801e4ac <tcp_next_iss+0x3c>)
 801e486:	480a      	ldr	r0, [pc, #40]	@ (801e4b0 <tcp_next_iss+0x40>)
 801e488:	f008 fa06 	bl	8026898 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801e48c:	4b09      	ldr	r3, [pc, #36]	@ (801e4b4 <tcp_next_iss+0x44>)
 801e48e:	681a      	ldr	r2, [r3, #0]
 801e490:	4b09      	ldr	r3, [pc, #36]	@ (801e4b8 <tcp_next_iss+0x48>)
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	4413      	add	r3, r2
 801e496:	4a07      	ldr	r2, [pc, #28]	@ (801e4b4 <tcp_next_iss+0x44>)
 801e498:	6013      	str	r3, [r2, #0]
  return iss;
 801e49a:	4b06      	ldr	r3, [pc, #24]	@ (801e4b4 <tcp_next_iss+0x44>)
 801e49c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801e49e:	4618      	mov	r0, r3
 801e4a0:	3708      	adds	r7, #8
 801e4a2:	46bd      	mov	sp, r7
 801e4a4:	bd80      	pop	{r7, pc}
 801e4a6:	bf00      	nop
 801e4a8:	080297d8 	.word	0x080297d8
 801e4ac:	08029ec8 	.word	0x08029ec8
 801e4b0:	0802981c 	.word	0x0802981c
 801e4b4:	200100a4 	.word	0x200100a4
 801e4b8:	2003c4d4 	.word	0x2003c4d4

0801e4bc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801e4bc:	b580      	push	{r7, lr}
 801e4be:	b086      	sub	sp, #24
 801e4c0:	af00      	add	r7, sp, #0
 801e4c2:	4603      	mov	r3, r0
 801e4c4:	60b9      	str	r1, [r7, #8]
 801e4c6:	607a      	str	r2, [r7, #4]
 801e4c8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d106      	bne.n	801e4de <tcp_eff_send_mss_netif+0x22>
 801e4d0:	4b14      	ldr	r3, [pc, #80]	@ (801e524 <tcp_eff_send_mss_netif+0x68>)
 801e4d2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801e4d6:	4914      	ldr	r1, [pc, #80]	@ (801e528 <tcp_eff_send_mss_netif+0x6c>)
 801e4d8:	4814      	ldr	r0, [pc, #80]	@ (801e52c <tcp_eff_send_mss_netif+0x70>)
 801e4da:	f008 f9dd 	bl	8026898 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801e4de:	68bb      	ldr	r3, [r7, #8]
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	d101      	bne.n	801e4e8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801e4e4:	89fb      	ldrh	r3, [r7, #14]
 801e4e6:	e019      	b.n	801e51c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801e4e8:	68bb      	ldr	r3, [r7, #8]
 801e4ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e4ec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801e4ee:	8afb      	ldrh	r3, [r7, #22]
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	d012      	beq.n	801e51a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801e4f4:	2328      	movs	r3, #40	@ 0x28
 801e4f6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801e4f8:	8afa      	ldrh	r2, [r7, #22]
 801e4fa:	8abb      	ldrh	r3, [r7, #20]
 801e4fc:	429a      	cmp	r2, r3
 801e4fe:	d904      	bls.n	801e50a <tcp_eff_send_mss_netif+0x4e>
 801e500:	8afa      	ldrh	r2, [r7, #22]
 801e502:	8abb      	ldrh	r3, [r7, #20]
 801e504:	1ad3      	subs	r3, r2, r3
 801e506:	b29b      	uxth	r3, r3
 801e508:	e000      	b.n	801e50c <tcp_eff_send_mss_netif+0x50>
 801e50a:	2300      	movs	r3, #0
 801e50c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801e50e:	8a7a      	ldrh	r2, [r7, #18]
 801e510:	89fb      	ldrh	r3, [r7, #14]
 801e512:	4293      	cmp	r3, r2
 801e514:	bf28      	it	cs
 801e516:	4613      	movcs	r3, r2
 801e518:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801e51a:	89fb      	ldrh	r3, [r7, #14]
}
 801e51c:	4618      	mov	r0, r3
 801e51e:	3718      	adds	r7, #24
 801e520:	46bd      	mov	sp, r7
 801e522:	bd80      	pop	{r7, pc}
 801e524:	080297d8 	.word	0x080297d8
 801e528:	08029ee4 	.word	0x08029ee4
 801e52c:	0802981c 	.word	0x0802981c

0801e530 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801e530:	b580      	push	{r7, lr}
 801e532:	b084      	sub	sp, #16
 801e534:	af00      	add	r7, sp, #0
 801e536:	6078      	str	r0, [r7, #4]
 801e538:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801e53a:	683b      	ldr	r3, [r7, #0]
 801e53c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801e53e:	687b      	ldr	r3, [r7, #4]
 801e540:	2b00      	cmp	r3, #0
 801e542:	d119      	bne.n	801e578 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801e544:	4b10      	ldr	r3, [pc, #64]	@ (801e588 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801e546:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801e54a:	4910      	ldr	r1, [pc, #64]	@ (801e58c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801e54c:	4810      	ldr	r0, [pc, #64]	@ (801e590 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801e54e:	f008 f9a3 	bl	8026898 <iprintf>

  while (pcb != NULL) {
 801e552:	e011      	b.n	801e578 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801e554:	68fb      	ldr	r3, [r7, #12]
 801e556:	681a      	ldr	r2, [r3, #0]
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	429a      	cmp	r2, r3
 801e55e:	d108      	bne.n	801e572 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801e560:	68fb      	ldr	r3, [r7, #12]
 801e562:	68db      	ldr	r3, [r3, #12]
 801e564:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801e566:	68f8      	ldr	r0, [r7, #12]
 801e568:	f7fe ffc4 	bl	801d4f4 <tcp_abort>
      pcb = next;
 801e56c:	68bb      	ldr	r3, [r7, #8]
 801e56e:	60fb      	str	r3, [r7, #12]
 801e570:	e002      	b.n	801e578 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801e572:	68fb      	ldr	r3, [r7, #12]
 801e574:	68db      	ldr	r3, [r3, #12]
 801e576:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801e578:	68fb      	ldr	r3, [r7, #12]
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	d1ea      	bne.n	801e554 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801e57e:	bf00      	nop
 801e580:	bf00      	nop
 801e582:	3710      	adds	r7, #16
 801e584:	46bd      	mov	sp, r7
 801e586:	bd80      	pop	{r7, pc}
 801e588:	080297d8 	.word	0x080297d8
 801e58c:	08029f0c 	.word	0x08029f0c
 801e590:	0802981c 	.word	0x0802981c

0801e594 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801e594:	b580      	push	{r7, lr}
 801e596:	b084      	sub	sp, #16
 801e598:	af00      	add	r7, sp, #0
 801e59a:	6078      	str	r0, [r7, #4]
 801e59c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	d02a      	beq.n	801e5fa <tcp_netif_ip_addr_changed+0x66>
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	d026      	beq.n	801e5fa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801e5ac:	4b15      	ldr	r3, [pc, #84]	@ (801e604 <tcp_netif_ip_addr_changed+0x70>)
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	4619      	mov	r1, r3
 801e5b2:	6878      	ldr	r0, [r7, #4]
 801e5b4:	f7ff ffbc 	bl	801e530 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801e5b8:	4b13      	ldr	r3, [pc, #76]	@ (801e608 <tcp_netif_ip_addr_changed+0x74>)
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	4619      	mov	r1, r3
 801e5be:	6878      	ldr	r0, [r7, #4]
 801e5c0:	f7ff ffb6 	bl	801e530 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801e5c4:	683b      	ldr	r3, [r7, #0]
 801e5c6:	2b00      	cmp	r3, #0
 801e5c8:	d017      	beq.n	801e5fa <tcp_netif_ip_addr_changed+0x66>
 801e5ca:	683b      	ldr	r3, [r7, #0]
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d013      	beq.n	801e5fa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801e5d2:	4b0e      	ldr	r3, [pc, #56]	@ (801e60c <tcp_netif_ip_addr_changed+0x78>)
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	60fb      	str	r3, [r7, #12]
 801e5d8:	e00c      	b.n	801e5f4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801e5da:	68fb      	ldr	r3, [r7, #12]
 801e5dc:	681a      	ldr	r2, [r3, #0]
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	429a      	cmp	r2, r3
 801e5e4:	d103      	bne.n	801e5ee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801e5e6:	683b      	ldr	r3, [r7, #0]
 801e5e8:	681a      	ldr	r2, [r3, #0]
 801e5ea:	68fb      	ldr	r3, [r7, #12]
 801e5ec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801e5ee:	68fb      	ldr	r3, [r7, #12]
 801e5f0:	68db      	ldr	r3, [r3, #12]
 801e5f2:	60fb      	str	r3, [r7, #12]
 801e5f4:	68fb      	ldr	r3, [r7, #12]
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d1ef      	bne.n	801e5da <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801e5fa:	bf00      	nop
 801e5fc:	3710      	adds	r7, #16
 801e5fe:	46bd      	mov	sp, r7
 801e600:	bd80      	pop	{r7, pc}
 801e602:	bf00      	nop
 801e604:	2003c4e0 	.word	0x2003c4e0
 801e608:	2003c4d8 	.word	0x2003c4d8
 801e60c:	2003c4dc 	.word	0x2003c4dc

0801e610 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801e610:	b580      	push	{r7, lr}
 801e612:	b082      	sub	sp, #8
 801e614:	af00      	add	r7, sp, #0
 801e616:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d007      	beq.n	801e630 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e624:	4618      	mov	r0, r3
 801e626:	f7ff fc3d 	bl	801dea4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	2200      	movs	r2, #0
 801e62e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801e630:	bf00      	nop
 801e632:	3708      	adds	r7, #8
 801e634:	46bd      	mov	sp, r7
 801e636:	bd80      	pop	{r7, pc}

0801e638 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801e638:	b590      	push	{r4, r7, lr}
 801e63a:	b08d      	sub	sp, #52	@ 0x34
 801e63c:	af04      	add	r7, sp, #16
 801e63e:	6078      	str	r0, [r7, #4]
 801e640:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	2b00      	cmp	r3, #0
 801e646:	d105      	bne.n	801e654 <tcp_input+0x1c>
 801e648:	4b9b      	ldr	r3, [pc, #620]	@ (801e8b8 <tcp_input+0x280>)
 801e64a:	2283      	movs	r2, #131	@ 0x83
 801e64c:	499b      	ldr	r1, [pc, #620]	@ (801e8bc <tcp_input+0x284>)
 801e64e:	489c      	ldr	r0, [pc, #624]	@ (801e8c0 <tcp_input+0x288>)
 801e650:	f008 f922 	bl	8026898 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	685b      	ldr	r3, [r3, #4]
 801e658:	4a9a      	ldr	r2, [pc, #616]	@ (801e8c4 <tcp_input+0x28c>)
 801e65a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	895b      	ldrh	r3, [r3, #10]
 801e660:	2b13      	cmp	r3, #19
 801e662:	f240 83d1 	bls.w	801ee08 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801e666:	4b98      	ldr	r3, [pc, #608]	@ (801e8c8 <tcp_input+0x290>)
 801e668:	695b      	ldr	r3, [r3, #20]
 801e66a:	4a97      	ldr	r2, [pc, #604]	@ (801e8c8 <tcp_input+0x290>)
 801e66c:	6812      	ldr	r2, [r2, #0]
 801e66e:	4611      	mov	r1, r2
 801e670:	4618      	mov	r0, r3
 801e672:	f005 ff97 	bl	80245a4 <ip4_addr_isbroadcast_u32>
 801e676:	4603      	mov	r3, r0
 801e678:	2b00      	cmp	r3, #0
 801e67a:	f040 83c7 	bne.w	801ee0c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801e67e:	4b92      	ldr	r3, [pc, #584]	@ (801e8c8 <tcp_input+0x290>)
 801e680:	695b      	ldr	r3, [r3, #20]
 801e682:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801e686:	2be0      	cmp	r3, #224	@ 0xe0
 801e688:	f000 83c0 	beq.w	801ee0c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801e68c:	4b8d      	ldr	r3, [pc, #564]	@ (801e8c4 <tcp_input+0x28c>)
 801e68e:	681b      	ldr	r3, [r3, #0]
 801e690:	899b      	ldrh	r3, [r3, #12]
 801e692:	b29b      	uxth	r3, r3
 801e694:	4618      	mov	r0, r3
 801e696:	f7fc fcef 	bl	801b078 <lwip_htons>
 801e69a:	4603      	mov	r3, r0
 801e69c:	0b1b      	lsrs	r3, r3, #12
 801e69e:	b29b      	uxth	r3, r3
 801e6a0:	b2db      	uxtb	r3, r3
 801e6a2:	009b      	lsls	r3, r3, #2
 801e6a4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801e6a6:	7cbb      	ldrb	r3, [r7, #18]
 801e6a8:	2b13      	cmp	r3, #19
 801e6aa:	f240 83b1 	bls.w	801ee10 <tcp_input+0x7d8>
 801e6ae:	7cbb      	ldrb	r3, [r7, #18]
 801e6b0:	b29a      	uxth	r2, r3
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	891b      	ldrh	r3, [r3, #8]
 801e6b6:	429a      	cmp	r2, r3
 801e6b8:	f200 83aa 	bhi.w	801ee10 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801e6bc:	7cbb      	ldrb	r3, [r7, #18]
 801e6be:	b29b      	uxth	r3, r3
 801e6c0:	3b14      	subs	r3, #20
 801e6c2:	b29a      	uxth	r2, r3
 801e6c4:	4b81      	ldr	r3, [pc, #516]	@ (801e8cc <tcp_input+0x294>)
 801e6c6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801e6c8:	4b81      	ldr	r3, [pc, #516]	@ (801e8d0 <tcp_input+0x298>)
 801e6ca:	2200      	movs	r2, #0
 801e6cc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801e6ce:	687b      	ldr	r3, [r7, #4]
 801e6d0:	895a      	ldrh	r2, [r3, #10]
 801e6d2:	7cbb      	ldrb	r3, [r7, #18]
 801e6d4:	b29b      	uxth	r3, r3
 801e6d6:	429a      	cmp	r2, r3
 801e6d8:	d309      	bcc.n	801e6ee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801e6da:	4b7c      	ldr	r3, [pc, #496]	@ (801e8cc <tcp_input+0x294>)
 801e6dc:	881a      	ldrh	r2, [r3, #0]
 801e6de:	4b7d      	ldr	r3, [pc, #500]	@ (801e8d4 <tcp_input+0x29c>)
 801e6e0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801e6e2:	7cbb      	ldrb	r3, [r7, #18]
 801e6e4:	4619      	mov	r1, r3
 801e6e6:	6878      	ldr	r0, [r7, #4]
 801e6e8:	f7fe f8da 	bl	801c8a0 <pbuf_remove_header>
 801e6ec:	e04e      	b.n	801e78c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	d105      	bne.n	801e702 <tcp_input+0xca>
 801e6f6:	4b70      	ldr	r3, [pc, #448]	@ (801e8b8 <tcp_input+0x280>)
 801e6f8:	22c2      	movs	r2, #194	@ 0xc2
 801e6fa:	4977      	ldr	r1, [pc, #476]	@ (801e8d8 <tcp_input+0x2a0>)
 801e6fc:	4870      	ldr	r0, [pc, #448]	@ (801e8c0 <tcp_input+0x288>)
 801e6fe:	f008 f8cb 	bl	8026898 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801e702:	2114      	movs	r1, #20
 801e704:	6878      	ldr	r0, [r7, #4]
 801e706:	f7fe f8cb 	bl	801c8a0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	895a      	ldrh	r2, [r3, #10]
 801e70e:	4b71      	ldr	r3, [pc, #452]	@ (801e8d4 <tcp_input+0x29c>)
 801e710:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801e712:	4b6e      	ldr	r3, [pc, #440]	@ (801e8cc <tcp_input+0x294>)
 801e714:	881a      	ldrh	r2, [r3, #0]
 801e716:	4b6f      	ldr	r3, [pc, #444]	@ (801e8d4 <tcp_input+0x29c>)
 801e718:	881b      	ldrh	r3, [r3, #0]
 801e71a:	1ad3      	subs	r3, r2, r3
 801e71c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801e71e:	4b6d      	ldr	r3, [pc, #436]	@ (801e8d4 <tcp_input+0x29c>)
 801e720:	881b      	ldrh	r3, [r3, #0]
 801e722:	4619      	mov	r1, r3
 801e724:	6878      	ldr	r0, [r7, #4]
 801e726:	f7fe f8bb 	bl	801c8a0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801e72a:	687b      	ldr	r3, [r7, #4]
 801e72c:	681b      	ldr	r3, [r3, #0]
 801e72e:	895b      	ldrh	r3, [r3, #10]
 801e730:	8a3a      	ldrh	r2, [r7, #16]
 801e732:	429a      	cmp	r2, r3
 801e734:	f200 836e 	bhi.w	801ee14 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	685b      	ldr	r3, [r3, #4]
 801e73e:	4a64      	ldr	r2, [pc, #400]	@ (801e8d0 <tcp_input+0x298>)
 801e740:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801e742:	687b      	ldr	r3, [r7, #4]
 801e744:	681b      	ldr	r3, [r3, #0]
 801e746:	8a3a      	ldrh	r2, [r7, #16]
 801e748:	4611      	mov	r1, r2
 801e74a:	4618      	mov	r0, r3
 801e74c:	f7fe f8a8 	bl	801c8a0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801e750:	687b      	ldr	r3, [r7, #4]
 801e752:	891a      	ldrh	r2, [r3, #8]
 801e754:	8a3b      	ldrh	r3, [r7, #16]
 801e756:	1ad3      	subs	r3, r2, r3
 801e758:	b29a      	uxth	r2, r3
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801e75e:	687b      	ldr	r3, [r7, #4]
 801e760:	895b      	ldrh	r3, [r3, #10]
 801e762:	2b00      	cmp	r3, #0
 801e764:	d005      	beq.n	801e772 <tcp_input+0x13a>
 801e766:	4b54      	ldr	r3, [pc, #336]	@ (801e8b8 <tcp_input+0x280>)
 801e768:	22df      	movs	r2, #223	@ 0xdf
 801e76a:	495c      	ldr	r1, [pc, #368]	@ (801e8dc <tcp_input+0x2a4>)
 801e76c:	4854      	ldr	r0, [pc, #336]	@ (801e8c0 <tcp_input+0x288>)
 801e76e:	f008 f893 	bl	8026898 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801e772:	687b      	ldr	r3, [r7, #4]
 801e774:	891a      	ldrh	r2, [r3, #8]
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	681b      	ldr	r3, [r3, #0]
 801e77a:	891b      	ldrh	r3, [r3, #8]
 801e77c:	429a      	cmp	r2, r3
 801e77e:	d005      	beq.n	801e78c <tcp_input+0x154>
 801e780:	4b4d      	ldr	r3, [pc, #308]	@ (801e8b8 <tcp_input+0x280>)
 801e782:	22e0      	movs	r2, #224	@ 0xe0
 801e784:	4956      	ldr	r1, [pc, #344]	@ (801e8e0 <tcp_input+0x2a8>)
 801e786:	484e      	ldr	r0, [pc, #312]	@ (801e8c0 <tcp_input+0x288>)
 801e788:	f008 f886 	bl	8026898 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801e78c:	4b4d      	ldr	r3, [pc, #308]	@ (801e8c4 <tcp_input+0x28c>)
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	881b      	ldrh	r3, [r3, #0]
 801e792:	b29b      	uxth	r3, r3
 801e794:	4a4b      	ldr	r2, [pc, #300]	@ (801e8c4 <tcp_input+0x28c>)
 801e796:	6814      	ldr	r4, [r2, #0]
 801e798:	4618      	mov	r0, r3
 801e79a:	f7fc fc6d 	bl	801b078 <lwip_htons>
 801e79e:	4603      	mov	r3, r0
 801e7a0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801e7a2:	4b48      	ldr	r3, [pc, #288]	@ (801e8c4 <tcp_input+0x28c>)
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	885b      	ldrh	r3, [r3, #2]
 801e7a8:	b29b      	uxth	r3, r3
 801e7aa:	4a46      	ldr	r2, [pc, #280]	@ (801e8c4 <tcp_input+0x28c>)
 801e7ac:	6814      	ldr	r4, [r2, #0]
 801e7ae:	4618      	mov	r0, r3
 801e7b0:	f7fc fc62 	bl	801b078 <lwip_htons>
 801e7b4:	4603      	mov	r3, r0
 801e7b6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801e7b8:	4b42      	ldr	r3, [pc, #264]	@ (801e8c4 <tcp_input+0x28c>)
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	685b      	ldr	r3, [r3, #4]
 801e7be:	4a41      	ldr	r2, [pc, #260]	@ (801e8c4 <tcp_input+0x28c>)
 801e7c0:	6814      	ldr	r4, [r2, #0]
 801e7c2:	4618      	mov	r0, r3
 801e7c4:	f7fc fc6d 	bl	801b0a2 <lwip_htonl>
 801e7c8:	4603      	mov	r3, r0
 801e7ca:	6063      	str	r3, [r4, #4]
 801e7cc:	6863      	ldr	r3, [r4, #4]
 801e7ce:	4a45      	ldr	r2, [pc, #276]	@ (801e8e4 <tcp_input+0x2ac>)
 801e7d0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801e7d2:	4b3c      	ldr	r3, [pc, #240]	@ (801e8c4 <tcp_input+0x28c>)
 801e7d4:	681b      	ldr	r3, [r3, #0]
 801e7d6:	689b      	ldr	r3, [r3, #8]
 801e7d8:	4a3a      	ldr	r2, [pc, #232]	@ (801e8c4 <tcp_input+0x28c>)
 801e7da:	6814      	ldr	r4, [r2, #0]
 801e7dc:	4618      	mov	r0, r3
 801e7de:	f7fc fc60 	bl	801b0a2 <lwip_htonl>
 801e7e2:	4603      	mov	r3, r0
 801e7e4:	60a3      	str	r3, [r4, #8]
 801e7e6:	68a3      	ldr	r3, [r4, #8]
 801e7e8:	4a3f      	ldr	r2, [pc, #252]	@ (801e8e8 <tcp_input+0x2b0>)
 801e7ea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801e7ec:	4b35      	ldr	r3, [pc, #212]	@ (801e8c4 <tcp_input+0x28c>)
 801e7ee:	681b      	ldr	r3, [r3, #0]
 801e7f0:	89db      	ldrh	r3, [r3, #14]
 801e7f2:	b29b      	uxth	r3, r3
 801e7f4:	4a33      	ldr	r2, [pc, #204]	@ (801e8c4 <tcp_input+0x28c>)
 801e7f6:	6814      	ldr	r4, [r2, #0]
 801e7f8:	4618      	mov	r0, r3
 801e7fa:	f7fc fc3d 	bl	801b078 <lwip_htons>
 801e7fe:	4603      	mov	r3, r0
 801e800:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801e802:	4b30      	ldr	r3, [pc, #192]	@ (801e8c4 <tcp_input+0x28c>)
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	899b      	ldrh	r3, [r3, #12]
 801e808:	b29b      	uxth	r3, r3
 801e80a:	4618      	mov	r0, r3
 801e80c:	f7fc fc34 	bl	801b078 <lwip_htons>
 801e810:	4603      	mov	r3, r0
 801e812:	b2db      	uxtb	r3, r3
 801e814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e818:	b2da      	uxtb	r2, r3
 801e81a:	4b34      	ldr	r3, [pc, #208]	@ (801e8ec <tcp_input+0x2b4>)
 801e81c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	891a      	ldrh	r2, [r3, #8]
 801e822:	4b33      	ldr	r3, [pc, #204]	@ (801e8f0 <tcp_input+0x2b8>)
 801e824:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801e826:	4b31      	ldr	r3, [pc, #196]	@ (801e8ec <tcp_input+0x2b4>)
 801e828:	781b      	ldrb	r3, [r3, #0]
 801e82a:	f003 0303 	and.w	r3, r3, #3
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d00c      	beq.n	801e84c <tcp_input+0x214>
    tcplen++;
 801e832:	4b2f      	ldr	r3, [pc, #188]	@ (801e8f0 <tcp_input+0x2b8>)
 801e834:	881b      	ldrh	r3, [r3, #0]
 801e836:	3301      	adds	r3, #1
 801e838:	b29a      	uxth	r2, r3
 801e83a:	4b2d      	ldr	r3, [pc, #180]	@ (801e8f0 <tcp_input+0x2b8>)
 801e83c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801e83e:	687b      	ldr	r3, [r7, #4]
 801e840:	891a      	ldrh	r2, [r3, #8]
 801e842:	4b2b      	ldr	r3, [pc, #172]	@ (801e8f0 <tcp_input+0x2b8>)
 801e844:	881b      	ldrh	r3, [r3, #0]
 801e846:	429a      	cmp	r2, r3
 801e848:	f200 82e6 	bhi.w	801ee18 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801e84c:	2300      	movs	r3, #0
 801e84e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e850:	4b28      	ldr	r3, [pc, #160]	@ (801e8f4 <tcp_input+0x2bc>)
 801e852:	681b      	ldr	r3, [r3, #0]
 801e854:	61fb      	str	r3, [r7, #28]
 801e856:	e09d      	b.n	801e994 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801e858:	69fb      	ldr	r3, [r7, #28]
 801e85a:	7d1b      	ldrb	r3, [r3, #20]
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	d105      	bne.n	801e86c <tcp_input+0x234>
 801e860:	4b15      	ldr	r3, [pc, #84]	@ (801e8b8 <tcp_input+0x280>)
 801e862:	22fb      	movs	r2, #251	@ 0xfb
 801e864:	4924      	ldr	r1, [pc, #144]	@ (801e8f8 <tcp_input+0x2c0>)
 801e866:	4816      	ldr	r0, [pc, #88]	@ (801e8c0 <tcp_input+0x288>)
 801e868:	f008 f816 	bl	8026898 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801e86c:	69fb      	ldr	r3, [r7, #28]
 801e86e:	7d1b      	ldrb	r3, [r3, #20]
 801e870:	2b0a      	cmp	r3, #10
 801e872:	d105      	bne.n	801e880 <tcp_input+0x248>
 801e874:	4b10      	ldr	r3, [pc, #64]	@ (801e8b8 <tcp_input+0x280>)
 801e876:	22fc      	movs	r2, #252	@ 0xfc
 801e878:	4920      	ldr	r1, [pc, #128]	@ (801e8fc <tcp_input+0x2c4>)
 801e87a:	4811      	ldr	r0, [pc, #68]	@ (801e8c0 <tcp_input+0x288>)
 801e87c:	f008 f80c 	bl	8026898 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801e880:	69fb      	ldr	r3, [r7, #28]
 801e882:	7d1b      	ldrb	r3, [r3, #20]
 801e884:	2b01      	cmp	r3, #1
 801e886:	d105      	bne.n	801e894 <tcp_input+0x25c>
 801e888:	4b0b      	ldr	r3, [pc, #44]	@ (801e8b8 <tcp_input+0x280>)
 801e88a:	22fd      	movs	r2, #253	@ 0xfd
 801e88c:	491c      	ldr	r1, [pc, #112]	@ (801e900 <tcp_input+0x2c8>)
 801e88e:	480c      	ldr	r0, [pc, #48]	@ (801e8c0 <tcp_input+0x288>)
 801e890:	f008 f802 	bl	8026898 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801e894:	69fb      	ldr	r3, [r7, #28]
 801e896:	7a1b      	ldrb	r3, [r3, #8]
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d033      	beq.n	801e904 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801e89c:	69fb      	ldr	r3, [r7, #28]
 801e89e:	7a1a      	ldrb	r2, [r3, #8]
 801e8a0:	4b09      	ldr	r3, [pc, #36]	@ (801e8c8 <tcp_input+0x290>)
 801e8a2:	685b      	ldr	r3, [r3, #4]
 801e8a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801e8a8:	3301      	adds	r3, #1
 801e8aa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801e8ac:	429a      	cmp	r2, r3
 801e8ae:	d029      	beq.n	801e904 <tcp_input+0x2cc>
      prev = pcb;
 801e8b0:	69fb      	ldr	r3, [r7, #28]
 801e8b2:	61bb      	str	r3, [r7, #24]
      continue;
 801e8b4:	e06b      	b.n	801e98e <tcp_input+0x356>
 801e8b6:	bf00      	nop
 801e8b8:	08029f40 	.word	0x08029f40
 801e8bc:	08029f74 	.word	0x08029f74
 801e8c0:	08029f8c 	.word	0x08029f8c
 801e8c4:	2003c4fc 	.word	0x2003c4fc
 801e8c8:	200193d0 	.word	0x200193d0
 801e8cc:	2003c500 	.word	0x2003c500
 801e8d0:	2003c504 	.word	0x2003c504
 801e8d4:	2003c502 	.word	0x2003c502
 801e8d8:	08029fb4 	.word	0x08029fb4
 801e8dc:	08029fc4 	.word	0x08029fc4
 801e8e0:	08029fd0 	.word	0x08029fd0
 801e8e4:	2003c50c 	.word	0x2003c50c
 801e8e8:	2003c510 	.word	0x2003c510
 801e8ec:	2003c518 	.word	0x2003c518
 801e8f0:	2003c516 	.word	0x2003c516
 801e8f4:	2003c4e0 	.word	0x2003c4e0
 801e8f8:	08029ff0 	.word	0x08029ff0
 801e8fc:	0802a018 	.word	0x0802a018
 801e900:	0802a044 	.word	0x0802a044
    }

    if (pcb->remote_port == tcphdr->src &&
 801e904:	69fb      	ldr	r3, [r7, #28]
 801e906:	8b1a      	ldrh	r2, [r3, #24]
 801e908:	4b72      	ldr	r3, [pc, #456]	@ (801ead4 <tcp_input+0x49c>)
 801e90a:	681b      	ldr	r3, [r3, #0]
 801e90c:	881b      	ldrh	r3, [r3, #0]
 801e90e:	b29b      	uxth	r3, r3
 801e910:	429a      	cmp	r2, r3
 801e912:	d13a      	bne.n	801e98a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801e914:	69fb      	ldr	r3, [r7, #28]
 801e916:	8ada      	ldrh	r2, [r3, #22]
 801e918:	4b6e      	ldr	r3, [pc, #440]	@ (801ead4 <tcp_input+0x49c>)
 801e91a:	681b      	ldr	r3, [r3, #0]
 801e91c:	885b      	ldrh	r3, [r3, #2]
 801e91e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801e920:	429a      	cmp	r2, r3
 801e922:	d132      	bne.n	801e98a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801e924:	69fb      	ldr	r3, [r7, #28]
 801e926:	685a      	ldr	r2, [r3, #4]
 801e928:	4b6b      	ldr	r3, [pc, #428]	@ (801ead8 <tcp_input+0x4a0>)
 801e92a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801e92c:	429a      	cmp	r2, r3
 801e92e:	d12c      	bne.n	801e98a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801e930:	69fb      	ldr	r3, [r7, #28]
 801e932:	681a      	ldr	r2, [r3, #0]
 801e934:	4b68      	ldr	r3, [pc, #416]	@ (801ead8 <tcp_input+0x4a0>)
 801e936:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801e938:	429a      	cmp	r2, r3
 801e93a:	d126      	bne.n	801e98a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801e93c:	69fb      	ldr	r3, [r7, #28]
 801e93e:	68db      	ldr	r3, [r3, #12]
 801e940:	69fa      	ldr	r2, [r7, #28]
 801e942:	429a      	cmp	r2, r3
 801e944:	d106      	bne.n	801e954 <tcp_input+0x31c>
 801e946:	4b65      	ldr	r3, [pc, #404]	@ (801eadc <tcp_input+0x4a4>)
 801e948:	f240 120d 	movw	r2, #269	@ 0x10d
 801e94c:	4964      	ldr	r1, [pc, #400]	@ (801eae0 <tcp_input+0x4a8>)
 801e94e:	4865      	ldr	r0, [pc, #404]	@ (801eae4 <tcp_input+0x4ac>)
 801e950:	f007 ffa2 	bl	8026898 <iprintf>
      if (prev != NULL) {
 801e954:	69bb      	ldr	r3, [r7, #24]
 801e956:	2b00      	cmp	r3, #0
 801e958:	d00a      	beq.n	801e970 <tcp_input+0x338>
        prev->next = pcb->next;
 801e95a:	69fb      	ldr	r3, [r7, #28]
 801e95c:	68da      	ldr	r2, [r3, #12]
 801e95e:	69bb      	ldr	r3, [r7, #24]
 801e960:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801e962:	4b61      	ldr	r3, [pc, #388]	@ (801eae8 <tcp_input+0x4b0>)
 801e964:	681a      	ldr	r2, [r3, #0]
 801e966:	69fb      	ldr	r3, [r7, #28]
 801e968:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801e96a:	4a5f      	ldr	r2, [pc, #380]	@ (801eae8 <tcp_input+0x4b0>)
 801e96c:	69fb      	ldr	r3, [r7, #28]
 801e96e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801e970:	69fb      	ldr	r3, [r7, #28]
 801e972:	68db      	ldr	r3, [r3, #12]
 801e974:	69fa      	ldr	r2, [r7, #28]
 801e976:	429a      	cmp	r2, r3
 801e978:	d111      	bne.n	801e99e <tcp_input+0x366>
 801e97a:	4b58      	ldr	r3, [pc, #352]	@ (801eadc <tcp_input+0x4a4>)
 801e97c:	f240 1215 	movw	r2, #277	@ 0x115
 801e980:	495a      	ldr	r1, [pc, #360]	@ (801eaec <tcp_input+0x4b4>)
 801e982:	4858      	ldr	r0, [pc, #352]	@ (801eae4 <tcp_input+0x4ac>)
 801e984:	f007 ff88 	bl	8026898 <iprintf>
      break;
 801e988:	e009      	b.n	801e99e <tcp_input+0x366>
    }
    prev = pcb;
 801e98a:	69fb      	ldr	r3, [r7, #28]
 801e98c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e98e:	69fb      	ldr	r3, [r7, #28]
 801e990:	68db      	ldr	r3, [r3, #12]
 801e992:	61fb      	str	r3, [r7, #28]
 801e994:	69fb      	ldr	r3, [r7, #28]
 801e996:	2b00      	cmp	r3, #0
 801e998:	f47f af5e 	bne.w	801e858 <tcp_input+0x220>
 801e99c:	e000      	b.n	801e9a0 <tcp_input+0x368>
      break;
 801e99e:	bf00      	nop
  }

  if (pcb == NULL) {
 801e9a0:	69fb      	ldr	r3, [r7, #28]
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	f040 80aa 	bne.w	801eafc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e9a8:	4b51      	ldr	r3, [pc, #324]	@ (801eaf0 <tcp_input+0x4b8>)
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	61fb      	str	r3, [r7, #28]
 801e9ae:	e03f      	b.n	801ea30 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801e9b0:	69fb      	ldr	r3, [r7, #28]
 801e9b2:	7d1b      	ldrb	r3, [r3, #20]
 801e9b4:	2b0a      	cmp	r3, #10
 801e9b6:	d006      	beq.n	801e9c6 <tcp_input+0x38e>
 801e9b8:	4b48      	ldr	r3, [pc, #288]	@ (801eadc <tcp_input+0x4a4>)
 801e9ba:	f240 121f 	movw	r2, #287	@ 0x11f
 801e9be:	494d      	ldr	r1, [pc, #308]	@ (801eaf4 <tcp_input+0x4bc>)
 801e9c0:	4848      	ldr	r0, [pc, #288]	@ (801eae4 <tcp_input+0x4ac>)
 801e9c2:	f007 ff69 	bl	8026898 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801e9c6:	69fb      	ldr	r3, [r7, #28]
 801e9c8:	7a1b      	ldrb	r3, [r3, #8]
 801e9ca:	2b00      	cmp	r3, #0
 801e9cc:	d009      	beq.n	801e9e2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801e9ce:	69fb      	ldr	r3, [r7, #28]
 801e9d0:	7a1a      	ldrb	r2, [r3, #8]
 801e9d2:	4b41      	ldr	r3, [pc, #260]	@ (801ead8 <tcp_input+0x4a0>)
 801e9d4:	685b      	ldr	r3, [r3, #4]
 801e9d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801e9da:	3301      	adds	r3, #1
 801e9dc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801e9de:	429a      	cmp	r2, r3
 801e9e0:	d122      	bne.n	801ea28 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801e9e2:	69fb      	ldr	r3, [r7, #28]
 801e9e4:	8b1a      	ldrh	r2, [r3, #24]
 801e9e6:	4b3b      	ldr	r3, [pc, #236]	@ (801ead4 <tcp_input+0x49c>)
 801e9e8:	681b      	ldr	r3, [r3, #0]
 801e9ea:	881b      	ldrh	r3, [r3, #0]
 801e9ec:	b29b      	uxth	r3, r3
 801e9ee:	429a      	cmp	r2, r3
 801e9f0:	d11b      	bne.n	801ea2a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801e9f2:	69fb      	ldr	r3, [r7, #28]
 801e9f4:	8ada      	ldrh	r2, [r3, #22]
 801e9f6:	4b37      	ldr	r3, [pc, #220]	@ (801ead4 <tcp_input+0x49c>)
 801e9f8:	681b      	ldr	r3, [r3, #0]
 801e9fa:	885b      	ldrh	r3, [r3, #2]
 801e9fc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801e9fe:	429a      	cmp	r2, r3
 801ea00:	d113      	bne.n	801ea2a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ea02:	69fb      	ldr	r3, [r7, #28]
 801ea04:	685a      	ldr	r2, [r3, #4]
 801ea06:	4b34      	ldr	r3, [pc, #208]	@ (801ead8 <tcp_input+0x4a0>)
 801ea08:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801ea0a:	429a      	cmp	r2, r3
 801ea0c:	d10d      	bne.n	801ea2a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ea0e:	69fb      	ldr	r3, [r7, #28]
 801ea10:	681a      	ldr	r2, [r3, #0]
 801ea12:	4b31      	ldr	r3, [pc, #196]	@ (801ead8 <tcp_input+0x4a0>)
 801ea14:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ea16:	429a      	cmp	r2, r3
 801ea18:	d107      	bne.n	801ea2a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801ea1a:	69f8      	ldr	r0, [r7, #28]
 801ea1c:	f000 fb56 	bl	801f0cc <tcp_timewait_input>
        }
        pbuf_free(p);
 801ea20:	6878      	ldr	r0, [r7, #4]
 801ea22:	f7fd ffc3 	bl	801c9ac <pbuf_free>
        return;
 801ea26:	e1fd      	b.n	801ee24 <tcp_input+0x7ec>
        continue;
 801ea28:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ea2a:	69fb      	ldr	r3, [r7, #28]
 801ea2c:	68db      	ldr	r3, [r3, #12]
 801ea2e:	61fb      	str	r3, [r7, #28]
 801ea30:	69fb      	ldr	r3, [r7, #28]
 801ea32:	2b00      	cmp	r3, #0
 801ea34:	d1bc      	bne.n	801e9b0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801ea36:	2300      	movs	r3, #0
 801ea38:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ea3a:	4b2f      	ldr	r3, [pc, #188]	@ (801eaf8 <tcp_input+0x4c0>)
 801ea3c:	681b      	ldr	r3, [r3, #0]
 801ea3e:	617b      	str	r3, [r7, #20]
 801ea40:	e02a      	b.n	801ea98 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801ea42:	697b      	ldr	r3, [r7, #20]
 801ea44:	7a1b      	ldrb	r3, [r3, #8]
 801ea46:	2b00      	cmp	r3, #0
 801ea48:	d00c      	beq.n	801ea64 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ea4a:	697b      	ldr	r3, [r7, #20]
 801ea4c:	7a1a      	ldrb	r2, [r3, #8]
 801ea4e:	4b22      	ldr	r3, [pc, #136]	@ (801ead8 <tcp_input+0x4a0>)
 801ea50:	685b      	ldr	r3, [r3, #4]
 801ea52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ea56:	3301      	adds	r3, #1
 801ea58:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801ea5a:	429a      	cmp	r2, r3
 801ea5c:	d002      	beq.n	801ea64 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801ea5e:	697b      	ldr	r3, [r7, #20]
 801ea60:	61bb      	str	r3, [r7, #24]
        continue;
 801ea62:	e016      	b.n	801ea92 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801ea64:	697b      	ldr	r3, [r7, #20]
 801ea66:	8ada      	ldrh	r2, [r3, #22]
 801ea68:	4b1a      	ldr	r3, [pc, #104]	@ (801ead4 <tcp_input+0x49c>)
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	885b      	ldrh	r3, [r3, #2]
 801ea6e:	b29b      	uxth	r3, r3
 801ea70:	429a      	cmp	r2, r3
 801ea72:	d10c      	bne.n	801ea8e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801ea74:	697b      	ldr	r3, [r7, #20]
 801ea76:	681a      	ldr	r2, [r3, #0]
 801ea78:	4b17      	ldr	r3, [pc, #92]	@ (801ead8 <tcp_input+0x4a0>)
 801ea7a:	695b      	ldr	r3, [r3, #20]
 801ea7c:	429a      	cmp	r2, r3
 801ea7e:	d00f      	beq.n	801eaa0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801ea80:	697b      	ldr	r3, [r7, #20]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d00d      	beq.n	801eaa2 <tcp_input+0x46a>
 801ea86:	697b      	ldr	r3, [r7, #20]
 801ea88:	681b      	ldr	r3, [r3, #0]
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	d009      	beq.n	801eaa2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801ea8e:	697b      	ldr	r3, [r7, #20]
 801ea90:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ea92:	697b      	ldr	r3, [r7, #20]
 801ea94:	68db      	ldr	r3, [r3, #12]
 801ea96:	617b      	str	r3, [r7, #20]
 801ea98:	697b      	ldr	r3, [r7, #20]
 801ea9a:	2b00      	cmp	r3, #0
 801ea9c:	d1d1      	bne.n	801ea42 <tcp_input+0x40a>
 801ea9e:	e000      	b.n	801eaa2 <tcp_input+0x46a>
            break;
 801eaa0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801eaa2:	697b      	ldr	r3, [r7, #20]
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	d029      	beq.n	801eafc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801eaa8:	69bb      	ldr	r3, [r7, #24]
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d00a      	beq.n	801eac4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801eaae:	697b      	ldr	r3, [r7, #20]
 801eab0:	68da      	ldr	r2, [r3, #12]
 801eab2:	69bb      	ldr	r3, [r7, #24]
 801eab4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801eab6:	4b10      	ldr	r3, [pc, #64]	@ (801eaf8 <tcp_input+0x4c0>)
 801eab8:	681a      	ldr	r2, [r3, #0]
 801eaba:	697b      	ldr	r3, [r7, #20]
 801eabc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801eabe:	4a0e      	ldr	r2, [pc, #56]	@ (801eaf8 <tcp_input+0x4c0>)
 801eac0:	697b      	ldr	r3, [r7, #20]
 801eac2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801eac4:	6978      	ldr	r0, [r7, #20]
 801eac6:	f000 fa03 	bl	801eed0 <tcp_listen_input>
      }
      pbuf_free(p);
 801eaca:	6878      	ldr	r0, [r7, #4]
 801eacc:	f7fd ff6e 	bl	801c9ac <pbuf_free>
      return;
 801ead0:	e1a8      	b.n	801ee24 <tcp_input+0x7ec>
 801ead2:	bf00      	nop
 801ead4:	2003c4fc 	.word	0x2003c4fc
 801ead8:	200193d0 	.word	0x200193d0
 801eadc:	08029f40 	.word	0x08029f40
 801eae0:	0802a06c 	.word	0x0802a06c
 801eae4:	08029f8c 	.word	0x08029f8c
 801eae8:	2003c4e0 	.word	0x2003c4e0
 801eaec:	0802a098 	.word	0x0802a098
 801eaf0:	2003c4e4 	.word	0x2003c4e4
 801eaf4:	0802a0c4 	.word	0x0802a0c4
 801eaf8:	2003c4dc 	.word	0x2003c4dc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801eafc:	69fb      	ldr	r3, [r7, #28]
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	f000 8158 	beq.w	801edb4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801eb04:	4b95      	ldr	r3, [pc, #596]	@ (801ed5c <tcp_input+0x724>)
 801eb06:	2200      	movs	r2, #0
 801eb08:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801eb0a:	687b      	ldr	r3, [r7, #4]
 801eb0c:	891a      	ldrh	r2, [r3, #8]
 801eb0e:	4b93      	ldr	r3, [pc, #588]	@ (801ed5c <tcp_input+0x724>)
 801eb10:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801eb12:	4a92      	ldr	r2, [pc, #584]	@ (801ed5c <tcp_input+0x724>)
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801eb18:	4b91      	ldr	r3, [pc, #580]	@ (801ed60 <tcp_input+0x728>)
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	4a8f      	ldr	r2, [pc, #572]	@ (801ed5c <tcp_input+0x724>)
 801eb1e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801eb20:	4b90      	ldr	r3, [pc, #576]	@ (801ed64 <tcp_input+0x72c>)
 801eb22:	2200      	movs	r2, #0
 801eb24:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801eb26:	4b90      	ldr	r3, [pc, #576]	@ (801ed68 <tcp_input+0x730>)
 801eb28:	2200      	movs	r2, #0
 801eb2a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801eb2c:	4b8f      	ldr	r3, [pc, #572]	@ (801ed6c <tcp_input+0x734>)
 801eb2e:	2200      	movs	r2, #0
 801eb30:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801eb32:	4b8f      	ldr	r3, [pc, #572]	@ (801ed70 <tcp_input+0x738>)
 801eb34:	781b      	ldrb	r3, [r3, #0]
 801eb36:	f003 0308 	and.w	r3, r3, #8
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	d006      	beq.n	801eb4c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801eb3e:	687b      	ldr	r3, [r7, #4]
 801eb40:	7b5b      	ldrb	r3, [r3, #13]
 801eb42:	f043 0301 	orr.w	r3, r3, #1
 801eb46:	b2da      	uxtb	r2, r3
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801eb4c:	69fb      	ldr	r3, [r7, #28]
 801eb4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801eb50:	2b00      	cmp	r3, #0
 801eb52:	d017      	beq.n	801eb84 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801eb54:	69f8      	ldr	r0, [r7, #28]
 801eb56:	f7ff f929 	bl	801ddac <tcp_process_refused_data>
 801eb5a:	4603      	mov	r3, r0
 801eb5c:	f113 0f0d 	cmn.w	r3, #13
 801eb60:	d007      	beq.n	801eb72 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801eb62:	69fb      	ldr	r3, [r7, #28]
 801eb64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801eb66:	2b00      	cmp	r3, #0
 801eb68:	d00c      	beq.n	801eb84 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801eb6a:	4b82      	ldr	r3, [pc, #520]	@ (801ed74 <tcp_input+0x73c>)
 801eb6c:	881b      	ldrh	r3, [r3, #0]
 801eb6e:	2b00      	cmp	r3, #0
 801eb70:	d008      	beq.n	801eb84 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801eb72:	69fb      	ldr	r3, [r7, #28]
 801eb74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	f040 80e3 	bne.w	801ed42 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801eb7c:	69f8      	ldr	r0, [r7, #28]
 801eb7e:	f003 f9a7 	bl	8021ed0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801eb82:	e0de      	b.n	801ed42 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801eb84:	4a7c      	ldr	r2, [pc, #496]	@ (801ed78 <tcp_input+0x740>)
 801eb86:	69fb      	ldr	r3, [r7, #28]
 801eb88:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801eb8a:	69f8      	ldr	r0, [r7, #28]
 801eb8c:	f000 fb18 	bl	801f1c0 <tcp_process>
 801eb90:	4603      	mov	r3, r0
 801eb92:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801eb94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801eb98:	f113 0f0d 	cmn.w	r3, #13
 801eb9c:	f000 80d3 	beq.w	801ed46 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801eba0:	4b71      	ldr	r3, [pc, #452]	@ (801ed68 <tcp_input+0x730>)
 801eba2:	781b      	ldrb	r3, [r3, #0]
 801eba4:	f003 0308 	and.w	r3, r3, #8
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	d015      	beq.n	801ebd8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801ebac:	69fb      	ldr	r3, [r7, #28]
 801ebae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d008      	beq.n	801ebc8 <tcp_input+0x590>
 801ebb6:	69fb      	ldr	r3, [r7, #28]
 801ebb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ebbc:	69fa      	ldr	r2, [r7, #28]
 801ebbe:	6912      	ldr	r2, [r2, #16]
 801ebc0:	f06f 010d 	mvn.w	r1, #13
 801ebc4:	4610      	mov	r0, r2
 801ebc6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ebc8:	69f9      	ldr	r1, [r7, #28]
 801ebca:	486c      	ldr	r0, [pc, #432]	@ (801ed7c <tcp_input+0x744>)
 801ebcc:	f7ff fbbc 	bl	801e348 <tcp_pcb_remove>
        tcp_free(pcb);
 801ebd0:	69f8      	ldr	r0, [r7, #28]
 801ebd2:	f7fe f9a7 	bl	801cf24 <tcp_free>
 801ebd6:	e0da      	b.n	801ed8e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801ebd8:	2300      	movs	r3, #0
 801ebda:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801ebdc:	4b63      	ldr	r3, [pc, #396]	@ (801ed6c <tcp_input+0x734>)
 801ebde:	881b      	ldrh	r3, [r3, #0]
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d01d      	beq.n	801ec20 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801ebe4:	4b61      	ldr	r3, [pc, #388]	@ (801ed6c <tcp_input+0x734>)
 801ebe6:	881b      	ldrh	r3, [r3, #0]
 801ebe8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801ebea:	69fb      	ldr	r3, [r7, #28]
 801ebec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d00a      	beq.n	801ec0a <tcp_input+0x5d2>
 801ebf4:	69fb      	ldr	r3, [r7, #28]
 801ebf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ebfa:	69fa      	ldr	r2, [r7, #28]
 801ebfc:	6910      	ldr	r0, [r2, #16]
 801ebfe:	89fa      	ldrh	r2, [r7, #14]
 801ec00:	69f9      	ldr	r1, [r7, #28]
 801ec02:	4798      	blx	r3
 801ec04:	4603      	mov	r3, r0
 801ec06:	74fb      	strb	r3, [r7, #19]
 801ec08:	e001      	b.n	801ec0e <tcp_input+0x5d6>
 801ec0a:	2300      	movs	r3, #0
 801ec0c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ec0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ec12:	f113 0f0d 	cmn.w	r3, #13
 801ec16:	f000 8098 	beq.w	801ed4a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801ec1a:	4b54      	ldr	r3, [pc, #336]	@ (801ed6c <tcp_input+0x734>)
 801ec1c:	2200      	movs	r2, #0
 801ec1e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801ec20:	69f8      	ldr	r0, [r7, #28]
 801ec22:	f000 f915 	bl	801ee50 <tcp_input_delayed_close>
 801ec26:	4603      	mov	r3, r0
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	f040 8090 	bne.w	801ed4e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801ec2e:	4b4d      	ldr	r3, [pc, #308]	@ (801ed64 <tcp_input+0x72c>)
 801ec30:	681b      	ldr	r3, [r3, #0]
 801ec32:	2b00      	cmp	r3, #0
 801ec34:	d041      	beq.n	801ecba <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801ec36:	69fb      	ldr	r3, [r7, #28]
 801ec38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	d006      	beq.n	801ec4c <tcp_input+0x614>
 801ec3e:	4b50      	ldr	r3, [pc, #320]	@ (801ed80 <tcp_input+0x748>)
 801ec40:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801ec44:	494f      	ldr	r1, [pc, #316]	@ (801ed84 <tcp_input+0x74c>)
 801ec46:	4850      	ldr	r0, [pc, #320]	@ (801ed88 <tcp_input+0x750>)
 801ec48:	f007 fe26 	bl	8026898 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801ec4c:	69fb      	ldr	r3, [r7, #28]
 801ec4e:	8b5b      	ldrh	r3, [r3, #26]
 801ec50:	f003 0310 	and.w	r3, r3, #16
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	d008      	beq.n	801ec6a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801ec58:	4b42      	ldr	r3, [pc, #264]	@ (801ed64 <tcp_input+0x72c>)
 801ec5a:	681b      	ldr	r3, [r3, #0]
 801ec5c:	4618      	mov	r0, r3
 801ec5e:	f7fd fea5 	bl	801c9ac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801ec62:	69f8      	ldr	r0, [r7, #28]
 801ec64:	f7fe fc46 	bl	801d4f4 <tcp_abort>
            goto aborted;
 801ec68:	e091      	b.n	801ed8e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801ec6a:	69fb      	ldr	r3, [r7, #28]
 801ec6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	d00c      	beq.n	801ec8e <tcp_input+0x656>
 801ec74:	69fb      	ldr	r3, [r7, #28]
 801ec76:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801ec7a:	69fb      	ldr	r3, [r7, #28]
 801ec7c:	6918      	ldr	r0, [r3, #16]
 801ec7e:	4b39      	ldr	r3, [pc, #228]	@ (801ed64 <tcp_input+0x72c>)
 801ec80:	681a      	ldr	r2, [r3, #0]
 801ec82:	2300      	movs	r3, #0
 801ec84:	69f9      	ldr	r1, [r7, #28]
 801ec86:	47a0      	blx	r4
 801ec88:	4603      	mov	r3, r0
 801ec8a:	74fb      	strb	r3, [r7, #19]
 801ec8c:	e008      	b.n	801eca0 <tcp_input+0x668>
 801ec8e:	4b35      	ldr	r3, [pc, #212]	@ (801ed64 <tcp_input+0x72c>)
 801ec90:	681a      	ldr	r2, [r3, #0]
 801ec92:	2300      	movs	r3, #0
 801ec94:	69f9      	ldr	r1, [r7, #28]
 801ec96:	2000      	movs	r0, #0
 801ec98:	f7ff f95e 	bl	801df58 <tcp_recv_null>
 801ec9c:	4603      	mov	r3, r0
 801ec9e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801eca0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801eca4:	f113 0f0d 	cmn.w	r3, #13
 801eca8:	d053      	beq.n	801ed52 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801ecaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	d003      	beq.n	801ecba <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801ecb2:	4b2c      	ldr	r3, [pc, #176]	@ (801ed64 <tcp_input+0x72c>)
 801ecb4:	681a      	ldr	r2, [r3, #0]
 801ecb6:	69fb      	ldr	r3, [r7, #28]
 801ecb8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801ecba:	4b2b      	ldr	r3, [pc, #172]	@ (801ed68 <tcp_input+0x730>)
 801ecbc:	781b      	ldrb	r3, [r3, #0]
 801ecbe:	f003 0320 	and.w	r3, r3, #32
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	d030      	beq.n	801ed28 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801ecc6:	69fb      	ldr	r3, [r7, #28]
 801ecc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	d009      	beq.n	801ece2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801ecce:	69fb      	ldr	r3, [r7, #28]
 801ecd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ecd2:	7b5a      	ldrb	r2, [r3, #13]
 801ecd4:	69fb      	ldr	r3, [r7, #28]
 801ecd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ecd8:	f042 0220 	orr.w	r2, r2, #32
 801ecdc:	b2d2      	uxtb	r2, r2
 801ecde:	735a      	strb	r2, [r3, #13]
 801ece0:	e022      	b.n	801ed28 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801ece2:	69fb      	ldr	r3, [r7, #28]
 801ece4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ece6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801ecea:	d005      	beq.n	801ecf8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801ecec:	69fb      	ldr	r3, [r7, #28]
 801ecee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ecf0:	3301      	adds	r3, #1
 801ecf2:	b29a      	uxth	r2, r3
 801ecf4:	69fb      	ldr	r3, [r7, #28]
 801ecf6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801ecf8:	69fb      	ldr	r3, [r7, #28]
 801ecfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ecfe:	2b00      	cmp	r3, #0
 801ed00:	d00b      	beq.n	801ed1a <tcp_input+0x6e2>
 801ed02:	69fb      	ldr	r3, [r7, #28]
 801ed04:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801ed08:	69fb      	ldr	r3, [r7, #28]
 801ed0a:	6918      	ldr	r0, [r3, #16]
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	2200      	movs	r2, #0
 801ed10:	69f9      	ldr	r1, [r7, #28]
 801ed12:	47a0      	blx	r4
 801ed14:	4603      	mov	r3, r0
 801ed16:	74fb      	strb	r3, [r7, #19]
 801ed18:	e001      	b.n	801ed1e <tcp_input+0x6e6>
 801ed1a:	2300      	movs	r3, #0
 801ed1c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ed1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ed22:	f113 0f0d 	cmn.w	r3, #13
 801ed26:	d016      	beq.n	801ed56 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801ed28:	4b13      	ldr	r3, [pc, #76]	@ (801ed78 <tcp_input+0x740>)
 801ed2a:	2200      	movs	r2, #0
 801ed2c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801ed2e:	69f8      	ldr	r0, [r7, #28]
 801ed30:	f000 f88e 	bl	801ee50 <tcp_input_delayed_close>
 801ed34:	4603      	mov	r3, r0
 801ed36:	2b00      	cmp	r3, #0
 801ed38:	d128      	bne.n	801ed8c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801ed3a:	69f8      	ldr	r0, [r7, #28]
 801ed3c:	f002 fac2 	bl	80212c4 <tcp_output>
 801ed40:	e025      	b.n	801ed8e <tcp_input+0x756>
        goto aborted;
 801ed42:	bf00      	nop
 801ed44:	e023      	b.n	801ed8e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801ed46:	bf00      	nop
 801ed48:	e021      	b.n	801ed8e <tcp_input+0x756>
              goto aborted;
 801ed4a:	bf00      	nop
 801ed4c:	e01f      	b.n	801ed8e <tcp_input+0x756>
          goto aborted;
 801ed4e:	bf00      	nop
 801ed50:	e01d      	b.n	801ed8e <tcp_input+0x756>
            goto aborted;
 801ed52:	bf00      	nop
 801ed54:	e01b      	b.n	801ed8e <tcp_input+0x756>
              goto aborted;
 801ed56:	bf00      	nop
 801ed58:	e019      	b.n	801ed8e <tcp_input+0x756>
 801ed5a:	bf00      	nop
 801ed5c:	2003c4ec 	.word	0x2003c4ec
 801ed60:	2003c4fc 	.word	0x2003c4fc
 801ed64:	2003c51c 	.word	0x2003c51c
 801ed68:	2003c519 	.word	0x2003c519
 801ed6c:	2003c514 	.word	0x2003c514
 801ed70:	2003c518 	.word	0x2003c518
 801ed74:	2003c516 	.word	0x2003c516
 801ed78:	2003c520 	.word	0x2003c520
 801ed7c:	2003c4e0 	.word	0x2003c4e0
 801ed80:	08029f40 	.word	0x08029f40
 801ed84:	0802a0f4 	.word	0x0802a0f4
 801ed88:	08029f8c 	.word	0x08029f8c
          goto aborted;
 801ed8c:	bf00      	nop
    tcp_input_pcb = NULL;
 801ed8e:	4b27      	ldr	r3, [pc, #156]	@ (801ee2c <tcp_input+0x7f4>)
 801ed90:	2200      	movs	r2, #0
 801ed92:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801ed94:	4b26      	ldr	r3, [pc, #152]	@ (801ee30 <tcp_input+0x7f8>)
 801ed96:	2200      	movs	r2, #0
 801ed98:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801ed9a:	4b26      	ldr	r3, [pc, #152]	@ (801ee34 <tcp_input+0x7fc>)
 801ed9c:	685b      	ldr	r3, [r3, #4]
 801ed9e:	2b00      	cmp	r3, #0
 801eda0:	d03f      	beq.n	801ee22 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801eda2:	4b24      	ldr	r3, [pc, #144]	@ (801ee34 <tcp_input+0x7fc>)
 801eda4:	685b      	ldr	r3, [r3, #4]
 801eda6:	4618      	mov	r0, r3
 801eda8:	f7fd fe00 	bl	801c9ac <pbuf_free>
      inseg.p = NULL;
 801edac:	4b21      	ldr	r3, [pc, #132]	@ (801ee34 <tcp_input+0x7fc>)
 801edae:	2200      	movs	r2, #0
 801edb0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801edb2:	e036      	b.n	801ee22 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801edb4:	4b20      	ldr	r3, [pc, #128]	@ (801ee38 <tcp_input+0x800>)
 801edb6:	681b      	ldr	r3, [r3, #0]
 801edb8:	899b      	ldrh	r3, [r3, #12]
 801edba:	b29b      	uxth	r3, r3
 801edbc:	4618      	mov	r0, r3
 801edbe:	f7fc f95b 	bl	801b078 <lwip_htons>
 801edc2:	4603      	mov	r3, r0
 801edc4:	b2db      	uxtb	r3, r3
 801edc6:	f003 0304 	and.w	r3, r3, #4
 801edca:	2b00      	cmp	r3, #0
 801edcc:	d118      	bne.n	801ee00 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801edce:	4b1b      	ldr	r3, [pc, #108]	@ (801ee3c <tcp_input+0x804>)
 801edd0:	6819      	ldr	r1, [r3, #0]
 801edd2:	4b1b      	ldr	r3, [pc, #108]	@ (801ee40 <tcp_input+0x808>)
 801edd4:	881b      	ldrh	r3, [r3, #0]
 801edd6:	461a      	mov	r2, r3
 801edd8:	4b1a      	ldr	r3, [pc, #104]	@ (801ee44 <tcp_input+0x80c>)
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801edde:	4b16      	ldr	r3, [pc, #88]	@ (801ee38 <tcp_input+0x800>)
 801ede0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ede2:	885b      	ldrh	r3, [r3, #2]
 801ede4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ede6:	4a14      	ldr	r2, [pc, #80]	@ (801ee38 <tcp_input+0x800>)
 801ede8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801edea:	8812      	ldrh	r2, [r2, #0]
 801edec:	b292      	uxth	r2, r2
 801edee:	9202      	str	r2, [sp, #8]
 801edf0:	9301      	str	r3, [sp, #4]
 801edf2:	4b15      	ldr	r3, [pc, #84]	@ (801ee48 <tcp_input+0x810>)
 801edf4:	9300      	str	r3, [sp, #0]
 801edf6:	4b15      	ldr	r3, [pc, #84]	@ (801ee4c <tcp_input+0x814>)
 801edf8:	4602      	mov	r2, r0
 801edfa:	2000      	movs	r0, #0
 801edfc:	f003 f816 	bl	8021e2c <tcp_rst>
    pbuf_free(p);
 801ee00:	6878      	ldr	r0, [r7, #4]
 801ee02:	f7fd fdd3 	bl	801c9ac <pbuf_free>
  return;
 801ee06:	e00c      	b.n	801ee22 <tcp_input+0x7ea>
    goto dropped;
 801ee08:	bf00      	nop
 801ee0a:	e006      	b.n	801ee1a <tcp_input+0x7e2>
    goto dropped;
 801ee0c:	bf00      	nop
 801ee0e:	e004      	b.n	801ee1a <tcp_input+0x7e2>
    goto dropped;
 801ee10:	bf00      	nop
 801ee12:	e002      	b.n	801ee1a <tcp_input+0x7e2>
      goto dropped;
 801ee14:	bf00      	nop
 801ee16:	e000      	b.n	801ee1a <tcp_input+0x7e2>
      goto dropped;
 801ee18:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801ee1a:	6878      	ldr	r0, [r7, #4]
 801ee1c:	f7fd fdc6 	bl	801c9ac <pbuf_free>
 801ee20:	e000      	b.n	801ee24 <tcp_input+0x7ec>
  return;
 801ee22:	bf00      	nop
}
 801ee24:	3724      	adds	r7, #36	@ 0x24
 801ee26:	46bd      	mov	sp, r7
 801ee28:	bd90      	pop	{r4, r7, pc}
 801ee2a:	bf00      	nop
 801ee2c:	2003c520 	.word	0x2003c520
 801ee30:	2003c51c 	.word	0x2003c51c
 801ee34:	2003c4ec 	.word	0x2003c4ec
 801ee38:	2003c4fc 	.word	0x2003c4fc
 801ee3c:	2003c510 	.word	0x2003c510
 801ee40:	2003c516 	.word	0x2003c516
 801ee44:	2003c50c 	.word	0x2003c50c
 801ee48:	200193e0 	.word	0x200193e0
 801ee4c:	200193e4 	.word	0x200193e4

0801ee50 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801ee50:	b580      	push	{r7, lr}
 801ee52:	b082      	sub	sp, #8
 801ee54:	af00      	add	r7, sp, #0
 801ee56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	2b00      	cmp	r3, #0
 801ee5c:	d106      	bne.n	801ee6c <tcp_input_delayed_close+0x1c>
 801ee5e:	4b17      	ldr	r3, [pc, #92]	@ (801eebc <tcp_input_delayed_close+0x6c>)
 801ee60:	f240 225a 	movw	r2, #602	@ 0x25a
 801ee64:	4916      	ldr	r1, [pc, #88]	@ (801eec0 <tcp_input_delayed_close+0x70>)
 801ee66:	4817      	ldr	r0, [pc, #92]	@ (801eec4 <tcp_input_delayed_close+0x74>)
 801ee68:	f007 fd16 	bl	8026898 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801ee6c:	4b16      	ldr	r3, [pc, #88]	@ (801eec8 <tcp_input_delayed_close+0x78>)
 801ee6e:	781b      	ldrb	r3, [r3, #0]
 801ee70:	f003 0310 	and.w	r3, r3, #16
 801ee74:	2b00      	cmp	r3, #0
 801ee76:	d01c      	beq.n	801eeb2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801ee78:	687b      	ldr	r3, [r7, #4]
 801ee7a:	8b5b      	ldrh	r3, [r3, #26]
 801ee7c:	f003 0310 	and.w	r3, r3, #16
 801ee80:	2b00      	cmp	r3, #0
 801ee82:	d10d      	bne.n	801eea0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ee8a:	2b00      	cmp	r3, #0
 801ee8c:	d008      	beq.n	801eea0 <tcp_input_delayed_close+0x50>
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ee94:	687a      	ldr	r2, [r7, #4]
 801ee96:	6912      	ldr	r2, [r2, #16]
 801ee98:	f06f 010e 	mvn.w	r1, #14
 801ee9c:	4610      	mov	r0, r2
 801ee9e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801eea0:	6879      	ldr	r1, [r7, #4]
 801eea2:	480a      	ldr	r0, [pc, #40]	@ (801eecc <tcp_input_delayed_close+0x7c>)
 801eea4:	f7ff fa50 	bl	801e348 <tcp_pcb_remove>
    tcp_free(pcb);
 801eea8:	6878      	ldr	r0, [r7, #4]
 801eeaa:	f7fe f83b 	bl	801cf24 <tcp_free>
    return 1;
 801eeae:	2301      	movs	r3, #1
 801eeb0:	e000      	b.n	801eeb4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801eeb2:	2300      	movs	r3, #0
}
 801eeb4:	4618      	mov	r0, r3
 801eeb6:	3708      	adds	r7, #8
 801eeb8:	46bd      	mov	sp, r7
 801eeba:	bd80      	pop	{r7, pc}
 801eebc:	08029f40 	.word	0x08029f40
 801eec0:	0802a110 	.word	0x0802a110
 801eec4:	08029f8c 	.word	0x08029f8c
 801eec8:	2003c519 	.word	0x2003c519
 801eecc:	2003c4e0 	.word	0x2003c4e0

0801eed0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801eed0:	b590      	push	{r4, r7, lr}
 801eed2:	b08b      	sub	sp, #44	@ 0x2c
 801eed4:	af04      	add	r7, sp, #16
 801eed6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801eed8:	4b6f      	ldr	r3, [pc, #444]	@ (801f098 <tcp_listen_input+0x1c8>)
 801eeda:	781b      	ldrb	r3, [r3, #0]
 801eedc:	f003 0304 	and.w	r3, r3, #4
 801eee0:	2b00      	cmp	r3, #0
 801eee2:	f040 80d2 	bne.w	801f08a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	2b00      	cmp	r3, #0
 801eeea:	d106      	bne.n	801eefa <tcp_listen_input+0x2a>
 801eeec:	4b6b      	ldr	r3, [pc, #428]	@ (801f09c <tcp_listen_input+0x1cc>)
 801eeee:	f240 2281 	movw	r2, #641	@ 0x281
 801eef2:	496b      	ldr	r1, [pc, #428]	@ (801f0a0 <tcp_listen_input+0x1d0>)
 801eef4:	486b      	ldr	r0, [pc, #428]	@ (801f0a4 <tcp_listen_input+0x1d4>)
 801eef6:	f007 fccf 	bl	8026898 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801eefa:	4b67      	ldr	r3, [pc, #412]	@ (801f098 <tcp_listen_input+0x1c8>)
 801eefc:	781b      	ldrb	r3, [r3, #0]
 801eefe:	f003 0310 	and.w	r3, r3, #16
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d019      	beq.n	801ef3a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ef06:	4b68      	ldr	r3, [pc, #416]	@ (801f0a8 <tcp_listen_input+0x1d8>)
 801ef08:	6819      	ldr	r1, [r3, #0]
 801ef0a:	4b68      	ldr	r3, [pc, #416]	@ (801f0ac <tcp_listen_input+0x1dc>)
 801ef0c:	881b      	ldrh	r3, [r3, #0]
 801ef0e:	461a      	mov	r2, r3
 801ef10:	4b67      	ldr	r3, [pc, #412]	@ (801f0b0 <tcp_listen_input+0x1e0>)
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ef16:	4b67      	ldr	r3, [pc, #412]	@ (801f0b4 <tcp_listen_input+0x1e4>)
 801ef18:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ef1a:	885b      	ldrh	r3, [r3, #2]
 801ef1c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ef1e:	4a65      	ldr	r2, [pc, #404]	@ (801f0b4 <tcp_listen_input+0x1e4>)
 801ef20:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ef22:	8812      	ldrh	r2, [r2, #0]
 801ef24:	b292      	uxth	r2, r2
 801ef26:	9202      	str	r2, [sp, #8]
 801ef28:	9301      	str	r3, [sp, #4]
 801ef2a:	4b63      	ldr	r3, [pc, #396]	@ (801f0b8 <tcp_listen_input+0x1e8>)
 801ef2c:	9300      	str	r3, [sp, #0]
 801ef2e:	4b63      	ldr	r3, [pc, #396]	@ (801f0bc <tcp_listen_input+0x1ec>)
 801ef30:	4602      	mov	r2, r0
 801ef32:	6878      	ldr	r0, [r7, #4]
 801ef34:	f002 ff7a 	bl	8021e2c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801ef38:	e0a9      	b.n	801f08e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801ef3a:	4b57      	ldr	r3, [pc, #348]	@ (801f098 <tcp_listen_input+0x1c8>)
 801ef3c:	781b      	ldrb	r3, [r3, #0]
 801ef3e:	f003 0302 	and.w	r3, r3, #2
 801ef42:	2b00      	cmp	r3, #0
 801ef44:	f000 80a3 	beq.w	801f08e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	7d5b      	ldrb	r3, [r3, #21]
 801ef4c:	4618      	mov	r0, r3
 801ef4e:	f7ff f927 	bl	801e1a0 <tcp_alloc>
 801ef52:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801ef54:	697b      	ldr	r3, [r7, #20]
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d111      	bne.n	801ef7e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	699b      	ldr	r3, [r3, #24]
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d00a      	beq.n	801ef78 <tcp_listen_input+0xa8>
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	699b      	ldr	r3, [r3, #24]
 801ef66:	687a      	ldr	r2, [r7, #4]
 801ef68:	6910      	ldr	r0, [r2, #16]
 801ef6a:	f04f 32ff 	mov.w	r2, #4294967295
 801ef6e:	2100      	movs	r1, #0
 801ef70:	4798      	blx	r3
 801ef72:	4603      	mov	r3, r0
 801ef74:	73bb      	strb	r3, [r7, #14]
      return;
 801ef76:	e08b      	b.n	801f090 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801ef78:	23f0      	movs	r3, #240	@ 0xf0
 801ef7a:	73bb      	strb	r3, [r7, #14]
      return;
 801ef7c:	e088      	b.n	801f090 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801ef7e:	4b50      	ldr	r3, [pc, #320]	@ (801f0c0 <tcp_listen_input+0x1f0>)
 801ef80:	695a      	ldr	r2, [r3, #20]
 801ef82:	697b      	ldr	r3, [r7, #20]
 801ef84:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801ef86:	4b4e      	ldr	r3, [pc, #312]	@ (801f0c0 <tcp_listen_input+0x1f0>)
 801ef88:	691a      	ldr	r2, [r3, #16]
 801ef8a:	697b      	ldr	r3, [r7, #20]
 801ef8c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801ef8e:	687b      	ldr	r3, [r7, #4]
 801ef90:	8ada      	ldrh	r2, [r3, #22]
 801ef92:	697b      	ldr	r3, [r7, #20]
 801ef94:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801ef96:	4b47      	ldr	r3, [pc, #284]	@ (801f0b4 <tcp_listen_input+0x1e4>)
 801ef98:	681b      	ldr	r3, [r3, #0]
 801ef9a:	881b      	ldrh	r3, [r3, #0]
 801ef9c:	b29a      	uxth	r2, r3
 801ef9e:	697b      	ldr	r3, [r7, #20]
 801efa0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801efa2:	697b      	ldr	r3, [r7, #20]
 801efa4:	2203      	movs	r2, #3
 801efa6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801efa8:	4b41      	ldr	r3, [pc, #260]	@ (801f0b0 <tcp_listen_input+0x1e0>)
 801efaa:	681b      	ldr	r3, [r3, #0]
 801efac:	1c5a      	adds	r2, r3, #1
 801efae:	697b      	ldr	r3, [r7, #20]
 801efb0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801efb2:	697b      	ldr	r3, [r7, #20]
 801efb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801efb6:	697b      	ldr	r3, [r7, #20]
 801efb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801efba:	6978      	ldr	r0, [r7, #20]
 801efbc:	f7ff fa58 	bl	801e470 <tcp_next_iss>
 801efc0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801efc2:	697b      	ldr	r3, [r7, #20]
 801efc4:	693a      	ldr	r2, [r7, #16]
 801efc6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801efc8:	697b      	ldr	r3, [r7, #20]
 801efca:	693a      	ldr	r2, [r7, #16]
 801efcc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801efce:	697b      	ldr	r3, [r7, #20]
 801efd0:	693a      	ldr	r2, [r7, #16]
 801efd2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801efd4:	697b      	ldr	r3, [r7, #20]
 801efd6:	693a      	ldr	r2, [r7, #16]
 801efd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801efda:	4b35      	ldr	r3, [pc, #212]	@ (801f0b0 <tcp_listen_input+0x1e0>)
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	1e5a      	subs	r2, r3, #1
 801efe0:	697b      	ldr	r3, [r7, #20]
 801efe2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801efe4:	687b      	ldr	r3, [r7, #4]
 801efe6:	691a      	ldr	r2, [r3, #16]
 801efe8:	697b      	ldr	r3, [r7, #20]
 801efea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801efec:	697b      	ldr	r3, [r7, #20]
 801efee:	687a      	ldr	r2, [r7, #4]
 801eff0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801eff2:	687b      	ldr	r3, [r7, #4]
 801eff4:	7a5b      	ldrb	r3, [r3, #9]
 801eff6:	f003 030c 	and.w	r3, r3, #12
 801effa:	b2da      	uxtb	r2, r3
 801effc:	697b      	ldr	r3, [r7, #20]
 801effe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	7a1a      	ldrb	r2, [r3, #8]
 801f004:	697b      	ldr	r3, [r7, #20]
 801f006:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801f008:	4b2e      	ldr	r3, [pc, #184]	@ (801f0c4 <tcp_listen_input+0x1f4>)
 801f00a:	681a      	ldr	r2, [r3, #0]
 801f00c:	697b      	ldr	r3, [r7, #20]
 801f00e:	60da      	str	r2, [r3, #12]
 801f010:	4a2c      	ldr	r2, [pc, #176]	@ (801f0c4 <tcp_listen_input+0x1f4>)
 801f012:	697b      	ldr	r3, [r7, #20]
 801f014:	6013      	str	r3, [r2, #0]
 801f016:	f003 f8cb 	bl	80221b0 <tcp_timer_needed>
 801f01a:	4b2b      	ldr	r3, [pc, #172]	@ (801f0c8 <tcp_listen_input+0x1f8>)
 801f01c:	2201      	movs	r2, #1
 801f01e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801f020:	6978      	ldr	r0, [r7, #20]
 801f022:	f001 fd8b 	bl	8020b3c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801f026:	4b23      	ldr	r3, [pc, #140]	@ (801f0b4 <tcp_listen_input+0x1e4>)
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	89db      	ldrh	r3, [r3, #14]
 801f02c:	b29a      	uxth	r2, r3
 801f02e:	697b      	ldr	r3, [r7, #20]
 801f030:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801f034:	697b      	ldr	r3, [r7, #20]
 801f036:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801f03a:	697b      	ldr	r3, [r7, #20]
 801f03c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f040:	697b      	ldr	r3, [r7, #20]
 801f042:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801f044:	697b      	ldr	r3, [r7, #20]
 801f046:	3304      	adds	r3, #4
 801f048:	4618      	mov	r0, r3
 801f04a:	f005 f815 	bl	8024078 <ip4_route>
 801f04e:	4601      	mov	r1, r0
 801f050:	697b      	ldr	r3, [r7, #20]
 801f052:	3304      	adds	r3, #4
 801f054:	461a      	mov	r2, r3
 801f056:	4620      	mov	r0, r4
 801f058:	f7ff fa30 	bl	801e4bc <tcp_eff_send_mss_netif>
 801f05c:	4603      	mov	r3, r0
 801f05e:	461a      	mov	r2, r3
 801f060:	697b      	ldr	r3, [r7, #20]
 801f062:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801f064:	2112      	movs	r1, #18
 801f066:	6978      	ldr	r0, [r7, #20]
 801f068:	f002 f83e 	bl	80210e8 <tcp_enqueue_flags>
 801f06c:	4603      	mov	r3, r0
 801f06e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801f070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f074:	2b00      	cmp	r3, #0
 801f076:	d004      	beq.n	801f082 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801f078:	2100      	movs	r1, #0
 801f07a:	6978      	ldr	r0, [r7, #20]
 801f07c:	f7fe f97c 	bl	801d378 <tcp_abandon>
      return;
 801f080:	e006      	b.n	801f090 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801f082:	6978      	ldr	r0, [r7, #20]
 801f084:	f002 f91e 	bl	80212c4 <tcp_output>
  return;
 801f088:	e001      	b.n	801f08e <tcp_listen_input+0x1be>
    return;
 801f08a:	bf00      	nop
 801f08c:	e000      	b.n	801f090 <tcp_listen_input+0x1c0>
  return;
 801f08e:	bf00      	nop
}
 801f090:	371c      	adds	r7, #28
 801f092:	46bd      	mov	sp, r7
 801f094:	bd90      	pop	{r4, r7, pc}
 801f096:	bf00      	nop
 801f098:	2003c518 	.word	0x2003c518
 801f09c:	08029f40 	.word	0x08029f40
 801f0a0:	0802a138 	.word	0x0802a138
 801f0a4:	08029f8c 	.word	0x08029f8c
 801f0a8:	2003c510 	.word	0x2003c510
 801f0ac:	2003c516 	.word	0x2003c516
 801f0b0:	2003c50c 	.word	0x2003c50c
 801f0b4:	2003c4fc 	.word	0x2003c4fc
 801f0b8:	200193e0 	.word	0x200193e0
 801f0bc:	200193e4 	.word	0x200193e4
 801f0c0:	200193d0 	.word	0x200193d0
 801f0c4:	2003c4e0 	.word	0x2003c4e0
 801f0c8:	2003c4e8 	.word	0x2003c4e8

0801f0cc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801f0cc:	b580      	push	{r7, lr}
 801f0ce:	b086      	sub	sp, #24
 801f0d0:	af04      	add	r7, sp, #16
 801f0d2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801f0d4:	4b2f      	ldr	r3, [pc, #188]	@ (801f194 <tcp_timewait_input+0xc8>)
 801f0d6:	781b      	ldrb	r3, [r3, #0]
 801f0d8:	f003 0304 	and.w	r3, r3, #4
 801f0dc:	2b00      	cmp	r3, #0
 801f0de:	d153      	bne.n	801f188 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801f0e0:	687b      	ldr	r3, [r7, #4]
 801f0e2:	2b00      	cmp	r3, #0
 801f0e4:	d106      	bne.n	801f0f4 <tcp_timewait_input+0x28>
 801f0e6:	4b2c      	ldr	r3, [pc, #176]	@ (801f198 <tcp_timewait_input+0xcc>)
 801f0e8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801f0ec:	492b      	ldr	r1, [pc, #172]	@ (801f19c <tcp_timewait_input+0xd0>)
 801f0ee:	482c      	ldr	r0, [pc, #176]	@ (801f1a0 <tcp_timewait_input+0xd4>)
 801f0f0:	f007 fbd2 	bl	8026898 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801f0f4:	4b27      	ldr	r3, [pc, #156]	@ (801f194 <tcp_timewait_input+0xc8>)
 801f0f6:	781b      	ldrb	r3, [r3, #0]
 801f0f8:	f003 0302 	and.w	r3, r3, #2
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	d02a      	beq.n	801f156 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801f100:	4b28      	ldr	r3, [pc, #160]	@ (801f1a4 <tcp_timewait_input+0xd8>)
 801f102:	681a      	ldr	r2, [r3, #0]
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f108:	1ad3      	subs	r3, r2, r3
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	db2d      	blt.n	801f16a <tcp_timewait_input+0x9e>
 801f10e:	4b25      	ldr	r3, [pc, #148]	@ (801f1a4 <tcp_timewait_input+0xd8>)
 801f110:	681a      	ldr	r2, [r3, #0]
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f116:	6879      	ldr	r1, [r7, #4]
 801f118:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f11a:	440b      	add	r3, r1
 801f11c:	1ad3      	subs	r3, r2, r3
 801f11e:	2b00      	cmp	r3, #0
 801f120:	dc23      	bgt.n	801f16a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f122:	4b21      	ldr	r3, [pc, #132]	@ (801f1a8 <tcp_timewait_input+0xdc>)
 801f124:	6819      	ldr	r1, [r3, #0]
 801f126:	4b21      	ldr	r3, [pc, #132]	@ (801f1ac <tcp_timewait_input+0xe0>)
 801f128:	881b      	ldrh	r3, [r3, #0]
 801f12a:	461a      	mov	r2, r3
 801f12c:	4b1d      	ldr	r3, [pc, #116]	@ (801f1a4 <tcp_timewait_input+0xd8>)
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f132:	4b1f      	ldr	r3, [pc, #124]	@ (801f1b0 <tcp_timewait_input+0xe4>)
 801f134:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f136:	885b      	ldrh	r3, [r3, #2]
 801f138:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f13a:	4a1d      	ldr	r2, [pc, #116]	@ (801f1b0 <tcp_timewait_input+0xe4>)
 801f13c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f13e:	8812      	ldrh	r2, [r2, #0]
 801f140:	b292      	uxth	r2, r2
 801f142:	9202      	str	r2, [sp, #8]
 801f144:	9301      	str	r3, [sp, #4]
 801f146:	4b1b      	ldr	r3, [pc, #108]	@ (801f1b4 <tcp_timewait_input+0xe8>)
 801f148:	9300      	str	r3, [sp, #0]
 801f14a:	4b1b      	ldr	r3, [pc, #108]	@ (801f1b8 <tcp_timewait_input+0xec>)
 801f14c:	4602      	mov	r2, r0
 801f14e:	6878      	ldr	r0, [r7, #4]
 801f150:	f002 fe6c 	bl	8021e2c <tcp_rst>
      return;
 801f154:	e01b      	b.n	801f18e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801f156:	4b0f      	ldr	r3, [pc, #60]	@ (801f194 <tcp_timewait_input+0xc8>)
 801f158:	781b      	ldrb	r3, [r3, #0]
 801f15a:	f003 0301 	and.w	r3, r3, #1
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d003      	beq.n	801f16a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801f162:	4b16      	ldr	r3, [pc, #88]	@ (801f1bc <tcp_timewait_input+0xf0>)
 801f164:	681a      	ldr	r2, [r3, #0]
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801f16a:	4b10      	ldr	r3, [pc, #64]	@ (801f1ac <tcp_timewait_input+0xe0>)
 801f16c:	881b      	ldrh	r3, [r3, #0]
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d00c      	beq.n	801f18c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	8b5b      	ldrh	r3, [r3, #26]
 801f176:	f043 0302 	orr.w	r3, r3, #2
 801f17a:	b29a      	uxth	r2, r3
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801f180:	6878      	ldr	r0, [r7, #4]
 801f182:	f002 f89f 	bl	80212c4 <tcp_output>
  }
  return;
 801f186:	e001      	b.n	801f18c <tcp_timewait_input+0xc0>
    return;
 801f188:	bf00      	nop
 801f18a:	e000      	b.n	801f18e <tcp_timewait_input+0xc2>
  return;
 801f18c:	bf00      	nop
}
 801f18e:	3708      	adds	r7, #8
 801f190:	46bd      	mov	sp, r7
 801f192:	bd80      	pop	{r7, pc}
 801f194:	2003c518 	.word	0x2003c518
 801f198:	08029f40 	.word	0x08029f40
 801f19c:	0802a158 	.word	0x0802a158
 801f1a0:	08029f8c 	.word	0x08029f8c
 801f1a4:	2003c50c 	.word	0x2003c50c
 801f1a8:	2003c510 	.word	0x2003c510
 801f1ac:	2003c516 	.word	0x2003c516
 801f1b0:	2003c4fc 	.word	0x2003c4fc
 801f1b4:	200193e0 	.word	0x200193e0
 801f1b8:	200193e4 	.word	0x200193e4
 801f1bc:	2003c4d4 	.word	0x2003c4d4

0801f1c0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801f1c0:	b590      	push	{r4, r7, lr}
 801f1c2:	b08d      	sub	sp, #52	@ 0x34
 801f1c4:	af04      	add	r7, sp, #16
 801f1c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801f1c8:	2300      	movs	r3, #0
 801f1ca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801f1cc:	2300      	movs	r3, #0
 801f1ce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	2b00      	cmp	r3, #0
 801f1d4:	d106      	bne.n	801f1e4 <tcp_process+0x24>
 801f1d6:	4b9d      	ldr	r3, [pc, #628]	@ (801f44c <tcp_process+0x28c>)
 801f1d8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801f1dc:	499c      	ldr	r1, [pc, #624]	@ (801f450 <tcp_process+0x290>)
 801f1de:	489d      	ldr	r0, [pc, #628]	@ (801f454 <tcp_process+0x294>)
 801f1e0:	f007 fb5a 	bl	8026898 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801f1e4:	4b9c      	ldr	r3, [pc, #624]	@ (801f458 <tcp_process+0x298>)
 801f1e6:	781b      	ldrb	r3, [r3, #0]
 801f1e8:	f003 0304 	and.w	r3, r3, #4
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d04e      	beq.n	801f28e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	7d1b      	ldrb	r3, [r3, #20]
 801f1f4:	2b02      	cmp	r3, #2
 801f1f6:	d108      	bne.n	801f20a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f1fc:	4b97      	ldr	r3, [pc, #604]	@ (801f45c <tcp_process+0x29c>)
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	429a      	cmp	r2, r3
 801f202:	d123      	bne.n	801f24c <tcp_process+0x8c>
        acceptable = 1;
 801f204:	2301      	movs	r3, #1
 801f206:	76fb      	strb	r3, [r7, #27]
 801f208:	e020      	b.n	801f24c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f20e:	4b94      	ldr	r3, [pc, #592]	@ (801f460 <tcp_process+0x2a0>)
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	429a      	cmp	r2, r3
 801f214:	d102      	bne.n	801f21c <tcp_process+0x5c>
        acceptable = 1;
 801f216:	2301      	movs	r3, #1
 801f218:	76fb      	strb	r3, [r7, #27]
 801f21a:	e017      	b.n	801f24c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f21c:	4b90      	ldr	r3, [pc, #576]	@ (801f460 <tcp_process+0x2a0>)
 801f21e:	681a      	ldr	r2, [r3, #0]
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f224:	1ad3      	subs	r3, r2, r3
 801f226:	2b00      	cmp	r3, #0
 801f228:	db10      	blt.n	801f24c <tcp_process+0x8c>
 801f22a:	4b8d      	ldr	r3, [pc, #564]	@ (801f460 <tcp_process+0x2a0>)
 801f22c:	681a      	ldr	r2, [r3, #0]
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f232:	6879      	ldr	r1, [r7, #4]
 801f234:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f236:	440b      	add	r3, r1
 801f238:	1ad3      	subs	r3, r2, r3
 801f23a:	2b00      	cmp	r3, #0
 801f23c:	dc06      	bgt.n	801f24c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801f23e:	687b      	ldr	r3, [r7, #4]
 801f240:	8b5b      	ldrh	r3, [r3, #26]
 801f242:	f043 0302 	orr.w	r3, r3, #2
 801f246:	b29a      	uxth	r2, r3
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801f24c:	7efb      	ldrb	r3, [r7, #27]
 801f24e:	2b00      	cmp	r3, #0
 801f250:	d01b      	beq.n	801f28a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	7d1b      	ldrb	r3, [r3, #20]
 801f256:	2b00      	cmp	r3, #0
 801f258:	d106      	bne.n	801f268 <tcp_process+0xa8>
 801f25a:	4b7c      	ldr	r3, [pc, #496]	@ (801f44c <tcp_process+0x28c>)
 801f25c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801f260:	4980      	ldr	r1, [pc, #512]	@ (801f464 <tcp_process+0x2a4>)
 801f262:	487c      	ldr	r0, [pc, #496]	@ (801f454 <tcp_process+0x294>)
 801f264:	f007 fb18 	bl	8026898 <iprintf>
      recv_flags |= TF_RESET;
 801f268:	4b7f      	ldr	r3, [pc, #508]	@ (801f468 <tcp_process+0x2a8>)
 801f26a:	781b      	ldrb	r3, [r3, #0]
 801f26c:	f043 0308 	orr.w	r3, r3, #8
 801f270:	b2da      	uxtb	r2, r3
 801f272:	4b7d      	ldr	r3, [pc, #500]	@ (801f468 <tcp_process+0x2a8>)
 801f274:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	8b5b      	ldrh	r3, [r3, #26]
 801f27a:	f023 0301 	bic.w	r3, r3, #1
 801f27e:	b29a      	uxth	r2, r3
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801f284:	f06f 030d 	mvn.w	r3, #13
 801f288:	e37a      	b.n	801f980 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801f28a:	2300      	movs	r3, #0
 801f28c:	e378      	b.n	801f980 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801f28e:	4b72      	ldr	r3, [pc, #456]	@ (801f458 <tcp_process+0x298>)
 801f290:	781b      	ldrb	r3, [r3, #0]
 801f292:	f003 0302 	and.w	r3, r3, #2
 801f296:	2b00      	cmp	r3, #0
 801f298:	d010      	beq.n	801f2bc <tcp_process+0xfc>
 801f29a:	687b      	ldr	r3, [r7, #4]
 801f29c:	7d1b      	ldrb	r3, [r3, #20]
 801f29e:	2b02      	cmp	r3, #2
 801f2a0:	d00c      	beq.n	801f2bc <tcp_process+0xfc>
 801f2a2:	687b      	ldr	r3, [r7, #4]
 801f2a4:	7d1b      	ldrb	r3, [r3, #20]
 801f2a6:	2b03      	cmp	r3, #3
 801f2a8:	d008      	beq.n	801f2bc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	8b5b      	ldrh	r3, [r3, #26]
 801f2ae:	f043 0302 	orr.w	r3, r3, #2
 801f2b2:	b29a      	uxth	r2, r3
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801f2b8:	2300      	movs	r3, #0
 801f2ba:	e361      	b.n	801f980 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801f2bc:	687b      	ldr	r3, [r7, #4]
 801f2be:	8b5b      	ldrh	r3, [r3, #26]
 801f2c0:	f003 0310 	and.w	r3, r3, #16
 801f2c4:	2b00      	cmp	r3, #0
 801f2c6:	d103      	bne.n	801f2d0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801f2c8:	4b68      	ldr	r3, [pc, #416]	@ (801f46c <tcp_process+0x2ac>)
 801f2ca:	681a      	ldr	r2, [r3, #0]
 801f2cc:	687b      	ldr	r3, [r7, #4]
 801f2ce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	2200      	movs	r2, #0
 801f2d4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	2200      	movs	r2, #0
 801f2dc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801f2e0:	6878      	ldr	r0, [r7, #4]
 801f2e2:	f001 fc2b 	bl	8020b3c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801f2e6:	687b      	ldr	r3, [r7, #4]
 801f2e8:	7d1b      	ldrb	r3, [r3, #20]
 801f2ea:	3b02      	subs	r3, #2
 801f2ec:	2b07      	cmp	r3, #7
 801f2ee:	f200 8337 	bhi.w	801f960 <tcp_process+0x7a0>
 801f2f2:	a201      	add	r2, pc, #4	@ (adr r2, 801f2f8 <tcp_process+0x138>)
 801f2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f2f8:	0801f319 	.word	0x0801f319
 801f2fc:	0801f549 	.word	0x0801f549
 801f300:	0801f6c1 	.word	0x0801f6c1
 801f304:	0801f6eb 	.word	0x0801f6eb
 801f308:	0801f80f 	.word	0x0801f80f
 801f30c:	0801f6c1 	.word	0x0801f6c1
 801f310:	0801f89b 	.word	0x0801f89b
 801f314:	0801f92b 	.word	0x0801f92b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801f318:	4b4f      	ldr	r3, [pc, #316]	@ (801f458 <tcp_process+0x298>)
 801f31a:	781b      	ldrb	r3, [r3, #0]
 801f31c:	f003 0310 	and.w	r3, r3, #16
 801f320:	2b00      	cmp	r3, #0
 801f322:	f000 80e4 	beq.w	801f4ee <tcp_process+0x32e>
 801f326:	4b4c      	ldr	r3, [pc, #304]	@ (801f458 <tcp_process+0x298>)
 801f328:	781b      	ldrb	r3, [r3, #0]
 801f32a:	f003 0302 	and.w	r3, r3, #2
 801f32e:	2b00      	cmp	r3, #0
 801f330:	f000 80dd 	beq.w	801f4ee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801f334:	687b      	ldr	r3, [r7, #4]
 801f336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f338:	1c5a      	adds	r2, r3, #1
 801f33a:	4b48      	ldr	r3, [pc, #288]	@ (801f45c <tcp_process+0x29c>)
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	429a      	cmp	r2, r3
 801f340:	f040 80d5 	bne.w	801f4ee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801f344:	4b46      	ldr	r3, [pc, #280]	@ (801f460 <tcp_process+0x2a0>)
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	1c5a      	adds	r2, r3, #1
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801f356:	4b41      	ldr	r3, [pc, #260]	@ (801f45c <tcp_process+0x29c>)
 801f358:	681a      	ldr	r2, [r3, #0]
 801f35a:	687b      	ldr	r3, [r7, #4]
 801f35c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801f35e:	4b44      	ldr	r3, [pc, #272]	@ (801f470 <tcp_process+0x2b0>)
 801f360:	681b      	ldr	r3, [r3, #0]
 801f362:	89db      	ldrh	r3, [r3, #14]
 801f364:	b29a      	uxth	r2, r3
 801f366:	687b      	ldr	r3, [r7, #4]
 801f368:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801f36c:	687b      	ldr	r3, [r7, #4]
 801f36e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801f372:	687b      	ldr	r3, [r7, #4]
 801f374:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f378:	4b39      	ldr	r3, [pc, #228]	@ (801f460 <tcp_process+0x2a0>)
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	1e5a      	subs	r2, r3, #1
 801f37e:	687b      	ldr	r3, [r7, #4]
 801f380:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801f382:	687b      	ldr	r3, [r7, #4]
 801f384:	2204      	movs	r2, #4
 801f386:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	3304      	adds	r3, #4
 801f390:	4618      	mov	r0, r3
 801f392:	f004 fe71 	bl	8024078 <ip4_route>
 801f396:	4601      	mov	r1, r0
 801f398:	687b      	ldr	r3, [r7, #4]
 801f39a:	3304      	adds	r3, #4
 801f39c:	461a      	mov	r2, r3
 801f39e:	4620      	mov	r0, r4
 801f3a0:	f7ff f88c 	bl	801e4bc <tcp_eff_send_mss_netif>
 801f3a4:	4603      	mov	r3, r0
 801f3a6:	461a      	mov	r2, r3
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f3ac:	687b      	ldr	r3, [r7, #4]
 801f3ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f3b0:	009a      	lsls	r2, r3, #2
 801f3b2:	687b      	ldr	r3, [r7, #4]
 801f3b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f3b6:	005b      	lsls	r3, r3, #1
 801f3b8:	f241 111c 	movw	r1, #4380	@ 0x111c
 801f3bc:	428b      	cmp	r3, r1
 801f3be:	bf38      	it	cc
 801f3c0:	460b      	movcc	r3, r1
 801f3c2:	429a      	cmp	r2, r3
 801f3c4:	d204      	bcs.n	801f3d0 <tcp_process+0x210>
 801f3c6:	687b      	ldr	r3, [r7, #4]
 801f3c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f3ca:	009b      	lsls	r3, r3, #2
 801f3cc:	b29b      	uxth	r3, r3
 801f3ce:	e00d      	b.n	801f3ec <tcp_process+0x22c>
 801f3d0:	687b      	ldr	r3, [r7, #4]
 801f3d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f3d4:	005b      	lsls	r3, r3, #1
 801f3d6:	f241 121c 	movw	r2, #4380	@ 0x111c
 801f3da:	4293      	cmp	r3, r2
 801f3dc:	d904      	bls.n	801f3e8 <tcp_process+0x228>
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f3e2:	005b      	lsls	r3, r3, #1
 801f3e4:	b29b      	uxth	r3, r3
 801f3e6:	e001      	b.n	801f3ec <tcp_process+0x22c>
 801f3e8:	f241 131c 	movw	r3, #4380	@ 0x111c
 801f3ec:	687a      	ldr	r2, [r7, #4]
 801f3ee:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f3f8:	2b00      	cmp	r3, #0
 801f3fa:	d106      	bne.n	801f40a <tcp_process+0x24a>
 801f3fc:	4b13      	ldr	r3, [pc, #76]	@ (801f44c <tcp_process+0x28c>)
 801f3fe:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801f402:	491c      	ldr	r1, [pc, #112]	@ (801f474 <tcp_process+0x2b4>)
 801f404:	4813      	ldr	r0, [pc, #76]	@ (801f454 <tcp_process+0x294>)
 801f406:	f007 fa47 	bl	8026898 <iprintf>
        --pcb->snd_queuelen;
 801f40a:	687b      	ldr	r3, [r7, #4]
 801f40c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f410:	3b01      	subs	r3, #1
 801f412:	b29a      	uxth	r2, r3
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801f41a:	687b      	ldr	r3, [r7, #4]
 801f41c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f41e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801f420:	69fb      	ldr	r3, [r7, #28]
 801f422:	2b00      	cmp	r3, #0
 801f424:	d12a      	bne.n	801f47c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f42a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801f42c:	69fb      	ldr	r3, [r7, #28]
 801f42e:	2b00      	cmp	r3, #0
 801f430:	d106      	bne.n	801f440 <tcp_process+0x280>
 801f432:	4b06      	ldr	r3, [pc, #24]	@ (801f44c <tcp_process+0x28c>)
 801f434:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801f438:	490f      	ldr	r1, [pc, #60]	@ (801f478 <tcp_process+0x2b8>)
 801f43a:	4806      	ldr	r0, [pc, #24]	@ (801f454 <tcp_process+0x294>)
 801f43c:	f007 fa2c 	bl	8026898 <iprintf>
          pcb->unsent = rseg->next;
 801f440:	69fb      	ldr	r3, [r7, #28]
 801f442:	681a      	ldr	r2, [r3, #0]
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	66da      	str	r2, [r3, #108]	@ 0x6c
 801f448:	e01c      	b.n	801f484 <tcp_process+0x2c4>
 801f44a:	bf00      	nop
 801f44c:	08029f40 	.word	0x08029f40
 801f450:	0802a178 	.word	0x0802a178
 801f454:	08029f8c 	.word	0x08029f8c
 801f458:	2003c518 	.word	0x2003c518
 801f45c:	2003c510 	.word	0x2003c510
 801f460:	2003c50c 	.word	0x2003c50c
 801f464:	0802a194 	.word	0x0802a194
 801f468:	2003c519 	.word	0x2003c519
 801f46c:	2003c4d4 	.word	0x2003c4d4
 801f470:	2003c4fc 	.word	0x2003c4fc
 801f474:	0802a1b4 	.word	0x0802a1b4
 801f478:	0802a1cc 	.word	0x0802a1cc
        } else {
          pcb->unacked = rseg->next;
 801f47c:	69fb      	ldr	r3, [r7, #28]
 801f47e:	681a      	ldr	r2, [r3, #0]
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801f484:	69f8      	ldr	r0, [r7, #28]
 801f486:	f7fe fd22 	bl	801dece <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801f48a:	687b      	ldr	r3, [r7, #4]
 801f48c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f48e:	2b00      	cmp	r3, #0
 801f490:	d104      	bne.n	801f49c <tcp_process+0x2dc>
          pcb->rtime = -1;
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f498:	861a      	strh	r2, [r3, #48]	@ 0x30
 801f49a:	e006      	b.n	801f4aa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	2200      	movs	r2, #0
 801f4a0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801f4a2:	687b      	ldr	r3, [r7, #4]
 801f4a4:	2200      	movs	r2, #0
 801f4a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801f4aa:	687b      	ldr	r3, [r7, #4]
 801f4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	d00a      	beq.n	801f4ca <tcp_process+0x30a>
 801f4b4:	687b      	ldr	r3, [r7, #4]
 801f4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f4ba:	687a      	ldr	r2, [r7, #4]
 801f4bc:	6910      	ldr	r0, [r2, #16]
 801f4be:	2200      	movs	r2, #0
 801f4c0:	6879      	ldr	r1, [r7, #4]
 801f4c2:	4798      	blx	r3
 801f4c4:	4603      	mov	r3, r0
 801f4c6:	76bb      	strb	r3, [r7, #26]
 801f4c8:	e001      	b.n	801f4ce <tcp_process+0x30e>
 801f4ca:	2300      	movs	r3, #0
 801f4cc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801f4ce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f4d2:	f113 0f0d 	cmn.w	r3, #13
 801f4d6:	d102      	bne.n	801f4de <tcp_process+0x31e>
          return ERR_ABRT;
 801f4d8:	f06f 030c 	mvn.w	r3, #12
 801f4dc:	e250      	b.n	801f980 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801f4de:	687b      	ldr	r3, [r7, #4]
 801f4e0:	8b5b      	ldrh	r3, [r3, #26]
 801f4e2:	f043 0302 	orr.w	r3, r3, #2
 801f4e6:	b29a      	uxth	r2, r3
 801f4e8:	687b      	ldr	r3, [r7, #4]
 801f4ea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801f4ec:	e23a      	b.n	801f964 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801f4ee:	4b98      	ldr	r3, [pc, #608]	@ (801f750 <tcp_process+0x590>)
 801f4f0:	781b      	ldrb	r3, [r3, #0]
 801f4f2:	f003 0310 	and.w	r3, r3, #16
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	f000 8234 	beq.w	801f964 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f4fc:	4b95      	ldr	r3, [pc, #596]	@ (801f754 <tcp_process+0x594>)
 801f4fe:	6819      	ldr	r1, [r3, #0]
 801f500:	4b95      	ldr	r3, [pc, #596]	@ (801f758 <tcp_process+0x598>)
 801f502:	881b      	ldrh	r3, [r3, #0]
 801f504:	461a      	mov	r2, r3
 801f506:	4b95      	ldr	r3, [pc, #596]	@ (801f75c <tcp_process+0x59c>)
 801f508:	681b      	ldr	r3, [r3, #0]
 801f50a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f50c:	4b94      	ldr	r3, [pc, #592]	@ (801f760 <tcp_process+0x5a0>)
 801f50e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f510:	885b      	ldrh	r3, [r3, #2]
 801f512:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f514:	4a92      	ldr	r2, [pc, #584]	@ (801f760 <tcp_process+0x5a0>)
 801f516:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f518:	8812      	ldrh	r2, [r2, #0]
 801f51a:	b292      	uxth	r2, r2
 801f51c:	9202      	str	r2, [sp, #8]
 801f51e:	9301      	str	r3, [sp, #4]
 801f520:	4b90      	ldr	r3, [pc, #576]	@ (801f764 <tcp_process+0x5a4>)
 801f522:	9300      	str	r3, [sp, #0]
 801f524:	4b90      	ldr	r3, [pc, #576]	@ (801f768 <tcp_process+0x5a8>)
 801f526:	4602      	mov	r2, r0
 801f528:	6878      	ldr	r0, [r7, #4]
 801f52a:	f002 fc7f 	bl	8021e2c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801f52e:	687b      	ldr	r3, [r7, #4]
 801f530:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801f534:	2b05      	cmp	r3, #5
 801f536:	f200 8215 	bhi.w	801f964 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	2200      	movs	r2, #0
 801f53e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801f540:	6878      	ldr	r0, [r7, #4]
 801f542:	f002 fa4b 	bl	80219dc <tcp_rexmit_rto>
      break;
 801f546:	e20d      	b.n	801f964 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801f548:	4b81      	ldr	r3, [pc, #516]	@ (801f750 <tcp_process+0x590>)
 801f54a:	781b      	ldrb	r3, [r3, #0]
 801f54c:	f003 0310 	and.w	r3, r3, #16
 801f550:	2b00      	cmp	r3, #0
 801f552:	f000 80a1 	beq.w	801f698 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801f556:	4b7f      	ldr	r3, [pc, #508]	@ (801f754 <tcp_process+0x594>)
 801f558:	681a      	ldr	r2, [r3, #0]
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f55e:	1ad3      	subs	r3, r2, r3
 801f560:	3b01      	subs	r3, #1
 801f562:	2b00      	cmp	r3, #0
 801f564:	db7e      	blt.n	801f664 <tcp_process+0x4a4>
 801f566:	4b7b      	ldr	r3, [pc, #492]	@ (801f754 <tcp_process+0x594>)
 801f568:	681a      	ldr	r2, [r3, #0]
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f56e:	1ad3      	subs	r3, r2, r3
 801f570:	2b00      	cmp	r3, #0
 801f572:	dc77      	bgt.n	801f664 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	2204      	movs	r2, #4
 801f578:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801f57a:	687b      	ldr	r3, [r7, #4]
 801f57c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f57e:	2b00      	cmp	r3, #0
 801f580:	d102      	bne.n	801f588 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801f582:	23fa      	movs	r3, #250	@ 0xfa
 801f584:	76bb      	strb	r3, [r7, #26]
 801f586:	e01d      	b.n	801f5c4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f58c:	699b      	ldr	r3, [r3, #24]
 801f58e:	2b00      	cmp	r3, #0
 801f590:	d106      	bne.n	801f5a0 <tcp_process+0x3e0>
 801f592:	4b76      	ldr	r3, [pc, #472]	@ (801f76c <tcp_process+0x5ac>)
 801f594:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801f598:	4975      	ldr	r1, [pc, #468]	@ (801f770 <tcp_process+0x5b0>)
 801f59a:	4876      	ldr	r0, [pc, #472]	@ (801f774 <tcp_process+0x5b4>)
 801f59c:	f007 f97c 	bl	8026898 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f5a4:	699b      	ldr	r3, [r3, #24]
 801f5a6:	2b00      	cmp	r3, #0
 801f5a8:	d00a      	beq.n	801f5c0 <tcp_process+0x400>
 801f5aa:	687b      	ldr	r3, [r7, #4]
 801f5ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f5ae:	699b      	ldr	r3, [r3, #24]
 801f5b0:	687a      	ldr	r2, [r7, #4]
 801f5b2:	6910      	ldr	r0, [r2, #16]
 801f5b4:	2200      	movs	r2, #0
 801f5b6:	6879      	ldr	r1, [r7, #4]
 801f5b8:	4798      	blx	r3
 801f5ba:	4603      	mov	r3, r0
 801f5bc:	76bb      	strb	r3, [r7, #26]
 801f5be:	e001      	b.n	801f5c4 <tcp_process+0x404>
 801f5c0:	23f0      	movs	r3, #240	@ 0xf0
 801f5c2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801f5c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f5c8:	2b00      	cmp	r3, #0
 801f5ca:	d00a      	beq.n	801f5e2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801f5cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f5d0:	f113 0f0d 	cmn.w	r3, #13
 801f5d4:	d002      	beq.n	801f5dc <tcp_process+0x41c>
              tcp_abort(pcb);
 801f5d6:	6878      	ldr	r0, [r7, #4]
 801f5d8:	f7fd ff8c 	bl	801d4f4 <tcp_abort>
            }
            return ERR_ABRT;
 801f5dc:	f06f 030c 	mvn.w	r3, #12
 801f5e0:	e1ce      	b.n	801f980 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801f5e2:	6878      	ldr	r0, [r7, #4]
 801f5e4:	f000 fae0 	bl	801fba8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801f5e8:	4b63      	ldr	r3, [pc, #396]	@ (801f778 <tcp_process+0x5b8>)
 801f5ea:	881b      	ldrh	r3, [r3, #0]
 801f5ec:	2b00      	cmp	r3, #0
 801f5ee:	d005      	beq.n	801f5fc <tcp_process+0x43c>
            recv_acked--;
 801f5f0:	4b61      	ldr	r3, [pc, #388]	@ (801f778 <tcp_process+0x5b8>)
 801f5f2:	881b      	ldrh	r3, [r3, #0]
 801f5f4:	3b01      	subs	r3, #1
 801f5f6:	b29a      	uxth	r2, r3
 801f5f8:	4b5f      	ldr	r3, [pc, #380]	@ (801f778 <tcp_process+0x5b8>)
 801f5fa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f5fc:	687b      	ldr	r3, [r7, #4]
 801f5fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f600:	009a      	lsls	r2, r3, #2
 801f602:	687b      	ldr	r3, [r7, #4]
 801f604:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f606:	005b      	lsls	r3, r3, #1
 801f608:	f241 111c 	movw	r1, #4380	@ 0x111c
 801f60c:	428b      	cmp	r3, r1
 801f60e:	bf38      	it	cc
 801f610:	460b      	movcc	r3, r1
 801f612:	429a      	cmp	r2, r3
 801f614:	d204      	bcs.n	801f620 <tcp_process+0x460>
 801f616:	687b      	ldr	r3, [r7, #4]
 801f618:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f61a:	009b      	lsls	r3, r3, #2
 801f61c:	b29b      	uxth	r3, r3
 801f61e:	e00d      	b.n	801f63c <tcp_process+0x47c>
 801f620:	687b      	ldr	r3, [r7, #4]
 801f622:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f624:	005b      	lsls	r3, r3, #1
 801f626:	f241 121c 	movw	r2, #4380	@ 0x111c
 801f62a:	4293      	cmp	r3, r2
 801f62c:	d904      	bls.n	801f638 <tcp_process+0x478>
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f632:	005b      	lsls	r3, r3, #1
 801f634:	b29b      	uxth	r3, r3
 801f636:	e001      	b.n	801f63c <tcp_process+0x47c>
 801f638:	f241 131c 	movw	r3, #4380	@ 0x111c
 801f63c:	687a      	ldr	r2, [r7, #4]
 801f63e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801f642:	4b4e      	ldr	r3, [pc, #312]	@ (801f77c <tcp_process+0x5bc>)
 801f644:	781b      	ldrb	r3, [r3, #0]
 801f646:	f003 0320 	and.w	r3, r3, #32
 801f64a:	2b00      	cmp	r3, #0
 801f64c:	d037      	beq.n	801f6be <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801f64e:	687b      	ldr	r3, [r7, #4]
 801f650:	8b5b      	ldrh	r3, [r3, #26]
 801f652:	f043 0302 	orr.w	r3, r3, #2
 801f656:	b29a      	uxth	r2, r3
 801f658:	687b      	ldr	r3, [r7, #4]
 801f65a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801f65c:	687b      	ldr	r3, [r7, #4]
 801f65e:	2207      	movs	r2, #7
 801f660:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801f662:	e02c      	b.n	801f6be <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f664:	4b3b      	ldr	r3, [pc, #236]	@ (801f754 <tcp_process+0x594>)
 801f666:	6819      	ldr	r1, [r3, #0]
 801f668:	4b3b      	ldr	r3, [pc, #236]	@ (801f758 <tcp_process+0x598>)
 801f66a:	881b      	ldrh	r3, [r3, #0]
 801f66c:	461a      	mov	r2, r3
 801f66e:	4b3b      	ldr	r3, [pc, #236]	@ (801f75c <tcp_process+0x59c>)
 801f670:	681b      	ldr	r3, [r3, #0]
 801f672:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f674:	4b3a      	ldr	r3, [pc, #232]	@ (801f760 <tcp_process+0x5a0>)
 801f676:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f678:	885b      	ldrh	r3, [r3, #2]
 801f67a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f67c:	4a38      	ldr	r2, [pc, #224]	@ (801f760 <tcp_process+0x5a0>)
 801f67e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801f680:	8812      	ldrh	r2, [r2, #0]
 801f682:	b292      	uxth	r2, r2
 801f684:	9202      	str	r2, [sp, #8]
 801f686:	9301      	str	r3, [sp, #4]
 801f688:	4b36      	ldr	r3, [pc, #216]	@ (801f764 <tcp_process+0x5a4>)
 801f68a:	9300      	str	r3, [sp, #0]
 801f68c:	4b36      	ldr	r3, [pc, #216]	@ (801f768 <tcp_process+0x5a8>)
 801f68e:	4602      	mov	r2, r0
 801f690:	6878      	ldr	r0, [r7, #4]
 801f692:	f002 fbcb 	bl	8021e2c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801f696:	e167      	b.n	801f968 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801f698:	4b2d      	ldr	r3, [pc, #180]	@ (801f750 <tcp_process+0x590>)
 801f69a:	781b      	ldrb	r3, [r3, #0]
 801f69c:	f003 0302 	and.w	r3, r3, #2
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	f000 8161 	beq.w	801f968 <tcp_process+0x7a8>
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f6aa:	1e5a      	subs	r2, r3, #1
 801f6ac:	4b2b      	ldr	r3, [pc, #172]	@ (801f75c <tcp_process+0x59c>)
 801f6ae:	681b      	ldr	r3, [r3, #0]
 801f6b0:	429a      	cmp	r2, r3
 801f6b2:	f040 8159 	bne.w	801f968 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801f6b6:	6878      	ldr	r0, [r7, #4]
 801f6b8:	f002 f9b2 	bl	8021a20 <tcp_rexmit>
      break;
 801f6bc:	e154      	b.n	801f968 <tcp_process+0x7a8>
 801f6be:	e153      	b.n	801f968 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801f6c0:	6878      	ldr	r0, [r7, #4]
 801f6c2:	f000 fa71 	bl	801fba8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801f6c6:	4b2d      	ldr	r3, [pc, #180]	@ (801f77c <tcp_process+0x5bc>)
 801f6c8:	781b      	ldrb	r3, [r3, #0]
 801f6ca:	f003 0320 	and.w	r3, r3, #32
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	f000 814c 	beq.w	801f96c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801f6d4:	687b      	ldr	r3, [r7, #4]
 801f6d6:	8b5b      	ldrh	r3, [r3, #26]
 801f6d8:	f043 0302 	orr.w	r3, r3, #2
 801f6dc:	b29a      	uxth	r2, r3
 801f6de:	687b      	ldr	r3, [r7, #4]
 801f6e0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	2207      	movs	r2, #7
 801f6e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 801f6e8:	e140      	b.n	801f96c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801f6ea:	6878      	ldr	r0, [r7, #4]
 801f6ec:	f000 fa5c 	bl	801fba8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801f6f0:	4b22      	ldr	r3, [pc, #136]	@ (801f77c <tcp_process+0x5bc>)
 801f6f2:	781b      	ldrb	r3, [r3, #0]
 801f6f4:	f003 0320 	and.w	r3, r3, #32
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	d071      	beq.n	801f7e0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f6fc:	4b14      	ldr	r3, [pc, #80]	@ (801f750 <tcp_process+0x590>)
 801f6fe:	781b      	ldrb	r3, [r3, #0]
 801f700:	f003 0310 	and.w	r3, r3, #16
 801f704:	2b00      	cmp	r3, #0
 801f706:	d060      	beq.n	801f7ca <tcp_process+0x60a>
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f70c:	4b11      	ldr	r3, [pc, #68]	@ (801f754 <tcp_process+0x594>)
 801f70e:	681b      	ldr	r3, [r3, #0]
 801f710:	429a      	cmp	r2, r3
 801f712:	d15a      	bne.n	801f7ca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f718:	2b00      	cmp	r3, #0
 801f71a:	d156      	bne.n	801f7ca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801f71c:	687b      	ldr	r3, [r7, #4]
 801f71e:	8b5b      	ldrh	r3, [r3, #26]
 801f720:	f043 0302 	orr.w	r3, r3, #2
 801f724:	b29a      	uxth	r2, r3
 801f726:	687b      	ldr	r3, [r7, #4]
 801f728:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801f72a:	6878      	ldr	r0, [r7, #4]
 801f72c:	f7fe fdbc 	bl	801e2a8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801f730:	4b13      	ldr	r3, [pc, #76]	@ (801f780 <tcp_process+0x5c0>)
 801f732:	681b      	ldr	r3, [r3, #0]
 801f734:	687a      	ldr	r2, [r7, #4]
 801f736:	429a      	cmp	r2, r3
 801f738:	d105      	bne.n	801f746 <tcp_process+0x586>
 801f73a:	4b11      	ldr	r3, [pc, #68]	@ (801f780 <tcp_process+0x5c0>)
 801f73c:	681b      	ldr	r3, [r3, #0]
 801f73e:	68db      	ldr	r3, [r3, #12]
 801f740:	4a0f      	ldr	r2, [pc, #60]	@ (801f780 <tcp_process+0x5c0>)
 801f742:	6013      	str	r3, [r2, #0]
 801f744:	e02e      	b.n	801f7a4 <tcp_process+0x5e4>
 801f746:	4b0e      	ldr	r3, [pc, #56]	@ (801f780 <tcp_process+0x5c0>)
 801f748:	681b      	ldr	r3, [r3, #0]
 801f74a:	617b      	str	r3, [r7, #20]
 801f74c:	e027      	b.n	801f79e <tcp_process+0x5de>
 801f74e:	bf00      	nop
 801f750:	2003c518 	.word	0x2003c518
 801f754:	2003c510 	.word	0x2003c510
 801f758:	2003c516 	.word	0x2003c516
 801f75c:	2003c50c 	.word	0x2003c50c
 801f760:	2003c4fc 	.word	0x2003c4fc
 801f764:	200193e0 	.word	0x200193e0
 801f768:	200193e4 	.word	0x200193e4
 801f76c:	08029f40 	.word	0x08029f40
 801f770:	0802a1e0 	.word	0x0802a1e0
 801f774:	08029f8c 	.word	0x08029f8c
 801f778:	2003c514 	.word	0x2003c514
 801f77c:	2003c519 	.word	0x2003c519
 801f780:	2003c4e0 	.word	0x2003c4e0
 801f784:	697b      	ldr	r3, [r7, #20]
 801f786:	68db      	ldr	r3, [r3, #12]
 801f788:	687a      	ldr	r2, [r7, #4]
 801f78a:	429a      	cmp	r2, r3
 801f78c:	d104      	bne.n	801f798 <tcp_process+0x5d8>
 801f78e:	687b      	ldr	r3, [r7, #4]
 801f790:	68da      	ldr	r2, [r3, #12]
 801f792:	697b      	ldr	r3, [r7, #20]
 801f794:	60da      	str	r2, [r3, #12]
 801f796:	e005      	b.n	801f7a4 <tcp_process+0x5e4>
 801f798:	697b      	ldr	r3, [r7, #20]
 801f79a:	68db      	ldr	r3, [r3, #12]
 801f79c:	617b      	str	r3, [r7, #20]
 801f79e:	697b      	ldr	r3, [r7, #20]
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	d1ef      	bne.n	801f784 <tcp_process+0x5c4>
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	2200      	movs	r2, #0
 801f7a8:	60da      	str	r2, [r3, #12]
 801f7aa:	4b77      	ldr	r3, [pc, #476]	@ (801f988 <tcp_process+0x7c8>)
 801f7ac:	2201      	movs	r2, #1
 801f7ae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801f7b0:	687b      	ldr	r3, [r7, #4]
 801f7b2:	220a      	movs	r2, #10
 801f7b4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801f7b6:	4b75      	ldr	r3, [pc, #468]	@ (801f98c <tcp_process+0x7cc>)
 801f7b8:	681a      	ldr	r2, [r3, #0]
 801f7ba:	687b      	ldr	r3, [r7, #4]
 801f7bc:	60da      	str	r2, [r3, #12]
 801f7be:	4a73      	ldr	r2, [pc, #460]	@ (801f98c <tcp_process+0x7cc>)
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	6013      	str	r3, [r2, #0]
 801f7c4:	f002 fcf4 	bl	80221b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801f7c8:	e0d2      	b.n	801f970 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	8b5b      	ldrh	r3, [r3, #26]
 801f7ce:	f043 0302 	orr.w	r3, r3, #2
 801f7d2:	b29a      	uxth	r2, r3
 801f7d4:	687b      	ldr	r3, [r7, #4]
 801f7d6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801f7d8:	687b      	ldr	r3, [r7, #4]
 801f7da:	2208      	movs	r2, #8
 801f7dc:	751a      	strb	r2, [r3, #20]
      break;
 801f7de:	e0c7      	b.n	801f970 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f7e0:	4b6b      	ldr	r3, [pc, #428]	@ (801f990 <tcp_process+0x7d0>)
 801f7e2:	781b      	ldrb	r3, [r3, #0]
 801f7e4:	f003 0310 	and.w	r3, r3, #16
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	f000 80c1 	beq.w	801f970 <tcp_process+0x7b0>
 801f7ee:	687b      	ldr	r3, [r7, #4]
 801f7f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f7f2:	4b68      	ldr	r3, [pc, #416]	@ (801f994 <tcp_process+0x7d4>)
 801f7f4:	681b      	ldr	r3, [r3, #0]
 801f7f6:	429a      	cmp	r2, r3
 801f7f8:	f040 80ba 	bne.w	801f970 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801f7fc:	687b      	ldr	r3, [r7, #4]
 801f7fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f800:	2b00      	cmp	r3, #0
 801f802:	f040 80b5 	bne.w	801f970 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	2206      	movs	r2, #6
 801f80a:	751a      	strb	r2, [r3, #20]
      break;
 801f80c:	e0b0      	b.n	801f970 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801f80e:	6878      	ldr	r0, [r7, #4]
 801f810:	f000 f9ca 	bl	801fba8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801f814:	4b60      	ldr	r3, [pc, #384]	@ (801f998 <tcp_process+0x7d8>)
 801f816:	781b      	ldrb	r3, [r3, #0]
 801f818:	f003 0320 	and.w	r3, r3, #32
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	f000 80a9 	beq.w	801f974 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801f822:	687b      	ldr	r3, [r7, #4]
 801f824:	8b5b      	ldrh	r3, [r3, #26]
 801f826:	f043 0302 	orr.w	r3, r3, #2
 801f82a:	b29a      	uxth	r2, r3
 801f82c:	687b      	ldr	r3, [r7, #4]
 801f82e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801f830:	6878      	ldr	r0, [r7, #4]
 801f832:	f7fe fd39 	bl	801e2a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f836:	4b59      	ldr	r3, [pc, #356]	@ (801f99c <tcp_process+0x7dc>)
 801f838:	681b      	ldr	r3, [r3, #0]
 801f83a:	687a      	ldr	r2, [r7, #4]
 801f83c:	429a      	cmp	r2, r3
 801f83e:	d105      	bne.n	801f84c <tcp_process+0x68c>
 801f840:	4b56      	ldr	r3, [pc, #344]	@ (801f99c <tcp_process+0x7dc>)
 801f842:	681b      	ldr	r3, [r3, #0]
 801f844:	68db      	ldr	r3, [r3, #12]
 801f846:	4a55      	ldr	r2, [pc, #340]	@ (801f99c <tcp_process+0x7dc>)
 801f848:	6013      	str	r3, [r2, #0]
 801f84a:	e013      	b.n	801f874 <tcp_process+0x6b4>
 801f84c:	4b53      	ldr	r3, [pc, #332]	@ (801f99c <tcp_process+0x7dc>)
 801f84e:	681b      	ldr	r3, [r3, #0]
 801f850:	613b      	str	r3, [r7, #16]
 801f852:	e00c      	b.n	801f86e <tcp_process+0x6ae>
 801f854:	693b      	ldr	r3, [r7, #16]
 801f856:	68db      	ldr	r3, [r3, #12]
 801f858:	687a      	ldr	r2, [r7, #4]
 801f85a:	429a      	cmp	r2, r3
 801f85c:	d104      	bne.n	801f868 <tcp_process+0x6a8>
 801f85e:	687b      	ldr	r3, [r7, #4]
 801f860:	68da      	ldr	r2, [r3, #12]
 801f862:	693b      	ldr	r3, [r7, #16]
 801f864:	60da      	str	r2, [r3, #12]
 801f866:	e005      	b.n	801f874 <tcp_process+0x6b4>
 801f868:	693b      	ldr	r3, [r7, #16]
 801f86a:	68db      	ldr	r3, [r3, #12]
 801f86c:	613b      	str	r3, [r7, #16]
 801f86e:	693b      	ldr	r3, [r7, #16]
 801f870:	2b00      	cmp	r3, #0
 801f872:	d1ef      	bne.n	801f854 <tcp_process+0x694>
 801f874:	687b      	ldr	r3, [r7, #4]
 801f876:	2200      	movs	r2, #0
 801f878:	60da      	str	r2, [r3, #12]
 801f87a:	4b43      	ldr	r3, [pc, #268]	@ (801f988 <tcp_process+0x7c8>)
 801f87c:	2201      	movs	r2, #1
 801f87e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801f880:	687b      	ldr	r3, [r7, #4]
 801f882:	220a      	movs	r2, #10
 801f884:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f886:	4b41      	ldr	r3, [pc, #260]	@ (801f98c <tcp_process+0x7cc>)
 801f888:	681a      	ldr	r2, [r3, #0]
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	60da      	str	r2, [r3, #12]
 801f88e:	4a3f      	ldr	r2, [pc, #252]	@ (801f98c <tcp_process+0x7cc>)
 801f890:	687b      	ldr	r3, [r7, #4]
 801f892:	6013      	str	r3, [r2, #0]
 801f894:	f002 fc8c 	bl	80221b0 <tcp_timer_needed>
      }
      break;
 801f898:	e06c      	b.n	801f974 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801f89a:	6878      	ldr	r0, [r7, #4]
 801f89c:	f000 f984 	bl	801fba8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801f8a0:	4b3b      	ldr	r3, [pc, #236]	@ (801f990 <tcp_process+0x7d0>)
 801f8a2:	781b      	ldrb	r3, [r3, #0]
 801f8a4:	f003 0310 	and.w	r3, r3, #16
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	d065      	beq.n	801f978 <tcp_process+0x7b8>
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f8b0:	4b38      	ldr	r3, [pc, #224]	@ (801f994 <tcp_process+0x7d4>)
 801f8b2:	681b      	ldr	r3, [r3, #0]
 801f8b4:	429a      	cmp	r2, r3
 801f8b6:	d15f      	bne.n	801f978 <tcp_process+0x7b8>
 801f8b8:	687b      	ldr	r3, [r7, #4]
 801f8ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	d15b      	bne.n	801f978 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801f8c0:	6878      	ldr	r0, [r7, #4]
 801f8c2:	f7fe fcf1 	bl	801e2a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f8c6:	4b35      	ldr	r3, [pc, #212]	@ (801f99c <tcp_process+0x7dc>)
 801f8c8:	681b      	ldr	r3, [r3, #0]
 801f8ca:	687a      	ldr	r2, [r7, #4]
 801f8cc:	429a      	cmp	r2, r3
 801f8ce:	d105      	bne.n	801f8dc <tcp_process+0x71c>
 801f8d0:	4b32      	ldr	r3, [pc, #200]	@ (801f99c <tcp_process+0x7dc>)
 801f8d2:	681b      	ldr	r3, [r3, #0]
 801f8d4:	68db      	ldr	r3, [r3, #12]
 801f8d6:	4a31      	ldr	r2, [pc, #196]	@ (801f99c <tcp_process+0x7dc>)
 801f8d8:	6013      	str	r3, [r2, #0]
 801f8da:	e013      	b.n	801f904 <tcp_process+0x744>
 801f8dc:	4b2f      	ldr	r3, [pc, #188]	@ (801f99c <tcp_process+0x7dc>)
 801f8de:	681b      	ldr	r3, [r3, #0]
 801f8e0:	60fb      	str	r3, [r7, #12]
 801f8e2:	e00c      	b.n	801f8fe <tcp_process+0x73e>
 801f8e4:	68fb      	ldr	r3, [r7, #12]
 801f8e6:	68db      	ldr	r3, [r3, #12]
 801f8e8:	687a      	ldr	r2, [r7, #4]
 801f8ea:	429a      	cmp	r2, r3
 801f8ec:	d104      	bne.n	801f8f8 <tcp_process+0x738>
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	68da      	ldr	r2, [r3, #12]
 801f8f2:	68fb      	ldr	r3, [r7, #12]
 801f8f4:	60da      	str	r2, [r3, #12]
 801f8f6:	e005      	b.n	801f904 <tcp_process+0x744>
 801f8f8:	68fb      	ldr	r3, [r7, #12]
 801f8fa:	68db      	ldr	r3, [r3, #12]
 801f8fc:	60fb      	str	r3, [r7, #12]
 801f8fe:	68fb      	ldr	r3, [r7, #12]
 801f900:	2b00      	cmp	r3, #0
 801f902:	d1ef      	bne.n	801f8e4 <tcp_process+0x724>
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	2200      	movs	r2, #0
 801f908:	60da      	str	r2, [r3, #12]
 801f90a:	4b1f      	ldr	r3, [pc, #124]	@ (801f988 <tcp_process+0x7c8>)
 801f90c:	2201      	movs	r2, #1
 801f90e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801f910:	687b      	ldr	r3, [r7, #4]
 801f912:	220a      	movs	r2, #10
 801f914:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f916:	4b1d      	ldr	r3, [pc, #116]	@ (801f98c <tcp_process+0x7cc>)
 801f918:	681a      	ldr	r2, [r3, #0]
 801f91a:	687b      	ldr	r3, [r7, #4]
 801f91c:	60da      	str	r2, [r3, #12]
 801f91e:	4a1b      	ldr	r2, [pc, #108]	@ (801f98c <tcp_process+0x7cc>)
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	6013      	str	r3, [r2, #0]
 801f924:	f002 fc44 	bl	80221b0 <tcp_timer_needed>
      }
      break;
 801f928:	e026      	b.n	801f978 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801f92a:	6878      	ldr	r0, [r7, #4]
 801f92c:	f000 f93c 	bl	801fba8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801f930:	4b17      	ldr	r3, [pc, #92]	@ (801f990 <tcp_process+0x7d0>)
 801f932:	781b      	ldrb	r3, [r3, #0]
 801f934:	f003 0310 	and.w	r3, r3, #16
 801f938:	2b00      	cmp	r3, #0
 801f93a:	d01f      	beq.n	801f97c <tcp_process+0x7bc>
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f940:	4b14      	ldr	r3, [pc, #80]	@ (801f994 <tcp_process+0x7d4>)
 801f942:	681b      	ldr	r3, [r3, #0]
 801f944:	429a      	cmp	r2, r3
 801f946:	d119      	bne.n	801f97c <tcp_process+0x7bc>
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	d115      	bne.n	801f97c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801f950:	4b11      	ldr	r3, [pc, #68]	@ (801f998 <tcp_process+0x7d8>)
 801f952:	781b      	ldrb	r3, [r3, #0]
 801f954:	f043 0310 	orr.w	r3, r3, #16
 801f958:	b2da      	uxtb	r2, r3
 801f95a:	4b0f      	ldr	r3, [pc, #60]	@ (801f998 <tcp_process+0x7d8>)
 801f95c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801f95e:	e00d      	b.n	801f97c <tcp_process+0x7bc>
    default:
      break;
 801f960:	bf00      	nop
 801f962:	e00c      	b.n	801f97e <tcp_process+0x7be>
      break;
 801f964:	bf00      	nop
 801f966:	e00a      	b.n	801f97e <tcp_process+0x7be>
      break;
 801f968:	bf00      	nop
 801f96a:	e008      	b.n	801f97e <tcp_process+0x7be>
      break;
 801f96c:	bf00      	nop
 801f96e:	e006      	b.n	801f97e <tcp_process+0x7be>
      break;
 801f970:	bf00      	nop
 801f972:	e004      	b.n	801f97e <tcp_process+0x7be>
      break;
 801f974:	bf00      	nop
 801f976:	e002      	b.n	801f97e <tcp_process+0x7be>
      break;
 801f978:	bf00      	nop
 801f97a:	e000      	b.n	801f97e <tcp_process+0x7be>
      break;
 801f97c:	bf00      	nop
  }
  return ERR_OK;
 801f97e:	2300      	movs	r3, #0
}
 801f980:	4618      	mov	r0, r3
 801f982:	3724      	adds	r7, #36	@ 0x24
 801f984:	46bd      	mov	sp, r7
 801f986:	bd90      	pop	{r4, r7, pc}
 801f988:	2003c4e8 	.word	0x2003c4e8
 801f98c:	2003c4e4 	.word	0x2003c4e4
 801f990:	2003c518 	.word	0x2003c518
 801f994:	2003c510 	.word	0x2003c510
 801f998:	2003c519 	.word	0x2003c519
 801f99c:	2003c4e0 	.word	0x2003c4e0

0801f9a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801f9a0:	b590      	push	{r4, r7, lr}
 801f9a2:	b085      	sub	sp, #20
 801f9a4:	af00      	add	r7, sp, #0
 801f9a6:	6078      	str	r0, [r7, #4]
 801f9a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801f9aa:	687b      	ldr	r3, [r7, #4]
 801f9ac:	2b00      	cmp	r3, #0
 801f9ae:	d106      	bne.n	801f9be <tcp_oos_insert_segment+0x1e>
 801f9b0:	4b3b      	ldr	r3, [pc, #236]	@ (801faa0 <tcp_oos_insert_segment+0x100>)
 801f9b2:	f240 421f 	movw	r2, #1055	@ 0x41f
 801f9b6:	493b      	ldr	r1, [pc, #236]	@ (801faa4 <tcp_oos_insert_segment+0x104>)
 801f9b8:	483b      	ldr	r0, [pc, #236]	@ (801faa8 <tcp_oos_insert_segment+0x108>)
 801f9ba:	f006 ff6d 	bl	8026898 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	68db      	ldr	r3, [r3, #12]
 801f9c2:	899b      	ldrh	r3, [r3, #12]
 801f9c4:	b29b      	uxth	r3, r3
 801f9c6:	4618      	mov	r0, r3
 801f9c8:	f7fb fb56 	bl	801b078 <lwip_htons>
 801f9cc:	4603      	mov	r3, r0
 801f9ce:	b2db      	uxtb	r3, r3
 801f9d0:	f003 0301 	and.w	r3, r3, #1
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	d028      	beq.n	801fa2a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801f9d8:	6838      	ldr	r0, [r7, #0]
 801f9da:	f7fe fa63 	bl	801dea4 <tcp_segs_free>
    next = NULL;
 801f9de:	2300      	movs	r3, #0
 801f9e0:	603b      	str	r3, [r7, #0]
 801f9e2:	e056      	b.n	801fa92 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801f9e4:	683b      	ldr	r3, [r7, #0]
 801f9e6:	68db      	ldr	r3, [r3, #12]
 801f9e8:	899b      	ldrh	r3, [r3, #12]
 801f9ea:	b29b      	uxth	r3, r3
 801f9ec:	4618      	mov	r0, r3
 801f9ee:	f7fb fb43 	bl	801b078 <lwip_htons>
 801f9f2:	4603      	mov	r3, r0
 801f9f4:	b2db      	uxtb	r3, r3
 801f9f6:	f003 0301 	and.w	r3, r3, #1
 801f9fa:	2b00      	cmp	r3, #0
 801f9fc:	d00d      	beq.n	801fa1a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801f9fe:	687b      	ldr	r3, [r7, #4]
 801fa00:	68db      	ldr	r3, [r3, #12]
 801fa02:	899b      	ldrh	r3, [r3, #12]
 801fa04:	b29c      	uxth	r4, r3
 801fa06:	2001      	movs	r0, #1
 801fa08:	f7fb fb36 	bl	801b078 <lwip_htons>
 801fa0c:	4603      	mov	r3, r0
 801fa0e:	461a      	mov	r2, r3
 801fa10:	687b      	ldr	r3, [r7, #4]
 801fa12:	68db      	ldr	r3, [r3, #12]
 801fa14:	4322      	orrs	r2, r4
 801fa16:	b292      	uxth	r2, r2
 801fa18:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801fa1a:	683b      	ldr	r3, [r7, #0]
 801fa1c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801fa1e:	683b      	ldr	r3, [r7, #0]
 801fa20:	681b      	ldr	r3, [r3, #0]
 801fa22:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801fa24:	68f8      	ldr	r0, [r7, #12]
 801fa26:	f7fe fa52 	bl	801dece <tcp_seg_free>
    while (next &&
 801fa2a:	683b      	ldr	r3, [r7, #0]
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	d00e      	beq.n	801fa4e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	891b      	ldrh	r3, [r3, #8]
 801fa34:	461a      	mov	r2, r3
 801fa36:	4b1d      	ldr	r3, [pc, #116]	@ (801faac <tcp_oos_insert_segment+0x10c>)
 801fa38:	681b      	ldr	r3, [r3, #0]
 801fa3a:	441a      	add	r2, r3
 801fa3c:	683b      	ldr	r3, [r7, #0]
 801fa3e:	68db      	ldr	r3, [r3, #12]
 801fa40:	685b      	ldr	r3, [r3, #4]
 801fa42:	6839      	ldr	r1, [r7, #0]
 801fa44:	8909      	ldrh	r1, [r1, #8]
 801fa46:	440b      	add	r3, r1
 801fa48:	1ad3      	subs	r3, r2, r3
    while (next &&
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	daca      	bge.n	801f9e4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801fa4e:	683b      	ldr	r3, [r7, #0]
 801fa50:	2b00      	cmp	r3, #0
 801fa52:	d01e      	beq.n	801fa92 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	891b      	ldrh	r3, [r3, #8]
 801fa58:	461a      	mov	r2, r3
 801fa5a:	4b14      	ldr	r3, [pc, #80]	@ (801faac <tcp_oos_insert_segment+0x10c>)
 801fa5c:	681b      	ldr	r3, [r3, #0]
 801fa5e:	441a      	add	r2, r3
 801fa60:	683b      	ldr	r3, [r7, #0]
 801fa62:	68db      	ldr	r3, [r3, #12]
 801fa64:	685b      	ldr	r3, [r3, #4]
 801fa66:	1ad3      	subs	r3, r2, r3
    if (next &&
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	dd12      	ble.n	801fa92 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801fa6c:	683b      	ldr	r3, [r7, #0]
 801fa6e:	68db      	ldr	r3, [r3, #12]
 801fa70:	685b      	ldr	r3, [r3, #4]
 801fa72:	b29a      	uxth	r2, r3
 801fa74:	4b0d      	ldr	r3, [pc, #52]	@ (801faac <tcp_oos_insert_segment+0x10c>)
 801fa76:	681b      	ldr	r3, [r3, #0]
 801fa78:	b29b      	uxth	r3, r3
 801fa7a:	1ad3      	subs	r3, r2, r3
 801fa7c:	b29a      	uxth	r2, r3
 801fa7e:	687b      	ldr	r3, [r7, #4]
 801fa80:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801fa82:	687b      	ldr	r3, [r7, #4]
 801fa84:	685a      	ldr	r2, [r3, #4]
 801fa86:	687b      	ldr	r3, [r7, #4]
 801fa88:	891b      	ldrh	r3, [r3, #8]
 801fa8a:	4619      	mov	r1, r3
 801fa8c:	4610      	mov	r0, r2
 801fa8e:	f7fc fe09 	bl	801c6a4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801fa92:	687b      	ldr	r3, [r7, #4]
 801fa94:	683a      	ldr	r2, [r7, #0]
 801fa96:	601a      	str	r2, [r3, #0]
}
 801fa98:	bf00      	nop
 801fa9a:	3714      	adds	r7, #20
 801fa9c:	46bd      	mov	sp, r7
 801fa9e:	bd90      	pop	{r4, r7, pc}
 801faa0:	08029f40 	.word	0x08029f40
 801faa4:	0802a200 	.word	0x0802a200
 801faa8:	08029f8c 	.word	0x08029f8c
 801faac:	2003c50c 	.word	0x2003c50c

0801fab0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801fab0:	b5b0      	push	{r4, r5, r7, lr}
 801fab2:	b086      	sub	sp, #24
 801fab4:	af00      	add	r7, sp, #0
 801fab6:	60f8      	str	r0, [r7, #12]
 801fab8:	60b9      	str	r1, [r7, #8]
 801faba:	607a      	str	r2, [r7, #4]
 801fabc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801fabe:	e03e      	b.n	801fb3e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801fac0:	68bb      	ldr	r3, [r7, #8]
 801fac2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801fac4:	68bb      	ldr	r3, [r7, #8]
 801fac6:	681b      	ldr	r3, [r3, #0]
 801fac8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801faca:	697b      	ldr	r3, [r7, #20]
 801facc:	685b      	ldr	r3, [r3, #4]
 801face:	4618      	mov	r0, r3
 801fad0:	f7fc fffa 	bl	801cac8 <pbuf_clen>
 801fad4:	4603      	mov	r3, r0
 801fad6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801fad8:	68fb      	ldr	r3, [r7, #12]
 801fada:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fade:	8a7a      	ldrh	r2, [r7, #18]
 801fae0:	429a      	cmp	r2, r3
 801fae2:	d906      	bls.n	801faf2 <tcp_free_acked_segments+0x42>
 801fae4:	4b2a      	ldr	r3, [pc, #168]	@ (801fb90 <tcp_free_acked_segments+0xe0>)
 801fae6:	f240 4257 	movw	r2, #1111	@ 0x457
 801faea:	492a      	ldr	r1, [pc, #168]	@ (801fb94 <tcp_free_acked_segments+0xe4>)
 801faec:	482a      	ldr	r0, [pc, #168]	@ (801fb98 <tcp_free_acked_segments+0xe8>)
 801faee:	f006 fed3 	bl	8026898 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801faf2:	68fb      	ldr	r3, [r7, #12]
 801faf4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801faf8:	8a7b      	ldrh	r3, [r7, #18]
 801fafa:	1ad3      	subs	r3, r2, r3
 801fafc:	b29a      	uxth	r2, r3
 801fafe:	68fb      	ldr	r3, [r7, #12]
 801fb00:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801fb04:	697b      	ldr	r3, [r7, #20]
 801fb06:	891a      	ldrh	r2, [r3, #8]
 801fb08:	4b24      	ldr	r3, [pc, #144]	@ (801fb9c <tcp_free_acked_segments+0xec>)
 801fb0a:	881b      	ldrh	r3, [r3, #0]
 801fb0c:	4413      	add	r3, r2
 801fb0e:	b29a      	uxth	r2, r3
 801fb10:	4b22      	ldr	r3, [pc, #136]	@ (801fb9c <tcp_free_acked_segments+0xec>)
 801fb12:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801fb14:	6978      	ldr	r0, [r7, #20]
 801fb16:	f7fe f9da 	bl	801dece <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801fb1a:	68fb      	ldr	r3, [r7, #12]
 801fb1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	d00c      	beq.n	801fb3e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801fb24:	68bb      	ldr	r3, [r7, #8]
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d109      	bne.n	801fb3e <tcp_free_acked_segments+0x8e>
 801fb2a:	683b      	ldr	r3, [r7, #0]
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d106      	bne.n	801fb3e <tcp_free_acked_segments+0x8e>
 801fb30:	4b17      	ldr	r3, [pc, #92]	@ (801fb90 <tcp_free_acked_segments+0xe0>)
 801fb32:	f240 4261 	movw	r2, #1121	@ 0x461
 801fb36:	491a      	ldr	r1, [pc, #104]	@ (801fba0 <tcp_free_acked_segments+0xf0>)
 801fb38:	4817      	ldr	r0, [pc, #92]	@ (801fb98 <tcp_free_acked_segments+0xe8>)
 801fb3a:	f006 fead 	bl	8026898 <iprintf>
  while (seg_list != NULL &&
 801fb3e:	68bb      	ldr	r3, [r7, #8]
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d020      	beq.n	801fb86 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801fb44:	68bb      	ldr	r3, [r7, #8]
 801fb46:	68db      	ldr	r3, [r3, #12]
 801fb48:	685b      	ldr	r3, [r3, #4]
 801fb4a:	4618      	mov	r0, r3
 801fb4c:	f7fb faa9 	bl	801b0a2 <lwip_htonl>
 801fb50:	4604      	mov	r4, r0
 801fb52:	68bb      	ldr	r3, [r7, #8]
 801fb54:	891b      	ldrh	r3, [r3, #8]
 801fb56:	461d      	mov	r5, r3
 801fb58:	68bb      	ldr	r3, [r7, #8]
 801fb5a:	68db      	ldr	r3, [r3, #12]
 801fb5c:	899b      	ldrh	r3, [r3, #12]
 801fb5e:	b29b      	uxth	r3, r3
 801fb60:	4618      	mov	r0, r3
 801fb62:	f7fb fa89 	bl	801b078 <lwip_htons>
 801fb66:	4603      	mov	r3, r0
 801fb68:	b2db      	uxtb	r3, r3
 801fb6a:	f003 0303 	and.w	r3, r3, #3
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	d001      	beq.n	801fb76 <tcp_free_acked_segments+0xc6>
 801fb72:	2301      	movs	r3, #1
 801fb74:	e000      	b.n	801fb78 <tcp_free_acked_segments+0xc8>
 801fb76:	2300      	movs	r3, #0
 801fb78:	442b      	add	r3, r5
 801fb7a:	18e2      	adds	r2, r4, r3
 801fb7c:	4b09      	ldr	r3, [pc, #36]	@ (801fba4 <tcp_free_acked_segments+0xf4>)
 801fb7e:	681b      	ldr	r3, [r3, #0]
 801fb80:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	dd9c      	ble.n	801fac0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801fb86:	68bb      	ldr	r3, [r7, #8]
}
 801fb88:	4618      	mov	r0, r3
 801fb8a:	3718      	adds	r7, #24
 801fb8c:	46bd      	mov	sp, r7
 801fb8e:	bdb0      	pop	{r4, r5, r7, pc}
 801fb90:	08029f40 	.word	0x08029f40
 801fb94:	0802a228 	.word	0x0802a228
 801fb98:	08029f8c 	.word	0x08029f8c
 801fb9c:	2003c514 	.word	0x2003c514
 801fba0:	0802a250 	.word	0x0802a250
 801fba4:	2003c510 	.word	0x2003c510

0801fba8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801fba8:	b5b0      	push	{r4, r5, r7, lr}
 801fbaa:	b094      	sub	sp, #80	@ 0x50
 801fbac:	af00      	add	r7, sp, #0
 801fbae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801fbb0:	2300      	movs	r3, #0
 801fbb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801fbb4:	687b      	ldr	r3, [r7, #4]
 801fbb6:	2b00      	cmp	r3, #0
 801fbb8:	d106      	bne.n	801fbc8 <tcp_receive+0x20>
 801fbba:	4b91      	ldr	r3, [pc, #580]	@ (801fe00 <tcp_receive+0x258>)
 801fbbc:	f240 427b 	movw	r2, #1147	@ 0x47b
 801fbc0:	4990      	ldr	r1, [pc, #576]	@ (801fe04 <tcp_receive+0x25c>)
 801fbc2:	4891      	ldr	r0, [pc, #580]	@ (801fe08 <tcp_receive+0x260>)
 801fbc4:	f006 fe68 	bl	8026898 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801fbc8:	687b      	ldr	r3, [r7, #4]
 801fbca:	7d1b      	ldrb	r3, [r3, #20]
 801fbcc:	2b03      	cmp	r3, #3
 801fbce:	d806      	bhi.n	801fbde <tcp_receive+0x36>
 801fbd0:	4b8b      	ldr	r3, [pc, #556]	@ (801fe00 <tcp_receive+0x258>)
 801fbd2:	f240 427c 	movw	r2, #1148	@ 0x47c
 801fbd6:	498d      	ldr	r1, [pc, #564]	@ (801fe0c <tcp_receive+0x264>)
 801fbd8:	488b      	ldr	r0, [pc, #556]	@ (801fe08 <tcp_receive+0x260>)
 801fbda:	f006 fe5d 	bl	8026898 <iprintf>

  if (flags & TCP_ACK) {
 801fbde:	4b8c      	ldr	r3, [pc, #560]	@ (801fe10 <tcp_receive+0x268>)
 801fbe0:	781b      	ldrb	r3, [r3, #0]
 801fbe2:	f003 0310 	and.w	r3, r3, #16
 801fbe6:	2b00      	cmp	r3, #0
 801fbe8:	f000 8264 	beq.w	80200b4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801fbec:	687b      	ldr	r3, [r7, #4]
 801fbee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801fbf2:	461a      	mov	r2, r3
 801fbf4:	687b      	ldr	r3, [r7, #4]
 801fbf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fbf8:	4413      	add	r3, r2
 801fbfa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801fc00:	4b84      	ldr	r3, [pc, #528]	@ (801fe14 <tcp_receive+0x26c>)
 801fc02:	681b      	ldr	r3, [r3, #0]
 801fc04:	1ad3      	subs	r3, r2, r3
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	db1b      	blt.n	801fc42 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801fc0e:	4b81      	ldr	r3, [pc, #516]	@ (801fe14 <tcp_receive+0x26c>)
 801fc10:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801fc12:	429a      	cmp	r2, r3
 801fc14:	d106      	bne.n	801fc24 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fc16:	687b      	ldr	r3, [r7, #4]
 801fc18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801fc1a:	4b7f      	ldr	r3, [pc, #508]	@ (801fe18 <tcp_receive+0x270>)
 801fc1c:	681b      	ldr	r3, [r3, #0]
 801fc1e:	1ad3      	subs	r3, r2, r3
 801fc20:	2b00      	cmp	r3, #0
 801fc22:	db0e      	blt.n	801fc42 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801fc24:	687b      	ldr	r3, [r7, #4]
 801fc26:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801fc28:	4b7b      	ldr	r3, [pc, #492]	@ (801fe18 <tcp_receive+0x270>)
 801fc2a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fc2c:	429a      	cmp	r2, r3
 801fc2e:	d125      	bne.n	801fc7c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801fc30:	4b7a      	ldr	r3, [pc, #488]	@ (801fe1c <tcp_receive+0x274>)
 801fc32:	681b      	ldr	r3, [r3, #0]
 801fc34:	89db      	ldrh	r3, [r3, #14]
 801fc36:	b29a      	uxth	r2, r3
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801fc3e:	429a      	cmp	r2, r3
 801fc40:	d91c      	bls.n	801fc7c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801fc42:	4b76      	ldr	r3, [pc, #472]	@ (801fe1c <tcp_receive+0x274>)
 801fc44:	681b      	ldr	r3, [r3, #0]
 801fc46:	89db      	ldrh	r3, [r3, #14]
 801fc48:	b29a      	uxth	r2, r3
 801fc4a:	687b      	ldr	r3, [r7, #4]
 801fc4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801fc50:	687b      	ldr	r3, [r7, #4]
 801fc52:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801fc56:	687b      	ldr	r3, [r7, #4]
 801fc58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801fc5c:	429a      	cmp	r2, r3
 801fc5e:	d205      	bcs.n	801fc6c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801fc60:	687b      	ldr	r3, [r7, #4]
 801fc62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801fc6c:	4b69      	ldr	r3, [pc, #420]	@ (801fe14 <tcp_receive+0x26c>)
 801fc6e:	681a      	ldr	r2, [r3, #0]
 801fc70:	687b      	ldr	r3, [r7, #4]
 801fc72:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801fc74:	4b68      	ldr	r3, [pc, #416]	@ (801fe18 <tcp_receive+0x270>)
 801fc76:	681a      	ldr	r2, [r3, #0]
 801fc78:	687b      	ldr	r3, [r7, #4]
 801fc7a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801fc7c:	4b66      	ldr	r3, [pc, #408]	@ (801fe18 <tcp_receive+0x270>)
 801fc7e:	681a      	ldr	r2, [r3, #0]
 801fc80:	687b      	ldr	r3, [r7, #4]
 801fc82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801fc84:	1ad3      	subs	r3, r2, r3
 801fc86:	2b00      	cmp	r3, #0
 801fc88:	dc58      	bgt.n	801fd3c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801fc8a:	4b65      	ldr	r3, [pc, #404]	@ (801fe20 <tcp_receive+0x278>)
 801fc8c:	881b      	ldrh	r3, [r3, #0]
 801fc8e:	2b00      	cmp	r3, #0
 801fc90:	d14b      	bne.n	801fd2a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801fc92:	687b      	ldr	r3, [r7, #4]
 801fc94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fc96:	687a      	ldr	r2, [r7, #4]
 801fc98:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801fc9c:	4413      	add	r3, r2
 801fc9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801fca0:	429a      	cmp	r2, r3
 801fca2:	d142      	bne.n	801fd2a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801fca4:	687b      	ldr	r3, [r7, #4]
 801fca6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801fcaa:	2b00      	cmp	r3, #0
 801fcac:	db3d      	blt.n	801fd2a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801fcb2:	4b59      	ldr	r3, [pc, #356]	@ (801fe18 <tcp_receive+0x270>)
 801fcb4:	681b      	ldr	r3, [r3, #0]
 801fcb6:	429a      	cmp	r2, r3
 801fcb8:	d137      	bne.n	801fd2a <tcp_receive+0x182>
              found_dupack = 1;
 801fcba:	2301      	movs	r3, #1
 801fcbc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801fcbe:	687b      	ldr	r3, [r7, #4]
 801fcc0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801fcc4:	2bff      	cmp	r3, #255	@ 0xff
 801fcc6:	d007      	beq.n	801fcd8 <tcp_receive+0x130>
                ++pcb->dupacks;
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801fcce:	3301      	adds	r3, #1
 801fcd0:	b2da      	uxtb	r2, r3
 801fcd2:	687b      	ldr	r3, [r7, #4]
 801fcd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801fcde:	2b03      	cmp	r3, #3
 801fce0:	d91b      	bls.n	801fd1a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801fce2:	687b      	ldr	r3, [r7, #4]
 801fce4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801fce8:	687b      	ldr	r3, [r7, #4]
 801fcea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801fcec:	4413      	add	r3, r2
 801fcee:	b29a      	uxth	r2, r3
 801fcf0:	687b      	ldr	r3, [r7, #4]
 801fcf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801fcf6:	429a      	cmp	r2, r3
 801fcf8:	d30a      	bcc.n	801fd10 <tcp_receive+0x168>
 801fcfa:	687b      	ldr	r3, [r7, #4]
 801fcfc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801fd00:	687b      	ldr	r3, [r7, #4]
 801fd02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801fd04:	4413      	add	r3, r2
 801fd06:	b29a      	uxth	r2, r3
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801fd0e:	e004      	b.n	801fd1a <tcp_receive+0x172>
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801fd16:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801fd20:	2b02      	cmp	r3, #2
 801fd22:	d902      	bls.n	801fd2a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801fd24:	6878      	ldr	r0, [r7, #4]
 801fd26:	f001 fee7 	bl	8021af8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801fd2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fd2c:	2b00      	cmp	r3, #0
 801fd2e:	f040 8161 	bne.w	801fff4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	2200      	movs	r2, #0
 801fd36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801fd3a:	e15b      	b.n	801fff4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801fd3c:	4b36      	ldr	r3, [pc, #216]	@ (801fe18 <tcp_receive+0x270>)
 801fd3e:	681a      	ldr	r2, [r3, #0]
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801fd44:	1ad3      	subs	r3, r2, r3
 801fd46:	3b01      	subs	r3, #1
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	f2c0 814e 	blt.w	801ffea <tcp_receive+0x442>
 801fd4e:	4b32      	ldr	r3, [pc, #200]	@ (801fe18 <tcp_receive+0x270>)
 801fd50:	681a      	ldr	r2, [r3, #0]
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fd56:	1ad3      	subs	r3, r2, r3
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	f300 8146 	bgt.w	801ffea <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	8b5b      	ldrh	r3, [r3, #26]
 801fd62:	f003 0304 	and.w	r3, r3, #4
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	d010      	beq.n	801fd8c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	8b5b      	ldrh	r3, [r3, #26]
 801fd6e:	f023 0304 	bic.w	r3, r3, #4
 801fd72:	b29a      	uxth	r2, r3
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801fd7e:	687b      	ldr	r3, [r7, #4]
 801fd80:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	2200      	movs	r2, #0
 801fd88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	2200      	movs	r2, #0
 801fd90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801fd94:	687b      	ldr	r3, [r7, #4]
 801fd96:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801fd9a:	10db      	asrs	r3, r3, #3
 801fd9c:	b21b      	sxth	r3, r3
 801fd9e:	b29a      	uxth	r2, r3
 801fda0:	687b      	ldr	r3, [r7, #4]
 801fda2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801fda6:	b29b      	uxth	r3, r3
 801fda8:	4413      	add	r3, r2
 801fdaa:	b29b      	uxth	r3, r3
 801fdac:	b21a      	sxth	r2, r3
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801fdb4:	4b18      	ldr	r3, [pc, #96]	@ (801fe18 <tcp_receive+0x270>)
 801fdb6:	681b      	ldr	r3, [r3, #0]
 801fdb8:	b29a      	uxth	r2, r3
 801fdba:	687b      	ldr	r3, [r7, #4]
 801fdbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801fdbe:	b29b      	uxth	r3, r3
 801fdc0:	1ad3      	subs	r3, r2, r3
 801fdc2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801fdc4:	687b      	ldr	r3, [r7, #4]
 801fdc6:	2200      	movs	r2, #0
 801fdc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801fdcc:	4b12      	ldr	r3, [pc, #72]	@ (801fe18 <tcp_receive+0x270>)
 801fdce:	681a      	ldr	r2, [r3, #0]
 801fdd0:	687b      	ldr	r3, [r7, #4]
 801fdd2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	7d1b      	ldrb	r3, [r3, #20]
 801fdd8:	2b03      	cmp	r3, #3
 801fdda:	f240 8097 	bls.w	801ff0c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801fdde:	687b      	ldr	r3, [r7, #4]
 801fde0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801fde4:	687b      	ldr	r3, [r7, #4]
 801fde6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801fdea:	429a      	cmp	r2, r3
 801fdec:	d245      	bcs.n	801fe7a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801fdee:	687b      	ldr	r3, [r7, #4]
 801fdf0:	8b5b      	ldrh	r3, [r3, #26]
 801fdf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	d014      	beq.n	801fe24 <tcp_receive+0x27c>
 801fdfa:	2301      	movs	r3, #1
 801fdfc:	e013      	b.n	801fe26 <tcp_receive+0x27e>
 801fdfe:	bf00      	nop
 801fe00:	08029f40 	.word	0x08029f40
 801fe04:	0802a270 	.word	0x0802a270
 801fe08:	08029f8c 	.word	0x08029f8c
 801fe0c:	0802a28c 	.word	0x0802a28c
 801fe10:	2003c518 	.word	0x2003c518
 801fe14:	2003c50c 	.word	0x2003c50c
 801fe18:	2003c510 	.word	0x2003c510
 801fe1c:	2003c4fc 	.word	0x2003c4fc
 801fe20:	2003c516 	.word	0x2003c516
 801fe24:	2302      	movs	r3, #2
 801fe26:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801fe2a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801fe2e:	b29a      	uxth	r2, r3
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801fe34:	fb12 f303 	smulbb	r3, r2, r3
 801fe38:	b29b      	uxth	r3, r3
 801fe3a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801fe3c:	4293      	cmp	r3, r2
 801fe3e:	bf28      	it	cs
 801fe40:	4613      	movcs	r3, r2
 801fe42:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801fe44:	687b      	ldr	r3, [r7, #4]
 801fe46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801fe4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801fe4c:	4413      	add	r3, r2
 801fe4e:	b29a      	uxth	r2, r3
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801fe56:	429a      	cmp	r2, r3
 801fe58:	d309      	bcc.n	801fe6e <tcp_receive+0x2c6>
 801fe5a:	687b      	ldr	r3, [r7, #4]
 801fe5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801fe60:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801fe62:	4413      	add	r3, r2
 801fe64:	b29a      	uxth	r2, r3
 801fe66:	687b      	ldr	r3, [r7, #4]
 801fe68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801fe6c:	e04e      	b.n	801ff0c <tcp_receive+0x364>
 801fe6e:	687b      	ldr	r3, [r7, #4]
 801fe70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801fe74:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801fe78:	e048      	b.n	801ff0c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801fe7a:	687b      	ldr	r3, [r7, #4]
 801fe7c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801fe80:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801fe82:	4413      	add	r3, r2
 801fe84:	b29a      	uxth	r2, r3
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801fe8c:	429a      	cmp	r2, r3
 801fe8e:	d309      	bcc.n	801fea4 <tcp_receive+0x2fc>
 801fe90:	687b      	ldr	r3, [r7, #4]
 801fe92:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801fe96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801fe98:	4413      	add	r3, r2
 801fe9a:	b29a      	uxth	r2, r3
 801fe9c:	687b      	ldr	r3, [r7, #4]
 801fe9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801fea2:	e004      	b.n	801feae <tcp_receive+0x306>
 801fea4:	687b      	ldr	r3, [r7, #4]
 801fea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801feaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801feb4:	687b      	ldr	r3, [r7, #4]
 801feb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801feba:	429a      	cmp	r2, r3
 801febc:	d326      	bcc.n	801ff0c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801febe:	687b      	ldr	r3, [r7, #4]
 801fec0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801fec4:	687b      	ldr	r3, [r7, #4]
 801fec6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801feca:	1ad3      	subs	r3, r2, r3
 801fecc:	b29a      	uxth	r2, r3
 801fece:	687b      	ldr	r3, [r7, #4]
 801fed0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801fed4:	687b      	ldr	r3, [r7, #4]
 801fed6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801feda:	687b      	ldr	r3, [r7, #4]
 801fedc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801fede:	4413      	add	r3, r2
 801fee0:	b29a      	uxth	r2, r3
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801fee8:	429a      	cmp	r2, r3
 801feea:	d30a      	bcc.n	801ff02 <tcp_receive+0x35a>
 801feec:	687b      	ldr	r3, [r7, #4]
 801feee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801fef6:	4413      	add	r3, r2
 801fef8:	b29a      	uxth	r2, r3
 801fefa:	687b      	ldr	r3, [r7, #4]
 801fefc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801ff00:	e004      	b.n	801ff0c <tcp_receive+0x364>
 801ff02:	687b      	ldr	r3, [r7, #4]
 801ff04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ff08:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ff14:	4a98      	ldr	r2, [pc, #608]	@ (8020178 <tcp_receive+0x5d0>)
 801ff16:	6878      	ldr	r0, [r7, #4]
 801ff18:	f7ff fdca 	bl	801fab0 <tcp_free_acked_segments>
 801ff1c:	4602      	mov	r2, r0
 801ff1e:	687b      	ldr	r3, [r7, #4]
 801ff20:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801ff26:	687b      	ldr	r3, [r7, #4]
 801ff28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ff2a:	4a94      	ldr	r2, [pc, #592]	@ (802017c <tcp_receive+0x5d4>)
 801ff2c:	6878      	ldr	r0, [r7, #4]
 801ff2e:	f7ff fdbf 	bl	801fab0 <tcp_free_acked_segments>
 801ff32:	4602      	mov	r2, r0
 801ff34:	687b      	ldr	r3, [r7, #4]
 801ff36:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801ff38:	687b      	ldr	r3, [r7, #4]
 801ff3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ff3c:	2b00      	cmp	r3, #0
 801ff3e:	d104      	bne.n	801ff4a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ff46:	861a      	strh	r2, [r3, #48]	@ 0x30
 801ff48:	e002      	b.n	801ff50 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801ff4a:	687b      	ldr	r3, [r7, #4]
 801ff4c:	2200      	movs	r2, #0
 801ff4e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801ff50:	687b      	ldr	r3, [r7, #4]
 801ff52:	2200      	movs	r2, #0
 801ff54:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801ff56:	687b      	ldr	r3, [r7, #4]
 801ff58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ff5a:	2b00      	cmp	r3, #0
 801ff5c:	d103      	bne.n	801ff66 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801ff5e:	687b      	ldr	r3, [r7, #4]
 801ff60:	2200      	movs	r2, #0
 801ff62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801ff66:	687b      	ldr	r3, [r7, #4]
 801ff68:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801ff6c:	4b84      	ldr	r3, [pc, #528]	@ (8020180 <tcp_receive+0x5d8>)
 801ff6e:	881b      	ldrh	r3, [r3, #0]
 801ff70:	4413      	add	r3, r2
 801ff72:	b29a      	uxth	r2, r3
 801ff74:	687b      	ldr	r3, [r7, #4]
 801ff76:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	8b5b      	ldrh	r3, [r3, #26]
 801ff7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ff82:	2b00      	cmp	r3, #0
 801ff84:	d035      	beq.n	801fff2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801ff86:	687b      	ldr	r3, [r7, #4]
 801ff88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ff8a:	2b00      	cmp	r3, #0
 801ff8c:	d118      	bne.n	801ffc0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801ff8e:	687b      	ldr	r3, [r7, #4]
 801ff90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d00c      	beq.n	801ffb0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801ff96:	687b      	ldr	r3, [r7, #4]
 801ff98:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ff9e:	68db      	ldr	r3, [r3, #12]
 801ffa0:	685b      	ldr	r3, [r3, #4]
 801ffa2:	4618      	mov	r0, r3
 801ffa4:	f7fb f87d 	bl	801b0a2 <lwip_htonl>
 801ffa8:	4603      	mov	r3, r0
 801ffaa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801ffac:	2b00      	cmp	r3, #0
 801ffae:	dc20      	bgt.n	801fff2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801ffb0:	687b      	ldr	r3, [r7, #4]
 801ffb2:	8b5b      	ldrh	r3, [r3, #26]
 801ffb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801ffb8:	b29a      	uxth	r2, r3
 801ffba:	687b      	ldr	r3, [r7, #4]
 801ffbc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ffbe:	e018      	b.n	801fff2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801ffc4:	687b      	ldr	r3, [r7, #4]
 801ffc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ffc8:	68db      	ldr	r3, [r3, #12]
 801ffca:	685b      	ldr	r3, [r3, #4]
 801ffcc:	4618      	mov	r0, r3
 801ffce:	f7fb f868 	bl	801b0a2 <lwip_htonl>
 801ffd2:	4603      	mov	r3, r0
 801ffd4:	1ae3      	subs	r3, r4, r3
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	dc0b      	bgt.n	801fff2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	8b5b      	ldrh	r3, [r3, #26]
 801ffde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801ffe2:	b29a      	uxth	r2, r3
 801ffe4:	687b      	ldr	r3, [r7, #4]
 801ffe6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ffe8:	e003      	b.n	801fff2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801ffea:	6878      	ldr	r0, [r7, #4]
 801ffec:	f001 ff70 	bl	8021ed0 <tcp_send_empty_ack>
 801fff0:	e000      	b.n	801fff4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801fff2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801fff4:	687b      	ldr	r3, [r7, #4]
 801fff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fff8:	2b00      	cmp	r3, #0
 801fffa:	d05b      	beq.n	80200b4 <tcp_receive+0x50c>
 801fffc:	687b      	ldr	r3, [r7, #4]
 801fffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8020000:	4b60      	ldr	r3, [pc, #384]	@ (8020184 <tcp_receive+0x5dc>)
 8020002:	681b      	ldr	r3, [r3, #0]
 8020004:	1ad3      	subs	r3, r2, r3
 8020006:	2b00      	cmp	r3, #0
 8020008:	da54      	bge.n	80200b4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 802000a:	4b5f      	ldr	r3, [pc, #380]	@ (8020188 <tcp_receive+0x5e0>)
 802000c:	681b      	ldr	r3, [r3, #0]
 802000e:	b29a      	uxth	r2, r3
 8020010:	687b      	ldr	r3, [r7, #4]
 8020012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020014:	b29b      	uxth	r3, r3
 8020016:	1ad3      	subs	r3, r2, r3
 8020018:	b29b      	uxth	r3, r3
 802001a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 802001e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8020022:	687b      	ldr	r3, [r7, #4]
 8020024:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8020028:	10db      	asrs	r3, r3, #3
 802002a:	b21b      	sxth	r3, r3
 802002c:	b29b      	uxth	r3, r3
 802002e:	1ad3      	subs	r3, r2, r3
 8020030:	b29b      	uxth	r3, r3
 8020032:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8020036:	687b      	ldr	r3, [r7, #4]
 8020038:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 802003c:	b29a      	uxth	r2, r3
 802003e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8020042:	4413      	add	r3, r2
 8020044:	b29b      	uxth	r3, r3
 8020046:	b21a      	sxth	r2, r3
 8020048:	687b      	ldr	r3, [r7, #4]
 802004a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 802004c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8020050:	2b00      	cmp	r3, #0
 8020052:	da05      	bge.n	8020060 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8020054:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8020058:	425b      	negs	r3, r3
 802005a:	b29b      	uxth	r3, r3
 802005c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8020060:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8020064:	687b      	ldr	r3, [r7, #4]
 8020066:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 802006a:	109b      	asrs	r3, r3, #2
 802006c:	b21b      	sxth	r3, r3
 802006e:	b29b      	uxth	r3, r3
 8020070:	1ad3      	subs	r3, r2, r3
 8020072:	b29b      	uxth	r3, r3
 8020074:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8020078:	687b      	ldr	r3, [r7, #4]
 802007a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 802007e:	b29a      	uxth	r2, r3
 8020080:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8020084:	4413      	add	r3, r2
 8020086:	b29b      	uxth	r3, r3
 8020088:	b21a      	sxth	r2, r3
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 802008e:	687b      	ldr	r3, [r7, #4]
 8020090:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8020094:	10db      	asrs	r3, r3, #3
 8020096:	b21b      	sxth	r3, r3
 8020098:	b29a      	uxth	r2, r3
 802009a:	687b      	ldr	r3, [r7, #4]
 802009c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80200a0:	b29b      	uxth	r3, r3
 80200a2:	4413      	add	r3, r2
 80200a4:	b29b      	uxth	r3, r3
 80200a6:	b21a      	sxth	r2, r3
 80200a8:	687b      	ldr	r3, [r7, #4]
 80200aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80200ae:	687b      	ldr	r3, [r7, #4]
 80200b0:	2200      	movs	r2, #0
 80200b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80200b4:	4b35      	ldr	r3, [pc, #212]	@ (802018c <tcp_receive+0x5e4>)
 80200b6:	881b      	ldrh	r3, [r3, #0]
 80200b8:	2b00      	cmp	r3, #0
 80200ba:	f000 84df 	beq.w	8020a7c <tcp_receive+0xed4>
 80200be:	687b      	ldr	r3, [r7, #4]
 80200c0:	7d1b      	ldrb	r3, [r3, #20]
 80200c2:	2b06      	cmp	r3, #6
 80200c4:	f200 84da 	bhi.w	8020a7c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80200cc:	4b30      	ldr	r3, [pc, #192]	@ (8020190 <tcp_receive+0x5e8>)
 80200ce:	681b      	ldr	r3, [r3, #0]
 80200d0:	1ad3      	subs	r3, r2, r3
 80200d2:	3b01      	subs	r3, #1
 80200d4:	2b00      	cmp	r3, #0
 80200d6:	f2c0 808f 	blt.w	80201f8 <tcp_receive+0x650>
 80200da:	687b      	ldr	r3, [r7, #4]
 80200dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80200de:	4b2b      	ldr	r3, [pc, #172]	@ (802018c <tcp_receive+0x5e4>)
 80200e0:	881b      	ldrh	r3, [r3, #0]
 80200e2:	4619      	mov	r1, r3
 80200e4:	4b2a      	ldr	r3, [pc, #168]	@ (8020190 <tcp_receive+0x5e8>)
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	440b      	add	r3, r1
 80200ea:	1ad3      	subs	r3, r2, r3
 80200ec:	3301      	adds	r3, #1
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	f300 8082 	bgt.w	80201f8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80200f4:	4b27      	ldr	r3, [pc, #156]	@ (8020194 <tcp_receive+0x5ec>)
 80200f6:	685b      	ldr	r3, [r3, #4]
 80200f8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80200fa:	687b      	ldr	r3, [r7, #4]
 80200fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80200fe:	4b24      	ldr	r3, [pc, #144]	@ (8020190 <tcp_receive+0x5e8>)
 8020100:	681b      	ldr	r3, [r3, #0]
 8020102:	1ad3      	subs	r3, r2, r3
 8020104:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8020106:	4b23      	ldr	r3, [pc, #140]	@ (8020194 <tcp_receive+0x5ec>)
 8020108:	685b      	ldr	r3, [r3, #4]
 802010a:	2b00      	cmp	r3, #0
 802010c:	d106      	bne.n	802011c <tcp_receive+0x574>
 802010e:	4b22      	ldr	r3, [pc, #136]	@ (8020198 <tcp_receive+0x5f0>)
 8020110:	f240 5294 	movw	r2, #1428	@ 0x594
 8020114:	4921      	ldr	r1, [pc, #132]	@ (802019c <tcp_receive+0x5f4>)
 8020116:	4822      	ldr	r0, [pc, #136]	@ (80201a0 <tcp_receive+0x5f8>)
 8020118:	f006 fbbe 	bl	8026898 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 802011c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802011e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8020122:	4293      	cmp	r3, r2
 8020124:	d906      	bls.n	8020134 <tcp_receive+0x58c>
 8020126:	4b1c      	ldr	r3, [pc, #112]	@ (8020198 <tcp_receive+0x5f0>)
 8020128:	f240 5295 	movw	r2, #1429	@ 0x595
 802012c:	491d      	ldr	r1, [pc, #116]	@ (80201a4 <tcp_receive+0x5fc>)
 802012e:	481c      	ldr	r0, [pc, #112]	@ (80201a0 <tcp_receive+0x5f8>)
 8020130:	f006 fbb2 	bl	8026898 <iprintf>
      off = (u16_t)off32;
 8020134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020136:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 802013a:	4b16      	ldr	r3, [pc, #88]	@ (8020194 <tcp_receive+0x5ec>)
 802013c:	685b      	ldr	r3, [r3, #4]
 802013e:	891b      	ldrh	r3, [r3, #8]
 8020140:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8020144:	429a      	cmp	r2, r3
 8020146:	d906      	bls.n	8020156 <tcp_receive+0x5ae>
 8020148:	4b13      	ldr	r3, [pc, #76]	@ (8020198 <tcp_receive+0x5f0>)
 802014a:	f240 5297 	movw	r2, #1431	@ 0x597
 802014e:	4916      	ldr	r1, [pc, #88]	@ (80201a8 <tcp_receive+0x600>)
 8020150:	4813      	ldr	r0, [pc, #76]	@ (80201a0 <tcp_receive+0x5f8>)
 8020152:	f006 fba1 	bl	8026898 <iprintf>
      inseg.len -= off;
 8020156:	4b0f      	ldr	r3, [pc, #60]	@ (8020194 <tcp_receive+0x5ec>)
 8020158:	891a      	ldrh	r2, [r3, #8]
 802015a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 802015e:	1ad3      	subs	r3, r2, r3
 8020160:	b29a      	uxth	r2, r3
 8020162:	4b0c      	ldr	r3, [pc, #48]	@ (8020194 <tcp_receive+0x5ec>)
 8020164:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8020166:	4b0b      	ldr	r3, [pc, #44]	@ (8020194 <tcp_receive+0x5ec>)
 8020168:	685b      	ldr	r3, [r3, #4]
 802016a:	891a      	ldrh	r2, [r3, #8]
 802016c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8020170:	1ad3      	subs	r3, r2, r3
 8020172:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8020174:	e02a      	b.n	80201cc <tcp_receive+0x624>
 8020176:	bf00      	nop
 8020178:	0802a2a8 	.word	0x0802a2a8
 802017c:	0802a2b0 	.word	0x0802a2b0
 8020180:	2003c514 	.word	0x2003c514
 8020184:	2003c510 	.word	0x2003c510
 8020188:	2003c4d4 	.word	0x2003c4d4
 802018c:	2003c516 	.word	0x2003c516
 8020190:	2003c50c 	.word	0x2003c50c
 8020194:	2003c4ec 	.word	0x2003c4ec
 8020198:	08029f40 	.word	0x08029f40
 802019c:	0802a2b8 	.word	0x0802a2b8
 80201a0:	08029f8c 	.word	0x08029f8c
 80201a4:	0802a2c8 	.word	0x0802a2c8
 80201a8:	0802a2d8 	.word	0x0802a2d8
        off -= p->len;
 80201ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80201ae:	895b      	ldrh	r3, [r3, #10]
 80201b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80201b4:	1ad3      	subs	r3, r2, r3
 80201b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80201ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80201bc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80201be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80201c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80201c2:	2200      	movs	r2, #0
 80201c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80201c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80201c8:	681b      	ldr	r3, [r3, #0]
 80201ca:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80201cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80201ce:	895b      	ldrh	r3, [r3, #10]
 80201d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80201d4:	429a      	cmp	r2, r3
 80201d6:	d8e9      	bhi.n	80201ac <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80201d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80201dc:	4619      	mov	r1, r3
 80201de:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80201e0:	f7fc fb5e 	bl	801c8a0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80201e8:	4a90      	ldr	r2, [pc, #576]	@ (802042c <tcp_receive+0x884>)
 80201ea:	6013      	str	r3, [r2, #0]
 80201ec:	4b90      	ldr	r3, [pc, #576]	@ (8020430 <tcp_receive+0x888>)
 80201ee:	68db      	ldr	r3, [r3, #12]
 80201f0:	4a8e      	ldr	r2, [pc, #568]	@ (802042c <tcp_receive+0x884>)
 80201f2:	6812      	ldr	r2, [r2, #0]
 80201f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80201f6:	e00d      	b.n	8020214 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80201f8:	4b8c      	ldr	r3, [pc, #560]	@ (802042c <tcp_receive+0x884>)
 80201fa:	681a      	ldr	r2, [r3, #0]
 80201fc:	687b      	ldr	r3, [r7, #4]
 80201fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020200:	1ad3      	subs	r3, r2, r3
 8020202:	2b00      	cmp	r3, #0
 8020204:	da06      	bge.n	8020214 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8020206:	687b      	ldr	r3, [r7, #4]
 8020208:	8b5b      	ldrh	r3, [r3, #26]
 802020a:	f043 0302 	orr.w	r3, r3, #2
 802020e:	b29a      	uxth	r2, r3
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8020214:	4b85      	ldr	r3, [pc, #532]	@ (802042c <tcp_receive+0x884>)
 8020216:	681a      	ldr	r2, [r3, #0]
 8020218:	687b      	ldr	r3, [r7, #4]
 802021a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802021c:	1ad3      	subs	r3, r2, r3
 802021e:	2b00      	cmp	r3, #0
 8020220:	f2c0 8427 	blt.w	8020a72 <tcp_receive+0xeca>
 8020224:	4b81      	ldr	r3, [pc, #516]	@ (802042c <tcp_receive+0x884>)
 8020226:	681a      	ldr	r2, [r3, #0]
 8020228:	687b      	ldr	r3, [r7, #4]
 802022a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802022c:	6879      	ldr	r1, [r7, #4]
 802022e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8020230:	440b      	add	r3, r1
 8020232:	1ad3      	subs	r3, r2, r3
 8020234:	3301      	adds	r3, #1
 8020236:	2b00      	cmp	r3, #0
 8020238:	f300 841b 	bgt.w	8020a72 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8020240:	4b7a      	ldr	r3, [pc, #488]	@ (802042c <tcp_receive+0x884>)
 8020242:	681b      	ldr	r3, [r3, #0]
 8020244:	429a      	cmp	r2, r3
 8020246:	f040 8298 	bne.w	802077a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 802024a:	4b79      	ldr	r3, [pc, #484]	@ (8020430 <tcp_receive+0x888>)
 802024c:	891c      	ldrh	r4, [r3, #8]
 802024e:	4b78      	ldr	r3, [pc, #480]	@ (8020430 <tcp_receive+0x888>)
 8020250:	68db      	ldr	r3, [r3, #12]
 8020252:	899b      	ldrh	r3, [r3, #12]
 8020254:	b29b      	uxth	r3, r3
 8020256:	4618      	mov	r0, r3
 8020258:	f7fa ff0e 	bl	801b078 <lwip_htons>
 802025c:	4603      	mov	r3, r0
 802025e:	b2db      	uxtb	r3, r3
 8020260:	f003 0303 	and.w	r3, r3, #3
 8020264:	2b00      	cmp	r3, #0
 8020266:	d001      	beq.n	802026c <tcp_receive+0x6c4>
 8020268:	2301      	movs	r3, #1
 802026a:	e000      	b.n	802026e <tcp_receive+0x6c6>
 802026c:	2300      	movs	r3, #0
 802026e:	4423      	add	r3, r4
 8020270:	b29a      	uxth	r2, r3
 8020272:	4b70      	ldr	r3, [pc, #448]	@ (8020434 <tcp_receive+0x88c>)
 8020274:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8020276:	687b      	ldr	r3, [r7, #4]
 8020278:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 802027a:	4b6e      	ldr	r3, [pc, #440]	@ (8020434 <tcp_receive+0x88c>)
 802027c:	881b      	ldrh	r3, [r3, #0]
 802027e:	429a      	cmp	r2, r3
 8020280:	d274      	bcs.n	802036c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8020282:	4b6b      	ldr	r3, [pc, #428]	@ (8020430 <tcp_receive+0x888>)
 8020284:	68db      	ldr	r3, [r3, #12]
 8020286:	899b      	ldrh	r3, [r3, #12]
 8020288:	b29b      	uxth	r3, r3
 802028a:	4618      	mov	r0, r3
 802028c:	f7fa fef4 	bl	801b078 <lwip_htons>
 8020290:	4603      	mov	r3, r0
 8020292:	b2db      	uxtb	r3, r3
 8020294:	f003 0301 	and.w	r3, r3, #1
 8020298:	2b00      	cmp	r3, #0
 802029a:	d01e      	beq.n	80202da <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 802029c:	4b64      	ldr	r3, [pc, #400]	@ (8020430 <tcp_receive+0x888>)
 802029e:	68db      	ldr	r3, [r3, #12]
 80202a0:	899b      	ldrh	r3, [r3, #12]
 80202a2:	b29b      	uxth	r3, r3
 80202a4:	b21b      	sxth	r3, r3
 80202a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80202aa:	b21c      	sxth	r4, r3
 80202ac:	4b60      	ldr	r3, [pc, #384]	@ (8020430 <tcp_receive+0x888>)
 80202ae:	68db      	ldr	r3, [r3, #12]
 80202b0:	899b      	ldrh	r3, [r3, #12]
 80202b2:	b29b      	uxth	r3, r3
 80202b4:	4618      	mov	r0, r3
 80202b6:	f7fa fedf 	bl	801b078 <lwip_htons>
 80202ba:	4603      	mov	r3, r0
 80202bc:	b2db      	uxtb	r3, r3
 80202be:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80202c2:	b29b      	uxth	r3, r3
 80202c4:	4618      	mov	r0, r3
 80202c6:	f7fa fed7 	bl	801b078 <lwip_htons>
 80202ca:	4603      	mov	r3, r0
 80202cc:	b21b      	sxth	r3, r3
 80202ce:	4323      	orrs	r3, r4
 80202d0:	b21a      	sxth	r2, r3
 80202d2:	4b57      	ldr	r3, [pc, #348]	@ (8020430 <tcp_receive+0x888>)
 80202d4:	68db      	ldr	r3, [r3, #12]
 80202d6:	b292      	uxth	r2, r2
 80202d8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80202de:	4b54      	ldr	r3, [pc, #336]	@ (8020430 <tcp_receive+0x888>)
 80202e0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80202e2:	4b53      	ldr	r3, [pc, #332]	@ (8020430 <tcp_receive+0x888>)
 80202e4:	68db      	ldr	r3, [r3, #12]
 80202e6:	899b      	ldrh	r3, [r3, #12]
 80202e8:	b29b      	uxth	r3, r3
 80202ea:	4618      	mov	r0, r3
 80202ec:	f7fa fec4 	bl	801b078 <lwip_htons>
 80202f0:	4603      	mov	r3, r0
 80202f2:	b2db      	uxtb	r3, r3
 80202f4:	f003 0302 	and.w	r3, r3, #2
 80202f8:	2b00      	cmp	r3, #0
 80202fa:	d005      	beq.n	8020308 <tcp_receive+0x760>
            inseg.len -= 1;
 80202fc:	4b4c      	ldr	r3, [pc, #304]	@ (8020430 <tcp_receive+0x888>)
 80202fe:	891b      	ldrh	r3, [r3, #8]
 8020300:	3b01      	subs	r3, #1
 8020302:	b29a      	uxth	r2, r3
 8020304:	4b4a      	ldr	r3, [pc, #296]	@ (8020430 <tcp_receive+0x888>)
 8020306:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8020308:	4b49      	ldr	r3, [pc, #292]	@ (8020430 <tcp_receive+0x888>)
 802030a:	685b      	ldr	r3, [r3, #4]
 802030c:	4a48      	ldr	r2, [pc, #288]	@ (8020430 <tcp_receive+0x888>)
 802030e:	8912      	ldrh	r2, [r2, #8]
 8020310:	4611      	mov	r1, r2
 8020312:	4618      	mov	r0, r3
 8020314:	f7fc f9c6 	bl	801c6a4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8020318:	4b45      	ldr	r3, [pc, #276]	@ (8020430 <tcp_receive+0x888>)
 802031a:	891c      	ldrh	r4, [r3, #8]
 802031c:	4b44      	ldr	r3, [pc, #272]	@ (8020430 <tcp_receive+0x888>)
 802031e:	68db      	ldr	r3, [r3, #12]
 8020320:	899b      	ldrh	r3, [r3, #12]
 8020322:	b29b      	uxth	r3, r3
 8020324:	4618      	mov	r0, r3
 8020326:	f7fa fea7 	bl	801b078 <lwip_htons>
 802032a:	4603      	mov	r3, r0
 802032c:	b2db      	uxtb	r3, r3
 802032e:	f003 0303 	and.w	r3, r3, #3
 8020332:	2b00      	cmp	r3, #0
 8020334:	d001      	beq.n	802033a <tcp_receive+0x792>
 8020336:	2301      	movs	r3, #1
 8020338:	e000      	b.n	802033c <tcp_receive+0x794>
 802033a:	2300      	movs	r3, #0
 802033c:	4423      	add	r3, r4
 802033e:	b29a      	uxth	r2, r3
 8020340:	4b3c      	ldr	r3, [pc, #240]	@ (8020434 <tcp_receive+0x88c>)
 8020342:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8020344:	4b3b      	ldr	r3, [pc, #236]	@ (8020434 <tcp_receive+0x88c>)
 8020346:	881b      	ldrh	r3, [r3, #0]
 8020348:	461a      	mov	r2, r3
 802034a:	4b38      	ldr	r3, [pc, #224]	@ (802042c <tcp_receive+0x884>)
 802034c:	681b      	ldr	r3, [r3, #0]
 802034e:	441a      	add	r2, r3
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020354:	6879      	ldr	r1, [r7, #4]
 8020356:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8020358:	440b      	add	r3, r1
 802035a:	429a      	cmp	r2, r3
 802035c:	d006      	beq.n	802036c <tcp_receive+0x7c4>
 802035e:	4b36      	ldr	r3, [pc, #216]	@ (8020438 <tcp_receive+0x890>)
 8020360:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8020364:	4935      	ldr	r1, [pc, #212]	@ (802043c <tcp_receive+0x894>)
 8020366:	4836      	ldr	r0, [pc, #216]	@ (8020440 <tcp_receive+0x898>)
 8020368:	f006 fa96 	bl	8026898 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 802036c:	687b      	ldr	r3, [r7, #4]
 802036e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8020370:	2b00      	cmp	r3, #0
 8020372:	f000 80e6 	beq.w	8020542 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8020376:	4b2e      	ldr	r3, [pc, #184]	@ (8020430 <tcp_receive+0x888>)
 8020378:	68db      	ldr	r3, [r3, #12]
 802037a:	899b      	ldrh	r3, [r3, #12]
 802037c:	b29b      	uxth	r3, r3
 802037e:	4618      	mov	r0, r3
 8020380:	f7fa fe7a 	bl	801b078 <lwip_htons>
 8020384:	4603      	mov	r3, r0
 8020386:	b2db      	uxtb	r3, r3
 8020388:	f003 0301 	and.w	r3, r3, #1
 802038c:	2b00      	cmp	r3, #0
 802038e:	d010      	beq.n	80203b2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8020390:	e00a      	b.n	80203a8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8020396:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802039c:	681a      	ldr	r2, [r3, #0]
 802039e:	687b      	ldr	r3, [r7, #4]
 80203a0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80203a2:	68f8      	ldr	r0, [r7, #12]
 80203a4:	f7fd fd93 	bl	801dece <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80203a8:	687b      	ldr	r3, [r7, #4]
 80203aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80203ac:	2b00      	cmp	r3, #0
 80203ae:	d1f0      	bne.n	8020392 <tcp_receive+0x7ea>
 80203b0:	e0c7      	b.n	8020542 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80203b2:	687b      	ldr	r3, [r7, #4]
 80203b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80203b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80203b8:	e051      	b.n	802045e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80203ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80203bc:	68db      	ldr	r3, [r3, #12]
 80203be:	899b      	ldrh	r3, [r3, #12]
 80203c0:	b29b      	uxth	r3, r3
 80203c2:	4618      	mov	r0, r3
 80203c4:	f7fa fe58 	bl	801b078 <lwip_htons>
 80203c8:	4603      	mov	r3, r0
 80203ca:	b2db      	uxtb	r3, r3
 80203cc:	f003 0301 	and.w	r3, r3, #1
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	d03c      	beq.n	802044e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80203d4:	4b16      	ldr	r3, [pc, #88]	@ (8020430 <tcp_receive+0x888>)
 80203d6:	68db      	ldr	r3, [r3, #12]
 80203d8:	899b      	ldrh	r3, [r3, #12]
 80203da:	b29b      	uxth	r3, r3
 80203dc:	4618      	mov	r0, r3
 80203de:	f7fa fe4b 	bl	801b078 <lwip_htons>
 80203e2:	4603      	mov	r3, r0
 80203e4:	b2db      	uxtb	r3, r3
 80203e6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80203ea:	2b00      	cmp	r3, #0
 80203ec:	d12f      	bne.n	802044e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80203ee:	4b10      	ldr	r3, [pc, #64]	@ (8020430 <tcp_receive+0x888>)
 80203f0:	68db      	ldr	r3, [r3, #12]
 80203f2:	899b      	ldrh	r3, [r3, #12]
 80203f4:	b29c      	uxth	r4, r3
 80203f6:	2001      	movs	r0, #1
 80203f8:	f7fa fe3e 	bl	801b078 <lwip_htons>
 80203fc:	4603      	mov	r3, r0
 80203fe:	461a      	mov	r2, r3
 8020400:	4b0b      	ldr	r3, [pc, #44]	@ (8020430 <tcp_receive+0x888>)
 8020402:	68db      	ldr	r3, [r3, #12]
 8020404:	4322      	orrs	r2, r4
 8020406:	b292      	uxth	r2, r2
 8020408:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 802040a:	4b09      	ldr	r3, [pc, #36]	@ (8020430 <tcp_receive+0x888>)
 802040c:	891c      	ldrh	r4, [r3, #8]
 802040e:	4b08      	ldr	r3, [pc, #32]	@ (8020430 <tcp_receive+0x888>)
 8020410:	68db      	ldr	r3, [r3, #12]
 8020412:	899b      	ldrh	r3, [r3, #12]
 8020414:	b29b      	uxth	r3, r3
 8020416:	4618      	mov	r0, r3
 8020418:	f7fa fe2e 	bl	801b078 <lwip_htons>
 802041c:	4603      	mov	r3, r0
 802041e:	b2db      	uxtb	r3, r3
 8020420:	f003 0303 	and.w	r3, r3, #3
 8020424:	2b00      	cmp	r3, #0
 8020426:	d00d      	beq.n	8020444 <tcp_receive+0x89c>
 8020428:	2301      	movs	r3, #1
 802042a:	e00c      	b.n	8020446 <tcp_receive+0x89e>
 802042c:	2003c50c 	.word	0x2003c50c
 8020430:	2003c4ec 	.word	0x2003c4ec
 8020434:	2003c516 	.word	0x2003c516
 8020438:	08029f40 	.word	0x08029f40
 802043c:	0802a2e8 	.word	0x0802a2e8
 8020440:	08029f8c 	.word	0x08029f8c
 8020444:	2300      	movs	r3, #0
 8020446:	4423      	add	r3, r4
 8020448:	b29a      	uxth	r2, r3
 802044a:	4b98      	ldr	r3, [pc, #608]	@ (80206ac <tcp_receive+0xb04>)
 802044c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 802044e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020450:	613b      	str	r3, [r7, #16]
              next = next->next;
 8020452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020454:	681b      	ldr	r3, [r3, #0]
 8020456:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8020458:	6938      	ldr	r0, [r7, #16]
 802045a:	f7fd fd38 	bl	801dece <tcp_seg_free>
            while (next &&
 802045e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020460:	2b00      	cmp	r3, #0
 8020462:	d00e      	beq.n	8020482 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8020464:	4b91      	ldr	r3, [pc, #580]	@ (80206ac <tcp_receive+0xb04>)
 8020466:	881b      	ldrh	r3, [r3, #0]
 8020468:	461a      	mov	r2, r3
 802046a:	4b91      	ldr	r3, [pc, #580]	@ (80206b0 <tcp_receive+0xb08>)
 802046c:	681b      	ldr	r3, [r3, #0]
 802046e:	441a      	add	r2, r3
 8020470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020472:	68db      	ldr	r3, [r3, #12]
 8020474:	685b      	ldr	r3, [r3, #4]
 8020476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020478:	8909      	ldrh	r1, [r1, #8]
 802047a:	440b      	add	r3, r1
 802047c:	1ad3      	subs	r3, r2, r3
            while (next &&
 802047e:	2b00      	cmp	r3, #0
 8020480:	da9b      	bge.n	80203ba <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8020482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020484:	2b00      	cmp	r3, #0
 8020486:	d059      	beq.n	802053c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8020488:	4b88      	ldr	r3, [pc, #544]	@ (80206ac <tcp_receive+0xb04>)
 802048a:	881b      	ldrh	r3, [r3, #0]
 802048c:	461a      	mov	r2, r3
 802048e:	4b88      	ldr	r3, [pc, #544]	@ (80206b0 <tcp_receive+0xb08>)
 8020490:	681b      	ldr	r3, [r3, #0]
 8020492:	441a      	add	r2, r3
 8020494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020496:	68db      	ldr	r3, [r3, #12]
 8020498:	685b      	ldr	r3, [r3, #4]
 802049a:	1ad3      	subs	r3, r2, r3
            if (next &&
 802049c:	2b00      	cmp	r3, #0
 802049e:	dd4d      	ble.n	802053c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80204a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80204a2:	68db      	ldr	r3, [r3, #12]
 80204a4:	685b      	ldr	r3, [r3, #4]
 80204a6:	b29a      	uxth	r2, r3
 80204a8:	4b81      	ldr	r3, [pc, #516]	@ (80206b0 <tcp_receive+0xb08>)
 80204aa:	681b      	ldr	r3, [r3, #0]
 80204ac:	b29b      	uxth	r3, r3
 80204ae:	1ad3      	subs	r3, r2, r3
 80204b0:	b29a      	uxth	r2, r3
 80204b2:	4b80      	ldr	r3, [pc, #512]	@ (80206b4 <tcp_receive+0xb0c>)
 80204b4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80204b6:	4b7f      	ldr	r3, [pc, #508]	@ (80206b4 <tcp_receive+0xb0c>)
 80204b8:	68db      	ldr	r3, [r3, #12]
 80204ba:	899b      	ldrh	r3, [r3, #12]
 80204bc:	b29b      	uxth	r3, r3
 80204be:	4618      	mov	r0, r3
 80204c0:	f7fa fdda 	bl	801b078 <lwip_htons>
 80204c4:	4603      	mov	r3, r0
 80204c6:	b2db      	uxtb	r3, r3
 80204c8:	f003 0302 	and.w	r3, r3, #2
 80204cc:	2b00      	cmp	r3, #0
 80204ce:	d005      	beq.n	80204dc <tcp_receive+0x934>
                inseg.len -= 1;
 80204d0:	4b78      	ldr	r3, [pc, #480]	@ (80206b4 <tcp_receive+0xb0c>)
 80204d2:	891b      	ldrh	r3, [r3, #8]
 80204d4:	3b01      	subs	r3, #1
 80204d6:	b29a      	uxth	r2, r3
 80204d8:	4b76      	ldr	r3, [pc, #472]	@ (80206b4 <tcp_receive+0xb0c>)
 80204da:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80204dc:	4b75      	ldr	r3, [pc, #468]	@ (80206b4 <tcp_receive+0xb0c>)
 80204de:	685b      	ldr	r3, [r3, #4]
 80204e0:	4a74      	ldr	r2, [pc, #464]	@ (80206b4 <tcp_receive+0xb0c>)
 80204e2:	8912      	ldrh	r2, [r2, #8]
 80204e4:	4611      	mov	r1, r2
 80204e6:	4618      	mov	r0, r3
 80204e8:	f7fc f8dc 	bl	801c6a4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80204ec:	4b71      	ldr	r3, [pc, #452]	@ (80206b4 <tcp_receive+0xb0c>)
 80204ee:	891c      	ldrh	r4, [r3, #8]
 80204f0:	4b70      	ldr	r3, [pc, #448]	@ (80206b4 <tcp_receive+0xb0c>)
 80204f2:	68db      	ldr	r3, [r3, #12]
 80204f4:	899b      	ldrh	r3, [r3, #12]
 80204f6:	b29b      	uxth	r3, r3
 80204f8:	4618      	mov	r0, r3
 80204fa:	f7fa fdbd 	bl	801b078 <lwip_htons>
 80204fe:	4603      	mov	r3, r0
 8020500:	b2db      	uxtb	r3, r3
 8020502:	f003 0303 	and.w	r3, r3, #3
 8020506:	2b00      	cmp	r3, #0
 8020508:	d001      	beq.n	802050e <tcp_receive+0x966>
 802050a:	2301      	movs	r3, #1
 802050c:	e000      	b.n	8020510 <tcp_receive+0x968>
 802050e:	2300      	movs	r3, #0
 8020510:	4423      	add	r3, r4
 8020512:	b29a      	uxth	r2, r3
 8020514:	4b65      	ldr	r3, [pc, #404]	@ (80206ac <tcp_receive+0xb04>)
 8020516:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8020518:	4b64      	ldr	r3, [pc, #400]	@ (80206ac <tcp_receive+0xb04>)
 802051a:	881b      	ldrh	r3, [r3, #0]
 802051c:	461a      	mov	r2, r3
 802051e:	4b64      	ldr	r3, [pc, #400]	@ (80206b0 <tcp_receive+0xb08>)
 8020520:	681b      	ldr	r3, [r3, #0]
 8020522:	441a      	add	r2, r3
 8020524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020526:	68db      	ldr	r3, [r3, #12]
 8020528:	685b      	ldr	r3, [r3, #4]
 802052a:	429a      	cmp	r2, r3
 802052c:	d006      	beq.n	802053c <tcp_receive+0x994>
 802052e:	4b62      	ldr	r3, [pc, #392]	@ (80206b8 <tcp_receive+0xb10>)
 8020530:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8020534:	4961      	ldr	r1, [pc, #388]	@ (80206bc <tcp_receive+0xb14>)
 8020536:	4862      	ldr	r0, [pc, #392]	@ (80206c0 <tcp_receive+0xb18>)
 8020538:	f006 f9ae 	bl	8026898 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 802053c:	687b      	ldr	r3, [r7, #4]
 802053e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020540:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8020542:	4b5a      	ldr	r3, [pc, #360]	@ (80206ac <tcp_receive+0xb04>)
 8020544:	881b      	ldrh	r3, [r3, #0]
 8020546:	461a      	mov	r2, r3
 8020548:	4b59      	ldr	r3, [pc, #356]	@ (80206b0 <tcp_receive+0xb08>)
 802054a:	681b      	ldr	r3, [r3, #0]
 802054c:	441a      	add	r2, r3
 802054e:	687b      	ldr	r3, [r7, #4]
 8020550:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8020552:	687b      	ldr	r3, [r7, #4]
 8020554:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8020556:	4b55      	ldr	r3, [pc, #340]	@ (80206ac <tcp_receive+0xb04>)
 8020558:	881b      	ldrh	r3, [r3, #0]
 802055a:	429a      	cmp	r2, r3
 802055c:	d206      	bcs.n	802056c <tcp_receive+0x9c4>
 802055e:	4b56      	ldr	r3, [pc, #344]	@ (80206b8 <tcp_receive+0xb10>)
 8020560:	f240 6207 	movw	r2, #1543	@ 0x607
 8020564:	4957      	ldr	r1, [pc, #348]	@ (80206c4 <tcp_receive+0xb1c>)
 8020566:	4856      	ldr	r0, [pc, #344]	@ (80206c0 <tcp_receive+0xb18>)
 8020568:	f006 f996 	bl	8026898 <iprintf>
        pcb->rcv_wnd -= tcplen;
 802056c:	687b      	ldr	r3, [r7, #4]
 802056e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8020570:	4b4e      	ldr	r3, [pc, #312]	@ (80206ac <tcp_receive+0xb04>)
 8020572:	881b      	ldrh	r3, [r3, #0]
 8020574:	1ad3      	subs	r3, r2, r3
 8020576:	b29a      	uxth	r2, r3
 8020578:	687b      	ldr	r3, [r7, #4]
 802057a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 802057c:	6878      	ldr	r0, [r7, #4]
 802057e:	f7fc ffc5 	bl	801d50c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8020582:	4b4c      	ldr	r3, [pc, #304]	@ (80206b4 <tcp_receive+0xb0c>)
 8020584:	685b      	ldr	r3, [r3, #4]
 8020586:	891b      	ldrh	r3, [r3, #8]
 8020588:	2b00      	cmp	r3, #0
 802058a:	d006      	beq.n	802059a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 802058c:	4b49      	ldr	r3, [pc, #292]	@ (80206b4 <tcp_receive+0xb0c>)
 802058e:	685b      	ldr	r3, [r3, #4]
 8020590:	4a4d      	ldr	r2, [pc, #308]	@ (80206c8 <tcp_receive+0xb20>)
 8020592:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8020594:	4b47      	ldr	r3, [pc, #284]	@ (80206b4 <tcp_receive+0xb0c>)
 8020596:	2200      	movs	r2, #0
 8020598:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 802059a:	4b46      	ldr	r3, [pc, #280]	@ (80206b4 <tcp_receive+0xb0c>)
 802059c:	68db      	ldr	r3, [r3, #12]
 802059e:	899b      	ldrh	r3, [r3, #12]
 80205a0:	b29b      	uxth	r3, r3
 80205a2:	4618      	mov	r0, r3
 80205a4:	f7fa fd68 	bl	801b078 <lwip_htons>
 80205a8:	4603      	mov	r3, r0
 80205aa:	b2db      	uxtb	r3, r3
 80205ac:	f003 0301 	and.w	r3, r3, #1
 80205b0:	2b00      	cmp	r3, #0
 80205b2:	f000 80b8 	beq.w	8020726 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80205b6:	4b45      	ldr	r3, [pc, #276]	@ (80206cc <tcp_receive+0xb24>)
 80205b8:	781b      	ldrb	r3, [r3, #0]
 80205ba:	f043 0320 	orr.w	r3, r3, #32
 80205be:	b2da      	uxtb	r2, r3
 80205c0:	4b42      	ldr	r3, [pc, #264]	@ (80206cc <tcp_receive+0xb24>)
 80205c2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80205c4:	e0af      	b.n	8020726 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80205ca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80205cc:	687b      	ldr	r3, [r7, #4]
 80205ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80205d0:	68db      	ldr	r3, [r3, #12]
 80205d2:	685b      	ldr	r3, [r3, #4]
 80205d4:	4a36      	ldr	r2, [pc, #216]	@ (80206b0 <tcp_receive+0xb08>)
 80205d6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80205d8:	68bb      	ldr	r3, [r7, #8]
 80205da:	891b      	ldrh	r3, [r3, #8]
 80205dc:	461c      	mov	r4, r3
 80205de:	68bb      	ldr	r3, [r7, #8]
 80205e0:	68db      	ldr	r3, [r3, #12]
 80205e2:	899b      	ldrh	r3, [r3, #12]
 80205e4:	b29b      	uxth	r3, r3
 80205e6:	4618      	mov	r0, r3
 80205e8:	f7fa fd46 	bl	801b078 <lwip_htons>
 80205ec:	4603      	mov	r3, r0
 80205ee:	b2db      	uxtb	r3, r3
 80205f0:	f003 0303 	and.w	r3, r3, #3
 80205f4:	2b00      	cmp	r3, #0
 80205f6:	d001      	beq.n	80205fc <tcp_receive+0xa54>
 80205f8:	2301      	movs	r3, #1
 80205fa:	e000      	b.n	80205fe <tcp_receive+0xa56>
 80205fc:	2300      	movs	r3, #0
 80205fe:	191a      	adds	r2, r3, r4
 8020600:	687b      	ldr	r3, [r7, #4]
 8020602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020604:	441a      	add	r2, r3
 8020606:	687b      	ldr	r3, [r7, #4]
 8020608:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 802060a:	687b      	ldr	r3, [r7, #4]
 802060c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802060e:	461c      	mov	r4, r3
 8020610:	68bb      	ldr	r3, [r7, #8]
 8020612:	891b      	ldrh	r3, [r3, #8]
 8020614:	461d      	mov	r5, r3
 8020616:	68bb      	ldr	r3, [r7, #8]
 8020618:	68db      	ldr	r3, [r3, #12]
 802061a:	899b      	ldrh	r3, [r3, #12]
 802061c:	b29b      	uxth	r3, r3
 802061e:	4618      	mov	r0, r3
 8020620:	f7fa fd2a 	bl	801b078 <lwip_htons>
 8020624:	4603      	mov	r3, r0
 8020626:	b2db      	uxtb	r3, r3
 8020628:	f003 0303 	and.w	r3, r3, #3
 802062c:	2b00      	cmp	r3, #0
 802062e:	d001      	beq.n	8020634 <tcp_receive+0xa8c>
 8020630:	2301      	movs	r3, #1
 8020632:	e000      	b.n	8020636 <tcp_receive+0xa8e>
 8020634:	2300      	movs	r3, #0
 8020636:	442b      	add	r3, r5
 8020638:	429c      	cmp	r4, r3
 802063a:	d206      	bcs.n	802064a <tcp_receive+0xaa2>
 802063c:	4b1e      	ldr	r3, [pc, #120]	@ (80206b8 <tcp_receive+0xb10>)
 802063e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8020642:	4923      	ldr	r1, [pc, #140]	@ (80206d0 <tcp_receive+0xb28>)
 8020644:	481e      	ldr	r0, [pc, #120]	@ (80206c0 <tcp_receive+0xb18>)
 8020646:	f006 f927 	bl	8026898 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 802064a:	68bb      	ldr	r3, [r7, #8]
 802064c:	891b      	ldrh	r3, [r3, #8]
 802064e:	461c      	mov	r4, r3
 8020650:	68bb      	ldr	r3, [r7, #8]
 8020652:	68db      	ldr	r3, [r3, #12]
 8020654:	899b      	ldrh	r3, [r3, #12]
 8020656:	b29b      	uxth	r3, r3
 8020658:	4618      	mov	r0, r3
 802065a:	f7fa fd0d 	bl	801b078 <lwip_htons>
 802065e:	4603      	mov	r3, r0
 8020660:	b2db      	uxtb	r3, r3
 8020662:	f003 0303 	and.w	r3, r3, #3
 8020666:	2b00      	cmp	r3, #0
 8020668:	d001      	beq.n	802066e <tcp_receive+0xac6>
 802066a:	2301      	movs	r3, #1
 802066c:	e000      	b.n	8020670 <tcp_receive+0xac8>
 802066e:	2300      	movs	r3, #0
 8020670:	1919      	adds	r1, r3, r4
 8020672:	687b      	ldr	r3, [r7, #4]
 8020674:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8020676:	b28b      	uxth	r3, r1
 8020678:	1ad3      	subs	r3, r2, r3
 802067a:	b29a      	uxth	r2, r3
 802067c:	687b      	ldr	r3, [r7, #4]
 802067e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8020680:	6878      	ldr	r0, [r7, #4]
 8020682:	f7fc ff43 	bl	801d50c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8020686:	68bb      	ldr	r3, [r7, #8]
 8020688:	685b      	ldr	r3, [r3, #4]
 802068a:	891b      	ldrh	r3, [r3, #8]
 802068c:	2b00      	cmp	r3, #0
 802068e:	d028      	beq.n	80206e2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8020690:	4b0d      	ldr	r3, [pc, #52]	@ (80206c8 <tcp_receive+0xb20>)
 8020692:	681b      	ldr	r3, [r3, #0]
 8020694:	2b00      	cmp	r3, #0
 8020696:	d01d      	beq.n	80206d4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8020698:	4b0b      	ldr	r3, [pc, #44]	@ (80206c8 <tcp_receive+0xb20>)
 802069a:	681a      	ldr	r2, [r3, #0]
 802069c:	68bb      	ldr	r3, [r7, #8]
 802069e:	685b      	ldr	r3, [r3, #4]
 80206a0:	4619      	mov	r1, r3
 80206a2:	4610      	mov	r0, r2
 80206a4:	f7fc fa50 	bl	801cb48 <pbuf_cat>
 80206a8:	e018      	b.n	80206dc <tcp_receive+0xb34>
 80206aa:	bf00      	nop
 80206ac:	2003c516 	.word	0x2003c516
 80206b0:	2003c50c 	.word	0x2003c50c
 80206b4:	2003c4ec 	.word	0x2003c4ec
 80206b8:	08029f40 	.word	0x08029f40
 80206bc:	0802a320 	.word	0x0802a320
 80206c0:	08029f8c 	.word	0x08029f8c
 80206c4:	0802a35c 	.word	0x0802a35c
 80206c8:	2003c51c 	.word	0x2003c51c
 80206cc:	2003c519 	.word	0x2003c519
 80206d0:	0802a37c 	.word	0x0802a37c
            } else {
              recv_data = cseg->p;
 80206d4:	68bb      	ldr	r3, [r7, #8]
 80206d6:	685b      	ldr	r3, [r3, #4]
 80206d8:	4a70      	ldr	r2, [pc, #448]	@ (802089c <tcp_receive+0xcf4>)
 80206da:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80206dc:	68bb      	ldr	r3, [r7, #8]
 80206de:	2200      	movs	r2, #0
 80206e0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80206e2:	68bb      	ldr	r3, [r7, #8]
 80206e4:	68db      	ldr	r3, [r3, #12]
 80206e6:	899b      	ldrh	r3, [r3, #12]
 80206e8:	b29b      	uxth	r3, r3
 80206ea:	4618      	mov	r0, r3
 80206ec:	f7fa fcc4 	bl	801b078 <lwip_htons>
 80206f0:	4603      	mov	r3, r0
 80206f2:	b2db      	uxtb	r3, r3
 80206f4:	f003 0301 	and.w	r3, r3, #1
 80206f8:	2b00      	cmp	r3, #0
 80206fa:	d00d      	beq.n	8020718 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80206fc:	4b68      	ldr	r3, [pc, #416]	@ (80208a0 <tcp_receive+0xcf8>)
 80206fe:	781b      	ldrb	r3, [r3, #0]
 8020700:	f043 0320 	orr.w	r3, r3, #32
 8020704:	b2da      	uxtb	r2, r3
 8020706:	4b66      	ldr	r3, [pc, #408]	@ (80208a0 <tcp_receive+0xcf8>)
 8020708:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 802070a:	687b      	ldr	r3, [r7, #4]
 802070c:	7d1b      	ldrb	r3, [r3, #20]
 802070e:	2b04      	cmp	r3, #4
 8020710:	d102      	bne.n	8020718 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8020712:	687b      	ldr	r3, [r7, #4]
 8020714:	2207      	movs	r2, #7
 8020716:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8020718:	68bb      	ldr	r3, [r7, #8]
 802071a:	681a      	ldr	r2, [r3, #0]
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8020720:	68b8      	ldr	r0, [r7, #8]
 8020722:	f7fd fbd4 	bl	801dece <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802072a:	2b00      	cmp	r3, #0
 802072c:	d008      	beq.n	8020740 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8020732:	68db      	ldr	r3, [r3, #12]
 8020734:	685a      	ldr	r2, [r3, #4]
 8020736:	687b      	ldr	r3, [r7, #4]
 8020738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 802073a:	429a      	cmp	r2, r3
 802073c:	f43f af43 	beq.w	80205c6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	8b5b      	ldrh	r3, [r3, #26]
 8020744:	f003 0301 	and.w	r3, r3, #1
 8020748:	2b00      	cmp	r3, #0
 802074a:	d00e      	beq.n	802076a <tcp_receive+0xbc2>
 802074c:	687b      	ldr	r3, [r7, #4]
 802074e:	8b5b      	ldrh	r3, [r3, #26]
 8020750:	f023 0301 	bic.w	r3, r3, #1
 8020754:	b29a      	uxth	r2, r3
 8020756:	687b      	ldr	r3, [r7, #4]
 8020758:	835a      	strh	r2, [r3, #26]
 802075a:	687b      	ldr	r3, [r7, #4]
 802075c:	8b5b      	ldrh	r3, [r3, #26]
 802075e:	f043 0302 	orr.w	r3, r3, #2
 8020762:	b29a      	uxth	r2, r3
 8020764:	687b      	ldr	r3, [r7, #4]
 8020766:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8020768:	e187      	b.n	8020a7a <tcp_receive+0xed2>
        tcp_ack(pcb);
 802076a:	687b      	ldr	r3, [r7, #4]
 802076c:	8b5b      	ldrh	r3, [r3, #26]
 802076e:	f043 0301 	orr.w	r3, r3, #1
 8020772:	b29a      	uxth	r2, r3
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8020778:	e17f      	b.n	8020a7a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 802077a:	687b      	ldr	r3, [r7, #4]
 802077c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802077e:	2b00      	cmp	r3, #0
 8020780:	d106      	bne.n	8020790 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8020782:	4848      	ldr	r0, [pc, #288]	@ (80208a4 <tcp_receive+0xcfc>)
 8020784:	f7fd fbbc 	bl	801df00 <tcp_seg_copy>
 8020788:	4602      	mov	r2, r0
 802078a:	687b      	ldr	r3, [r7, #4]
 802078c:	675a      	str	r2, [r3, #116]	@ 0x74
 802078e:	e16c      	b.n	8020a6a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8020790:	2300      	movs	r3, #0
 8020792:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8020794:	687b      	ldr	r3, [r7, #4]
 8020796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8020798:	63bb      	str	r3, [r7, #56]	@ 0x38
 802079a:	e156      	b.n	8020a4a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 802079c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802079e:	68db      	ldr	r3, [r3, #12]
 80207a0:	685a      	ldr	r2, [r3, #4]
 80207a2:	4b41      	ldr	r3, [pc, #260]	@ (80208a8 <tcp_receive+0xd00>)
 80207a4:	681b      	ldr	r3, [r3, #0]
 80207a6:	429a      	cmp	r2, r3
 80207a8:	d11d      	bne.n	80207e6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80207aa:	4b3e      	ldr	r3, [pc, #248]	@ (80208a4 <tcp_receive+0xcfc>)
 80207ac:	891a      	ldrh	r2, [r3, #8]
 80207ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80207b0:	891b      	ldrh	r3, [r3, #8]
 80207b2:	429a      	cmp	r2, r3
 80207b4:	f240 814e 	bls.w	8020a54 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80207b8:	483a      	ldr	r0, [pc, #232]	@ (80208a4 <tcp_receive+0xcfc>)
 80207ba:	f7fd fba1 	bl	801df00 <tcp_seg_copy>
 80207be:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80207c0:	697b      	ldr	r3, [r7, #20]
 80207c2:	2b00      	cmp	r3, #0
 80207c4:	f000 8148 	beq.w	8020a58 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80207c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	d003      	beq.n	80207d6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80207ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80207d0:	697a      	ldr	r2, [r7, #20]
 80207d2:	601a      	str	r2, [r3, #0]
 80207d4:	e002      	b.n	80207dc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80207d6:	687b      	ldr	r3, [r7, #4]
 80207d8:	697a      	ldr	r2, [r7, #20]
 80207da:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80207dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80207de:	6978      	ldr	r0, [r7, #20]
 80207e0:	f7ff f8de 	bl	801f9a0 <tcp_oos_insert_segment>
                }
                break;
 80207e4:	e138      	b.n	8020a58 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80207e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80207e8:	2b00      	cmp	r3, #0
 80207ea:	d117      	bne.n	802081c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80207ec:	4b2e      	ldr	r3, [pc, #184]	@ (80208a8 <tcp_receive+0xd00>)
 80207ee:	681a      	ldr	r2, [r3, #0]
 80207f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80207f2:	68db      	ldr	r3, [r3, #12]
 80207f4:	685b      	ldr	r3, [r3, #4]
 80207f6:	1ad3      	subs	r3, r2, r3
 80207f8:	2b00      	cmp	r3, #0
 80207fa:	da57      	bge.n	80208ac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80207fc:	4829      	ldr	r0, [pc, #164]	@ (80208a4 <tcp_receive+0xcfc>)
 80207fe:	f7fd fb7f 	bl	801df00 <tcp_seg_copy>
 8020802:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8020804:	69bb      	ldr	r3, [r7, #24]
 8020806:	2b00      	cmp	r3, #0
 8020808:	f000 8128 	beq.w	8020a5c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 802080c:	687b      	ldr	r3, [r7, #4]
 802080e:	69ba      	ldr	r2, [r7, #24]
 8020810:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8020812:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8020814:	69b8      	ldr	r0, [r7, #24]
 8020816:	f7ff f8c3 	bl	801f9a0 <tcp_oos_insert_segment>
                  }
                  break;
 802081a:	e11f      	b.n	8020a5c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 802081c:	4b22      	ldr	r3, [pc, #136]	@ (80208a8 <tcp_receive+0xd00>)
 802081e:	681a      	ldr	r2, [r3, #0]
 8020820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020822:	68db      	ldr	r3, [r3, #12]
 8020824:	685b      	ldr	r3, [r3, #4]
 8020826:	1ad3      	subs	r3, r2, r3
 8020828:	3b01      	subs	r3, #1
 802082a:	2b00      	cmp	r3, #0
 802082c:	db3e      	blt.n	80208ac <tcp_receive+0xd04>
 802082e:	4b1e      	ldr	r3, [pc, #120]	@ (80208a8 <tcp_receive+0xd00>)
 8020830:	681a      	ldr	r2, [r3, #0]
 8020832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020834:	68db      	ldr	r3, [r3, #12]
 8020836:	685b      	ldr	r3, [r3, #4]
 8020838:	1ad3      	subs	r3, r2, r3
 802083a:	3301      	adds	r3, #1
 802083c:	2b00      	cmp	r3, #0
 802083e:	dc35      	bgt.n	80208ac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8020840:	4818      	ldr	r0, [pc, #96]	@ (80208a4 <tcp_receive+0xcfc>)
 8020842:	f7fd fb5d 	bl	801df00 <tcp_seg_copy>
 8020846:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8020848:	69fb      	ldr	r3, [r7, #28]
 802084a:	2b00      	cmp	r3, #0
 802084c:	f000 8108 	beq.w	8020a60 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8020850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020852:	68db      	ldr	r3, [r3, #12]
 8020854:	685b      	ldr	r3, [r3, #4]
 8020856:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8020858:	8912      	ldrh	r2, [r2, #8]
 802085a:	441a      	add	r2, r3
 802085c:	4b12      	ldr	r3, [pc, #72]	@ (80208a8 <tcp_receive+0xd00>)
 802085e:	681b      	ldr	r3, [r3, #0]
 8020860:	1ad3      	subs	r3, r2, r3
 8020862:	2b00      	cmp	r3, #0
 8020864:	dd12      	ble.n	802088c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8020866:	4b10      	ldr	r3, [pc, #64]	@ (80208a8 <tcp_receive+0xd00>)
 8020868:	681b      	ldr	r3, [r3, #0]
 802086a:	b29a      	uxth	r2, r3
 802086c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802086e:	68db      	ldr	r3, [r3, #12]
 8020870:	685b      	ldr	r3, [r3, #4]
 8020872:	b29b      	uxth	r3, r3
 8020874:	1ad3      	subs	r3, r2, r3
 8020876:	b29a      	uxth	r2, r3
 8020878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802087a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 802087c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802087e:	685a      	ldr	r2, [r3, #4]
 8020880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020882:	891b      	ldrh	r3, [r3, #8]
 8020884:	4619      	mov	r1, r3
 8020886:	4610      	mov	r0, r2
 8020888:	f7fb ff0c 	bl	801c6a4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 802088c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802088e:	69fa      	ldr	r2, [r7, #28]
 8020890:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8020892:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8020894:	69f8      	ldr	r0, [r7, #28]
 8020896:	f7ff f883 	bl	801f9a0 <tcp_oos_insert_segment>
                  }
                  break;
 802089a:	e0e1      	b.n	8020a60 <tcp_receive+0xeb8>
 802089c:	2003c51c 	.word	0x2003c51c
 80208a0:	2003c519 	.word	0x2003c519
 80208a4:	2003c4ec 	.word	0x2003c4ec
 80208a8:	2003c50c 	.word	0x2003c50c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80208ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80208ae:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80208b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	f040 80c5 	bne.w	8020a44 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80208ba:	4b7f      	ldr	r3, [pc, #508]	@ (8020ab8 <tcp_receive+0xf10>)
 80208bc:	681a      	ldr	r2, [r3, #0]
 80208be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80208c0:	68db      	ldr	r3, [r3, #12]
 80208c2:	685b      	ldr	r3, [r3, #4]
 80208c4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	f340 80bc 	ble.w	8020a44 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80208cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80208ce:	68db      	ldr	r3, [r3, #12]
 80208d0:	899b      	ldrh	r3, [r3, #12]
 80208d2:	b29b      	uxth	r3, r3
 80208d4:	4618      	mov	r0, r3
 80208d6:	f7fa fbcf 	bl	801b078 <lwip_htons>
 80208da:	4603      	mov	r3, r0
 80208dc:	b2db      	uxtb	r3, r3
 80208de:	f003 0301 	and.w	r3, r3, #1
 80208e2:	2b00      	cmp	r3, #0
 80208e4:	f040 80be 	bne.w	8020a64 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80208e8:	4874      	ldr	r0, [pc, #464]	@ (8020abc <tcp_receive+0xf14>)
 80208ea:	f7fd fb09 	bl	801df00 <tcp_seg_copy>
 80208ee:	4602      	mov	r2, r0
 80208f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80208f2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80208f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80208f6:	681b      	ldr	r3, [r3, #0]
 80208f8:	2b00      	cmp	r3, #0
 80208fa:	f000 80b5 	beq.w	8020a68 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80208fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020900:	68db      	ldr	r3, [r3, #12]
 8020902:	685b      	ldr	r3, [r3, #4]
 8020904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8020906:	8912      	ldrh	r2, [r2, #8]
 8020908:	441a      	add	r2, r3
 802090a:	4b6b      	ldr	r3, [pc, #428]	@ (8020ab8 <tcp_receive+0xf10>)
 802090c:	681b      	ldr	r3, [r3, #0]
 802090e:	1ad3      	subs	r3, r2, r3
 8020910:	2b00      	cmp	r3, #0
 8020912:	dd12      	ble.n	802093a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8020914:	4b68      	ldr	r3, [pc, #416]	@ (8020ab8 <tcp_receive+0xf10>)
 8020916:	681b      	ldr	r3, [r3, #0]
 8020918:	b29a      	uxth	r2, r3
 802091a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802091c:	68db      	ldr	r3, [r3, #12]
 802091e:	685b      	ldr	r3, [r3, #4]
 8020920:	b29b      	uxth	r3, r3
 8020922:	1ad3      	subs	r3, r2, r3
 8020924:	b29a      	uxth	r2, r3
 8020926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020928:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 802092a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802092c:	685a      	ldr	r2, [r3, #4]
 802092e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020930:	891b      	ldrh	r3, [r3, #8]
 8020932:	4619      	mov	r1, r3
 8020934:	4610      	mov	r0, r2
 8020936:	f7fb feb5 	bl	801c6a4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 802093a:	4b61      	ldr	r3, [pc, #388]	@ (8020ac0 <tcp_receive+0xf18>)
 802093c:	881b      	ldrh	r3, [r3, #0]
 802093e:	461a      	mov	r2, r3
 8020940:	4b5d      	ldr	r3, [pc, #372]	@ (8020ab8 <tcp_receive+0xf10>)
 8020942:	681b      	ldr	r3, [r3, #0]
 8020944:	441a      	add	r2, r3
 8020946:	687b      	ldr	r3, [r7, #4]
 8020948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802094a:	6879      	ldr	r1, [r7, #4]
 802094c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 802094e:	440b      	add	r3, r1
 8020950:	1ad3      	subs	r3, r2, r3
 8020952:	2b00      	cmp	r3, #0
 8020954:	f340 8088 	ble.w	8020a68 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8020958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802095a:	681b      	ldr	r3, [r3, #0]
 802095c:	68db      	ldr	r3, [r3, #12]
 802095e:	899b      	ldrh	r3, [r3, #12]
 8020960:	b29b      	uxth	r3, r3
 8020962:	4618      	mov	r0, r3
 8020964:	f7fa fb88 	bl	801b078 <lwip_htons>
 8020968:	4603      	mov	r3, r0
 802096a:	b2db      	uxtb	r3, r3
 802096c:	f003 0301 	and.w	r3, r3, #1
 8020970:	2b00      	cmp	r3, #0
 8020972:	d021      	beq.n	80209b8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8020974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020976:	681b      	ldr	r3, [r3, #0]
 8020978:	68db      	ldr	r3, [r3, #12]
 802097a:	899b      	ldrh	r3, [r3, #12]
 802097c:	b29b      	uxth	r3, r3
 802097e:	b21b      	sxth	r3, r3
 8020980:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8020984:	b21c      	sxth	r4, r3
 8020986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020988:	681b      	ldr	r3, [r3, #0]
 802098a:	68db      	ldr	r3, [r3, #12]
 802098c:	899b      	ldrh	r3, [r3, #12]
 802098e:	b29b      	uxth	r3, r3
 8020990:	4618      	mov	r0, r3
 8020992:	f7fa fb71 	bl	801b078 <lwip_htons>
 8020996:	4603      	mov	r3, r0
 8020998:	b2db      	uxtb	r3, r3
 802099a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 802099e:	b29b      	uxth	r3, r3
 80209a0:	4618      	mov	r0, r3
 80209a2:	f7fa fb69 	bl	801b078 <lwip_htons>
 80209a6:	4603      	mov	r3, r0
 80209a8:	b21b      	sxth	r3, r3
 80209aa:	4323      	orrs	r3, r4
 80209ac:	b21a      	sxth	r2, r3
 80209ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80209b0:	681b      	ldr	r3, [r3, #0]
 80209b2:	68db      	ldr	r3, [r3, #12]
 80209b4:	b292      	uxth	r2, r2
 80209b6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80209bc:	b29a      	uxth	r2, r3
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80209c2:	4413      	add	r3, r2
 80209c4:	b299      	uxth	r1, r3
 80209c6:	4b3c      	ldr	r3, [pc, #240]	@ (8020ab8 <tcp_receive+0xf10>)
 80209c8:	681b      	ldr	r3, [r3, #0]
 80209ca:	b29a      	uxth	r2, r3
 80209cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80209ce:	681b      	ldr	r3, [r3, #0]
 80209d0:	1a8a      	subs	r2, r1, r2
 80209d2:	b292      	uxth	r2, r2
 80209d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80209d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80209d8:	681b      	ldr	r3, [r3, #0]
 80209da:	685a      	ldr	r2, [r3, #4]
 80209dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80209de:	681b      	ldr	r3, [r3, #0]
 80209e0:	891b      	ldrh	r3, [r3, #8]
 80209e2:	4619      	mov	r1, r3
 80209e4:	4610      	mov	r0, r2
 80209e6:	f7fb fe5d 	bl	801c6a4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80209ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80209ec:	681b      	ldr	r3, [r3, #0]
 80209ee:	891c      	ldrh	r4, [r3, #8]
 80209f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	68db      	ldr	r3, [r3, #12]
 80209f6:	899b      	ldrh	r3, [r3, #12]
 80209f8:	b29b      	uxth	r3, r3
 80209fa:	4618      	mov	r0, r3
 80209fc:	f7fa fb3c 	bl	801b078 <lwip_htons>
 8020a00:	4603      	mov	r3, r0
 8020a02:	b2db      	uxtb	r3, r3
 8020a04:	f003 0303 	and.w	r3, r3, #3
 8020a08:	2b00      	cmp	r3, #0
 8020a0a:	d001      	beq.n	8020a10 <tcp_receive+0xe68>
 8020a0c:	2301      	movs	r3, #1
 8020a0e:	e000      	b.n	8020a12 <tcp_receive+0xe6a>
 8020a10:	2300      	movs	r3, #0
 8020a12:	4423      	add	r3, r4
 8020a14:	b29a      	uxth	r2, r3
 8020a16:	4b2a      	ldr	r3, [pc, #168]	@ (8020ac0 <tcp_receive+0xf18>)
 8020a18:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8020a1a:	4b29      	ldr	r3, [pc, #164]	@ (8020ac0 <tcp_receive+0xf18>)
 8020a1c:	881b      	ldrh	r3, [r3, #0]
 8020a1e:	461a      	mov	r2, r3
 8020a20:	4b25      	ldr	r3, [pc, #148]	@ (8020ab8 <tcp_receive+0xf10>)
 8020a22:	681b      	ldr	r3, [r3, #0]
 8020a24:	441a      	add	r2, r3
 8020a26:	687b      	ldr	r3, [r7, #4]
 8020a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020a2a:	6879      	ldr	r1, [r7, #4]
 8020a2c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8020a2e:	440b      	add	r3, r1
 8020a30:	429a      	cmp	r2, r3
 8020a32:	d019      	beq.n	8020a68 <tcp_receive+0xec0>
 8020a34:	4b23      	ldr	r3, [pc, #140]	@ (8020ac4 <tcp_receive+0xf1c>)
 8020a36:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8020a3a:	4923      	ldr	r1, [pc, #140]	@ (8020ac8 <tcp_receive+0xf20>)
 8020a3c:	4823      	ldr	r0, [pc, #140]	@ (8020acc <tcp_receive+0xf24>)
 8020a3e:	f005 ff2b 	bl	8026898 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8020a42:	e011      	b.n	8020a68 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8020a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020a46:	681b      	ldr	r3, [r3, #0]
 8020a48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020a4c:	2b00      	cmp	r3, #0
 8020a4e:	f47f aea5 	bne.w	802079c <tcp_receive+0xbf4>
 8020a52:	e00a      	b.n	8020a6a <tcp_receive+0xec2>
                break;
 8020a54:	bf00      	nop
 8020a56:	e008      	b.n	8020a6a <tcp_receive+0xec2>
                break;
 8020a58:	bf00      	nop
 8020a5a:	e006      	b.n	8020a6a <tcp_receive+0xec2>
                  break;
 8020a5c:	bf00      	nop
 8020a5e:	e004      	b.n	8020a6a <tcp_receive+0xec2>
                  break;
 8020a60:	bf00      	nop
 8020a62:	e002      	b.n	8020a6a <tcp_receive+0xec2>
                  break;
 8020a64:	bf00      	nop
 8020a66:	e000      	b.n	8020a6a <tcp_receive+0xec2>
                break;
 8020a68:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8020a6a:	6878      	ldr	r0, [r7, #4]
 8020a6c:	f001 fa30 	bl	8021ed0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8020a70:	e003      	b.n	8020a7a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8020a72:	6878      	ldr	r0, [r7, #4]
 8020a74:	f001 fa2c 	bl	8021ed0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8020a78:	e01a      	b.n	8020ab0 <tcp_receive+0xf08>
 8020a7a:	e019      	b.n	8020ab0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8020a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8020ab8 <tcp_receive+0xf10>)
 8020a7e:	681a      	ldr	r2, [r3, #0]
 8020a80:	687b      	ldr	r3, [r7, #4]
 8020a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020a84:	1ad3      	subs	r3, r2, r3
 8020a86:	2b00      	cmp	r3, #0
 8020a88:	db0a      	blt.n	8020aa0 <tcp_receive+0xef8>
 8020a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8020ab8 <tcp_receive+0xf10>)
 8020a8c:	681a      	ldr	r2, [r3, #0]
 8020a8e:	687b      	ldr	r3, [r7, #4]
 8020a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020a92:	6879      	ldr	r1, [r7, #4]
 8020a94:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8020a96:	440b      	add	r3, r1
 8020a98:	1ad3      	subs	r3, r2, r3
 8020a9a:	3301      	adds	r3, #1
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	dd07      	ble.n	8020ab0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8020aa0:	687b      	ldr	r3, [r7, #4]
 8020aa2:	8b5b      	ldrh	r3, [r3, #26]
 8020aa4:	f043 0302 	orr.w	r3, r3, #2
 8020aa8:	b29a      	uxth	r2, r3
 8020aaa:	687b      	ldr	r3, [r7, #4]
 8020aac:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8020aae:	e7ff      	b.n	8020ab0 <tcp_receive+0xf08>
 8020ab0:	bf00      	nop
 8020ab2:	3750      	adds	r7, #80	@ 0x50
 8020ab4:	46bd      	mov	sp, r7
 8020ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8020ab8:	2003c50c 	.word	0x2003c50c
 8020abc:	2003c4ec 	.word	0x2003c4ec
 8020ac0:	2003c516 	.word	0x2003c516
 8020ac4:	08029f40 	.word	0x08029f40
 8020ac8:	0802a2e8 	.word	0x0802a2e8
 8020acc:	08029f8c 	.word	0x08029f8c

08020ad0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8020ad0:	b480      	push	{r7}
 8020ad2:	b083      	sub	sp, #12
 8020ad4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8020ad6:	4b15      	ldr	r3, [pc, #84]	@ (8020b2c <tcp_get_next_optbyte+0x5c>)
 8020ad8:	881b      	ldrh	r3, [r3, #0]
 8020ada:	1c5a      	adds	r2, r3, #1
 8020adc:	b291      	uxth	r1, r2
 8020ade:	4a13      	ldr	r2, [pc, #76]	@ (8020b2c <tcp_get_next_optbyte+0x5c>)
 8020ae0:	8011      	strh	r1, [r2, #0]
 8020ae2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8020ae4:	4b12      	ldr	r3, [pc, #72]	@ (8020b30 <tcp_get_next_optbyte+0x60>)
 8020ae6:	681b      	ldr	r3, [r3, #0]
 8020ae8:	2b00      	cmp	r3, #0
 8020aea:	d004      	beq.n	8020af6 <tcp_get_next_optbyte+0x26>
 8020aec:	4b11      	ldr	r3, [pc, #68]	@ (8020b34 <tcp_get_next_optbyte+0x64>)
 8020aee:	881b      	ldrh	r3, [r3, #0]
 8020af0:	88fa      	ldrh	r2, [r7, #6]
 8020af2:	429a      	cmp	r2, r3
 8020af4:	d208      	bcs.n	8020b08 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8020af6:	4b10      	ldr	r3, [pc, #64]	@ (8020b38 <tcp_get_next_optbyte+0x68>)
 8020af8:	681b      	ldr	r3, [r3, #0]
 8020afa:	3314      	adds	r3, #20
 8020afc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8020afe:	88fb      	ldrh	r3, [r7, #6]
 8020b00:	683a      	ldr	r2, [r7, #0]
 8020b02:	4413      	add	r3, r2
 8020b04:	781b      	ldrb	r3, [r3, #0]
 8020b06:	e00b      	b.n	8020b20 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8020b08:	88fb      	ldrh	r3, [r7, #6]
 8020b0a:	b2da      	uxtb	r2, r3
 8020b0c:	4b09      	ldr	r3, [pc, #36]	@ (8020b34 <tcp_get_next_optbyte+0x64>)
 8020b0e:	881b      	ldrh	r3, [r3, #0]
 8020b10:	b2db      	uxtb	r3, r3
 8020b12:	1ad3      	subs	r3, r2, r3
 8020b14:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8020b16:	4b06      	ldr	r3, [pc, #24]	@ (8020b30 <tcp_get_next_optbyte+0x60>)
 8020b18:	681a      	ldr	r2, [r3, #0]
 8020b1a:	797b      	ldrb	r3, [r7, #5]
 8020b1c:	4413      	add	r3, r2
 8020b1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020b20:	4618      	mov	r0, r3
 8020b22:	370c      	adds	r7, #12
 8020b24:	46bd      	mov	sp, r7
 8020b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b2a:	4770      	bx	lr
 8020b2c:	2003c508 	.word	0x2003c508
 8020b30:	2003c504 	.word	0x2003c504
 8020b34:	2003c502 	.word	0x2003c502
 8020b38:	2003c4fc 	.word	0x2003c4fc

08020b3c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8020b3c:	b580      	push	{r7, lr}
 8020b3e:	b084      	sub	sp, #16
 8020b40:	af00      	add	r7, sp, #0
 8020b42:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	2b00      	cmp	r3, #0
 8020b48:	d106      	bne.n	8020b58 <tcp_parseopt+0x1c>
 8020b4a:	4b32      	ldr	r3, [pc, #200]	@ (8020c14 <tcp_parseopt+0xd8>)
 8020b4c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8020b50:	4931      	ldr	r1, [pc, #196]	@ (8020c18 <tcp_parseopt+0xdc>)
 8020b52:	4832      	ldr	r0, [pc, #200]	@ (8020c1c <tcp_parseopt+0xe0>)
 8020b54:	f005 fea0 	bl	8026898 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8020b58:	4b31      	ldr	r3, [pc, #196]	@ (8020c20 <tcp_parseopt+0xe4>)
 8020b5a:	881b      	ldrh	r3, [r3, #0]
 8020b5c:	2b00      	cmp	r3, #0
 8020b5e:	d056      	beq.n	8020c0e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8020b60:	4b30      	ldr	r3, [pc, #192]	@ (8020c24 <tcp_parseopt+0xe8>)
 8020b62:	2200      	movs	r2, #0
 8020b64:	801a      	strh	r2, [r3, #0]
 8020b66:	e046      	b.n	8020bf6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8020b68:	f7ff ffb2 	bl	8020ad0 <tcp_get_next_optbyte>
 8020b6c:	4603      	mov	r3, r0
 8020b6e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8020b70:	7bfb      	ldrb	r3, [r7, #15]
 8020b72:	2b02      	cmp	r3, #2
 8020b74:	d006      	beq.n	8020b84 <tcp_parseopt+0x48>
 8020b76:	2b02      	cmp	r3, #2
 8020b78:	dc2a      	bgt.n	8020bd0 <tcp_parseopt+0x94>
 8020b7a:	2b00      	cmp	r3, #0
 8020b7c:	d042      	beq.n	8020c04 <tcp_parseopt+0xc8>
 8020b7e:	2b01      	cmp	r3, #1
 8020b80:	d038      	beq.n	8020bf4 <tcp_parseopt+0xb8>
 8020b82:	e025      	b.n	8020bd0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8020b84:	f7ff ffa4 	bl	8020ad0 <tcp_get_next_optbyte>
 8020b88:	4603      	mov	r3, r0
 8020b8a:	2b04      	cmp	r3, #4
 8020b8c:	d13c      	bne.n	8020c08 <tcp_parseopt+0xcc>
 8020b8e:	4b25      	ldr	r3, [pc, #148]	@ (8020c24 <tcp_parseopt+0xe8>)
 8020b90:	881b      	ldrh	r3, [r3, #0]
 8020b92:	3301      	adds	r3, #1
 8020b94:	4a22      	ldr	r2, [pc, #136]	@ (8020c20 <tcp_parseopt+0xe4>)
 8020b96:	8812      	ldrh	r2, [r2, #0]
 8020b98:	4293      	cmp	r3, r2
 8020b9a:	da35      	bge.n	8020c08 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8020b9c:	f7ff ff98 	bl	8020ad0 <tcp_get_next_optbyte>
 8020ba0:	4603      	mov	r3, r0
 8020ba2:	021b      	lsls	r3, r3, #8
 8020ba4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8020ba6:	f7ff ff93 	bl	8020ad0 <tcp_get_next_optbyte>
 8020baa:	4603      	mov	r3, r0
 8020bac:	461a      	mov	r2, r3
 8020bae:	89bb      	ldrh	r3, [r7, #12]
 8020bb0:	4313      	orrs	r3, r2
 8020bb2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8020bb4:	89bb      	ldrh	r3, [r7, #12]
 8020bb6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8020bba:	d804      	bhi.n	8020bc6 <tcp_parseopt+0x8a>
 8020bbc:	89bb      	ldrh	r3, [r7, #12]
 8020bbe:	2b00      	cmp	r3, #0
 8020bc0:	d001      	beq.n	8020bc6 <tcp_parseopt+0x8a>
 8020bc2:	89ba      	ldrh	r2, [r7, #12]
 8020bc4:	e001      	b.n	8020bca <tcp_parseopt+0x8e>
 8020bc6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8020bce:	e012      	b.n	8020bf6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8020bd0:	f7ff ff7e 	bl	8020ad0 <tcp_get_next_optbyte>
 8020bd4:	4603      	mov	r3, r0
 8020bd6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8020bd8:	7afb      	ldrb	r3, [r7, #11]
 8020bda:	2b01      	cmp	r3, #1
 8020bdc:	d916      	bls.n	8020c0c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8020bde:	7afb      	ldrb	r3, [r7, #11]
 8020be0:	b29a      	uxth	r2, r3
 8020be2:	4b10      	ldr	r3, [pc, #64]	@ (8020c24 <tcp_parseopt+0xe8>)
 8020be4:	881b      	ldrh	r3, [r3, #0]
 8020be6:	4413      	add	r3, r2
 8020be8:	b29b      	uxth	r3, r3
 8020bea:	3b02      	subs	r3, #2
 8020bec:	b29a      	uxth	r2, r3
 8020bee:	4b0d      	ldr	r3, [pc, #52]	@ (8020c24 <tcp_parseopt+0xe8>)
 8020bf0:	801a      	strh	r2, [r3, #0]
 8020bf2:	e000      	b.n	8020bf6 <tcp_parseopt+0xba>
          break;
 8020bf4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8020bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8020c24 <tcp_parseopt+0xe8>)
 8020bf8:	881a      	ldrh	r2, [r3, #0]
 8020bfa:	4b09      	ldr	r3, [pc, #36]	@ (8020c20 <tcp_parseopt+0xe4>)
 8020bfc:	881b      	ldrh	r3, [r3, #0]
 8020bfe:	429a      	cmp	r2, r3
 8020c00:	d3b2      	bcc.n	8020b68 <tcp_parseopt+0x2c>
 8020c02:	e004      	b.n	8020c0e <tcp_parseopt+0xd2>
          return;
 8020c04:	bf00      	nop
 8020c06:	e002      	b.n	8020c0e <tcp_parseopt+0xd2>
            return;
 8020c08:	bf00      	nop
 8020c0a:	e000      	b.n	8020c0e <tcp_parseopt+0xd2>
            return;
 8020c0c:	bf00      	nop
      }
    }
  }
}
 8020c0e:	3710      	adds	r7, #16
 8020c10:	46bd      	mov	sp, r7
 8020c12:	bd80      	pop	{r7, pc}
 8020c14:	08029f40 	.word	0x08029f40
 8020c18:	0802a3a4 	.word	0x0802a3a4
 8020c1c:	08029f8c 	.word	0x08029f8c
 8020c20:	2003c500 	.word	0x2003c500
 8020c24:	2003c508 	.word	0x2003c508

08020c28 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8020c28:	b480      	push	{r7}
 8020c2a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8020c2c:	4b05      	ldr	r3, [pc, #20]	@ (8020c44 <tcp_trigger_input_pcb_close+0x1c>)
 8020c2e:	781b      	ldrb	r3, [r3, #0]
 8020c30:	f043 0310 	orr.w	r3, r3, #16
 8020c34:	b2da      	uxtb	r2, r3
 8020c36:	4b03      	ldr	r3, [pc, #12]	@ (8020c44 <tcp_trigger_input_pcb_close+0x1c>)
 8020c38:	701a      	strb	r2, [r3, #0]
}
 8020c3a:	bf00      	nop
 8020c3c:	46bd      	mov	sp, r7
 8020c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c42:	4770      	bx	lr
 8020c44:	2003c519 	.word	0x2003c519

08020c48 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8020c48:	b580      	push	{r7, lr}
 8020c4a:	b084      	sub	sp, #16
 8020c4c:	af00      	add	r7, sp, #0
 8020c4e:	60f8      	str	r0, [r7, #12]
 8020c50:	60b9      	str	r1, [r7, #8]
 8020c52:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8020c54:	68fb      	ldr	r3, [r7, #12]
 8020c56:	2b00      	cmp	r3, #0
 8020c58:	d00a      	beq.n	8020c70 <tcp_route+0x28>
 8020c5a:	68fb      	ldr	r3, [r7, #12]
 8020c5c:	7a1b      	ldrb	r3, [r3, #8]
 8020c5e:	2b00      	cmp	r3, #0
 8020c60:	d006      	beq.n	8020c70 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8020c62:	68fb      	ldr	r3, [r7, #12]
 8020c64:	7a1b      	ldrb	r3, [r3, #8]
 8020c66:	4618      	mov	r0, r3
 8020c68:	f7fb fb14 	bl	801c294 <netif_get_by_index>
 8020c6c:	4603      	mov	r3, r0
 8020c6e:	e003      	b.n	8020c78 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8020c70:	6878      	ldr	r0, [r7, #4]
 8020c72:	f003 fa01 	bl	8024078 <ip4_route>
 8020c76:	4603      	mov	r3, r0
  }
}
 8020c78:	4618      	mov	r0, r3
 8020c7a:	3710      	adds	r7, #16
 8020c7c:	46bd      	mov	sp, r7
 8020c7e:	bd80      	pop	{r7, pc}

08020c80 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8020c80:	b590      	push	{r4, r7, lr}
 8020c82:	b087      	sub	sp, #28
 8020c84:	af00      	add	r7, sp, #0
 8020c86:	60f8      	str	r0, [r7, #12]
 8020c88:	60b9      	str	r1, [r7, #8]
 8020c8a:	603b      	str	r3, [r7, #0]
 8020c8c:	4613      	mov	r3, r2
 8020c8e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8020c90:	68fb      	ldr	r3, [r7, #12]
 8020c92:	2b00      	cmp	r3, #0
 8020c94:	d105      	bne.n	8020ca2 <tcp_create_segment+0x22>
 8020c96:	4b43      	ldr	r3, [pc, #268]	@ (8020da4 <tcp_create_segment+0x124>)
 8020c98:	22a3      	movs	r2, #163	@ 0xa3
 8020c9a:	4943      	ldr	r1, [pc, #268]	@ (8020da8 <tcp_create_segment+0x128>)
 8020c9c:	4843      	ldr	r0, [pc, #268]	@ (8020dac <tcp_create_segment+0x12c>)
 8020c9e:	f005 fdfb 	bl	8026898 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8020ca2:	68bb      	ldr	r3, [r7, #8]
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	d105      	bne.n	8020cb4 <tcp_create_segment+0x34>
 8020ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8020da4 <tcp_create_segment+0x124>)
 8020caa:	22a4      	movs	r2, #164	@ 0xa4
 8020cac:	4940      	ldr	r1, [pc, #256]	@ (8020db0 <tcp_create_segment+0x130>)
 8020cae:	483f      	ldr	r0, [pc, #252]	@ (8020dac <tcp_create_segment+0x12c>)
 8020cb0:	f005 fdf2 	bl	8026898 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8020cb4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8020cb8:	009b      	lsls	r3, r3, #2
 8020cba:	b2db      	uxtb	r3, r3
 8020cbc:	f003 0304 	and.w	r3, r3, #4
 8020cc0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8020cc2:	2003      	movs	r0, #3
 8020cc4:	f7fa ff5a 	bl	801bb7c <memp_malloc>
 8020cc8:	6138      	str	r0, [r7, #16]
 8020cca:	693b      	ldr	r3, [r7, #16]
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d104      	bne.n	8020cda <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8020cd0:	68b8      	ldr	r0, [r7, #8]
 8020cd2:	f7fb fe6b 	bl	801c9ac <pbuf_free>
    return NULL;
 8020cd6:	2300      	movs	r3, #0
 8020cd8:	e060      	b.n	8020d9c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8020cda:	693b      	ldr	r3, [r7, #16]
 8020cdc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8020ce0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8020ce2:	693b      	ldr	r3, [r7, #16]
 8020ce4:	2200      	movs	r2, #0
 8020ce6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8020ce8:	693b      	ldr	r3, [r7, #16]
 8020cea:	68ba      	ldr	r2, [r7, #8]
 8020cec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8020cee:	68bb      	ldr	r3, [r7, #8]
 8020cf0:	891a      	ldrh	r2, [r3, #8]
 8020cf2:	7dfb      	ldrb	r3, [r7, #23]
 8020cf4:	b29b      	uxth	r3, r3
 8020cf6:	429a      	cmp	r2, r3
 8020cf8:	d205      	bcs.n	8020d06 <tcp_create_segment+0x86>
 8020cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8020da4 <tcp_create_segment+0x124>)
 8020cfc:	22b0      	movs	r2, #176	@ 0xb0
 8020cfe:	492d      	ldr	r1, [pc, #180]	@ (8020db4 <tcp_create_segment+0x134>)
 8020d00:	482a      	ldr	r0, [pc, #168]	@ (8020dac <tcp_create_segment+0x12c>)
 8020d02:	f005 fdc9 	bl	8026898 <iprintf>
  seg->len = p->tot_len - optlen;
 8020d06:	68bb      	ldr	r3, [r7, #8]
 8020d08:	891a      	ldrh	r2, [r3, #8]
 8020d0a:	7dfb      	ldrb	r3, [r7, #23]
 8020d0c:	b29b      	uxth	r3, r3
 8020d0e:	1ad3      	subs	r3, r2, r3
 8020d10:	b29a      	uxth	r2, r3
 8020d12:	693b      	ldr	r3, [r7, #16]
 8020d14:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8020d16:	2114      	movs	r1, #20
 8020d18:	68b8      	ldr	r0, [r7, #8]
 8020d1a:	f7fb fdb1 	bl	801c880 <pbuf_add_header>
 8020d1e:	4603      	mov	r3, r0
 8020d20:	2b00      	cmp	r3, #0
 8020d22:	d004      	beq.n	8020d2e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8020d24:	6938      	ldr	r0, [r7, #16]
 8020d26:	f7fd f8d2 	bl	801dece <tcp_seg_free>
    return NULL;
 8020d2a:	2300      	movs	r3, #0
 8020d2c:	e036      	b.n	8020d9c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8020d2e:	693b      	ldr	r3, [r7, #16]
 8020d30:	685b      	ldr	r3, [r3, #4]
 8020d32:	685a      	ldr	r2, [r3, #4]
 8020d34:	693b      	ldr	r3, [r7, #16]
 8020d36:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8020d38:	68fb      	ldr	r3, [r7, #12]
 8020d3a:	8ada      	ldrh	r2, [r3, #22]
 8020d3c:	693b      	ldr	r3, [r7, #16]
 8020d3e:	68dc      	ldr	r4, [r3, #12]
 8020d40:	4610      	mov	r0, r2
 8020d42:	f7fa f999 	bl	801b078 <lwip_htons>
 8020d46:	4603      	mov	r3, r0
 8020d48:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8020d4a:	68fb      	ldr	r3, [r7, #12]
 8020d4c:	8b1a      	ldrh	r2, [r3, #24]
 8020d4e:	693b      	ldr	r3, [r7, #16]
 8020d50:	68dc      	ldr	r4, [r3, #12]
 8020d52:	4610      	mov	r0, r2
 8020d54:	f7fa f990 	bl	801b078 <lwip_htons>
 8020d58:	4603      	mov	r3, r0
 8020d5a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8020d5c:	693b      	ldr	r3, [r7, #16]
 8020d5e:	68dc      	ldr	r4, [r3, #12]
 8020d60:	6838      	ldr	r0, [r7, #0]
 8020d62:	f7fa f99e 	bl	801b0a2 <lwip_htonl>
 8020d66:	4603      	mov	r3, r0
 8020d68:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8020d6a:	7dfb      	ldrb	r3, [r7, #23]
 8020d6c:	089b      	lsrs	r3, r3, #2
 8020d6e:	b2db      	uxtb	r3, r3
 8020d70:	3305      	adds	r3, #5
 8020d72:	b29b      	uxth	r3, r3
 8020d74:	031b      	lsls	r3, r3, #12
 8020d76:	b29a      	uxth	r2, r3
 8020d78:	79fb      	ldrb	r3, [r7, #7]
 8020d7a:	b29b      	uxth	r3, r3
 8020d7c:	4313      	orrs	r3, r2
 8020d7e:	b29a      	uxth	r2, r3
 8020d80:	693b      	ldr	r3, [r7, #16]
 8020d82:	68dc      	ldr	r4, [r3, #12]
 8020d84:	4610      	mov	r0, r2
 8020d86:	f7fa f977 	bl	801b078 <lwip_htons>
 8020d8a:	4603      	mov	r3, r0
 8020d8c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8020d8e:	693b      	ldr	r3, [r7, #16]
 8020d90:	68db      	ldr	r3, [r3, #12]
 8020d92:	2200      	movs	r2, #0
 8020d94:	749a      	strb	r2, [r3, #18]
 8020d96:	2200      	movs	r2, #0
 8020d98:	74da      	strb	r2, [r3, #19]
  return seg;
 8020d9a:	693b      	ldr	r3, [r7, #16]
}
 8020d9c:	4618      	mov	r0, r3
 8020d9e:	371c      	adds	r7, #28
 8020da0:	46bd      	mov	sp, r7
 8020da2:	bd90      	pop	{r4, r7, pc}
 8020da4:	0802a3c0 	.word	0x0802a3c0
 8020da8:	0802a3f4 	.word	0x0802a3f4
 8020dac:	0802a414 	.word	0x0802a414
 8020db0:	0802a43c 	.word	0x0802a43c
 8020db4:	0802a460 	.word	0x0802a460

08020db8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8020db8:	b590      	push	{r4, r7, lr}
 8020dba:	b08b      	sub	sp, #44	@ 0x2c
 8020dbc:	af02      	add	r7, sp, #8
 8020dbe:	6078      	str	r0, [r7, #4]
 8020dc0:	460b      	mov	r3, r1
 8020dc2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8020dc4:	2300      	movs	r3, #0
 8020dc6:	61fb      	str	r3, [r7, #28]
 8020dc8:	2300      	movs	r3, #0
 8020dca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8020dcc:	2300      	movs	r3, #0
 8020dce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8020dd0:	687b      	ldr	r3, [r7, #4]
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	d106      	bne.n	8020de4 <tcp_split_unsent_seg+0x2c>
 8020dd6:	4b95      	ldr	r3, [pc, #596]	@ (802102c <tcp_split_unsent_seg+0x274>)
 8020dd8:	f240 324b 	movw	r2, #843	@ 0x34b
 8020ddc:	4994      	ldr	r1, [pc, #592]	@ (8021030 <tcp_split_unsent_seg+0x278>)
 8020dde:	4895      	ldr	r0, [pc, #596]	@ (8021034 <tcp_split_unsent_seg+0x27c>)
 8020de0:	f005 fd5a 	bl	8026898 <iprintf>

  useg = pcb->unsent;
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020de8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8020dea:	697b      	ldr	r3, [r7, #20]
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	d102      	bne.n	8020df6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8020df0:	f04f 33ff 	mov.w	r3, #4294967295
 8020df4:	e116      	b.n	8021024 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8020df6:	887b      	ldrh	r3, [r7, #2]
 8020df8:	2b00      	cmp	r3, #0
 8020dfa:	d109      	bne.n	8020e10 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8020dfc:	4b8b      	ldr	r3, [pc, #556]	@ (802102c <tcp_split_unsent_seg+0x274>)
 8020dfe:	f240 3253 	movw	r2, #851	@ 0x353
 8020e02:	498d      	ldr	r1, [pc, #564]	@ (8021038 <tcp_split_unsent_seg+0x280>)
 8020e04:	488b      	ldr	r0, [pc, #556]	@ (8021034 <tcp_split_unsent_seg+0x27c>)
 8020e06:	f005 fd47 	bl	8026898 <iprintf>
    return ERR_VAL;
 8020e0a:	f06f 0305 	mvn.w	r3, #5
 8020e0e:	e109      	b.n	8021024 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8020e10:	697b      	ldr	r3, [r7, #20]
 8020e12:	891b      	ldrh	r3, [r3, #8]
 8020e14:	887a      	ldrh	r2, [r7, #2]
 8020e16:	429a      	cmp	r2, r3
 8020e18:	d301      	bcc.n	8020e1e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8020e1a:	2300      	movs	r3, #0
 8020e1c:	e102      	b.n	8021024 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8020e1e:	687b      	ldr	r3, [r7, #4]
 8020e20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020e22:	887a      	ldrh	r2, [r7, #2]
 8020e24:	429a      	cmp	r2, r3
 8020e26:	d906      	bls.n	8020e36 <tcp_split_unsent_seg+0x7e>
 8020e28:	4b80      	ldr	r3, [pc, #512]	@ (802102c <tcp_split_unsent_seg+0x274>)
 8020e2a:	f240 325b 	movw	r2, #859	@ 0x35b
 8020e2e:	4983      	ldr	r1, [pc, #524]	@ (802103c <tcp_split_unsent_seg+0x284>)
 8020e30:	4880      	ldr	r0, [pc, #512]	@ (8021034 <tcp_split_unsent_seg+0x27c>)
 8020e32:	f005 fd31 	bl	8026898 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8020e36:	697b      	ldr	r3, [r7, #20]
 8020e38:	891b      	ldrh	r3, [r3, #8]
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d106      	bne.n	8020e4c <tcp_split_unsent_seg+0x94>
 8020e3e:	4b7b      	ldr	r3, [pc, #492]	@ (802102c <tcp_split_unsent_seg+0x274>)
 8020e40:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8020e44:	497e      	ldr	r1, [pc, #504]	@ (8021040 <tcp_split_unsent_seg+0x288>)
 8020e46:	487b      	ldr	r0, [pc, #492]	@ (8021034 <tcp_split_unsent_seg+0x27c>)
 8020e48:	f005 fd26 	bl	8026898 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8020e4c:	697b      	ldr	r3, [r7, #20]
 8020e4e:	7a9b      	ldrb	r3, [r3, #10]
 8020e50:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8020e52:	7bfb      	ldrb	r3, [r7, #15]
 8020e54:	009b      	lsls	r3, r3, #2
 8020e56:	b2db      	uxtb	r3, r3
 8020e58:	f003 0304 	and.w	r3, r3, #4
 8020e5c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8020e5e:	697b      	ldr	r3, [r7, #20]
 8020e60:	891a      	ldrh	r2, [r3, #8]
 8020e62:	887b      	ldrh	r3, [r7, #2]
 8020e64:	1ad3      	subs	r3, r2, r3
 8020e66:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8020e68:	7bbb      	ldrb	r3, [r7, #14]
 8020e6a:	b29a      	uxth	r2, r3
 8020e6c:	89bb      	ldrh	r3, [r7, #12]
 8020e6e:	4413      	add	r3, r2
 8020e70:	b29b      	uxth	r3, r3
 8020e72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8020e76:	4619      	mov	r1, r3
 8020e78:	2036      	movs	r0, #54	@ 0x36
 8020e7a:	f7fb fab5 	bl	801c3e8 <pbuf_alloc>
 8020e7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8020e80:	693b      	ldr	r3, [r7, #16]
 8020e82:	2b00      	cmp	r3, #0
 8020e84:	f000 80b7 	beq.w	8020ff6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8020e88:	697b      	ldr	r3, [r7, #20]
 8020e8a:	685b      	ldr	r3, [r3, #4]
 8020e8c:	891a      	ldrh	r2, [r3, #8]
 8020e8e:	697b      	ldr	r3, [r7, #20]
 8020e90:	891b      	ldrh	r3, [r3, #8]
 8020e92:	1ad3      	subs	r3, r2, r3
 8020e94:	b29a      	uxth	r2, r3
 8020e96:	887b      	ldrh	r3, [r7, #2]
 8020e98:	4413      	add	r3, r2
 8020e9a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8020e9c:	697b      	ldr	r3, [r7, #20]
 8020e9e:	6858      	ldr	r0, [r3, #4]
 8020ea0:	693b      	ldr	r3, [r7, #16]
 8020ea2:	685a      	ldr	r2, [r3, #4]
 8020ea4:	7bbb      	ldrb	r3, [r7, #14]
 8020ea6:	18d1      	adds	r1, r2, r3
 8020ea8:	897b      	ldrh	r3, [r7, #10]
 8020eaa:	89ba      	ldrh	r2, [r7, #12]
 8020eac:	f7fb ff84 	bl	801cdb8 <pbuf_copy_partial>
 8020eb0:	4603      	mov	r3, r0
 8020eb2:	461a      	mov	r2, r3
 8020eb4:	89bb      	ldrh	r3, [r7, #12]
 8020eb6:	4293      	cmp	r3, r2
 8020eb8:	f040 809f 	bne.w	8020ffa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8020ebc:	697b      	ldr	r3, [r7, #20]
 8020ebe:	68db      	ldr	r3, [r3, #12]
 8020ec0:	899b      	ldrh	r3, [r3, #12]
 8020ec2:	b29b      	uxth	r3, r3
 8020ec4:	4618      	mov	r0, r3
 8020ec6:	f7fa f8d7 	bl	801b078 <lwip_htons>
 8020eca:	4603      	mov	r3, r0
 8020ecc:	b2db      	uxtb	r3, r3
 8020ece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020ed2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8020ed4:	2300      	movs	r3, #0
 8020ed6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8020ed8:	7efb      	ldrb	r3, [r7, #27]
 8020eda:	f003 0308 	and.w	r3, r3, #8
 8020ede:	2b00      	cmp	r3, #0
 8020ee0:	d007      	beq.n	8020ef2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8020ee2:	7efb      	ldrb	r3, [r7, #27]
 8020ee4:	f023 0308 	bic.w	r3, r3, #8
 8020ee8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8020eea:	7ebb      	ldrb	r3, [r7, #26]
 8020eec:	f043 0308 	orr.w	r3, r3, #8
 8020ef0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8020ef2:	7efb      	ldrb	r3, [r7, #27]
 8020ef4:	f003 0301 	and.w	r3, r3, #1
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	d007      	beq.n	8020f0c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8020efc:	7efb      	ldrb	r3, [r7, #27]
 8020efe:	f023 0301 	bic.w	r3, r3, #1
 8020f02:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8020f04:	7ebb      	ldrb	r3, [r7, #26]
 8020f06:	f043 0301 	orr.w	r3, r3, #1
 8020f0a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8020f0c:	697b      	ldr	r3, [r7, #20]
 8020f0e:	68db      	ldr	r3, [r3, #12]
 8020f10:	685b      	ldr	r3, [r3, #4]
 8020f12:	4618      	mov	r0, r3
 8020f14:	f7fa f8c5 	bl	801b0a2 <lwip_htonl>
 8020f18:	4602      	mov	r2, r0
 8020f1a:	887b      	ldrh	r3, [r7, #2]
 8020f1c:	18d1      	adds	r1, r2, r3
 8020f1e:	7eba      	ldrb	r2, [r7, #26]
 8020f20:	7bfb      	ldrb	r3, [r7, #15]
 8020f22:	9300      	str	r3, [sp, #0]
 8020f24:	460b      	mov	r3, r1
 8020f26:	6939      	ldr	r1, [r7, #16]
 8020f28:	6878      	ldr	r0, [r7, #4]
 8020f2a:	f7ff fea9 	bl	8020c80 <tcp_create_segment>
 8020f2e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8020f30:	69fb      	ldr	r3, [r7, #28]
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	d063      	beq.n	8020ffe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8020f36:	697b      	ldr	r3, [r7, #20]
 8020f38:	685b      	ldr	r3, [r3, #4]
 8020f3a:	4618      	mov	r0, r3
 8020f3c:	f7fb fdc4 	bl	801cac8 <pbuf_clen>
 8020f40:	4603      	mov	r3, r0
 8020f42:	461a      	mov	r2, r3
 8020f44:	687b      	ldr	r3, [r7, #4]
 8020f46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020f4a:	1a9b      	subs	r3, r3, r2
 8020f4c:	b29a      	uxth	r2, r3
 8020f4e:	687b      	ldr	r3, [r7, #4]
 8020f50:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020f54:	697b      	ldr	r3, [r7, #20]
 8020f56:	6858      	ldr	r0, [r3, #4]
 8020f58:	697b      	ldr	r3, [r7, #20]
 8020f5a:	685b      	ldr	r3, [r3, #4]
 8020f5c:	891a      	ldrh	r2, [r3, #8]
 8020f5e:	89bb      	ldrh	r3, [r7, #12]
 8020f60:	1ad3      	subs	r3, r2, r3
 8020f62:	b29b      	uxth	r3, r3
 8020f64:	4619      	mov	r1, r3
 8020f66:	f7fb fb9d 	bl	801c6a4 <pbuf_realloc>
  useg->len -= remainder;
 8020f6a:	697b      	ldr	r3, [r7, #20]
 8020f6c:	891a      	ldrh	r2, [r3, #8]
 8020f6e:	89bb      	ldrh	r3, [r7, #12]
 8020f70:	1ad3      	subs	r3, r2, r3
 8020f72:	b29a      	uxth	r2, r3
 8020f74:	697b      	ldr	r3, [r7, #20]
 8020f76:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020f78:	697b      	ldr	r3, [r7, #20]
 8020f7a:	68db      	ldr	r3, [r3, #12]
 8020f7c:	899b      	ldrh	r3, [r3, #12]
 8020f7e:	b29c      	uxth	r4, r3
 8020f80:	7efb      	ldrb	r3, [r7, #27]
 8020f82:	b29b      	uxth	r3, r3
 8020f84:	4618      	mov	r0, r3
 8020f86:	f7fa f877 	bl	801b078 <lwip_htons>
 8020f8a:	4603      	mov	r3, r0
 8020f8c:	461a      	mov	r2, r3
 8020f8e:	697b      	ldr	r3, [r7, #20]
 8020f90:	68db      	ldr	r3, [r3, #12]
 8020f92:	4322      	orrs	r2, r4
 8020f94:	b292      	uxth	r2, r2
 8020f96:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8020f98:	697b      	ldr	r3, [r7, #20]
 8020f9a:	685b      	ldr	r3, [r3, #4]
 8020f9c:	4618      	mov	r0, r3
 8020f9e:	f7fb fd93 	bl	801cac8 <pbuf_clen>
 8020fa2:	4603      	mov	r3, r0
 8020fa4:	461a      	mov	r2, r3
 8020fa6:	687b      	ldr	r3, [r7, #4]
 8020fa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020fac:	4413      	add	r3, r2
 8020fae:	b29a      	uxth	r2, r3
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020fb6:	69fb      	ldr	r3, [r7, #28]
 8020fb8:	685b      	ldr	r3, [r3, #4]
 8020fba:	4618      	mov	r0, r3
 8020fbc:	f7fb fd84 	bl	801cac8 <pbuf_clen>
 8020fc0:	4603      	mov	r3, r0
 8020fc2:	461a      	mov	r2, r3
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020fca:	4413      	add	r3, r2
 8020fcc:	b29a      	uxth	r2, r3
 8020fce:	687b      	ldr	r3, [r7, #4]
 8020fd0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8020fd4:	697b      	ldr	r3, [r7, #20]
 8020fd6:	681a      	ldr	r2, [r3, #0]
 8020fd8:	69fb      	ldr	r3, [r7, #28]
 8020fda:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8020fdc:	697b      	ldr	r3, [r7, #20]
 8020fde:	69fa      	ldr	r2, [r7, #28]
 8020fe0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8020fe2:	69fb      	ldr	r3, [r7, #28]
 8020fe4:	681b      	ldr	r3, [r3, #0]
 8020fe6:	2b00      	cmp	r3, #0
 8020fe8:	d103      	bne.n	8020ff2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	2200      	movs	r2, #0
 8020fee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8020ff2:	2300      	movs	r3, #0
 8020ff4:	e016      	b.n	8021024 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8020ff6:	bf00      	nop
 8020ff8:	e002      	b.n	8021000 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8020ffa:	bf00      	nop
 8020ffc:	e000      	b.n	8021000 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8020ffe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8021000:	69fb      	ldr	r3, [r7, #28]
 8021002:	2b00      	cmp	r3, #0
 8021004:	d006      	beq.n	8021014 <tcp_split_unsent_seg+0x25c>
 8021006:	4b09      	ldr	r3, [pc, #36]	@ (802102c <tcp_split_unsent_seg+0x274>)
 8021008:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 802100c:	490d      	ldr	r1, [pc, #52]	@ (8021044 <tcp_split_unsent_seg+0x28c>)
 802100e:	4809      	ldr	r0, [pc, #36]	@ (8021034 <tcp_split_unsent_seg+0x27c>)
 8021010:	f005 fc42 	bl	8026898 <iprintf>
  if (p != NULL) {
 8021014:	693b      	ldr	r3, [r7, #16]
 8021016:	2b00      	cmp	r3, #0
 8021018:	d002      	beq.n	8021020 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 802101a:	6938      	ldr	r0, [r7, #16]
 802101c:	f7fb fcc6 	bl	801c9ac <pbuf_free>
  }

  return ERR_MEM;
 8021020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021024:	4618      	mov	r0, r3
 8021026:	3724      	adds	r7, #36	@ 0x24
 8021028:	46bd      	mov	sp, r7
 802102a:	bd90      	pop	{r4, r7, pc}
 802102c:	0802a3c0 	.word	0x0802a3c0
 8021030:	0802a754 	.word	0x0802a754
 8021034:	0802a414 	.word	0x0802a414
 8021038:	0802a778 	.word	0x0802a778
 802103c:	0802a79c 	.word	0x0802a79c
 8021040:	0802a7ac 	.word	0x0802a7ac
 8021044:	0802a7bc 	.word	0x0802a7bc

08021048 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8021048:	b590      	push	{r4, r7, lr}
 802104a:	b085      	sub	sp, #20
 802104c:	af00      	add	r7, sp, #0
 802104e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	2b00      	cmp	r3, #0
 8021054:	d106      	bne.n	8021064 <tcp_send_fin+0x1c>
 8021056:	4b21      	ldr	r3, [pc, #132]	@ (80210dc <tcp_send_fin+0x94>)
 8021058:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 802105c:	4920      	ldr	r1, [pc, #128]	@ (80210e0 <tcp_send_fin+0x98>)
 802105e:	4821      	ldr	r0, [pc, #132]	@ (80210e4 <tcp_send_fin+0x9c>)
 8021060:	f005 fc1a 	bl	8026898 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8021064:	687b      	ldr	r3, [r7, #4]
 8021066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021068:	2b00      	cmp	r3, #0
 802106a:	d02e      	beq.n	80210ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802106c:	687b      	ldr	r3, [r7, #4]
 802106e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021070:	60fb      	str	r3, [r7, #12]
 8021072:	e002      	b.n	802107a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8021074:	68fb      	ldr	r3, [r7, #12]
 8021076:	681b      	ldr	r3, [r3, #0]
 8021078:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802107a:	68fb      	ldr	r3, [r7, #12]
 802107c:	681b      	ldr	r3, [r3, #0]
 802107e:	2b00      	cmp	r3, #0
 8021080:	d1f8      	bne.n	8021074 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8021082:	68fb      	ldr	r3, [r7, #12]
 8021084:	68db      	ldr	r3, [r3, #12]
 8021086:	899b      	ldrh	r3, [r3, #12]
 8021088:	b29b      	uxth	r3, r3
 802108a:	4618      	mov	r0, r3
 802108c:	f7f9 fff4 	bl	801b078 <lwip_htons>
 8021090:	4603      	mov	r3, r0
 8021092:	b2db      	uxtb	r3, r3
 8021094:	f003 0307 	and.w	r3, r3, #7
 8021098:	2b00      	cmp	r3, #0
 802109a:	d116      	bne.n	80210ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 802109c:	68fb      	ldr	r3, [r7, #12]
 802109e:	68db      	ldr	r3, [r3, #12]
 80210a0:	899b      	ldrh	r3, [r3, #12]
 80210a2:	b29c      	uxth	r4, r3
 80210a4:	2001      	movs	r0, #1
 80210a6:	f7f9 ffe7 	bl	801b078 <lwip_htons>
 80210aa:	4603      	mov	r3, r0
 80210ac:	461a      	mov	r2, r3
 80210ae:	68fb      	ldr	r3, [r7, #12]
 80210b0:	68db      	ldr	r3, [r3, #12]
 80210b2:	4322      	orrs	r2, r4
 80210b4:	b292      	uxth	r2, r2
 80210b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80210b8:	687b      	ldr	r3, [r7, #4]
 80210ba:	8b5b      	ldrh	r3, [r3, #26]
 80210bc:	f043 0320 	orr.w	r3, r3, #32
 80210c0:	b29a      	uxth	r2, r3
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80210c6:	2300      	movs	r3, #0
 80210c8:	e004      	b.n	80210d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80210ca:	2101      	movs	r1, #1
 80210cc:	6878      	ldr	r0, [r7, #4]
 80210ce:	f000 f80b 	bl	80210e8 <tcp_enqueue_flags>
 80210d2:	4603      	mov	r3, r0
}
 80210d4:	4618      	mov	r0, r3
 80210d6:	3714      	adds	r7, #20
 80210d8:	46bd      	mov	sp, r7
 80210da:	bd90      	pop	{r4, r7, pc}
 80210dc:	0802a3c0 	.word	0x0802a3c0
 80210e0:	0802a7c8 	.word	0x0802a7c8
 80210e4:	0802a414 	.word	0x0802a414

080210e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80210e8:	b580      	push	{r7, lr}
 80210ea:	b08a      	sub	sp, #40	@ 0x28
 80210ec:	af02      	add	r7, sp, #8
 80210ee:	6078      	str	r0, [r7, #4]
 80210f0:	460b      	mov	r3, r1
 80210f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80210f4:	2300      	movs	r3, #0
 80210f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80210f8:	2300      	movs	r3, #0
 80210fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80210fc:	78fb      	ldrb	r3, [r7, #3]
 80210fe:	f003 0303 	and.w	r3, r3, #3
 8021102:	2b00      	cmp	r3, #0
 8021104:	d106      	bne.n	8021114 <tcp_enqueue_flags+0x2c>
 8021106:	4b67      	ldr	r3, [pc, #412]	@ (80212a4 <tcp_enqueue_flags+0x1bc>)
 8021108:	f240 4211 	movw	r2, #1041	@ 0x411
 802110c:	4966      	ldr	r1, [pc, #408]	@ (80212a8 <tcp_enqueue_flags+0x1c0>)
 802110e:	4867      	ldr	r0, [pc, #412]	@ (80212ac <tcp_enqueue_flags+0x1c4>)
 8021110:	f005 fbc2 	bl	8026898 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8021114:	687b      	ldr	r3, [r7, #4]
 8021116:	2b00      	cmp	r3, #0
 8021118:	d106      	bne.n	8021128 <tcp_enqueue_flags+0x40>
 802111a:	4b62      	ldr	r3, [pc, #392]	@ (80212a4 <tcp_enqueue_flags+0x1bc>)
 802111c:	f240 4213 	movw	r2, #1043	@ 0x413
 8021120:	4963      	ldr	r1, [pc, #396]	@ (80212b0 <tcp_enqueue_flags+0x1c8>)
 8021122:	4862      	ldr	r0, [pc, #392]	@ (80212ac <tcp_enqueue_flags+0x1c4>)
 8021124:	f005 fbb8 	bl	8026898 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8021128:	78fb      	ldrb	r3, [r7, #3]
 802112a:	f003 0302 	and.w	r3, r3, #2
 802112e:	2b00      	cmp	r3, #0
 8021130:	d001      	beq.n	8021136 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8021132:	2301      	movs	r3, #1
 8021134:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8021136:	7ffb      	ldrb	r3, [r7, #31]
 8021138:	009b      	lsls	r3, r3, #2
 802113a:	b2db      	uxtb	r3, r3
 802113c:	f003 0304 	and.w	r3, r3, #4
 8021140:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8021142:	7dfb      	ldrb	r3, [r7, #23]
 8021144:	b29b      	uxth	r3, r3
 8021146:	f44f 7220 	mov.w	r2, #640	@ 0x280
 802114a:	4619      	mov	r1, r3
 802114c:	2036      	movs	r0, #54	@ 0x36
 802114e:	f7fb f94b 	bl	801c3e8 <pbuf_alloc>
 8021152:	6138      	str	r0, [r7, #16]
 8021154:	693b      	ldr	r3, [r7, #16]
 8021156:	2b00      	cmp	r3, #0
 8021158:	d109      	bne.n	802116e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 802115a:	687b      	ldr	r3, [r7, #4]
 802115c:	8b5b      	ldrh	r3, [r3, #26]
 802115e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021162:	b29a      	uxth	r2, r3
 8021164:	687b      	ldr	r3, [r7, #4]
 8021166:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8021168:	f04f 33ff 	mov.w	r3, #4294967295
 802116c:	e095      	b.n	802129a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 802116e:	693b      	ldr	r3, [r7, #16]
 8021170:	895a      	ldrh	r2, [r3, #10]
 8021172:	7dfb      	ldrb	r3, [r7, #23]
 8021174:	b29b      	uxth	r3, r3
 8021176:	429a      	cmp	r2, r3
 8021178:	d206      	bcs.n	8021188 <tcp_enqueue_flags+0xa0>
 802117a:	4b4a      	ldr	r3, [pc, #296]	@ (80212a4 <tcp_enqueue_flags+0x1bc>)
 802117c:	f240 4239 	movw	r2, #1081	@ 0x439
 8021180:	494c      	ldr	r1, [pc, #304]	@ (80212b4 <tcp_enqueue_flags+0x1cc>)
 8021182:	484a      	ldr	r0, [pc, #296]	@ (80212ac <tcp_enqueue_flags+0x1c4>)
 8021184:	f005 fb88 	bl	8026898 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8021188:	687b      	ldr	r3, [r7, #4]
 802118a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 802118c:	78fa      	ldrb	r2, [r7, #3]
 802118e:	7ffb      	ldrb	r3, [r7, #31]
 8021190:	9300      	str	r3, [sp, #0]
 8021192:	460b      	mov	r3, r1
 8021194:	6939      	ldr	r1, [r7, #16]
 8021196:	6878      	ldr	r0, [r7, #4]
 8021198:	f7ff fd72 	bl	8020c80 <tcp_create_segment>
 802119c:	60f8      	str	r0, [r7, #12]
 802119e:	68fb      	ldr	r3, [r7, #12]
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	d109      	bne.n	80211b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	8b5b      	ldrh	r3, [r3, #26]
 80211a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80211ac:	b29a      	uxth	r2, r3
 80211ae:	687b      	ldr	r3, [r7, #4]
 80211b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80211b2:	f04f 33ff 	mov.w	r3, #4294967295
 80211b6:	e070      	b.n	802129a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80211b8:	68fb      	ldr	r3, [r7, #12]
 80211ba:	68db      	ldr	r3, [r3, #12]
 80211bc:	f003 0303 	and.w	r3, r3, #3
 80211c0:	2b00      	cmp	r3, #0
 80211c2:	d006      	beq.n	80211d2 <tcp_enqueue_flags+0xea>
 80211c4:	4b37      	ldr	r3, [pc, #220]	@ (80212a4 <tcp_enqueue_flags+0x1bc>)
 80211c6:	f240 4242 	movw	r2, #1090	@ 0x442
 80211ca:	493b      	ldr	r1, [pc, #236]	@ (80212b8 <tcp_enqueue_flags+0x1d0>)
 80211cc:	4837      	ldr	r0, [pc, #220]	@ (80212ac <tcp_enqueue_flags+0x1c4>)
 80211ce:	f005 fb63 	bl	8026898 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80211d2:	68fb      	ldr	r3, [r7, #12]
 80211d4:	891b      	ldrh	r3, [r3, #8]
 80211d6:	2b00      	cmp	r3, #0
 80211d8:	d006      	beq.n	80211e8 <tcp_enqueue_flags+0x100>
 80211da:	4b32      	ldr	r3, [pc, #200]	@ (80212a4 <tcp_enqueue_flags+0x1bc>)
 80211dc:	f240 4243 	movw	r2, #1091	@ 0x443
 80211e0:	4936      	ldr	r1, [pc, #216]	@ (80212bc <tcp_enqueue_flags+0x1d4>)
 80211e2:	4832      	ldr	r0, [pc, #200]	@ (80212ac <tcp_enqueue_flags+0x1c4>)
 80211e4:	f005 fb58 	bl	8026898 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80211e8:	687b      	ldr	r3, [r7, #4]
 80211ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80211ec:	2b00      	cmp	r3, #0
 80211ee:	d103      	bne.n	80211f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	68fa      	ldr	r2, [r7, #12]
 80211f4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80211f6:	e00d      	b.n	8021214 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80211f8:	687b      	ldr	r3, [r7, #4]
 80211fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80211fc:	61bb      	str	r3, [r7, #24]
 80211fe:	e002      	b.n	8021206 <tcp_enqueue_flags+0x11e>
 8021200:	69bb      	ldr	r3, [r7, #24]
 8021202:	681b      	ldr	r3, [r3, #0]
 8021204:	61bb      	str	r3, [r7, #24]
 8021206:	69bb      	ldr	r3, [r7, #24]
 8021208:	681b      	ldr	r3, [r3, #0]
 802120a:	2b00      	cmp	r3, #0
 802120c:	d1f8      	bne.n	8021200 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 802120e:	69bb      	ldr	r3, [r7, #24]
 8021210:	68fa      	ldr	r2, [r7, #12]
 8021212:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8021214:	687b      	ldr	r3, [r7, #4]
 8021216:	2200      	movs	r2, #0
 8021218:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 802121c:	78fb      	ldrb	r3, [r7, #3]
 802121e:	f003 0302 	and.w	r3, r3, #2
 8021222:	2b00      	cmp	r3, #0
 8021224:	d104      	bne.n	8021230 <tcp_enqueue_flags+0x148>
 8021226:	78fb      	ldrb	r3, [r7, #3]
 8021228:	f003 0301 	and.w	r3, r3, #1
 802122c:	2b00      	cmp	r3, #0
 802122e:	d004      	beq.n	802123a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8021230:	687b      	ldr	r3, [r7, #4]
 8021232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8021234:	1c5a      	adds	r2, r3, #1
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 802123a:	78fb      	ldrb	r3, [r7, #3]
 802123c:	f003 0301 	and.w	r3, r3, #1
 8021240:	2b00      	cmp	r3, #0
 8021242:	d006      	beq.n	8021252 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	8b5b      	ldrh	r3, [r3, #26]
 8021248:	f043 0320 	orr.w	r3, r3, #32
 802124c:	b29a      	uxth	r2, r3
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8021252:	68fb      	ldr	r3, [r7, #12]
 8021254:	685b      	ldr	r3, [r3, #4]
 8021256:	4618      	mov	r0, r3
 8021258:	f7fb fc36 	bl	801cac8 <pbuf_clen>
 802125c:	4603      	mov	r3, r0
 802125e:	461a      	mov	r2, r3
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8021266:	4413      	add	r3, r2
 8021268:	b29a      	uxth	r2, r3
 802126a:	687b      	ldr	r3, [r7, #4]
 802126c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8021270:	687b      	ldr	r3, [r7, #4]
 8021272:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8021276:	2b00      	cmp	r3, #0
 8021278:	d00e      	beq.n	8021298 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 802127a:	687b      	ldr	r3, [r7, #4]
 802127c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802127e:	2b00      	cmp	r3, #0
 8021280:	d10a      	bne.n	8021298 <tcp_enqueue_flags+0x1b0>
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021286:	2b00      	cmp	r3, #0
 8021288:	d106      	bne.n	8021298 <tcp_enqueue_flags+0x1b0>
 802128a:	4b06      	ldr	r3, [pc, #24]	@ (80212a4 <tcp_enqueue_flags+0x1bc>)
 802128c:	f240 4265 	movw	r2, #1125	@ 0x465
 8021290:	490b      	ldr	r1, [pc, #44]	@ (80212c0 <tcp_enqueue_flags+0x1d8>)
 8021292:	4806      	ldr	r0, [pc, #24]	@ (80212ac <tcp_enqueue_flags+0x1c4>)
 8021294:	f005 fb00 	bl	8026898 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8021298:	2300      	movs	r3, #0
}
 802129a:	4618      	mov	r0, r3
 802129c:	3720      	adds	r7, #32
 802129e:	46bd      	mov	sp, r7
 80212a0:	bd80      	pop	{r7, pc}
 80212a2:	bf00      	nop
 80212a4:	0802a3c0 	.word	0x0802a3c0
 80212a8:	0802a7e4 	.word	0x0802a7e4
 80212ac:	0802a414 	.word	0x0802a414
 80212b0:	0802a83c 	.word	0x0802a83c
 80212b4:	0802a85c 	.word	0x0802a85c
 80212b8:	0802a898 	.word	0x0802a898
 80212bc:	0802a8b0 	.word	0x0802a8b0
 80212c0:	0802a8dc 	.word	0x0802a8dc

080212c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80212c4:	b5b0      	push	{r4, r5, r7, lr}
 80212c6:	b08a      	sub	sp, #40	@ 0x28
 80212c8:	af00      	add	r7, sp, #0
 80212ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80212cc:	687b      	ldr	r3, [r7, #4]
 80212ce:	2b00      	cmp	r3, #0
 80212d0:	d106      	bne.n	80212e0 <tcp_output+0x1c>
 80212d2:	4b8a      	ldr	r3, [pc, #552]	@ (80214fc <tcp_output+0x238>)
 80212d4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80212d8:	4989      	ldr	r1, [pc, #548]	@ (8021500 <tcp_output+0x23c>)
 80212da:	488a      	ldr	r0, [pc, #552]	@ (8021504 <tcp_output+0x240>)
 80212dc:	f005 fadc 	bl	8026898 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80212e0:	687b      	ldr	r3, [r7, #4]
 80212e2:	7d1b      	ldrb	r3, [r3, #20]
 80212e4:	2b01      	cmp	r3, #1
 80212e6:	d106      	bne.n	80212f6 <tcp_output+0x32>
 80212e8:	4b84      	ldr	r3, [pc, #528]	@ (80214fc <tcp_output+0x238>)
 80212ea:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80212ee:	4986      	ldr	r1, [pc, #536]	@ (8021508 <tcp_output+0x244>)
 80212f0:	4884      	ldr	r0, [pc, #528]	@ (8021504 <tcp_output+0x240>)
 80212f2:	f005 fad1 	bl	8026898 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80212f6:	4b85      	ldr	r3, [pc, #532]	@ (802150c <tcp_output+0x248>)
 80212f8:	681b      	ldr	r3, [r3, #0]
 80212fa:	687a      	ldr	r2, [r7, #4]
 80212fc:	429a      	cmp	r2, r3
 80212fe:	d101      	bne.n	8021304 <tcp_output+0x40>
    return ERR_OK;
 8021300:	2300      	movs	r3, #0
 8021302:	e1ce      	b.n	80216a2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 802130a:	687b      	ldr	r3, [r7, #4]
 802130c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8021310:	4293      	cmp	r3, r2
 8021312:	bf28      	it	cs
 8021314:	4613      	movcs	r3, r2
 8021316:	b29b      	uxth	r3, r3
 8021318:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802131e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8021320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021322:	2b00      	cmp	r3, #0
 8021324:	d10b      	bne.n	802133e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8021326:	687b      	ldr	r3, [r7, #4]
 8021328:	8b5b      	ldrh	r3, [r3, #26]
 802132a:	f003 0302 	and.w	r3, r3, #2
 802132e:	2b00      	cmp	r3, #0
 8021330:	f000 81aa 	beq.w	8021688 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8021334:	6878      	ldr	r0, [r7, #4]
 8021336:	f000 fdcb 	bl	8021ed0 <tcp_send_empty_ack>
 802133a:	4603      	mov	r3, r0
 802133c:	e1b1      	b.n	80216a2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 802133e:	6879      	ldr	r1, [r7, #4]
 8021340:	687b      	ldr	r3, [r7, #4]
 8021342:	3304      	adds	r3, #4
 8021344:	461a      	mov	r2, r3
 8021346:	6878      	ldr	r0, [r7, #4]
 8021348:	f7ff fc7e 	bl	8020c48 <tcp_route>
 802134c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 802134e:	697b      	ldr	r3, [r7, #20]
 8021350:	2b00      	cmp	r3, #0
 8021352:	d102      	bne.n	802135a <tcp_output+0x96>
    return ERR_RTE;
 8021354:	f06f 0303 	mvn.w	r3, #3
 8021358:	e1a3      	b.n	80216a2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 802135a:	687b      	ldr	r3, [r7, #4]
 802135c:	2b00      	cmp	r3, #0
 802135e:	d003      	beq.n	8021368 <tcp_output+0xa4>
 8021360:	687b      	ldr	r3, [r7, #4]
 8021362:	681b      	ldr	r3, [r3, #0]
 8021364:	2b00      	cmp	r3, #0
 8021366:	d111      	bne.n	802138c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8021368:	697b      	ldr	r3, [r7, #20]
 802136a:	2b00      	cmp	r3, #0
 802136c:	d002      	beq.n	8021374 <tcp_output+0xb0>
 802136e:	697b      	ldr	r3, [r7, #20]
 8021370:	3304      	adds	r3, #4
 8021372:	e000      	b.n	8021376 <tcp_output+0xb2>
 8021374:	2300      	movs	r3, #0
 8021376:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8021378:	693b      	ldr	r3, [r7, #16]
 802137a:	2b00      	cmp	r3, #0
 802137c:	d102      	bne.n	8021384 <tcp_output+0xc0>
      return ERR_RTE;
 802137e:	f06f 0303 	mvn.w	r3, #3
 8021382:	e18e      	b.n	80216a2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8021384:	693b      	ldr	r3, [r7, #16]
 8021386:	681a      	ldr	r2, [r3, #0]
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 802138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802138e:	68db      	ldr	r3, [r3, #12]
 8021390:	685b      	ldr	r3, [r3, #4]
 8021392:	4618      	mov	r0, r3
 8021394:	f7f9 fe85 	bl	801b0a2 <lwip_htonl>
 8021398:	4602      	mov	r2, r0
 802139a:	687b      	ldr	r3, [r7, #4]
 802139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802139e:	1ad3      	subs	r3, r2, r3
 80213a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80213a2:	8912      	ldrh	r2, [r2, #8]
 80213a4:	4413      	add	r3, r2
 80213a6:	69ba      	ldr	r2, [r7, #24]
 80213a8:	429a      	cmp	r2, r3
 80213aa:	d227      	bcs.n	80213fc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80213ac:	687b      	ldr	r3, [r7, #4]
 80213ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80213b2:	461a      	mov	r2, r3
 80213b4:	69bb      	ldr	r3, [r7, #24]
 80213b6:	4293      	cmp	r3, r2
 80213b8:	d114      	bne.n	80213e4 <tcp_output+0x120>
 80213ba:	687b      	ldr	r3, [r7, #4]
 80213bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80213be:	2b00      	cmp	r3, #0
 80213c0:	d110      	bne.n	80213e4 <tcp_output+0x120>
 80213c2:	687b      	ldr	r3, [r7, #4]
 80213c4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	d10b      	bne.n	80213e4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80213cc:	687b      	ldr	r3, [r7, #4]
 80213ce:	2200      	movs	r2, #0
 80213d0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80213d4:	687b      	ldr	r3, [r7, #4]
 80213d6:	2201      	movs	r2, #1
 80213d8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	2200      	movs	r2, #0
 80213e0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80213e4:	687b      	ldr	r3, [r7, #4]
 80213e6:	8b5b      	ldrh	r3, [r3, #26]
 80213e8:	f003 0302 	and.w	r3, r3, #2
 80213ec:	2b00      	cmp	r3, #0
 80213ee:	f000 814d 	beq.w	802168c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80213f2:	6878      	ldr	r0, [r7, #4]
 80213f4:	f000 fd6c 	bl	8021ed0 <tcp_send_empty_ack>
 80213f8:	4603      	mov	r3, r0
 80213fa:	e152      	b.n	80216a2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80213fc:	687b      	ldr	r3, [r7, #4]
 80213fe:	2200      	movs	r2, #0
 8021400:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8021404:	687b      	ldr	r3, [r7, #4]
 8021406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021408:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 802140a:	6a3b      	ldr	r3, [r7, #32]
 802140c:	2b00      	cmp	r3, #0
 802140e:	f000 811c 	beq.w	802164a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8021412:	e002      	b.n	802141a <tcp_output+0x156>
 8021414:	6a3b      	ldr	r3, [r7, #32]
 8021416:	681b      	ldr	r3, [r3, #0]
 8021418:	623b      	str	r3, [r7, #32]
 802141a:	6a3b      	ldr	r3, [r7, #32]
 802141c:	681b      	ldr	r3, [r3, #0]
 802141e:	2b00      	cmp	r3, #0
 8021420:	d1f8      	bne.n	8021414 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8021422:	e112      	b.n	802164a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8021424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021426:	68db      	ldr	r3, [r3, #12]
 8021428:	899b      	ldrh	r3, [r3, #12]
 802142a:	b29b      	uxth	r3, r3
 802142c:	4618      	mov	r0, r3
 802142e:	f7f9 fe23 	bl	801b078 <lwip_htons>
 8021432:	4603      	mov	r3, r0
 8021434:	b2db      	uxtb	r3, r3
 8021436:	f003 0304 	and.w	r3, r3, #4
 802143a:	2b00      	cmp	r3, #0
 802143c:	d006      	beq.n	802144c <tcp_output+0x188>
 802143e:	4b2f      	ldr	r3, [pc, #188]	@ (80214fc <tcp_output+0x238>)
 8021440:	f240 5236 	movw	r2, #1334	@ 0x536
 8021444:	4932      	ldr	r1, [pc, #200]	@ (8021510 <tcp_output+0x24c>)
 8021446:	482f      	ldr	r0, [pc, #188]	@ (8021504 <tcp_output+0x240>)
 8021448:	f005 fa26 	bl	8026898 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021450:	2b00      	cmp	r3, #0
 8021452:	d01f      	beq.n	8021494 <tcp_output+0x1d0>
 8021454:	687b      	ldr	r3, [r7, #4]
 8021456:	8b5b      	ldrh	r3, [r3, #26]
 8021458:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 802145c:	2b00      	cmp	r3, #0
 802145e:	d119      	bne.n	8021494 <tcp_output+0x1d0>
 8021460:	687b      	ldr	r3, [r7, #4]
 8021462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021464:	2b00      	cmp	r3, #0
 8021466:	d00b      	beq.n	8021480 <tcp_output+0x1bc>
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802146c:	681b      	ldr	r3, [r3, #0]
 802146e:	2b00      	cmp	r3, #0
 8021470:	d110      	bne.n	8021494 <tcp_output+0x1d0>
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021476:	891a      	ldrh	r2, [r3, #8]
 8021478:	687b      	ldr	r3, [r7, #4]
 802147a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 802147c:	429a      	cmp	r2, r3
 802147e:	d209      	bcs.n	8021494 <tcp_output+0x1d0>
 8021480:	687b      	ldr	r3, [r7, #4]
 8021482:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8021486:	2b00      	cmp	r3, #0
 8021488:	d004      	beq.n	8021494 <tcp_output+0x1d0>
 802148a:	687b      	ldr	r3, [r7, #4]
 802148c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8021490:	2b08      	cmp	r3, #8
 8021492:	d901      	bls.n	8021498 <tcp_output+0x1d4>
 8021494:	2301      	movs	r3, #1
 8021496:	e000      	b.n	802149a <tcp_output+0x1d6>
 8021498:	2300      	movs	r3, #0
 802149a:	2b00      	cmp	r3, #0
 802149c:	d106      	bne.n	80214ac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 802149e:	687b      	ldr	r3, [r7, #4]
 80214a0:	8b5b      	ldrh	r3, [r3, #26]
 80214a2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	f000 80e4 	beq.w	8021674 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80214ac:	687b      	ldr	r3, [r7, #4]
 80214ae:	7d1b      	ldrb	r3, [r3, #20]
 80214b0:	2b02      	cmp	r3, #2
 80214b2:	d00d      	beq.n	80214d0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80214b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80214b6:	68db      	ldr	r3, [r3, #12]
 80214b8:	899b      	ldrh	r3, [r3, #12]
 80214ba:	b29c      	uxth	r4, r3
 80214bc:	2010      	movs	r0, #16
 80214be:	f7f9 fddb 	bl	801b078 <lwip_htons>
 80214c2:	4603      	mov	r3, r0
 80214c4:	461a      	mov	r2, r3
 80214c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80214c8:	68db      	ldr	r3, [r3, #12]
 80214ca:	4322      	orrs	r2, r4
 80214cc:	b292      	uxth	r2, r2
 80214ce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80214d0:	697a      	ldr	r2, [r7, #20]
 80214d2:	6879      	ldr	r1, [r7, #4]
 80214d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80214d6:	f000 f909 	bl	80216ec <tcp_output_segment>
 80214da:	4603      	mov	r3, r0
 80214dc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80214de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80214e2:	2b00      	cmp	r3, #0
 80214e4:	d016      	beq.n	8021514 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80214e6:	687b      	ldr	r3, [r7, #4]
 80214e8:	8b5b      	ldrh	r3, [r3, #26]
 80214ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80214ee:	b29a      	uxth	r2, r3
 80214f0:	687b      	ldr	r3, [r7, #4]
 80214f2:	835a      	strh	r2, [r3, #26]
      return err;
 80214f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80214f8:	e0d3      	b.n	80216a2 <tcp_output+0x3de>
 80214fa:	bf00      	nop
 80214fc:	0802a3c0 	.word	0x0802a3c0
 8021500:	0802a904 	.word	0x0802a904
 8021504:	0802a414 	.word	0x0802a414
 8021508:	0802a91c 	.word	0x0802a91c
 802150c:	2003c520 	.word	0x2003c520
 8021510:	0802a944 	.word	0x0802a944
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8021514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021516:	681a      	ldr	r2, [r3, #0]
 8021518:	687b      	ldr	r3, [r7, #4]
 802151a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	7d1b      	ldrb	r3, [r3, #20]
 8021520:	2b02      	cmp	r3, #2
 8021522:	d006      	beq.n	8021532 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8021524:	687b      	ldr	r3, [r7, #4]
 8021526:	8b5b      	ldrh	r3, [r3, #26]
 8021528:	f023 0303 	bic.w	r3, r3, #3
 802152c:	b29a      	uxth	r2, r3
 802152e:	687b      	ldr	r3, [r7, #4]
 8021530:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8021532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021534:	68db      	ldr	r3, [r3, #12]
 8021536:	685b      	ldr	r3, [r3, #4]
 8021538:	4618      	mov	r0, r3
 802153a:	f7f9 fdb2 	bl	801b0a2 <lwip_htonl>
 802153e:	4604      	mov	r4, r0
 8021540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021542:	891b      	ldrh	r3, [r3, #8]
 8021544:	461d      	mov	r5, r3
 8021546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021548:	68db      	ldr	r3, [r3, #12]
 802154a:	899b      	ldrh	r3, [r3, #12]
 802154c:	b29b      	uxth	r3, r3
 802154e:	4618      	mov	r0, r3
 8021550:	f7f9 fd92 	bl	801b078 <lwip_htons>
 8021554:	4603      	mov	r3, r0
 8021556:	b2db      	uxtb	r3, r3
 8021558:	f003 0303 	and.w	r3, r3, #3
 802155c:	2b00      	cmp	r3, #0
 802155e:	d001      	beq.n	8021564 <tcp_output+0x2a0>
 8021560:	2301      	movs	r3, #1
 8021562:	e000      	b.n	8021566 <tcp_output+0x2a2>
 8021564:	2300      	movs	r3, #0
 8021566:	442b      	add	r3, r5
 8021568:	4423      	add	r3, r4
 802156a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8021570:	68bb      	ldr	r3, [r7, #8]
 8021572:	1ad3      	subs	r3, r2, r3
 8021574:	2b00      	cmp	r3, #0
 8021576:	da02      	bge.n	802157e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8021578:	687b      	ldr	r3, [r7, #4]
 802157a:	68ba      	ldr	r2, [r7, #8]
 802157c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 802157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021580:	891b      	ldrh	r3, [r3, #8]
 8021582:	461c      	mov	r4, r3
 8021584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021586:	68db      	ldr	r3, [r3, #12]
 8021588:	899b      	ldrh	r3, [r3, #12]
 802158a:	b29b      	uxth	r3, r3
 802158c:	4618      	mov	r0, r3
 802158e:	f7f9 fd73 	bl	801b078 <lwip_htons>
 8021592:	4603      	mov	r3, r0
 8021594:	b2db      	uxtb	r3, r3
 8021596:	f003 0303 	and.w	r3, r3, #3
 802159a:	2b00      	cmp	r3, #0
 802159c:	d001      	beq.n	80215a2 <tcp_output+0x2de>
 802159e:	2301      	movs	r3, #1
 80215a0:	e000      	b.n	80215a4 <tcp_output+0x2e0>
 80215a2:	2300      	movs	r3, #0
 80215a4:	4423      	add	r3, r4
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	d049      	beq.n	802163e <tcp_output+0x37a>
      seg->next = NULL;
 80215aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215ac:	2200      	movs	r2, #0
 80215ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80215b4:	2b00      	cmp	r3, #0
 80215b6:	d105      	bne.n	80215c4 <tcp_output+0x300>
        pcb->unacked = seg;
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80215bc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80215be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215c0:	623b      	str	r3, [r7, #32]
 80215c2:	e03f      	b.n	8021644 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80215c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215c6:	68db      	ldr	r3, [r3, #12]
 80215c8:	685b      	ldr	r3, [r3, #4]
 80215ca:	4618      	mov	r0, r3
 80215cc:	f7f9 fd69 	bl	801b0a2 <lwip_htonl>
 80215d0:	4604      	mov	r4, r0
 80215d2:	6a3b      	ldr	r3, [r7, #32]
 80215d4:	68db      	ldr	r3, [r3, #12]
 80215d6:	685b      	ldr	r3, [r3, #4]
 80215d8:	4618      	mov	r0, r3
 80215da:	f7f9 fd62 	bl	801b0a2 <lwip_htonl>
 80215de:	4603      	mov	r3, r0
 80215e0:	1ae3      	subs	r3, r4, r3
 80215e2:	2b00      	cmp	r3, #0
 80215e4:	da24      	bge.n	8021630 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80215e6:	687b      	ldr	r3, [r7, #4]
 80215e8:	3370      	adds	r3, #112	@ 0x70
 80215ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80215ec:	e002      	b.n	80215f4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80215ee:	69fb      	ldr	r3, [r7, #28]
 80215f0:	681b      	ldr	r3, [r3, #0]
 80215f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80215f4:	69fb      	ldr	r3, [r7, #28]
 80215f6:	681b      	ldr	r3, [r3, #0]
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	d011      	beq.n	8021620 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80215fc:	69fb      	ldr	r3, [r7, #28]
 80215fe:	681b      	ldr	r3, [r3, #0]
 8021600:	68db      	ldr	r3, [r3, #12]
 8021602:	685b      	ldr	r3, [r3, #4]
 8021604:	4618      	mov	r0, r3
 8021606:	f7f9 fd4c 	bl	801b0a2 <lwip_htonl>
 802160a:	4604      	mov	r4, r0
 802160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802160e:	68db      	ldr	r3, [r3, #12]
 8021610:	685b      	ldr	r3, [r3, #4]
 8021612:	4618      	mov	r0, r3
 8021614:	f7f9 fd45 	bl	801b0a2 <lwip_htonl>
 8021618:	4603      	mov	r3, r0
 802161a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 802161c:	2b00      	cmp	r3, #0
 802161e:	dbe6      	blt.n	80215ee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8021620:	69fb      	ldr	r3, [r7, #28]
 8021622:	681a      	ldr	r2, [r3, #0]
 8021624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021626:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8021628:	69fb      	ldr	r3, [r7, #28]
 802162a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802162c:	601a      	str	r2, [r3, #0]
 802162e:	e009      	b.n	8021644 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8021630:	6a3b      	ldr	r3, [r7, #32]
 8021632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021634:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8021636:	6a3b      	ldr	r3, [r7, #32]
 8021638:	681b      	ldr	r3, [r3, #0]
 802163a:	623b      	str	r3, [r7, #32]
 802163c:	e002      	b.n	8021644 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 802163e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8021640:	f7fc fc45 	bl	801dece <tcp_seg_free>
    }
    seg = pcb->unsent;
 8021644:	687b      	ldr	r3, [r7, #4]
 8021646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021648:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 802164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802164c:	2b00      	cmp	r3, #0
 802164e:	d012      	beq.n	8021676 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8021650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021652:	68db      	ldr	r3, [r3, #12]
 8021654:	685b      	ldr	r3, [r3, #4]
 8021656:	4618      	mov	r0, r3
 8021658:	f7f9 fd23 	bl	801b0a2 <lwip_htonl>
 802165c:	4602      	mov	r2, r0
 802165e:	687b      	ldr	r3, [r7, #4]
 8021660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021662:	1ad3      	subs	r3, r2, r3
 8021664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021666:	8912      	ldrh	r2, [r2, #8]
 8021668:	4413      	add	r3, r2
  while (seg != NULL &&
 802166a:	69ba      	ldr	r2, [r7, #24]
 802166c:	429a      	cmp	r2, r3
 802166e:	f4bf aed9 	bcs.w	8021424 <tcp_output+0x160>
 8021672:	e000      	b.n	8021676 <tcp_output+0x3b2>
      break;
 8021674:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8021676:	687b      	ldr	r3, [r7, #4]
 8021678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802167a:	2b00      	cmp	r3, #0
 802167c:	d108      	bne.n	8021690 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 802167e:	687b      	ldr	r3, [r7, #4]
 8021680:	2200      	movs	r2, #0
 8021682:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8021686:	e004      	b.n	8021692 <tcp_output+0x3ce>
    goto output_done;
 8021688:	bf00      	nop
 802168a:	e002      	b.n	8021692 <tcp_output+0x3ce>
    goto output_done;
 802168c:	bf00      	nop
 802168e:	e000      	b.n	8021692 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8021690:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8021692:	687b      	ldr	r3, [r7, #4]
 8021694:	8b5b      	ldrh	r3, [r3, #26]
 8021696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802169a:	b29a      	uxth	r2, r3
 802169c:	687b      	ldr	r3, [r7, #4]
 802169e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80216a0:	2300      	movs	r3, #0
}
 80216a2:	4618      	mov	r0, r3
 80216a4:	3728      	adds	r7, #40	@ 0x28
 80216a6:	46bd      	mov	sp, r7
 80216a8:	bdb0      	pop	{r4, r5, r7, pc}
 80216aa:	bf00      	nop

080216ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80216ac:	b580      	push	{r7, lr}
 80216ae:	b082      	sub	sp, #8
 80216b0:	af00      	add	r7, sp, #0
 80216b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80216b4:	687b      	ldr	r3, [r7, #4]
 80216b6:	2b00      	cmp	r3, #0
 80216b8:	d106      	bne.n	80216c8 <tcp_output_segment_busy+0x1c>
 80216ba:	4b09      	ldr	r3, [pc, #36]	@ (80216e0 <tcp_output_segment_busy+0x34>)
 80216bc:	f240 529a 	movw	r2, #1434	@ 0x59a
 80216c0:	4908      	ldr	r1, [pc, #32]	@ (80216e4 <tcp_output_segment_busy+0x38>)
 80216c2:	4809      	ldr	r0, [pc, #36]	@ (80216e8 <tcp_output_segment_busy+0x3c>)
 80216c4:	f005 f8e8 	bl	8026898 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80216c8:	687b      	ldr	r3, [r7, #4]
 80216ca:	685b      	ldr	r3, [r3, #4]
 80216cc:	7b9b      	ldrb	r3, [r3, #14]
 80216ce:	2b01      	cmp	r3, #1
 80216d0:	d001      	beq.n	80216d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80216d2:	2301      	movs	r3, #1
 80216d4:	e000      	b.n	80216d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80216d6:	2300      	movs	r3, #0
}
 80216d8:	4618      	mov	r0, r3
 80216da:	3708      	adds	r7, #8
 80216dc:	46bd      	mov	sp, r7
 80216de:	bd80      	pop	{r7, pc}
 80216e0:	0802a3c0 	.word	0x0802a3c0
 80216e4:	0802a95c 	.word	0x0802a95c
 80216e8:	0802a414 	.word	0x0802a414

080216ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80216ec:	b5b0      	push	{r4, r5, r7, lr}
 80216ee:	b08c      	sub	sp, #48	@ 0x30
 80216f0:	af04      	add	r7, sp, #16
 80216f2:	60f8      	str	r0, [r7, #12]
 80216f4:	60b9      	str	r1, [r7, #8]
 80216f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80216f8:	68fb      	ldr	r3, [r7, #12]
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	d106      	bne.n	802170c <tcp_output_segment+0x20>
 80216fe:	4b64      	ldr	r3, [pc, #400]	@ (8021890 <tcp_output_segment+0x1a4>)
 8021700:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8021704:	4963      	ldr	r1, [pc, #396]	@ (8021894 <tcp_output_segment+0x1a8>)
 8021706:	4864      	ldr	r0, [pc, #400]	@ (8021898 <tcp_output_segment+0x1ac>)
 8021708:	f005 f8c6 	bl	8026898 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 802170c:	68bb      	ldr	r3, [r7, #8]
 802170e:	2b00      	cmp	r3, #0
 8021710:	d106      	bne.n	8021720 <tcp_output_segment+0x34>
 8021712:	4b5f      	ldr	r3, [pc, #380]	@ (8021890 <tcp_output_segment+0x1a4>)
 8021714:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8021718:	4960      	ldr	r1, [pc, #384]	@ (802189c <tcp_output_segment+0x1b0>)
 802171a:	485f      	ldr	r0, [pc, #380]	@ (8021898 <tcp_output_segment+0x1ac>)
 802171c:	f005 f8bc 	bl	8026898 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8021720:	687b      	ldr	r3, [r7, #4]
 8021722:	2b00      	cmp	r3, #0
 8021724:	d106      	bne.n	8021734 <tcp_output_segment+0x48>
 8021726:	4b5a      	ldr	r3, [pc, #360]	@ (8021890 <tcp_output_segment+0x1a4>)
 8021728:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 802172c:	495c      	ldr	r1, [pc, #368]	@ (80218a0 <tcp_output_segment+0x1b4>)
 802172e:	485a      	ldr	r0, [pc, #360]	@ (8021898 <tcp_output_segment+0x1ac>)
 8021730:	f005 f8b2 	bl	8026898 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8021734:	68f8      	ldr	r0, [r7, #12]
 8021736:	f7ff ffb9 	bl	80216ac <tcp_output_segment_busy>
 802173a:	4603      	mov	r3, r0
 802173c:	2b00      	cmp	r3, #0
 802173e:	d001      	beq.n	8021744 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8021740:	2300      	movs	r3, #0
 8021742:	e0a1      	b.n	8021888 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8021744:	68bb      	ldr	r3, [r7, #8]
 8021746:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8021748:	68fb      	ldr	r3, [r7, #12]
 802174a:	68dc      	ldr	r4, [r3, #12]
 802174c:	4610      	mov	r0, r2
 802174e:	f7f9 fca8 	bl	801b0a2 <lwip_htonl>
 8021752:	4603      	mov	r3, r0
 8021754:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8021756:	68bb      	ldr	r3, [r7, #8]
 8021758:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 802175a:	68fb      	ldr	r3, [r7, #12]
 802175c:	68dc      	ldr	r4, [r3, #12]
 802175e:	4610      	mov	r0, r2
 8021760:	f7f9 fc8a 	bl	801b078 <lwip_htons>
 8021764:	4603      	mov	r3, r0
 8021766:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8021768:	68bb      	ldr	r3, [r7, #8]
 802176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802176c:	68ba      	ldr	r2, [r7, #8]
 802176e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8021770:	441a      	add	r2, r3
 8021772:	68bb      	ldr	r3, [r7, #8]
 8021774:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8021776:	68fb      	ldr	r3, [r7, #12]
 8021778:	68db      	ldr	r3, [r3, #12]
 802177a:	3314      	adds	r3, #20
 802177c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 802177e:	68fb      	ldr	r3, [r7, #12]
 8021780:	7a9b      	ldrb	r3, [r3, #10]
 8021782:	f003 0301 	and.w	r3, r3, #1
 8021786:	2b00      	cmp	r3, #0
 8021788:	d015      	beq.n	80217b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 802178a:	68bb      	ldr	r3, [r7, #8]
 802178c:	3304      	adds	r3, #4
 802178e:	461a      	mov	r2, r3
 8021790:	6879      	ldr	r1, [r7, #4]
 8021792:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8021796:	f7fc fe91 	bl	801e4bc <tcp_eff_send_mss_netif>
 802179a:	4603      	mov	r3, r0
 802179c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 802179e:	8b7b      	ldrh	r3, [r7, #26]
 80217a0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80217a4:	4618      	mov	r0, r3
 80217a6:	f7f9 fc7c 	bl	801b0a2 <lwip_htonl>
 80217aa:	4602      	mov	r2, r0
 80217ac:	69fb      	ldr	r3, [r7, #28]
 80217ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 80217b0:	69fb      	ldr	r3, [r7, #28]
 80217b2:	3304      	adds	r3, #4
 80217b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80217b6:	68bb      	ldr	r3, [r7, #8]
 80217b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80217bc:	2b00      	cmp	r3, #0
 80217be:	da02      	bge.n	80217c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80217c0:	68bb      	ldr	r3, [r7, #8]
 80217c2:	2200      	movs	r2, #0
 80217c4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80217c6:	68bb      	ldr	r3, [r7, #8]
 80217c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	d10c      	bne.n	80217e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80217ce:	4b35      	ldr	r3, [pc, #212]	@ (80218a4 <tcp_output_segment+0x1b8>)
 80217d0:	681a      	ldr	r2, [r3, #0]
 80217d2:	68bb      	ldr	r3, [r7, #8]
 80217d4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80217d6:	68fb      	ldr	r3, [r7, #12]
 80217d8:	68db      	ldr	r3, [r3, #12]
 80217da:	685b      	ldr	r3, [r3, #4]
 80217dc:	4618      	mov	r0, r3
 80217de:	f7f9 fc60 	bl	801b0a2 <lwip_htonl>
 80217e2:	4602      	mov	r2, r0
 80217e4:	68bb      	ldr	r3, [r7, #8]
 80217e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80217e8:	68fb      	ldr	r3, [r7, #12]
 80217ea:	68da      	ldr	r2, [r3, #12]
 80217ec:	68fb      	ldr	r3, [r7, #12]
 80217ee:	685b      	ldr	r3, [r3, #4]
 80217f0:	685b      	ldr	r3, [r3, #4]
 80217f2:	1ad3      	subs	r3, r2, r3
 80217f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80217f6:	68fb      	ldr	r3, [r7, #12]
 80217f8:	685b      	ldr	r3, [r3, #4]
 80217fa:	8959      	ldrh	r1, [r3, #10]
 80217fc:	68fb      	ldr	r3, [r7, #12]
 80217fe:	685b      	ldr	r3, [r3, #4]
 8021800:	8b3a      	ldrh	r2, [r7, #24]
 8021802:	1a8a      	subs	r2, r1, r2
 8021804:	b292      	uxth	r2, r2
 8021806:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8021808:	68fb      	ldr	r3, [r7, #12]
 802180a:	685b      	ldr	r3, [r3, #4]
 802180c:	8919      	ldrh	r1, [r3, #8]
 802180e:	68fb      	ldr	r3, [r7, #12]
 8021810:	685b      	ldr	r3, [r3, #4]
 8021812:	8b3a      	ldrh	r2, [r7, #24]
 8021814:	1a8a      	subs	r2, r1, r2
 8021816:	b292      	uxth	r2, r2
 8021818:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 802181a:	68fb      	ldr	r3, [r7, #12]
 802181c:	685b      	ldr	r3, [r3, #4]
 802181e:	68fa      	ldr	r2, [r7, #12]
 8021820:	68d2      	ldr	r2, [r2, #12]
 8021822:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8021824:	68fb      	ldr	r3, [r7, #12]
 8021826:	68db      	ldr	r3, [r3, #12]
 8021828:	2200      	movs	r2, #0
 802182a:	741a      	strb	r2, [r3, #16]
 802182c:	2200      	movs	r2, #0
 802182e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8021830:	68fb      	ldr	r3, [r7, #12]
 8021832:	68da      	ldr	r2, [r3, #12]
 8021834:	68fb      	ldr	r3, [r7, #12]
 8021836:	7a9b      	ldrb	r3, [r3, #10]
 8021838:	f003 0301 	and.w	r3, r3, #1
 802183c:	2b00      	cmp	r3, #0
 802183e:	d001      	beq.n	8021844 <tcp_output_segment+0x158>
 8021840:	2318      	movs	r3, #24
 8021842:	e000      	b.n	8021846 <tcp_output_segment+0x15a>
 8021844:	2314      	movs	r3, #20
 8021846:	4413      	add	r3, r2
 8021848:	69fa      	ldr	r2, [r7, #28]
 802184a:	429a      	cmp	r2, r3
 802184c:	d006      	beq.n	802185c <tcp_output_segment+0x170>
 802184e:	4b10      	ldr	r3, [pc, #64]	@ (8021890 <tcp_output_segment+0x1a4>)
 8021850:	f240 621c 	movw	r2, #1564	@ 0x61c
 8021854:	4914      	ldr	r1, [pc, #80]	@ (80218a8 <tcp_output_segment+0x1bc>)
 8021856:	4810      	ldr	r0, [pc, #64]	@ (8021898 <tcp_output_segment+0x1ac>)
 8021858:	f005 f81e 	bl	8026898 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 802185c:	68fb      	ldr	r3, [r7, #12]
 802185e:	6858      	ldr	r0, [r3, #4]
 8021860:	68b9      	ldr	r1, [r7, #8]
 8021862:	68bb      	ldr	r3, [r7, #8]
 8021864:	1d1c      	adds	r4, r3, #4
 8021866:	68bb      	ldr	r3, [r7, #8]
 8021868:	7add      	ldrb	r5, [r3, #11]
 802186a:	68bb      	ldr	r3, [r7, #8]
 802186c:	7a9b      	ldrb	r3, [r3, #10]
 802186e:	687a      	ldr	r2, [r7, #4]
 8021870:	9202      	str	r2, [sp, #8]
 8021872:	2206      	movs	r2, #6
 8021874:	9201      	str	r2, [sp, #4]
 8021876:	9300      	str	r3, [sp, #0]
 8021878:	462b      	mov	r3, r5
 802187a:	4622      	mov	r2, r4
 802187c:	f002 fdba 	bl	80243f4 <ip4_output_if>
 8021880:	4603      	mov	r3, r0
 8021882:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8021884:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8021888:	4618      	mov	r0, r3
 802188a:	3720      	adds	r7, #32
 802188c:	46bd      	mov	sp, r7
 802188e:	bdb0      	pop	{r4, r5, r7, pc}
 8021890:	0802a3c0 	.word	0x0802a3c0
 8021894:	0802a984 	.word	0x0802a984
 8021898:	0802a414 	.word	0x0802a414
 802189c:	0802a9a4 	.word	0x0802a9a4
 80218a0:	0802a9c4 	.word	0x0802a9c4
 80218a4:	2003c4d4 	.word	0x2003c4d4
 80218a8:	0802a9e8 	.word	0x0802a9e8

080218ac <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80218ac:	b5b0      	push	{r4, r5, r7, lr}
 80218ae:	b084      	sub	sp, #16
 80218b0:	af00      	add	r7, sp, #0
 80218b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80218b4:	687b      	ldr	r3, [r7, #4]
 80218b6:	2b00      	cmp	r3, #0
 80218b8:	d106      	bne.n	80218c8 <tcp_rexmit_rto_prepare+0x1c>
 80218ba:	4b31      	ldr	r3, [pc, #196]	@ (8021980 <tcp_rexmit_rto_prepare+0xd4>)
 80218bc:	f240 6263 	movw	r2, #1635	@ 0x663
 80218c0:	4930      	ldr	r1, [pc, #192]	@ (8021984 <tcp_rexmit_rto_prepare+0xd8>)
 80218c2:	4831      	ldr	r0, [pc, #196]	@ (8021988 <tcp_rexmit_rto_prepare+0xdc>)
 80218c4:	f004 ffe8 	bl	8026898 <iprintf>

  if (pcb->unacked == NULL) {
 80218c8:	687b      	ldr	r3, [r7, #4]
 80218ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	d102      	bne.n	80218d6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80218d0:	f06f 0305 	mvn.w	r3, #5
 80218d4:	e050      	b.n	8021978 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80218d6:	687b      	ldr	r3, [r7, #4]
 80218d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80218da:	60fb      	str	r3, [r7, #12]
 80218dc:	e00b      	b.n	80218f6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80218de:	68f8      	ldr	r0, [r7, #12]
 80218e0:	f7ff fee4 	bl	80216ac <tcp_output_segment_busy>
 80218e4:	4603      	mov	r3, r0
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	d002      	beq.n	80218f0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80218ea:	f06f 0305 	mvn.w	r3, #5
 80218ee:	e043      	b.n	8021978 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	681b      	ldr	r3, [r3, #0]
 80218f4:	60fb      	str	r3, [r7, #12]
 80218f6:	68fb      	ldr	r3, [r7, #12]
 80218f8:	681b      	ldr	r3, [r3, #0]
 80218fa:	2b00      	cmp	r3, #0
 80218fc:	d1ef      	bne.n	80218de <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80218fe:	68f8      	ldr	r0, [r7, #12]
 8021900:	f7ff fed4 	bl	80216ac <tcp_output_segment_busy>
 8021904:	4603      	mov	r3, r0
 8021906:	2b00      	cmp	r3, #0
 8021908:	d002      	beq.n	8021910 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 802190a:	f06f 0305 	mvn.w	r3, #5
 802190e:	e033      	b.n	8021978 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8021914:	68fb      	ldr	r3, [r7, #12]
 8021916:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8021918:	687b      	ldr	r3, [r7, #4]
 802191a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 802191c:	687b      	ldr	r3, [r7, #4]
 802191e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8021920:	687b      	ldr	r3, [r7, #4]
 8021922:	2200      	movs	r2, #0
 8021924:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8021926:	687b      	ldr	r3, [r7, #4]
 8021928:	8b5b      	ldrh	r3, [r3, #26]
 802192a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 802192e:	b29a      	uxth	r2, r3
 8021930:	687b      	ldr	r3, [r7, #4]
 8021932:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8021934:	68fb      	ldr	r3, [r7, #12]
 8021936:	68db      	ldr	r3, [r3, #12]
 8021938:	685b      	ldr	r3, [r3, #4]
 802193a:	4618      	mov	r0, r3
 802193c:	f7f9 fbb1 	bl	801b0a2 <lwip_htonl>
 8021940:	4604      	mov	r4, r0
 8021942:	68fb      	ldr	r3, [r7, #12]
 8021944:	891b      	ldrh	r3, [r3, #8]
 8021946:	461d      	mov	r5, r3
 8021948:	68fb      	ldr	r3, [r7, #12]
 802194a:	68db      	ldr	r3, [r3, #12]
 802194c:	899b      	ldrh	r3, [r3, #12]
 802194e:	b29b      	uxth	r3, r3
 8021950:	4618      	mov	r0, r3
 8021952:	f7f9 fb91 	bl	801b078 <lwip_htons>
 8021956:	4603      	mov	r3, r0
 8021958:	b2db      	uxtb	r3, r3
 802195a:	f003 0303 	and.w	r3, r3, #3
 802195e:	2b00      	cmp	r3, #0
 8021960:	d001      	beq.n	8021966 <tcp_rexmit_rto_prepare+0xba>
 8021962:	2301      	movs	r3, #1
 8021964:	e000      	b.n	8021968 <tcp_rexmit_rto_prepare+0xbc>
 8021966:	2300      	movs	r3, #0
 8021968:	442b      	add	r3, r5
 802196a:	18e2      	adds	r2, r4, r3
 802196c:	687b      	ldr	r3, [r7, #4]
 802196e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8021970:	687b      	ldr	r3, [r7, #4]
 8021972:	2200      	movs	r2, #0
 8021974:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8021976:	2300      	movs	r3, #0
}
 8021978:	4618      	mov	r0, r3
 802197a:	3710      	adds	r7, #16
 802197c:	46bd      	mov	sp, r7
 802197e:	bdb0      	pop	{r4, r5, r7, pc}
 8021980:	0802a3c0 	.word	0x0802a3c0
 8021984:	0802a9fc 	.word	0x0802a9fc
 8021988:	0802a414 	.word	0x0802a414

0802198c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 802198c:	b580      	push	{r7, lr}
 802198e:	b082      	sub	sp, #8
 8021990:	af00      	add	r7, sp, #0
 8021992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8021994:	687b      	ldr	r3, [r7, #4]
 8021996:	2b00      	cmp	r3, #0
 8021998:	d106      	bne.n	80219a8 <tcp_rexmit_rto_commit+0x1c>
 802199a:	4b0d      	ldr	r3, [pc, #52]	@ (80219d0 <tcp_rexmit_rto_commit+0x44>)
 802199c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80219a0:	490c      	ldr	r1, [pc, #48]	@ (80219d4 <tcp_rexmit_rto_commit+0x48>)
 80219a2:	480d      	ldr	r0, [pc, #52]	@ (80219d8 <tcp_rexmit_rto_commit+0x4c>)
 80219a4:	f004 ff78 	bl	8026898 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80219a8:	687b      	ldr	r3, [r7, #4]
 80219aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80219ae:	2bff      	cmp	r3, #255	@ 0xff
 80219b0:	d007      	beq.n	80219c2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80219b2:	687b      	ldr	r3, [r7, #4]
 80219b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80219b8:	3301      	adds	r3, #1
 80219ba:	b2da      	uxtb	r2, r3
 80219bc:	687b      	ldr	r3, [r7, #4]
 80219be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80219c2:	6878      	ldr	r0, [r7, #4]
 80219c4:	f7ff fc7e 	bl	80212c4 <tcp_output>
}
 80219c8:	bf00      	nop
 80219ca:	3708      	adds	r7, #8
 80219cc:	46bd      	mov	sp, r7
 80219ce:	bd80      	pop	{r7, pc}
 80219d0:	0802a3c0 	.word	0x0802a3c0
 80219d4:	0802aa20 	.word	0x0802aa20
 80219d8:	0802a414 	.word	0x0802a414

080219dc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80219dc:	b580      	push	{r7, lr}
 80219de:	b082      	sub	sp, #8
 80219e0:	af00      	add	r7, sp, #0
 80219e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80219e4:	687b      	ldr	r3, [r7, #4]
 80219e6:	2b00      	cmp	r3, #0
 80219e8:	d106      	bne.n	80219f8 <tcp_rexmit_rto+0x1c>
 80219ea:	4b0a      	ldr	r3, [pc, #40]	@ (8021a14 <tcp_rexmit_rto+0x38>)
 80219ec:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80219f0:	4909      	ldr	r1, [pc, #36]	@ (8021a18 <tcp_rexmit_rto+0x3c>)
 80219f2:	480a      	ldr	r0, [pc, #40]	@ (8021a1c <tcp_rexmit_rto+0x40>)
 80219f4:	f004 ff50 	bl	8026898 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80219f8:	6878      	ldr	r0, [r7, #4]
 80219fa:	f7ff ff57 	bl	80218ac <tcp_rexmit_rto_prepare>
 80219fe:	4603      	mov	r3, r0
 8021a00:	2b00      	cmp	r3, #0
 8021a02:	d102      	bne.n	8021a0a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8021a04:	6878      	ldr	r0, [r7, #4]
 8021a06:	f7ff ffc1 	bl	802198c <tcp_rexmit_rto_commit>
  }
}
 8021a0a:	bf00      	nop
 8021a0c:	3708      	adds	r7, #8
 8021a0e:	46bd      	mov	sp, r7
 8021a10:	bd80      	pop	{r7, pc}
 8021a12:	bf00      	nop
 8021a14:	0802a3c0 	.word	0x0802a3c0
 8021a18:	0802aa44 	.word	0x0802aa44
 8021a1c:	0802a414 	.word	0x0802a414

08021a20 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8021a20:	b590      	push	{r4, r7, lr}
 8021a22:	b085      	sub	sp, #20
 8021a24:	af00      	add	r7, sp, #0
 8021a26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8021a28:	687b      	ldr	r3, [r7, #4]
 8021a2a:	2b00      	cmp	r3, #0
 8021a2c:	d106      	bne.n	8021a3c <tcp_rexmit+0x1c>
 8021a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8021aec <tcp_rexmit+0xcc>)
 8021a30:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8021a34:	492e      	ldr	r1, [pc, #184]	@ (8021af0 <tcp_rexmit+0xd0>)
 8021a36:	482f      	ldr	r0, [pc, #188]	@ (8021af4 <tcp_rexmit+0xd4>)
 8021a38:	f004 ff2e 	bl	8026898 <iprintf>

  if (pcb->unacked == NULL) {
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021a40:	2b00      	cmp	r3, #0
 8021a42:	d102      	bne.n	8021a4a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8021a44:	f06f 0305 	mvn.w	r3, #5
 8021a48:	e04c      	b.n	8021ae4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8021a4a:	687b      	ldr	r3, [r7, #4]
 8021a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021a4e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8021a50:	68b8      	ldr	r0, [r7, #8]
 8021a52:	f7ff fe2b 	bl	80216ac <tcp_output_segment_busy>
 8021a56:	4603      	mov	r3, r0
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d002      	beq.n	8021a62 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8021a5c:	f06f 0305 	mvn.w	r3, #5
 8021a60:	e040      	b.n	8021ae4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8021a62:	68bb      	ldr	r3, [r7, #8]
 8021a64:	681a      	ldr	r2, [r3, #0]
 8021a66:	687b      	ldr	r3, [r7, #4]
 8021a68:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	336c      	adds	r3, #108	@ 0x6c
 8021a6e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8021a70:	e002      	b.n	8021a78 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8021a72:	68fb      	ldr	r3, [r7, #12]
 8021a74:	681b      	ldr	r3, [r3, #0]
 8021a76:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8021a78:	68fb      	ldr	r3, [r7, #12]
 8021a7a:	681b      	ldr	r3, [r3, #0]
 8021a7c:	2b00      	cmp	r3, #0
 8021a7e:	d011      	beq.n	8021aa4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8021a80:	68fb      	ldr	r3, [r7, #12]
 8021a82:	681b      	ldr	r3, [r3, #0]
 8021a84:	68db      	ldr	r3, [r3, #12]
 8021a86:	685b      	ldr	r3, [r3, #4]
 8021a88:	4618      	mov	r0, r3
 8021a8a:	f7f9 fb0a 	bl	801b0a2 <lwip_htonl>
 8021a8e:	4604      	mov	r4, r0
 8021a90:	68bb      	ldr	r3, [r7, #8]
 8021a92:	68db      	ldr	r3, [r3, #12]
 8021a94:	685b      	ldr	r3, [r3, #4]
 8021a96:	4618      	mov	r0, r3
 8021a98:	f7f9 fb03 	bl	801b0a2 <lwip_htonl>
 8021a9c:	4603      	mov	r3, r0
 8021a9e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8021aa0:	2b00      	cmp	r3, #0
 8021aa2:	dbe6      	blt.n	8021a72 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8021aa4:	68fb      	ldr	r3, [r7, #12]
 8021aa6:	681a      	ldr	r2, [r3, #0]
 8021aa8:	68bb      	ldr	r3, [r7, #8]
 8021aaa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8021aac:	68fb      	ldr	r3, [r7, #12]
 8021aae:	68ba      	ldr	r2, [r7, #8]
 8021ab0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8021ab2:	68bb      	ldr	r3, [r7, #8]
 8021ab4:	681b      	ldr	r3, [r3, #0]
 8021ab6:	2b00      	cmp	r3, #0
 8021ab8:	d103      	bne.n	8021ac2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8021aba:	687b      	ldr	r3, [r7, #4]
 8021abc:	2200      	movs	r2, #0
 8021abe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8021ac2:	687b      	ldr	r3, [r7, #4]
 8021ac4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8021ac8:	2bff      	cmp	r3, #255	@ 0xff
 8021aca:	d007      	beq.n	8021adc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8021acc:	687b      	ldr	r3, [r7, #4]
 8021ace:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8021ad2:	3301      	adds	r3, #1
 8021ad4:	b2da      	uxtb	r2, r3
 8021ad6:	687b      	ldr	r3, [r7, #4]
 8021ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8021adc:	687b      	ldr	r3, [r7, #4]
 8021ade:	2200      	movs	r2, #0
 8021ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8021ae2:	2300      	movs	r3, #0
}
 8021ae4:	4618      	mov	r0, r3
 8021ae6:	3714      	adds	r7, #20
 8021ae8:	46bd      	mov	sp, r7
 8021aea:	bd90      	pop	{r4, r7, pc}
 8021aec:	0802a3c0 	.word	0x0802a3c0
 8021af0:	0802aa60 	.word	0x0802aa60
 8021af4:	0802a414 	.word	0x0802a414

08021af8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8021af8:	b580      	push	{r7, lr}
 8021afa:	b082      	sub	sp, #8
 8021afc:	af00      	add	r7, sp, #0
 8021afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8021b00:	687b      	ldr	r3, [r7, #4]
 8021b02:	2b00      	cmp	r3, #0
 8021b04:	d106      	bne.n	8021b14 <tcp_rexmit_fast+0x1c>
 8021b06:	4b2a      	ldr	r3, [pc, #168]	@ (8021bb0 <tcp_rexmit_fast+0xb8>)
 8021b08:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8021b0c:	4929      	ldr	r1, [pc, #164]	@ (8021bb4 <tcp_rexmit_fast+0xbc>)
 8021b0e:	482a      	ldr	r0, [pc, #168]	@ (8021bb8 <tcp_rexmit_fast+0xc0>)
 8021b10:	f004 fec2 	bl	8026898 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021b18:	2b00      	cmp	r3, #0
 8021b1a:	d045      	beq.n	8021ba8 <tcp_rexmit_fast+0xb0>
 8021b1c:	687b      	ldr	r3, [r7, #4]
 8021b1e:	8b5b      	ldrh	r3, [r3, #26]
 8021b20:	f003 0304 	and.w	r3, r3, #4
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	d13f      	bne.n	8021ba8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8021b28:	6878      	ldr	r0, [r7, #4]
 8021b2a:	f7ff ff79 	bl	8021a20 <tcp_rexmit>
 8021b2e:	4603      	mov	r3, r0
 8021b30:	2b00      	cmp	r3, #0
 8021b32:	d139      	bne.n	8021ba8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8021b34:	687b      	ldr	r3, [r7, #4]
 8021b36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8021b40:	4293      	cmp	r3, r2
 8021b42:	bf28      	it	cs
 8021b44:	4613      	movcs	r3, r2
 8021b46:	b29b      	uxth	r3, r3
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	da00      	bge.n	8021b4e <tcp_rexmit_fast+0x56>
 8021b4c:	3301      	adds	r3, #1
 8021b4e:	105b      	asrs	r3, r3, #1
 8021b50:	b29a      	uxth	r2, r3
 8021b52:	687b      	ldr	r3, [r7, #4]
 8021b54:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8021b58:	687b      	ldr	r3, [r7, #4]
 8021b5a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8021b5e:	461a      	mov	r2, r3
 8021b60:	687b      	ldr	r3, [r7, #4]
 8021b62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8021b64:	005b      	lsls	r3, r3, #1
 8021b66:	429a      	cmp	r2, r3
 8021b68:	d206      	bcs.n	8021b78 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8021b6a:	687b      	ldr	r3, [r7, #4]
 8021b6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8021b6e:	005b      	lsls	r3, r3, #1
 8021b70:	b29a      	uxth	r2, r3
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8021b7e:	687b      	ldr	r3, [r7, #4]
 8021b80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8021b82:	4619      	mov	r1, r3
 8021b84:	0049      	lsls	r1, r1, #1
 8021b86:	440b      	add	r3, r1
 8021b88:	b29b      	uxth	r3, r3
 8021b8a:	4413      	add	r3, r2
 8021b8c:	b29a      	uxth	r2, r3
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8021b94:	687b      	ldr	r3, [r7, #4]
 8021b96:	8b5b      	ldrh	r3, [r3, #26]
 8021b98:	f043 0304 	orr.w	r3, r3, #4
 8021b9c:	b29a      	uxth	r2, r3
 8021b9e:	687b      	ldr	r3, [r7, #4]
 8021ba0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8021ba2:	687b      	ldr	r3, [r7, #4]
 8021ba4:	2200      	movs	r2, #0
 8021ba6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8021ba8:	bf00      	nop
 8021baa:	3708      	adds	r7, #8
 8021bac:	46bd      	mov	sp, r7
 8021bae:	bd80      	pop	{r7, pc}
 8021bb0:	0802a3c0 	.word	0x0802a3c0
 8021bb4:	0802aa78 	.word	0x0802aa78
 8021bb8:	0802a414 	.word	0x0802a414

08021bbc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8021bbc:	b580      	push	{r7, lr}
 8021bbe:	b086      	sub	sp, #24
 8021bc0:	af00      	add	r7, sp, #0
 8021bc2:	60f8      	str	r0, [r7, #12]
 8021bc4:	607b      	str	r3, [r7, #4]
 8021bc6:	460b      	mov	r3, r1
 8021bc8:	817b      	strh	r3, [r7, #10]
 8021bca:	4613      	mov	r3, r2
 8021bcc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8021bce:	897a      	ldrh	r2, [r7, #10]
 8021bd0:	893b      	ldrh	r3, [r7, #8]
 8021bd2:	4413      	add	r3, r2
 8021bd4:	b29b      	uxth	r3, r3
 8021bd6:	3314      	adds	r3, #20
 8021bd8:	b29b      	uxth	r3, r3
 8021bda:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8021bde:	4619      	mov	r1, r3
 8021be0:	2022      	movs	r0, #34	@ 0x22
 8021be2:	f7fa fc01 	bl	801c3e8 <pbuf_alloc>
 8021be6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8021be8:	697b      	ldr	r3, [r7, #20]
 8021bea:	2b00      	cmp	r3, #0
 8021bec:	d04d      	beq.n	8021c8a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8021bee:	897b      	ldrh	r3, [r7, #10]
 8021bf0:	3313      	adds	r3, #19
 8021bf2:	697a      	ldr	r2, [r7, #20]
 8021bf4:	8952      	ldrh	r2, [r2, #10]
 8021bf6:	4293      	cmp	r3, r2
 8021bf8:	db06      	blt.n	8021c08 <tcp_output_alloc_header_common+0x4c>
 8021bfa:	4b26      	ldr	r3, [pc, #152]	@ (8021c94 <tcp_output_alloc_header_common+0xd8>)
 8021bfc:	f240 7223 	movw	r2, #1827	@ 0x723
 8021c00:	4925      	ldr	r1, [pc, #148]	@ (8021c98 <tcp_output_alloc_header_common+0xdc>)
 8021c02:	4826      	ldr	r0, [pc, #152]	@ (8021c9c <tcp_output_alloc_header_common+0xe0>)
 8021c04:	f004 fe48 	bl	8026898 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8021c08:	697b      	ldr	r3, [r7, #20]
 8021c0a:	685b      	ldr	r3, [r3, #4]
 8021c0c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8021c0e:	8c3b      	ldrh	r3, [r7, #32]
 8021c10:	4618      	mov	r0, r3
 8021c12:	f7f9 fa31 	bl	801b078 <lwip_htons>
 8021c16:	4603      	mov	r3, r0
 8021c18:	461a      	mov	r2, r3
 8021c1a:	693b      	ldr	r3, [r7, #16]
 8021c1c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8021c1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8021c20:	4618      	mov	r0, r3
 8021c22:	f7f9 fa29 	bl	801b078 <lwip_htons>
 8021c26:	4603      	mov	r3, r0
 8021c28:	461a      	mov	r2, r3
 8021c2a:	693b      	ldr	r3, [r7, #16]
 8021c2c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8021c2e:	693b      	ldr	r3, [r7, #16]
 8021c30:	687a      	ldr	r2, [r7, #4]
 8021c32:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8021c34:	68f8      	ldr	r0, [r7, #12]
 8021c36:	f7f9 fa34 	bl	801b0a2 <lwip_htonl>
 8021c3a:	4602      	mov	r2, r0
 8021c3c:	693b      	ldr	r3, [r7, #16]
 8021c3e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8021c40:	897b      	ldrh	r3, [r7, #10]
 8021c42:	089b      	lsrs	r3, r3, #2
 8021c44:	b29b      	uxth	r3, r3
 8021c46:	3305      	adds	r3, #5
 8021c48:	b29b      	uxth	r3, r3
 8021c4a:	031b      	lsls	r3, r3, #12
 8021c4c:	b29a      	uxth	r2, r3
 8021c4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8021c52:	b29b      	uxth	r3, r3
 8021c54:	4313      	orrs	r3, r2
 8021c56:	b29b      	uxth	r3, r3
 8021c58:	4618      	mov	r0, r3
 8021c5a:	f7f9 fa0d 	bl	801b078 <lwip_htons>
 8021c5e:	4603      	mov	r3, r0
 8021c60:	461a      	mov	r2, r3
 8021c62:	693b      	ldr	r3, [r7, #16]
 8021c64:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8021c66:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8021c68:	4618      	mov	r0, r3
 8021c6a:	f7f9 fa05 	bl	801b078 <lwip_htons>
 8021c6e:	4603      	mov	r3, r0
 8021c70:	461a      	mov	r2, r3
 8021c72:	693b      	ldr	r3, [r7, #16]
 8021c74:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8021c76:	693b      	ldr	r3, [r7, #16]
 8021c78:	2200      	movs	r2, #0
 8021c7a:	741a      	strb	r2, [r3, #16]
 8021c7c:	2200      	movs	r2, #0
 8021c7e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8021c80:	693b      	ldr	r3, [r7, #16]
 8021c82:	2200      	movs	r2, #0
 8021c84:	749a      	strb	r2, [r3, #18]
 8021c86:	2200      	movs	r2, #0
 8021c88:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8021c8a:	697b      	ldr	r3, [r7, #20]
}
 8021c8c:	4618      	mov	r0, r3
 8021c8e:	3718      	adds	r7, #24
 8021c90:	46bd      	mov	sp, r7
 8021c92:	bd80      	pop	{r7, pc}
 8021c94:	0802a3c0 	.word	0x0802a3c0
 8021c98:	0802aa98 	.word	0x0802aa98
 8021c9c:	0802a414 	.word	0x0802a414

08021ca0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8021ca0:	b5b0      	push	{r4, r5, r7, lr}
 8021ca2:	b08a      	sub	sp, #40	@ 0x28
 8021ca4:	af04      	add	r7, sp, #16
 8021ca6:	60f8      	str	r0, [r7, #12]
 8021ca8:	607b      	str	r3, [r7, #4]
 8021caa:	460b      	mov	r3, r1
 8021cac:	817b      	strh	r3, [r7, #10]
 8021cae:	4613      	mov	r3, r2
 8021cb0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8021cb2:	68fb      	ldr	r3, [r7, #12]
 8021cb4:	2b00      	cmp	r3, #0
 8021cb6:	d106      	bne.n	8021cc6 <tcp_output_alloc_header+0x26>
 8021cb8:	4b15      	ldr	r3, [pc, #84]	@ (8021d10 <tcp_output_alloc_header+0x70>)
 8021cba:	f240 7242 	movw	r2, #1858	@ 0x742
 8021cbe:	4915      	ldr	r1, [pc, #84]	@ (8021d14 <tcp_output_alloc_header+0x74>)
 8021cc0:	4815      	ldr	r0, [pc, #84]	@ (8021d18 <tcp_output_alloc_header+0x78>)
 8021cc2:	f004 fde9 	bl	8026898 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8021cc6:	68fb      	ldr	r3, [r7, #12]
 8021cc8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8021cca:	68fb      	ldr	r3, [r7, #12]
 8021ccc:	8adb      	ldrh	r3, [r3, #22]
 8021cce:	68fa      	ldr	r2, [r7, #12]
 8021cd0:	8b12      	ldrh	r2, [r2, #24]
 8021cd2:	68f9      	ldr	r1, [r7, #12]
 8021cd4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8021cd6:	893d      	ldrh	r5, [r7, #8]
 8021cd8:	897c      	ldrh	r4, [r7, #10]
 8021cda:	9103      	str	r1, [sp, #12]
 8021cdc:	2110      	movs	r1, #16
 8021cde:	9102      	str	r1, [sp, #8]
 8021ce0:	9201      	str	r2, [sp, #4]
 8021ce2:	9300      	str	r3, [sp, #0]
 8021ce4:	687b      	ldr	r3, [r7, #4]
 8021ce6:	462a      	mov	r2, r5
 8021ce8:	4621      	mov	r1, r4
 8021cea:	f7ff ff67 	bl	8021bbc <tcp_output_alloc_header_common>
 8021cee:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8021cf0:	697b      	ldr	r3, [r7, #20]
 8021cf2:	2b00      	cmp	r3, #0
 8021cf4:	d006      	beq.n	8021d04 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8021cf6:	68fb      	ldr	r3, [r7, #12]
 8021cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021cfa:	68fa      	ldr	r2, [r7, #12]
 8021cfc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8021cfe:	441a      	add	r2, r3
 8021d00:	68fb      	ldr	r3, [r7, #12]
 8021d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8021d04:	697b      	ldr	r3, [r7, #20]
}
 8021d06:	4618      	mov	r0, r3
 8021d08:	3718      	adds	r7, #24
 8021d0a:	46bd      	mov	sp, r7
 8021d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8021d0e:	bf00      	nop
 8021d10:	0802a3c0 	.word	0x0802a3c0
 8021d14:	0802aac8 	.word	0x0802aac8
 8021d18:	0802a414 	.word	0x0802a414

08021d1c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8021d1c:	b580      	push	{r7, lr}
 8021d1e:	b088      	sub	sp, #32
 8021d20:	af00      	add	r7, sp, #0
 8021d22:	60f8      	str	r0, [r7, #12]
 8021d24:	60b9      	str	r1, [r7, #8]
 8021d26:	4611      	mov	r1, r2
 8021d28:	461a      	mov	r2, r3
 8021d2a:	460b      	mov	r3, r1
 8021d2c:	71fb      	strb	r3, [r7, #7]
 8021d2e:	4613      	mov	r3, r2
 8021d30:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8021d32:	2300      	movs	r3, #0
 8021d34:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8021d36:	68bb      	ldr	r3, [r7, #8]
 8021d38:	2b00      	cmp	r3, #0
 8021d3a:	d106      	bne.n	8021d4a <tcp_output_fill_options+0x2e>
 8021d3c:	4b12      	ldr	r3, [pc, #72]	@ (8021d88 <tcp_output_fill_options+0x6c>)
 8021d3e:	f240 7256 	movw	r2, #1878	@ 0x756
 8021d42:	4912      	ldr	r1, [pc, #72]	@ (8021d8c <tcp_output_fill_options+0x70>)
 8021d44:	4812      	ldr	r0, [pc, #72]	@ (8021d90 <tcp_output_fill_options+0x74>)
 8021d46:	f004 fda7 	bl	8026898 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8021d4a:	68bb      	ldr	r3, [r7, #8]
 8021d4c:	685b      	ldr	r3, [r3, #4]
 8021d4e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8021d50:	69bb      	ldr	r3, [r7, #24]
 8021d52:	3314      	adds	r3, #20
 8021d54:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8021d56:	8bfb      	ldrh	r3, [r7, #30]
 8021d58:	009b      	lsls	r3, r3, #2
 8021d5a:	461a      	mov	r2, r3
 8021d5c:	79fb      	ldrb	r3, [r7, #7]
 8021d5e:	009b      	lsls	r3, r3, #2
 8021d60:	f003 0304 	and.w	r3, r3, #4
 8021d64:	4413      	add	r3, r2
 8021d66:	3314      	adds	r3, #20
 8021d68:	69ba      	ldr	r2, [r7, #24]
 8021d6a:	4413      	add	r3, r2
 8021d6c:	697a      	ldr	r2, [r7, #20]
 8021d6e:	429a      	cmp	r2, r3
 8021d70:	d006      	beq.n	8021d80 <tcp_output_fill_options+0x64>
 8021d72:	4b05      	ldr	r3, [pc, #20]	@ (8021d88 <tcp_output_fill_options+0x6c>)
 8021d74:	f240 7275 	movw	r2, #1909	@ 0x775
 8021d78:	4906      	ldr	r1, [pc, #24]	@ (8021d94 <tcp_output_fill_options+0x78>)
 8021d7a:	4805      	ldr	r0, [pc, #20]	@ (8021d90 <tcp_output_fill_options+0x74>)
 8021d7c:	f004 fd8c 	bl	8026898 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8021d80:	bf00      	nop
 8021d82:	3720      	adds	r7, #32
 8021d84:	46bd      	mov	sp, r7
 8021d86:	bd80      	pop	{r7, pc}
 8021d88:	0802a3c0 	.word	0x0802a3c0
 8021d8c:	0802aaf0 	.word	0x0802aaf0
 8021d90:	0802a414 	.word	0x0802a414
 8021d94:	0802a9e8 	.word	0x0802a9e8

08021d98 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8021d98:	b580      	push	{r7, lr}
 8021d9a:	b08a      	sub	sp, #40	@ 0x28
 8021d9c:	af04      	add	r7, sp, #16
 8021d9e:	60f8      	str	r0, [r7, #12]
 8021da0:	60b9      	str	r1, [r7, #8]
 8021da2:	607a      	str	r2, [r7, #4]
 8021da4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8021da6:	68bb      	ldr	r3, [r7, #8]
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	d106      	bne.n	8021dba <tcp_output_control_segment+0x22>
 8021dac:	4b1c      	ldr	r3, [pc, #112]	@ (8021e20 <tcp_output_control_segment+0x88>)
 8021dae:	f240 7287 	movw	r2, #1927	@ 0x787
 8021db2:	491c      	ldr	r1, [pc, #112]	@ (8021e24 <tcp_output_control_segment+0x8c>)
 8021db4:	481c      	ldr	r0, [pc, #112]	@ (8021e28 <tcp_output_control_segment+0x90>)
 8021db6:	f004 fd6f 	bl	8026898 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8021dba:	683a      	ldr	r2, [r7, #0]
 8021dbc:	6879      	ldr	r1, [r7, #4]
 8021dbe:	68f8      	ldr	r0, [r7, #12]
 8021dc0:	f7fe ff42 	bl	8020c48 <tcp_route>
 8021dc4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8021dc6:	693b      	ldr	r3, [r7, #16]
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	d102      	bne.n	8021dd2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8021dcc:	23fc      	movs	r3, #252	@ 0xfc
 8021dce:	75fb      	strb	r3, [r7, #23]
 8021dd0:	e01c      	b.n	8021e0c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8021dd2:	68fb      	ldr	r3, [r7, #12]
 8021dd4:	2b00      	cmp	r3, #0
 8021dd6:	d006      	beq.n	8021de6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8021dd8:	68fb      	ldr	r3, [r7, #12]
 8021dda:	7adb      	ldrb	r3, [r3, #11]
 8021ddc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8021dde:	68fb      	ldr	r3, [r7, #12]
 8021de0:	7a9b      	ldrb	r3, [r3, #10]
 8021de2:	757b      	strb	r3, [r7, #21]
 8021de4:	e003      	b.n	8021dee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8021de6:	23fb      	movs	r3, #251	@ 0xfb
 8021de8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8021dea:	2300      	movs	r3, #0
 8021dec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8021dee:	7dba      	ldrb	r2, [r7, #22]
 8021df0:	693b      	ldr	r3, [r7, #16]
 8021df2:	9302      	str	r3, [sp, #8]
 8021df4:	2306      	movs	r3, #6
 8021df6:	9301      	str	r3, [sp, #4]
 8021df8:	7d7b      	ldrb	r3, [r7, #21]
 8021dfa:	9300      	str	r3, [sp, #0]
 8021dfc:	4613      	mov	r3, r2
 8021dfe:	683a      	ldr	r2, [r7, #0]
 8021e00:	6879      	ldr	r1, [r7, #4]
 8021e02:	68b8      	ldr	r0, [r7, #8]
 8021e04:	f002 faf6 	bl	80243f4 <ip4_output_if>
 8021e08:	4603      	mov	r3, r0
 8021e0a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8021e0c:	68b8      	ldr	r0, [r7, #8]
 8021e0e:	f7fa fdcd 	bl	801c9ac <pbuf_free>
  return err;
 8021e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8021e16:	4618      	mov	r0, r3
 8021e18:	3718      	adds	r7, #24
 8021e1a:	46bd      	mov	sp, r7
 8021e1c:	bd80      	pop	{r7, pc}
 8021e1e:	bf00      	nop
 8021e20:	0802a3c0 	.word	0x0802a3c0
 8021e24:	0802ab18 	.word	0x0802ab18
 8021e28:	0802a414 	.word	0x0802a414

08021e2c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8021e2c:	b590      	push	{r4, r7, lr}
 8021e2e:	b08b      	sub	sp, #44	@ 0x2c
 8021e30:	af04      	add	r7, sp, #16
 8021e32:	60f8      	str	r0, [r7, #12]
 8021e34:	60b9      	str	r1, [r7, #8]
 8021e36:	607a      	str	r2, [r7, #4]
 8021e38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8021e3a:	683b      	ldr	r3, [r7, #0]
 8021e3c:	2b00      	cmp	r3, #0
 8021e3e:	d106      	bne.n	8021e4e <tcp_rst+0x22>
 8021e40:	4b1f      	ldr	r3, [pc, #124]	@ (8021ec0 <tcp_rst+0x94>)
 8021e42:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8021e46:	491f      	ldr	r1, [pc, #124]	@ (8021ec4 <tcp_rst+0x98>)
 8021e48:	481f      	ldr	r0, [pc, #124]	@ (8021ec8 <tcp_rst+0x9c>)
 8021e4a:	f004 fd25 	bl	8026898 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8021e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e50:	2b00      	cmp	r3, #0
 8021e52:	d106      	bne.n	8021e62 <tcp_rst+0x36>
 8021e54:	4b1a      	ldr	r3, [pc, #104]	@ (8021ec0 <tcp_rst+0x94>)
 8021e56:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8021e5a:	491c      	ldr	r1, [pc, #112]	@ (8021ecc <tcp_rst+0xa0>)
 8021e5c:	481a      	ldr	r0, [pc, #104]	@ (8021ec8 <tcp_rst+0x9c>)
 8021e5e:	f004 fd1b 	bl	8026898 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8021e62:	2300      	movs	r3, #0
 8021e64:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8021e66:	f246 0308 	movw	r3, #24584	@ 0x6008
 8021e6a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8021e6c:	7dfb      	ldrb	r3, [r7, #23]
 8021e6e:	b29c      	uxth	r4, r3
 8021e70:	68b8      	ldr	r0, [r7, #8]
 8021e72:	f7f9 f916 	bl	801b0a2 <lwip_htonl>
 8021e76:	4602      	mov	r2, r0
 8021e78:	8abb      	ldrh	r3, [r7, #20]
 8021e7a:	9303      	str	r3, [sp, #12]
 8021e7c:	2314      	movs	r3, #20
 8021e7e:	9302      	str	r3, [sp, #8]
 8021e80:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8021e82:	9301      	str	r3, [sp, #4]
 8021e84:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8021e86:	9300      	str	r3, [sp, #0]
 8021e88:	4613      	mov	r3, r2
 8021e8a:	2200      	movs	r2, #0
 8021e8c:	4621      	mov	r1, r4
 8021e8e:	6878      	ldr	r0, [r7, #4]
 8021e90:	f7ff fe94 	bl	8021bbc <tcp_output_alloc_header_common>
 8021e94:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8021e96:	693b      	ldr	r3, [r7, #16]
 8021e98:	2b00      	cmp	r3, #0
 8021e9a:	d00c      	beq.n	8021eb6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8021e9c:	7dfb      	ldrb	r3, [r7, #23]
 8021e9e:	2200      	movs	r2, #0
 8021ea0:	6939      	ldr	r1, [r7, #16]
 8021ea2:	68f8      	ldr	r0, [r7, #12]
 8021ea4:	f7ff ff3a 	bl	8021d1c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8021ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021eaa:	683a      	ldr	r2, [r7, #0]
 8021eac:	6939      	ldr	r1, [r7, #16]
 8021eae:	68f8      	ldr	r0, [r7, #12]
 8021eb0:	f7ff ff72 	bl	8021d98 <tcp_output_control_segment>
 8021eb4:	e000      	b.n	8021eb8 <tcp_rst+0x8c>
    return;
 8021eb6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8021eb8:	371c      	adds	r7, #28
 8021eba:	46bd      	mov	sp, r7
 8021ebc:	bd90      	pop	{r4, r7, pc}
 8021ebe:	bf00      	nop
 8021ec0:	0802a3c0 	.word	0x0802a3c0
 8021ec4:	0802ab44 	.word	0x0802ab44
 8021ec8:	0802a414 	.word	0x0802a414
 8021ecc:	0802ab60 	.word	0x0802ab60

08021ed0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8021ed0:	b590      	push	{r4, r7, lr}
 8021ed2:	b087      	sub	sp, #28
 8021ed4:	af00      	add	r7, sp, #0
 8021ed6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8021ed8:	2300      	movs	r3, #0
 8021eda:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8021edc:	2300      	movs	r3, #0
 8021ede:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8021ee0:	687b      	ldr	r3, [r7, #4]
 8021ee2:	2b00      	cmp	r3, #0
 8021ee4:	d106      	bne.n	8021ef4 <tcp_send_empty_ack+0x24>
 8021ee6:	4b28      	ldr	r3, [pc, #160]	@ (8021f88 <tcp_send_empty_ack+0xb8>)
 8021ee8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8021eec:	4927      	ldr	r1, [pc, #156]	@ (8021f8c <tcp_send_empty_ack+0xbc>)
 8021eee:	4828      	ldr	r0, [pc, #160]	@ (8021f90 <tcp_send_empty_ack+0xc0>)
 8021ef0:	f004 fcd2 	bl	8026898 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8021ef4:	7dfb      	ldrb	r3, [r7, #23]
 8021ef6:	009b      	lsls	r3, r3, #2
 8021ef8:	b2db      	uxtb	r3, r3
 8021efa:	f003 0304 	and.w	r3, r3, #4
 8021efe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8021f00:	7d7b      	ldrb	r3, [r7, #21]
 8021f02:	b29c      	uxth	r4, r3
 8021f04:	687b      	ldr	r3, [r7, #4]
 8021f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021f08:	4618      	mov	r0, r3
 8021f0a:	f7f9 f8ca 	bl	801b0a2 <lwip_htonl>
 8021f0e:	4603      	mov	r3, r0
 8021f10:	2200      	movs	r2, #0
 8021f12:	4621      	mov	r1, r4
 8021f14:	6878      	ldr	r0, [r7, #4]
 8021f16:	f7ff fec3 	bl	8021ca0 <tcp_output_alloc_header>
 8021f1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021f1c:	693b      	ldr	r3, [r7, #16]
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	d109      	bne.n	8021f36 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8021f22:	687b      	ldr	r3, [r7, #4]
 8021f24:	8b5b      	ldrh	r3, [r3, #26]
 8021f26:	f043 0303 	orr.w	r3, r3, #3
 8021f2a:	b29a      	uxth	r2, r3
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8021f30:	f06f 0301 	mvn.w	r3, #1
 8021f34:	e023      	b.n	8021f7e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8021f36:	7dbb      	ldrb	r3, [r7, #22]
 8021f38:	7dfa      	ldrb	r2, [r7, #23]
 8021f3a:	6939      	ldr	r1, [r7, #16]
 8021f3c:	6878      	ldr	r0, [r7, #4]
 8021f3e:	f7ff feed 	bl	8021d1c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8021f42:	687a      	ldr	r2, [r7, #4]
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	3304      	adds	r3, #4
 8021f48:	6939      	ldr	r1, [r7, #16]
 8021f4a:	6878      	ldr	r0, [r7, #4]
 8021f4c:	f7ff ff24 	bl	8021d98 <tcp_output_control_segment>
 8021f50:	4603      	mov	r3, r0
 8021f52:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8021f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021f58:	2b00      	cmp	r3, #0
 8021f5a:	d007      	beq.n	8021f6c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	8b5b      	ldrh	r3, [r3, #26]
 8021f60:	f043 0303 	orr.w	r3, r3, #3
 8021f64:	b29a      	uxth	r2, r3
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	835a      	strh	r2, [r3, #26]
 8021f6a:	e006      	b.n	8021f7a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8021f6c:	687b      	ldr	r3, [r7, #4]
 8021f6e:	8b5b      	ldrh	r3, [r3, #26]
 8021f70:	f023 0303 	bic.w	r3, r3, #3
 8021f74:	b29a      	uxth	r2, r3
 8021f76:	687b      	ldr	r3, [r7, #4]
 8021f78:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8021f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8021f7e:	4618      	mov	r0, r3
 8021f80:	371c      	adds	r7, #28
 8021f82:	46bd      	mov	sp, r7
 8021f84:	bd90      	pop	{r4, r7, pc}
 8021f86:	bf00      	nop
 8021f88:	0802a3c0 	.word	0x0802a3c0
 8021f8c:	0802ab7c 	.word	0x0802ab7c
 8021f90:	0802a414 	.word	0x0802a414

08021f94 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8021f94:	b590      	push	{r4, r7, lr}
 8021f96:	b087      	sub	sp, #28
 8021f98:	af00      	add	r7, sp, #0
 8021f9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8021f9c:	2300      	movs	r3, #0
 8021f9e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8021fa0:	687b      	ldr	r3, [r7, #4]
 8021fa2:	2b00      	cmp	r3, #0
 8021fa4:	d106      	bne.n	8021fb4 <tcp_keepalive+0x20>
 8021fa6:	4b18      	ldr	r3, [pc, #96]	@ (8022008 <tcp_keepalive+0x74>)
 8021fa8:	f640 0224 	movw	r2, #2084	@ 0x824
 8021fac:	4917      	ldr	r1, [pc, #92]	@ (802200c <tcp_keepalive+0x78>)
 8021fae:	4818      	ldr	r0, [pc, #96]	@ (8022010 <tcp_keepalive+0x7c>)
 8021fb0:	f004 fc72 	bl	8026898 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8021fb4:	7dfb      	ldrb	r3, [r7, #23]
 8021fb6:	b29c      	uxth	r4, r3
 8021fb8:	687b      	ldr	r3, [r7, #4]
 8021fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021fbc:	3b01      	subs	r3, #1
 8021fbe:	4618      	mov	r0, r3
 8021fc0:	f7f9 f86f 	bl	801b0a2 <lwip_htonl>
 8021fc4:	4603      	mov	r3, r0
 8021fc6:	2200      	movs	r2, #0
 8021fc8:	4621      	mov	r1, r4
 8021fca:	6878      	ldr	r0, [r7, #4]
 8021fcc:	f7ff fe68 	bl	8021ca0 <tcp_output_alloc_header>
 8021fd0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021fd2:	693b      	ldr	r3, [r7, #16]
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	d102      	bne.n	8021fde <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8021fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8021fdc:	e010      	b.n	8022000 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8021fde:	7dfb      	ldrb	r3, [r7, #23]
 8021fe0:	2200      	movs	r2, #0
 8021fe2:	6939      	ldr	r1, [r7, #16]
 8021fe4:	6878      	ldr	r0, [r7, #4]
 8021fe6:	f7ff fe99 	bl	8021d1c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8021fea:	687a      	ldr	r2, [r7, #4]
 8021fec:	687b      	ldr	r3, [r7, #4]
 8021fee:	3304      	adds	r3, #4
 8021ff0:	6939      	ldr	r1, [r7, #16]
 8021ff2:	6878      	ldr	r0, [r7, #4]
 8021ff4:	f7ff fed0 	bl	8021d98 <tcp_output_control_segment>
 8021ff8:	4603      	mov	r3, r0
 8021ffa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8021ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8022000:	4618      	mov	r0, r3
 8022002:	371c      	adds	r7, #28
 8022004:	46bd      	mov	sp, r7
 8022006:	bd90      	pop	{r4, r7, pc}
 8022008:	0802a3c0 	.word	0x0802a3c0
 802200c:	0802ab9c 	.word	0x0802ab9c
 8022010:	0802a414 	.word	0x0802a414

08022014 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8022014:	b590      	push	{r4, r7, lr}
 8022016:	b08b      	sub	sp, #44	@ 0x2c
 8022018:	af00      	add	r7, sp, #0
 802201a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 802201c:	2300      	movs	r3, #0
 802201e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8022022:	687b      	ldr	r3, [r7, #4]
 8022024:	2b00      	cmp	r3, #0
 8022026:	d106      	bne.n	8022036 <tcp_zero_window_probe+0x22>
 8022028:	4b4c      	ldr	r3, [pc, #304]	@ (802215c <tcp_zero_window_probe+0x148>)
 802202a:	f640 024f 	movw	r2, #2127	@ 0x84f
 802202e:	494c      	ldr	r1, [pc, #304]	@ (8022160 <tcp_zero_window_probe+0x14c>)
 8022030:	484c      	ldr	r0, [pc, #304]	@ (8022164 <tcp_zero_window_probe+0x150>)
 8022032:	f004 fc31 	bl	8026898 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802203a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 802203c:	6a3b      	ldr	r3, [r7, #32]
 802203e:	2b00      	cmp	r3, #0
 8022040:	d101      	bne.n	8022046 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8022042:	2300      	movs	r3, #0
 8022044:	e086      	b.n	8022154 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8022046:	687b      	ldr	r3, [r7, #4]
 8022048:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 802204c:	2bff      	cmp	r3, #255	@ 0xff
 802204e:	d007      	beq.n	8022060 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8022050:	687b      	ldr	r3, [r7, #4]
 8022052:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8022056:	3301      	adds	r3, #1
 8022058:	b2da      	uxtb	r2, r3
 802205a:	687b      	ldr	r3, [r7, #4]
 802205c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8022060:	6a3b      	ldr	r3, [r7, #32]
 8022062:	68db      	ldr	r3, [r3, #12]
 8022064:	899b      	ldrh	r3, [r3, #12]
 8022066:	b29b      	uxth	r3, r3
 8022068:	4618      	mov	r0, r3
 802206a:	f7f9 f805 	bl	801b078 <lwip_htons>
 802206e:	4603      	mov	r3, r0
 8022070:	b2db      	uxtb	r3, r3
 8022072:	f003 0301 	and.w	r3, r3, #1
 8022076:	2b00      	cmp	r3, #0
 8022078:	d005      	beq.n	8022086 <tcp_zero_window_probe+0x72>
 802207a:	6a3b      	ldr	r3, [r7, #32]
 802207c:	891b      	ldrh	r3, [r3, #8]
 802207e:	2b00      	cmp	r3, #0
 8022080:	d101      	bne.n	8022086 <tcp_zero_window_probe+0x72>
 8022082:	2301      	movs	r3, #1
 8022084:	e000      	b.n	8022088 <tcp_zero_window_probe+0x74>
 8022086:	2300      	movs	r3, #0
 8022088:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 802208a:	7ffb      	ldrb	r3, [r7, #31]
 802208c:	2b00      	cmp	r3, #0
 802208e:	bf0c      	ite	eq
 8022090:	2301      	moveq	r3, #1
 8022092:	2300      	movne	r3, #0
 8022094:	b2db      	uxtb	r3, r3
 8022096:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8022098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802209c:	b299      	uxth	r1, r3
 802209e:	6a3b      	ldr	r3, [r7, #32]
 80220a0:	68db      	ldr	r3, [r3, #12]
 80220a2:	685b      	ldr	r3, [r3, #4]
 80220a4:	8bba      	ldrh	r2, [r7, #28]
 80220a6:	6878      	ldr	r0, [r7, #4]
 80220a8:	f7ff fdfa 	bl	8021ca0 <tcp_output_alloc_header>
 80220ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80220ae:	69bb      	ldr	r3, [r7, #24]
 80220b0:	2b00      	cmp	r3, #0
 80220b2:	d102      	bne.n	80220ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80220b4:	f04f 33ff 	mov.w	r3, #4294967295
 80220b8:	e04c      	b.n	8022154 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80220ba:	69bb      	ldr	r3, [r7, #24]
 80220bc:	685b      	ldr	r3, [r3, #4]
 80220be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80220c0:	7ffb      	ldrb	r3, [r7, #31]
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	d011      	beq.n	80220ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80220c6:	697b      	ldr	r3, [r7, #20]
 80220c8:	899b      	ldrh	r3, [r3, #12]
 80220ca:	b29b      	uxth	r3, r3
 80220cc:	b21b      	sxth	r3, r3
 80220ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80220d2:	b21c      	sxth	r4, r3
 80220d4:	2011      	movs	r0, #17
 80220d6:	f7f8 ffcf 	bl	801b078 <lwip_htons>
 80220da:	4603      	mov	r3, r0
 80220dc:	b21b      	sxth	r3, r3
 80220de:	4323      	orrs	r3, r4
 80220e0:	b21b      	sxth	r3, r3
 80220e2:	b29a      	uxth	r2, r3
 80220e4:	697b      	ldr	r3, [r7, #20]
 80220e6:	819a      	strh	r2, [r3, #12]
 80220e8:	e010      	b.n	802210c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80220ea:	69bb      	ldr	r3, [r7, #24]
 80220ec:	685b      	ldr	r3, [r3, #4]
 80220ee:	3314      	adds	r3, #20
 80220f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80220f2:	6a3b      	ldr	r3, [r7, #32]
 80220f4:	6858      	ldr	r0, [r3, #4]
 80220f6:	6a3b      	ldr	r3, [r7, #32]
 80220f8:	685b      	ldr	r3, [r3, #4]
 80220fa:	891a      	ldrh	r2, [r3, #8]
 80220fc:	6a3b      	ldr	r3, [r7, #32]
 80220fe:	891b      	ldrh	r3, [r3, #8]
 8022100:	1ad3      	subs	r3, r2, r3
 8022102:	b29b      	uxth	r3, r3
 8022104:	2201      	movs	r2, #1
 8022106:	6939      	ldr	r1, [r7, #16]
 8022108:	f7fa fe56 	bl	801cdb8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 802210c:	6a3b      	ldr	r3, [r7, #32]
 802210e:	68db      	ldr	r3, [r3, #12]
 8022110:	685b      	ldr	r3, [r3, #4]
 8022112:	4618      	mov	r0, r3
 8022114:	f7f8 ffc5 	bl	801b0a2 <lwip_htonl>
 8022118:	4603      	mov	r3, r0
 802211a:	3301      	adds	r3, #1
 802211c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 802211e:	687b      	ldr	r3, [r7, #4]
 8022120:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8022122:	68fb      	ldr	r3, [r7, #12]
 8022124:	1ad3      	subs	r3, r2, r3
 8022126:	2b00      	cmp	r3, #0
 8022128:	da02      	bge.n	8022130 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 802212a:	687b      	ldr	r3, [r7, #4]
 802212c:	68fa      	ldr	r2, [r7, #12]
 802212e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8022130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8022134:	2200      	movs	r2, #0
 8022136:	69b9      	ldr	r1, [r7, #24]
 8022138:	6878      	ldr	r0, [r7, #4]
 802213a:	f7ff fdef 	bl	8021d1c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802213e:	687a      	ldr	r2, [r7, #4]
 8022140:	687b      	ldr	r3, [r7, #4]
 8022142:	3304      	adds	r3, #4
 8022144:	69b9      	ldr	r1, [r7, #24]
 8022146:	6878      	ldr	r0, [r7, #4]
 8022148:	f7ff fe26 	bl	8021d98 <tcp_output_control_segment>
 802214c:	4603      	mov	r3, r0
 802214e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8022150:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8022154:	4618      	mov	r0, r3
 8022156:	372c      	adds	r7, #44	@ 0x2c
 8022158:	46bd      	mov	sp, r7
 802215a:	bd90      	pop	{r4, r7, pc}
 802215c:	0802a3c0 	.word	0x0802a3c0
 8022160:	0802abb8 	.word	0x0802abb8
 8022164:	0802a414 	.word	0x0802a414

08022168 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8022168:	b580      	push	{r7, lr}
 802216a:	b082      	sub	sp, #8
 802216c:	af00      	add	r7, sp, #0
 802216e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8022170:	f7fa ff10 	bl	801cf94 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8022174:	4b0a      	ldr	r3, [pc, #40]	@ (80221a0 <tcpip_tcp_timer+0x38>)
 8022176:	681b      	ldr	r3, [r3, #0]
 8022178:	2b00      	cmp	r3, #0
 802217a:	d103      	bne.n	8022184 <tcpip_tcp_timer+0x1c>
 802217c:	4b09      	ldr	r3, [pc, #36]	@ (80221a4 <tcpip_tcp_timer+0x3c>)
 802217e:	681b      	ldr	r3, [r3, #0]
 8022180:	2b00      	cmp	r3, #0
 8022182:	d005      	beq.n	8022190 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8022184:	2200      	movs	r2, #0
 8022186:	4908      	ldr	r1, [pc, #32]	@ (80221a8 <tcpip_tcp_timer+0x40>)
 8022188:	20fa      	movs	r0, #250	@ 0xfa
 802218a:	f000 f8f3 	bl	8022374 <sys_timeout>
 802218e:	e003      	b.n	8022198 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8022190:	4b06      	ldr	r3, [pc, #24]	@ (80221ac <tcpip_tcp_timer+0x44>)
 8022192:	2200      	movs	r2, #0
 8022194:	601a      	str	r2, [r3, #0]
  }
}
 8022196:	bf00      	nop
 8022198:	bf00      	nop
 802219a:	3708      	adds	r7, #8
 802219c:	46bd      	mov	sp, r7
 802219e:	bd80      	pop	{r7, pc}
 80221a0:	2003c4e0 	.word	0x2003c4e0
 80221a4:	2003c4e4 	.word	0x2003c4e4
 80221a8:	08022169 	.word	0x08022169
 80221ac:	2003c52c 	.word	0x2003c52c

080221b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80221b0:	b580      	push	{r7, lr}
 80221b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80221b4:	4b0a      	ldr	r3, [pc, #40]	@ (80221e0 <tcp_timer_needed+0x30>)
 80221b6:	681b      	ldr	r3, [r3, #0]
 80221b8:	2b00      	cmp	r3, #0
 80221ba:	d10f      	bne.n	80221dc <tcp_timer_needed+0x2c>
 80221bc:	4b09      	ldr	r3, [pc, #36]	@ (80221e4 <tcp_timer_needed+0x34>)
 80221be:	681b      	ldr	r3, [r3, #0]
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	d103      	bne.n	80221cc <tcp_timer_needed+0x1c>
 80221c4:	4b08      	ldr	r3, [pc, #32]	@ (80221e8 <tcp_timer_needed+0x38>)
 80221c6:	681b      	ldr	r3, [r3, #0]
 80221c8:	2b00      	cmp	r3, #0
 80221ca:	d007      	beq.n	80221dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80221cc:	4b04      	ldr	r3, [pc, #16]	@ (80221e0 <tcp_timer_needed+0x30>)
 80221ce:	2201      	movs	r2, #1
 80221d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80221d2:	2200      	movs	r2, #0
 80221d4:	4905      	ldr	r1, [pc, #20]	@ (80221ec <tcp_timer_needed+0x3c>)
 80221d6:	20fa      	movs	r0, #250	@ 0xfa
 80221d8:	f000 f8cc 	bl	8022374 <sys_timeout>
  }
}
 80221dc:	bf00      	nop
 80221de:	bd80      	pop	{r7, pc}
 80221e0:	2003c52c 	.word	0x2003c52c
 80221e4:	2003c4e0 	.word	0x2003c4e0
 80221e8:	2003c4e4 	.word	0x2003c4e4
 80221ec:	08022169 	.word	0x08022169

080221f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80221f0:	b580      	push	{r7, lr}
 80221f2:	b086      	sub	sp, #24
 80221f4:	af00      	add	r7, sp, #0
 80221f6:	60f8      	str	r0, [r7, #12]
 80221f8:	60b9      	str	r1, [r7, #8]
 80221fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80221fc:	200a      	movs	r0, #10
 80221fe:	f7f9 fcbd 	bl	801bb7c <memp_malloc>
 8022202:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8022204:	693b      	ldr	r3, [r7, #16]
 8022206:	2b00      	cmp	r3, #0
 8022208:	d109      	bne.n	802221e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 802220a:	693b      	ldr	r3, [r7, #16]
 802220c:	2b00      	cmp	r3, #0
 802220e:	d151      	bne.n	80222b4 <sys_timeout_abs+0xc4>
 8022210:	4b2a      	ldr	r3, [pc, #168]	@ (80222bc <sys_timeout_abs+0xcc>)
 8022212:	22be      	movs	r2, #190	@ 0xbe
 8022214:	492a      	ldr	r1, [pc, #168]	@ (80222c0 <sys_timeout_abs+0xd0>)
 8022216:	482b      	ldr	r0, [pc, #172]	@ (80222c4 <sys_timeout_abs+0xd4>)
 8022218:	f004 fb3e 	bl	8026898 <iprintf>
    return;
 802221c:	e04a      	b.n	80222b4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 802221e:	693b      	ldr	r3, [r7, #16]
 8022220:	2200      	movs	r2, #0
 8022222:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8022224:	693b      	ldr	r3, [r7, #16]
 8022226:	68ba      	ldr	r2, [r7, #8]
 8022228:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 802222a:	693b      	ldr	r3, [r7, #16]
 802222c:	687a      	ldr	r2, [r7, #4]
 802222e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8022230:	693b      	ldr	r3, [r7, #16]
 8022232:	68fa      	ldr	r2, [r7, #12]
 8022234:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8022236:	4b24      	ldr	r3, [pc, #144]	@ (80222c8 <sys_timeout_abs+0xd8>)
 8022238:	681b      	ldr	r3, [r3, #0]
 802223a:	2b00      	cmp	r3, #0
 802223c:	d103      	bne.n	8022246 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 802223e:	4a22      	ldr	r2, [pc, #136]	@ (80222c8 <sys_timeout_abs+0xd8>)
 8022240:	693b      	ldr	r3, [r7, #16]
 8022242:	6013      	str	r3, [r2, #0]
    return;
 8022244:	e037      	b.n	80222b6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8022246:	693b      	ldr	r3, [r7, #16]
 8022248:	685a      	ldr	r2, [r3, #4]
 802224a:	4b1f      	ldr	r3, [pc, #124]	@ (80222c8 <sys_timeout_abs+0xd8>)
 802224c:	681b      	ldr	r3, [r3, #0]
 802224e:	685b      	ldr	r3, [r3, #4]
 8022250:	1ad3      	subs	r3, r2, r3
 8022252:	0fdb      	lsrs	r3, r3, #31
 8022254:	f003 0301 	and.w	r3, r3, #1
 8022258:	b2db      	uxtb	r3, r3
 802225a:	2b00      	cmp	r3, #0
 802225c:	d007      	beq.n	802226e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 802225e:	4b1a      	ldr	r3, [pc, #104]	@ (80222c8 <sys_timeout_abs+0xd8>)
 8022260:	681a      	ldr	r2, [r3, #0]
 8022262:	693b      	ldr	r3, [r7, #16]
 8022264:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8022266:	4a18      	ldr	r2, [pc, #96]	@ (80222c8 <sys_timeout_abs+0xd8>)
 8022268:	693b      	ldr	r3, [r7, #16]
 802226a:	6013      	str	r3, [r2, #0]
 802226c:	e023      	b.n	80222b6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 802226e:	4b16      	ldr	r3, [pc, #88]	@ (80222c8 <sys_timeout_abs+0xd8>)
 8022270:	681b      	ldr	r3, [r3, #0]
 8022272:	617b      	str	r3, [r7, #20]
 8022274:	e01a      	b.n	80222ac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8022276:	697b      	ldr	r3, [r7, #20]
 8022278:	681b      	ldr	r3, [r3, #0]
 802227a:	2b00      	cmp	r3, #0
 802227c:	d00b      	beq.n	8022296 <sys_timeout_abs+0xa6>
 802227e:	693b      	ldr	r3, [r7, #16]
 8022280:	685a      	ldr	r2, [r3, #4]
 8022282:	697b      	ldr	r3, [r7, #20]
 8022284:	681b      	ldr	r3, [r3, #0]
 8022286:	685b      	ldr	r3, [r3, #4]
 8022288:	1ad3      	subs	r3, r2, r3
 802228a:	0fdb      	lsrs	r3, r3, #31
 802228c:	f003 0301 	and.w	r3, r3, #1
 8022290:	b2db      	uxtb	r3, r3
 8022292:	2b00      	cmp	r3, #0
 8022294:	d007      	beq.n	80222a6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8022296:	697b      	ldr	r3, [r7, #20]
 8022298:	681a      	ldr	r2, [r3, #0]
 802229a:	693b      	ldr	r3, [r7, #16]
 802229c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 802229e:	697b      	ldr	r3, [r7, #20]
 80222a0:	693a      	ldr	r2, [r7, #16]
 80222a2:	601a      	str	r2, [r3, #0]
        break;
 80222a4:	e007      	b.n	80222b6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80222a6:	697b      	ldr	r3, [r7, #20]
 80222a8:	681b      	ldr	r3, [r3, #0]
 80222aa:	617b      	str	r3, [r7, #20]
 80222ac:	697b      	ldr	r3, [r7, #20]
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d1e1      	bne.n	8022276 <sys_timeout_abs+0x86>
 80222b2:	e000      	b.n	80222b6 <sys_timeout_abs+0xc6>
    return;
 80222b4:	bf00      	nop
      }
    }
  }
}
 80222b6:	3718      	adds	r7, #24
 80222b8:	46bd      	mov	sp, r7
 80222ba:	bd80      	pop	{r7, pc}
 80222bc:	0802abdc 	.word	0x0802abdc
 80222c0:	0802ac10 	.word	0x0802ac10
 80222c4:	0802ac50 	.word	0x0802ac50
 80222c8:	2003c524 	.word	0x2003c524

080222cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80222cc:	b580      	push	{r7, lr}
 80222ce:	b086      	sub	sp, #24
 80222d0:	af00      	add	r7, sp, #0
 80222d2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80222d4:	687b      	ldr	r3, [r7, #4]
 80222d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80222d8:	697b      	ldr	r3, [r7, #20]
 80222da:	685b      	ldr	r3, [r3, #4]
 80222dc:	4798      	blx	r3

  now = sys_now();
 80222de:	f7f2 fef3 	bl	80150c8 <sys_now>
 80222e2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80222e4:	697b      	ldr	r3, [r7, #20]
 80222e6:	681a      	ldr	r2, [r3, #0]
 80222e8:	4b0f      	ldr	r3, [pc, #60]	@ (8022328 <lwip_cyclic_timer+0x5c>)
 80222ea:	681b      	ldr	r3, [r3, #0]
 80222ec:	4413      	add	r3, r2
 80222ee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80222f0:	68fa      	ldr	r2, [r7, #12]
 80222f2:	693b      	ldr	r3, [r7, #16]
 80222f4:	1ad3      	subs	r3, r2, r3
 80222f6:	0fdb      	lsrs	r3, r3, #31
 80222f8:	f003 0301 	and.w	r3, r3, #1
 80222fc:	b2db      	uxtb	r3, r3
 80222fe:	2b00      	cmp	r3, #0
 8022300:	d009      	beq.n	8022316 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8022302:	697b      	ldr	r3, [r7, #20]
 8022304:	681a      	ldr	r2, [r3, #0]
 8022306:	693b      	ldr	r3, [r7, #16]
 8022308:	4413      	add	r3, r2
 802230a:	687a      	ldr	r2, [r7, #4]
 802230c:	4907      	ldr	r1, [pc, #28]	@ (802232c <lwip_cyclic_timer+0x60>)
 802230e:	4618      	mov	r0, r3
 8022310:	f7ff ff6e 	bl	80221f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8022314:	e004      	b.n	8022320 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8022316:	687a      	ldr	r2, [r7, #4]
 8022318:	4904      	ldr	r1, [pc, #16]	@ (802232c <lwip_cyclic_timer+0x60>)
 802231a:	68f8      	ldr	r0, [r7, #12]
 802231c:	f7ff ff68 	bl	80221f0 <sys_timeout_abs>
}
 8022320:	bf00      	nop
 8022322:	3718      	adds	r7, #24
 8022324:	46bd      	mov	sp, r7
 8022326:	bd80      	pop	{r7, pc}
 8022328:	2003c528 	.word	0x2003c528
 802232c:	080222cd 	.word	0x080222cd

08022330 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8022330:	b580      	push	{r7, lr}
 8022332:	b082      	sub	sp, #8
 8022334:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8022336:	2301      	movs	r3, #1
 8022338:	607b      	str	r3, [r7, #4]
 802233a:	e00e      	b.n	802235a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 802233c:	4a0b      	ldr	r2, [pc, #44]	@ (802236c <sys_timeouts_init+0x3c>)
 802233e:	687b      	ldr	r3, [r7, #4]
 8022340:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8022344:	687b      	ldr	r3, [r7, #4]
 8022346:	00db      	lsls	r3, r3, #3
 8022348:	4a08      	ldr	r2, [pc, #32]	@ (802236c <sys_timeouts_init+0x3c>)
 802234a:	4413      	add	r3, r2
 802234c:	461a      	mov	r2, r3
 802234e:	4908      	ldr	r1, [pc, #32]	@ (8022370 <sys_timeouts_init+0x40>)
 8022350:	f000 f810 	bl	8022374 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8022354:	687b      	ldr	r3, [r7, #4]
 8022356:	3301      	adds	r3, #1
 8022358:	607b      	str	r3, [r7, #4]
 802235a:	687b      	ldr	r3, [r7, #4]
 802235c:	2b02      	cmp	r3, #2
 802235e:	d9ed      	bls.n	802233c <sys_timeouts_init+0xc>
  }
}
 8022360:	bf00      	nop
 8022362:	bf00      	nop
 8022364:	3708      	adds	r7, #8
 8022366:	46bd      	mov	sp, r7
 8022368:	bd80      	pop	{r7, pc}
 802236a:	bf00      	nop
 802236c:	0802ceec 	.word	0x0802ceec
 8022370:	080222cd 	.word	0x080222cd

08022374 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8022374:	b580      	push	{r7, lr}
 8022376:	b086      	sub	sp, #24
 8022378:	af00      	add	r7, sp, #0
 802237a:	60f8      	str	r0, [r7, #12]
 802237c:	60b9      	str	r1, [r7, #8]
 802237e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8022380:	68fb      	ldr	r3, [r7, #12]
 8022382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8022386:	d306      	bcc.n	8022396 <sys_timeout+0x22>
 8022388:	4b0a      	ldr	r3, [pc, #40]	@ (80223b4 <sys_timeout+0x40>)
 802238a:	f240 1229 	movw	r2, #297	@ 0x129
 802238e:	490a      	ldr	r1, [pc, #40]	@ (80223b8 <sys_timeout+0x44>)
 8022390:	480a      	ldr	r0, [pc, #40]	@ (80223bc <sys_timeout+0x48>)
 8022392:	f004 fa81 	bl	8026898 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8022396:	f7f2 fe97 	bl	80150c8 <sys_now>
 802239a:	4602      	mov	r2, r0
 802239c:	68fb      	ldr	r3, [r7, #12]
 802239e:	4413      	add	r3, r2
 80223a0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80223a2:	687a      	ldr	r2, [r7, #4]
 80223a4:	68b9      	ldr	r1, [r7, #8]
 80223a6:	6978      	ldr	r0, [r7, #20]
 80223a8:	f7ff ff22 	bl	80221f0 <sys_timeout_abs>
#endif
}
 80223ac:	bf00      	nop
 80223ae:	3718      	adds	r7, #24
 80223b0:	46bd      	mov	sp, r7
 80223b2:	bd80      	pop	{r7, pc}
 80223b4:	0802abdc 	.word	0x0802abdc
 80223b8:	0802ac78 	.word	0x0802ac78
 80223bc:	0802ac50 	.word	0x0802ac50

080223c0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80223c0:	b580      	push	{r7, lr}
 80223c2:	b084      	sub	sp, #16
 80223c4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80223c6:	f7f2 fe7f 	bl	80150c8 <sys_now>
 80223ca:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80223cc:	4b17      	ldr	r3, [pc, #92]	@ (802242c <sys_check_timeouts+0x6c>)
 80223ce:	681b      	ldr	r3, [r3, #0]
 80223d0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80223d2:	68bb      	ldr	r3, [r7, #8]
 80223d4:	2b00      	cmp	r3, #0
 80223d6:	d022      	beq.n	802241e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80223d8:	68bb      	ldr	r3, [r7, #8]
 80223da:	685b      	ldr	r3, [r3, #4]
 80223dc:	68fa      	ldr	r2, [r7, #12]
 80223de:	1ad3      	subs	r3, r2, r3
 80223e0:	0fdb      	lsrs	r3, r3, #31
 80223e2:	f003 0301 	and.w	r3, r3, #1
 80223e6:	b2db      	uxtb	r3, r3
 80223e8:	2b00      	cmp	r3, #0
 80223ea:	d11a      	bne.n	8022422 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80223ec:	68bb      	ldr	r3, [r7, #8]
 80223ee:	681b      	ldr	r3, [r3, #0]
 80223f0:	4a0e      	ldr	r2, [pc, #56]	@ (802242c <sys_check_timeouts+0x6c>)
 80223f2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80223f4:	68bb      	ldr	r3, [r7, #8]
 80223f6:	689b      	ldr	r3, [r3, #8]
 80223f8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80223fa:	68bb      	ldr	r3, [r7, #8]
 80223fc:	68db      	ldr	r3, [r3, #12]
 80223fe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8022400:	68bb      	ldr	r3, [r7, #8]
 8022402:	685b      	ldr	r3, [r3, #4]
 8022404:	4a0a      	ldr	r2, [pc, #40]	@ (8022430 <sys_check_timeouts+0x70>)
 8022406:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8022408:	68b9      	ldr	r1, [r7, #8]
 802240a:	200a      	movs	r0, #10
 802240c:	f7f9 fc2c 	bl	801bc68 <memp_free>
    if (handler != NULL) {
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	2b00      	cmp	r3, #0
 8022414:	d0da      	beq.n	80223cc <sys_check_timeouts+0xc>
      handler(arg);
 8022416:	687b      	ldr	r3, [r7, #4]
 8022418:	6838      	ldr	r0, [r7, #0]
 802241a:	4798      	blx	r3
  do {
 802241c:	e7d6      	b.n	80223cc <sys_check_timeouts+0xc>
      return;
 802241e:	bf00      	nop
 8022420:	e000      	b.n	8022424 <sys_check_timeouts+0x64>
      return;
 8022422:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8022424:	3710      	adds	r7, #16
 8022426:	46bd      	mov	sp, r7
 8022428:	bd80      	pop	{r7, pc}
 802242a:	bf00      	nop
 802242c:	2003c524 	.word	0x2003c524
 8022430:	2003c528 	.word	0x2003c528

08022434 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8022434:	b580      	push	{r7, lr}
 8022436:	b082      	sub	sp, #8
 8022438:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 802243a:	4b16      	ldr	r3, [pc, #88]	@ (8022494 <sys_timeouts_sleeptime+0x60>)
 802243c:	681b      	ldr	r3, [r3, #0]
 802243e:	2b00      	cmp	r3, #0
 8022440:	d102      	bne.n	8022448 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8022442:	f04f 33ff 	mov.w	r3, #4294967295
 8022446:	e020      	b.n	802248a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8022448:	f7f2 fe3e 	bl	80150c8 <sys_now>
 802244c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 802244e:	4b11      	ldr	r3, [pc, #68]	@ (8022494 <sys_timeouts_sleeptime+0x60>)
 8022450:	681b      	ldr	r3, [r3, #0]
 8022452:	685a      	ldr	r2, [r3, #4]
 8022454:	687b      	ldr	r3, [r7, #4]
 8022456:	1ad3      	subs	r3, r2, r3
 8022458:	0fdb      	lsrs	r3, r3, #31
 802245a:	f003 0301 	and.w	r3, r3, #1
 802245e:	b2db      	uxtb	r3, r3
 8022460:	2b00      	cmp	r3, #0
 8022462:	d001      	beq.n	8022468 <sys_timeouts_sleeptime+0x34>
    return 0;
 8022464:	2300      	movs	r3, #0
 8022466:	e010      	b.n	802248a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8022468:	4b0a      	ldr	r3, [pc, #40]	@ (8022494 <sys_timeouts_sleeptime+0x60>)
 802246a:	681b      	ldr	r3, [r3, #0]
 802246c:	685a      	ldr	r2, [r3, #4]
 802246e:	687b      	ldr	r3, [r7, #4]
 8022470:	1ad3      	subs	r3, r2, r3
 8022472:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8022474:	683b      	ldr	r3, [r7, #0]
 8022476:	2b00      	cmp	r3, #0
 8022478:	da06      	bge.n	8022488 <sys_timeouts_sleeptime+0x54>
 802247a:	4b07      	ldr	r3, [pc, #28]	@ (8022498 <sys_timeouts_sleeptime+0x64>)
 802247c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8022480:	4906      	ldr	r1, [pc, #24]	@ (802249c <sys_timeouts_sleeptime+0x68>)
 8022482:	4807      	ldr	r0, [pc, #28]	@ (80224a0 <sys_timeouts_sleeptime+0x6c>)
 8022484:	f004 fa08 	bl	8026898 <iprintf>
    return ret;
 8022488:	683b      	ldr	r3, [r7, #0]
  }
}
 802248a:	4618      	mov	r0, r3
 802248c:	3708      	adds	r7, #8
 802248e:	46bd      	mov	sp, r7
 8022490:	bd80      	pop	{r7, pc}
 8022492:	bf00      	nop
 8022494:	2003c524 	.word	0x2003c524
 8022498:	0802abdc 	.word	0x0802abdc
 802249c:	0802acb0 	.word	0x0802acb0
 80224a0:	0802ac50 	.word	0x0802ac50

080224a4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80224a4:	b580      	push	{r7, lr}
 80224a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80224a8:	f003 fc9e 	bl	8025de8 <rand>
 80224ac:	4603      	mov	r3, r0
 80224ae:	b29b      	uxth	r3, r3
 80224b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80224b4:	b29b      	uxth	r3, r3
 80224b6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80224ba:	b29a      	uxth	r2, r3
 80224bc:	4b01      	ldr	r3, [pc, #4]	@ (80224c4 <udp_init+0x20>)
 80224be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80224c0:	bf00      	nop
 80224c2:	bd80      	pop	{r7, pc}
 80224c4:	200100a8 	.word	0x200100a8

080224c8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80224c8:	b480      	push	{r7}
 80224ca:	b083      	sub	sp, #12
 80224cc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80224ce:	2300      	movs	r3, #0
 80224d0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80224d2:	4b17      	ldr	r3, [pc, #92]	@ (8022530 <udp_new_port+0x68>)
 80224d4:	881b      	ldrh	r3, [r3, #0]
 80224d6:	1c5a      	adds	r2, r3, #1
 80224d8:	b291      	uxth	r1, r2
 80224da:	4a15      	ldr	r2, [pc, #84]	@ (8022530 <udp_new_port+0x68>)
 80224dc:	8011      	strh	r1, [r2, #0]
 80224de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80224e2:	4293      	cmp	r3, r2
 80224e4:	d103      	bne.n	80224ee <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80224e6:	4b12      	ldr	r3, [pc, #72]	@ (8022530 <udp_new_port+0x68>)
 80224e8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80224ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80224ee:	4b11      	ldr	r3, [pc, #68]	@ (8022534 <udp_new_port+0x6c>)
 80224f0:	681b      	ldr	r3, [r3, #0]
 80224f2:	603b      	str	r3, [r7, #0]
 80224f4:	e011      	b.n	802251a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80224f6:	683b      	ldr	r3, [r7, #0]
 80224f8:	8a5a      	ldrh	r2, [r3, #18]
 80224fa:	4b0d      	ldr	r3, [pc, #52]	@ (8022530 <udp_new_port+0x68>)
 80224fc:	881b      	ldrh	r3, [r3, #0]
 80224fe:	429a      	cmp	r2, r3
 8022500:	d108      	bne.n	8022514 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8022502:	88fb      	ldrh	r3, [r7, #6]
 8022504:	3301      	adds	r3, #1
 8022506:	80fb      	strh	r3, [r7, #6]
 8022508:	88fb      	ldrh	r3, [r7, #6]
 802250a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 802250e:	d3e0      	bcc.n	80224d2 <udp_new_port+0xa>
        return 0;
 8022510:	2300      	movs	r3, #0
 8022512:	e007      	b.n	8022524 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022514:	683b      	ldr	r3, [r7, #0]
 8022516:	68db      	ldr	r3, [r3, #12]
 8022518:	603b      	str	r3, [r7, #0]
 802251a:	683b      	ldr	r3, [r7, #0]
 802251c:	2b00      	cmp	r3, #0
 802251e:	d1ea      	bne.n	80224f6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8022520:	4b03      	ldr	r3, [pc, #12]	@ (8022530 <udp_new_port+0x68>)
 8022522:	881b      	ldrh	r3, [r3, #0]
}
 8022524:	4618      	mov	r0, r3
 8022526:	370c      	adds	r7, #12
 8022528:	46bd      	mov	sp, r7
 802252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802252e:	4770      	bx	lr
 8022530:	200100a8 	.word	0x200100a8
 8022534:	2003c530 	.word	0x2003c530

08022538 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8022538:	b580      	push	{r7, lr}
 802253a:	b084      	sub	sp, #16
 802253c:	af00      	add	r7, sp, #0
 802253e:	60f8      	str	r0, [r7, #12]
 8022540:	60b9      	str	r1, [r7, #8]
 8022542:	4613      	mov	r3, r2
 8022544:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8022546:	68fb      	ldr	r3, [r7, #12]
 8022548:	2b00      	cmp	r3, #0
 802254a:	d105      	bne.n	8022558 <udp_input_local_match+0x20>
 802254c:	4b27      	ldr	r3, [pc, #156]	@ (80225ec <udp_input_local_match+0xb4>)
 802254e:	2287      	movs	r2, #135	@ 0x87
 8022550:	4927      	ldr	r1, [pc, #156]	@ (80225f0 <udp_input_local_match+0xb8>)
 8022552:	4828      	ldr	r0, [pc, #160]	@ (80225f4 <udp_input_local_match+0xbc>)
 8022554:	f004 f9a0 	bl	8026898 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8022558:	68bb      	ldr	r3, [r7, #8]
 802255a:	2b00      	cmp	r3, #0
 802255c:	d105      	bne.n	802256a <udp_input_local_match+0x32>
 802255e:	4b23      	ldr	r3, [pc, #140]	@ (80225ec <udp_input_local_match+0xb4>)
 8022560:	2288      	movs	r2, #136	@ 0x88
 8022562:	4925      	ldr	r1, [pc, #148]	@ (80225f8 <udp_input_local_match+0xc0>)
 8022564:	4823      	ldr	r0, [pc, #140]	@ (80225f4 <udp_input_local_match+0xbc>)
 8022566:	f004 f997 	bl	8026898 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802256a:	68fb      	ldr	r3, [r7, #12]
 802256c:	7a1b      	ldrb	r3, [r3, #8]
 802256e:	2b00      	cmp	r3, #0
 8022570:	d00b      	beq.n	802258a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8022572:	68fb      	ldr	r3, [r7, #12]
 8022574:	7a1a      	ldrb	r2, [r3, #8]
 8022576:	4b21      	ldr	r3, [pc, #132]	@ (80225fc <udp_input_local_match+0xc4>)
 8022578:	685b      	ldr	r3, [r3, #4]
 802257a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 802257e:	3301      	adds	r3, #1
 8022580:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8022582:	429a      	cmp	r2, r3
 8022584:	d001      	beq.n	802258a <udp_input_local_match+0x52>
    return 0;
 8022586:	2300      	movs	r3, #0
 8022588:	e02b      	b.n	80225e2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 802258a:	79fb      	ldrb	r3, [r7, #7]
 802258c:	2b00      	cmp	r3, #0
 802258e:	d018      	beq.n	80225c2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022590:	68fb      	ldr	r3, [r7, #12]
 8022592:	2b00      	cmp	r3, #0
 8022594:	d013      	beq.n	80225be <udp_input_local_match+0x86>
 8022596:	68fb      	ldr	r3, [r7, #12]
 8022598:	681b      	ldr	r3, [r3, #0]
 802259a:	2b00      	cmp	r3, #0
 802259c:	d00f      	beq.n	80225be <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802259e:	4b17      	ldr	r3, [pc, #92]	@ (80225fc <udp_input_local_match+0xc4>)
 80225a0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80225a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80225a6:	d00a      	beq.n	80225be <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80225a8:	68fb      	ldr	r3, [r7, #12]
 80225aa:	681a      	ldr	r2, [r3, #0]
 80225ac:	4b13      	ldr	r3, [pc, #76]	@ (80225fc <udp_input_local_match+0xc4>)
 80225ae:	695b      	ldr	r3, [r3, #20]
 80225b0:	405a      	eors	r2, r3
 80225b2:	68bb      	ldr	r3, [r7, #8]
 80225b4:	3308      	adds	r3, #8
 80225b6:	681b      	ldr	r3, [r3, #0]
 80225b8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d110      	bne.n	80225e0 <udp_input_local_match+0xa8>
          return 1;
 80225be:	2301      	movs	r3, #1
 80225c0:	e00f      	b.n	80225e2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80225c2:	68fb      	ldr	r3, [r7, #12]
 80225c4:	2b00      	cmp	r3, #0
 80225c6:	d009      	beq.n	80225dc <udp_input_local_match+0xa4>
 80225c8:	68fb      	ldr	r3, [r7, #12]
 80225ca:	681b      	ldr	r3, [r3, #0]
 80225cc:	2b00      	cmp	r3, #0
 80225ce:	d005      	beq.n	80225dc <udp_input_local_match+0xa4>
 80225d0:	68fb      	ldr	r3, [r7, #12]
 80225d2:	681a      	ldr	r2, [r3, #0]
 80225d4:	4b09      	ldr	r3, [pc, #36]	@ (80225fc <udp_input_local_match+0xc4>)
 80225d6:	695b      	ldr	r3, [r3, #20]
 80225d8:	429a      	cmp	r2, r3
 80225da:	d101      	bne.n	80225e0 <udp_input_local_match+0xa8>
        return 1;
 80225dc:	2301      	movs	r3, #1
 80225de:	e000      	b.n	80225e2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80225e0:	2300      	movs	r3, #0
}
 80225e2:	4618      	mov	r0, r3
 80225e4:	3710      	adds	r7, #16
 80225e6:	46bd      	mov	sp, r7
 80225e8:	bd80      	pop	{r7, pc}
 80225ea:	bf00      	nop
 80225ec:	0802acc4 	.word	0x0802acc4
 80225f0:	0802acf4 	.word	0x0802acf4
 80225f4:	0802ad18 	.word	0x0802ad18
 80225f8:	0802ad40 	.word	0x0802ad40
 80225fc:	200193d0 	.word	0x200193d0

08022600 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8022600:	b590      	push	{r4, r7, lr}
 8022602:	b08d      	sub	sp, #52	@ 0x34
 8022604:	af02      	add	r7, sp, #8
 8022606:	6078      	str	r0, [r7, #4]
 8022608:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 802260a:	2300      	movs	r3, #0
 802260c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 802260e:	687b      	ldr	r3, [r7, #4]
 8022610:	2b00      	cmp	r3, #0
 8022612:	d105      	bne.n	8022620 <udp_input+0x20>
 8022614:	4b7c      	ldr	r3, [pc, #496]	@ (8022808 <udp_input+0x208>)
 8022616:	22cf      	movs	r2, #207	@ 0xcf
 8022618:	497c      	ldr	r1, [pc, #496]	@ (802280c <udp_input+0x20c>)
 802261a:	487d      	ldr	r0, [pc, #500]	@ (8022810 <udp_input+0x210>)
 802261c:	f004 f93c 	bl	8026898 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8022620:	683b      	ldr	r3, [r7, #0]
 8022622:	2b00      	cmp	r3, #0
 8022624:	d105      	bne.n	8022632 <udp_input+0x32>
 8022626:	4b78      	ldr	r3, [pc, #480]	@ (8022808 <udp_input+0x208>)
 8022628:	22d0      	movs	r2, #208	@ 0xd0
 802262a:	497a      	ldr	r1, [pc, #488]	@ (8022814 <udp_input+0x214>)
 802262c:	4878      	ldr	r0, [pc, #480]	@ (8022810 <udp_input+0x210>)
 802262e:	f004 f933 	bl	8026898 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8022632:	687b      	ldr	r3, [r7, #4]
 8022634:	895b      	ldrh	r3, [r3, #10]
 8022636:	2b07      	cmp	r3, #7
 8022638:	d803      	bhi.n	8022642 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 802263a:	6878      	ldr	r0, [r7, #4]
 802263c:	f7fa f9b6 	bl	801c9ac <pbuf_free>
    goto end;
 8022640:	e0de      	b.n	8022800 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	685b      	ldr	r3, [r3, #4]
 8022646:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8022648:	4b73      	ldr	r3, [pc, #460]	@ (8022818 <udp_input+0x218>)
 802264a:	695b      	ldr	r3, [r3, #20]
 802264c:	4a72      	ldr	r2, [pc, #456]	@ (8022818 <udp_input+0x218>)
 802264e:	6812      	ldr	r2, [r2, #0]
 8022650:	4611      	mov	r1, r2
 8022652:	4618      	mov	r0, r3
 8022654:	f001 ffa6 	bl	80245a4 <ip4_addr_isbroadcast_u32>
 8022658:	4603      	mov	r3, r0
 802265a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 802265c:	697b      	ldr	r3, [r7, #20]
 802265e:	881b      	ldrh	r3, [r3, #0]
 8022660:	b29b      	uxth	r3, r3
 8022662:	4618      	mov	r0, r3
 8022664:	f7f8 fd08 	bl	801b078 <lwip_htons>
 8022668:	4603      	mov	r3, r0
 802266a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 802266c:	697b      	ldr	r3, [r7, #20]
 802266e:	885b      	ldrh	r3, [r3, #2]
 8022670:	b29b      	uxth	r3, r3
 8022672:	4618      	mov	r0, r3
 8022674:	f7f8 fd00 	bl	801b078 <lwip_htons>
 8022678:	4603      	mov	r3, r0
 802267a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 802267c:	2300      	movs	r3, #0
 802267e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8022680:	2300      	movs	r3, #0
 8022682:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8022684:	2300      	movs	r3, #0
 8022686:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022688:	4b64      	ldr	r3, [pc, #400]	@ (802281c <udp_input+0x21c>)
 802268a:	681b      	ldr	r3, [r3, #0]
 802268c:	627b      	str	r3, [r7, #36]	@ 0x24
 802268e:	e054      	b.n	802273a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8022690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022692:	8a5b      	ldrh	r3, [r3, #18]
 8022694:	89fa      	ldrh	r2, [r7, #14]
 8022696:	429a      	cmp	r2, r3
 8022698:	d14a      	bne.n	8022730 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 802269a:	7cfb      	ldrb	r3, [r7, #19]
 802269c:	461a      	mov	r2, r3
 802269e:	6839      	ldr	r1, [r7, #0]
 80226a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80226a2:	f7ff ff49 	bl	8022538 <udp_input_local_match>
 80226a6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80226a8:	2b00      	cmp	r3, #0
 80226aa:	d041      	beq.n	8022730 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80226ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80226ae:	7c1b      	ldrb	r3, [r3, #16]
 80226b0:	f003 0304 	and.w	r3, r3, #4
 80226b4:	2b00      	cmp	r3, #0
 80226b6:	d11d      	bne.n	80226f4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80226b8:	69fb      	ldr	r3, [r7, #28]
 80226ba:	2b00      	cmp	r3, #0
 80226bc:	d102      	bne.n	80226c4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80226be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80226c0:	61fb      	str	r3, [r7, #28]
 80226c2:	e017      	b.n	80226f4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80226c4:	7cfb      	ldrb	r3, [r7, #19]
 80226c6:	2b00      	cmp	r3, #0
 80226c8:	d014      	beq.n	80226f4 <udp_input+0xf4>
 80226ca:	4b53      	ldr	r3, [pc, #332]	@ (8022818 <udp_input+0x218>)
 80226cc:	695b      	ldr	r3, [r3, #20]
 80226ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80226d2:	d10f      	bne.n	80226f4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80226d4:	69fb      	ldr	r3, [r7, #28]
 80226d6:	681a      	ldr	r2, [r3, #0]
 80226d8:	683b      	ldr	r3, [r7, #0]
 80226da:	3304      	adds	r3, #4
 80226dc:	681b      	ldr	r3, [r3, #0]
 80226de:	429a      	cmp	r2, r3
 80226e0:	d008      	beq.n	80226f4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80226e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80226e4:	681a      	ldr	r2, [r3, #0]
 80226e6:	683b      	ldr	r3, [r7, #0]
 80226e8:	3304      	adds	r3, #4
 80226ea:	681b      	ldr	r3, [r3, #0]
 80226ec:	429a      	cmp	r2, r3
 80226ee:	d101      	bne.n	80226f4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80226f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80226f2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80226f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80226f6:	8a9b      	ldrh	r3, [r3, #20]
 80226f8:	8a3a      	ldrh	r2, [r7, #16]
 80226fa:	429a      	cmp	r2, r3
 80226fc:	d118      	bne.n	8022730 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80226fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022700:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8022702:	2b00      	cmp	r3, #0
 8022704:	d005      	beq.n	8022712 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8022706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022708:	685a      	ldr	r2, [r3, #4]
 802270a:	4b43      	ldr	r3, [pc, #268]	@ (8022818 <udp_input+0x218>)
 802270c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 802270e:	429a      	cmp	r2, r3
 8022710:	d10e      	bne.n	8022730 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8022712:	6a3b      	ldr	r3, [r7, #32]
 8022714:	2b00      	cmp	r3, #0
 8022716:	d014      	beq.n	8022742 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8022718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802271a:	68da      	ldr	r2, [r3, #12]
 802271c:	6a3b      	ldr	r3, [r7, #32]
 802271e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8022720:	4b3e      	ldr	r3, [pc, #248]	@ (802281c <udp_input+0x21c>)
 8022722:	681a      	ldr	r2, [r3, #0]
 8022724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022726:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8022728:	4a3c      	ldr	r2, [pc, #240]	@ (802281c <udp_input+0x21c>)
 802272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802272c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 802272e:	e008      	b.n	8022742 <udp_input+0x142>
      }
    }

    prev = pcb;
 8022730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022732:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022736:	68db      	ldr	r3, [r3, #12]
 8022738:	627b      	str	r3, [r7, #36]	@ 0x24
 802273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802273c:	2b00      	cmp	r3, #0
 802273e:	d1a7      	bne.n	8022690 <udp_input+0x90>
 8022740:	e000      	b.n	8022744 <udp_input+0x144>
        break;
 8022742:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8022744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022746:	2b00      	cmp	r3, #0
 8022748:	d101      	bne.n	802274e <udp_input+0x14e>
    pcb = uncon_pcb;
 802274a:	69fb      	ldr	r3, [r7, #28]
 802274c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 802274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022750:	2b00      	cmp	r3, #0
 8022752:	d002      	beq.n	802275a <udp_input+0x15a>
    for_us = 1;
 8022754:	2301      	movs	r3, #1
 8022756:	76fb      	strb	r3, [r7, #27]
 8022758:	e00a      	b.n	8022770 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 802275a:	683b      	ldr	r3, [r7, #0]
 802275c:	3304      	adds	r3, #4
 802275e:	681a      	ldr	r2, [r3, #0]
 8022760:	4b2d      	ldr	r3, [pc, #180]	@ (8022818 <udp_input+0x218>)
 8022762:	695b      	ldr	r3, [r3, #20]
 8022764:	429a      	cmp	r2, r3
 8022766:	bf0c      	ite	eq
 8022768:	2301      	moveq	r3, #1
 802276a:	2300      	movne	r3, #0
 802276c:	b2db      	uxtb	r3, r3
 802276e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8022770:	7efb      	ldrb	r3, [r7, #27]
 8022772:	2b00      	cmp	r3, #0
 8022774:	d041      	beq.n	80227fa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8022776:	2108      	movs	r1, #8
 8022778:	6878      	ldr	r0, [r7, #4]
 802277a:	f7fa f891 	bl	801c8a0 <pbuf_remove_header>
 802277e:	4603      	mov	r3, r0
 8022780:	2b00      	cmp	r3, #0
 8022782:	d00a      	beq.n	802279a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8022784:	4b20      	ldr	r3, [pc, #128]	@ (8022808 <udp_input+0x208>)
 8022786:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 802278a:	4925      	ldr	r1, [pc, #148]	@ (8022820 <udp_input+0x220>)
 802278c:	4820      	ldr	r0, [pc, #128]	@ (8022810 <udp_input+0x210>)
 802278e:	f004 f883 	bl	8026898 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8022792:	6878      	ldr	r0, [r7, #4]
 8022794:	f7fa f90a 	bl	801c9ac <pbuf_free>
      goto end;
 8022798:	e032      	b.n	8022800 <udp_input+0x200>
    }

    if (pcb != NULL) {
 802279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802279c:	2b00      	cmp	r3, #0
 802279e:	d012      	beq.n	80227c6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80227a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227a2:	699b      	ldr	r3, [r3, #24]
 80227a4:	2b00      	cmp	r3, #0
 80227a6:	d00a      	beq.n	80227be <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80227a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227aa:	699c      	ldr	r4, [r3, #24]
 80227ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227ae:	69d8      	ldr	r0, [r3, #28]
 80227b0:	8a3b      	ldrh	r3, [r7, #16]
 80227b2:	9300      	str	r3, [sp, #0]
 80227b4:	4b1b      	ldr	r3, [pc, #108]	@ (8022824 <udp_input+0x224>)
 80227b6:	687a      	ldr	r2, [r7, #4]
 80227b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80227ba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80227bc:	e021      	b.n	8022802 <udp_input+0x202>
        pbuf_free(p);
 80227be:	6878      	ldr	r0, [r7, #4]
 80227c0:	f7fa f8f4 	bl	801c9ac <pbuf_free>
        goto end;
 80227c4:	e01c      	b.n	8022800 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80227c6:	7cfb      	ldrb	r3, [r7, #19]
 80227c8:	2b00      	cmp	r3, #0
 80227ca:	d112      	bne.n	80227f2 <udp_input+0x1f2>
 80227cc:	4b12      	ldr	r3, [pc, #72]	@ (8022818 <udp_input+0x218>)
 80227ce:	695b      	ldr	r3, [r3, #20]
 80227d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80227d4:	2be0      	cmp	r3, #224	@ 0xe0
 80227d6:	d00c      	beq.n	80227f2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80227d8:	4b0f      	ldr	r3, [pc, #60]	@ (8022818 <udp_input+0x218>)
 80227da:	899b      	ldrh	r3, [r3, #12]
 80227dc:	3308      	adds	r3, #8
 80227de:	b29b      	uxth	r3, r3
 80227e0:	b21b      	sxth	r3, r3
 80227e2:	4619      	mov	r1, r3
 80227e4:	6878      	ldr	r0, [r7, #4]
 80227e6:	f7fa f8ce 	bl	801c986 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80227ea:	2103      	movs	r1, #3
 80227ec:	6878      	ldr	r0, [r7, #4]
 80227ee:	f001 fbaf 	bl	8023f50 <icmp_dest_unreach>
      pbuf_free(p);
 80227f2:	6878      	ldr	r0, [r7, #4]
 80227f4:	f7fa f8da 	bl	801c9ac <pbuf_free>
  return;
 80227f8:	e003      	b.n	8022802 <udp_input+0x202>
    pbuf_free(p);
 80227fa:	6878      	ldr	r0, [r7, #4]
 80227fc:	f7fa f8d6 	bl	801c9ac <pbuf_free>
  return;
 8022800:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8022802:	372c      	adds	r7, #44	@ 0x2c
 8022804:	46bd      	mov	sp, r7
 8022806:	bd90      	pop	{r4, r7, pc}
 8022808:	0802acc4 	.word	0x0802acc4
 802280c:	0802ad68 	.word	0x0802ad68
 8022810:	0802ad18 	.word	0x0802ad18
 8022814:	0802ad80 	.word	0x0802ad80
 8022818:	200193d0 	.word	0x200193d0
 802281c:	2003c530 	.word	0x2003c530
 8022820:	0802ad9c 	.word	0x0802ad9c
 8022824:	200193e0 	.word	0x200193e0

08022828 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8022828:	b580      	push	{r7, lr}
 802282a:	b082      	sub	sp, #8
 802282c:	af00      	add	r7, sp, #0
 802282e:	6078      	str	r0, [r7, #4]
 8022830:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8022832:	687b      	ldr	r3, [r7, #4]
 8022834:	2b00      	cmp	r3, #0
 8022836:	d109      	bne.n	802284c <udp_send+0x24>
 8022838:	4b11      	ldr	r3, [pc, #68]	@ (8022880 <udp_send+0x58>)
 802283a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 802283e:	4911      	ldr	r1, [pc, #68]	@ (8022884 <udp_send+0x5c>)
 8022840:	4811      	ldr	r0, [pc, #68]	@ (8022888 <udp_send+0x60>)
 8022842:	f004 f829 	bl	8026898 <iprintf>
 8022846:	f06f 030f 	mvn.w	r3, #15
 802284a:	e015      	b.n	8022878 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 802284c:	683b      	ldr	r3, [r7, #0]
 802284e:	2b00      	cmp	r3, #0
 8022850:	d109      	bne.n	8022866 <udp_send+0x3e>
 8022852:	4b0b      	ldr	r3, [pc, #44]	@ (8022880 <udp_send+0x58>)
 8022854:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8022858:	490c      	ldr	r1, [pc, #48]	@ (802288c <udp_send+0x64>)
 802285a:	480b      	ldr	r0, [pc, #44]	@ (8022888 <udp_send+0x60>)
 802285c:	f004 f81c 	bl	8026898 <iprintf>
 8022860:	f06f 030f 	mvn.w	r3, #15
 8022864:	e008      	b.n	8022878 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8022866:	687b      	ldr	r3, [r7, #4]
 8022868:	1d1a      	adds	r2, r3, #4
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	8a9b      	ldrh	r3, [r3, #20]
 802286e:	6839      	ldr	r1, [r7, #0]
 8022870:	6878      	ldr	r0, [r7, #4]
 8022872:	f000 f80d 	bl	8022890 <udp_sendto>
 8022876:	4603      	mov	r3, r0
}
 8022878:	4618      	mov	r0, r3
 802287a:	3708      	adds	r7, #8
 802287c:	46bd      	mov	sp, r7
 802287e:	bd80      	pop	{r7, pc}
 8022880:	0802acc4 	.word	0x0802acc4
 8022884:	0802adb8 	.word	0x0802adb8
 8022888:	0802ad18 	.word	0x0802ad18
 802288c:	0802add0 	.word	0x0802add0

08022890 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8022890:	b580      	push	{r7, lr}
 8022892:	b088      	sub	sp, #32
 8022894:	af02      	add	r7, sp, #8
 8022896:	60f8      	str	r0, [r7, #12]
 8022898:	60b9      	str	r1, [r7, #8]
 802289a:	607a      	str	r2, [r7, #4]
 802289c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 802289e:	68fb      	ldr	r3, [r7, #12]
 80228a0:	2b00      	cmp	r3, #0
 80228a2:	d109      	bne.n	80228b8 <udp_sendto+0x28>
 80228a4:	4b23      	ldr	r3, [pc, #140]	@ (8022934 <udp_sendto+0xa4>)
 80228a6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80228aa:	4923      	ldr	r1, [pc, #140]	@ (8022938 <udp_sendto+0xa8>)
 80228ac:	4823      	ldr	r0, [pc, #140]	@ (802293c <udp_sendto+0xac>)
 80228ae:	f003 fff3 	bl	8026898 <iprintf>
 80228b2:	f06f 030f 	mvn.w	r3, #15
 80228b6:	e038      	b.n	802292a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80228b8:	68bb      	ldr	r3, [r7, #8]
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d109      	bne.n	80228d2 <udp_sendto+0x42>
 80228be:	4b1d      	ldr	r3, [pc, #116]	@ (8022934 <udp_sendto+0xa4>)
 80228c0:	f240 2219 	movw	r2, #537	@ 0x219
 80228c4:	491e      	ldr	r1, [pc, #120]	@ (8022940 <udp_sendto+0xb0>)
 80228c6:	481d      	ldr	r0, [pc, #116]	@ (802293c <udp_sendto+0xac>)
 80228c8:	f003 ffe6 	bl	8026898 <iprintf>
 80228cc:	f06f 030f 	mvn.w	r3, #15
 80228d0:	e02b      	b.n	802292a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80228d2:	687b      	ldr	r3, [r7, #4]
 80228d4:	2b00      	cmp	r3, #0
 80228d6:	d109      	bne.n	80228ec <udp_sendto+0x5c>
 80228d8:	4b16      	ldr	r3, [pc, #88]	@ (8022934 <udp_sendto+0xa4>)
 80228da:	f240 221a 	movw	r2, #538	@ 0x21a
 80228de:	4919      	ldr	r1, [pc, #100]	@ (8022944 <udp_sendto+0xb4>)
 80228e0:	4816      	ldr	r0, [pc, #88]	@ (802293c <udp_sendto+0xac>)
 80228e2:	f003 ffd9 	bl	8026898 <iprintf>
 80228e6:	f06f 030f 	mvn.w	r3, #15
 80228ea:	e01e      	b.n	802292a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80228ec:	68fb      	ldr	r3, [r7, #12]
 80228ee:	7a1b      	ldrb	r3, [r3, #8]
 80228f0:	2b00      	cmp	r3, #0
 80228f2:	d006      	beq.n	8022902 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80228f4:	68fb      	ldr	r3, [r7, #12]
 80228f6:	7a1b      	ldrb	r3, [r3, #8]
 80228f8:	4618      	mov	r0, r3
 80228fa:	f7f9 fccb 	bl	801c294 <netif_get_by_index>
 80228fe:	6178      	str	r0, [r7, #20]
 8022900:	e003      	b.n	802290a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8022902:	6878      	ldr	r0, [r7, #4]
 8022904:	f001 fbb8 	bl	8024078 <ip4_route>
 8022908:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 802290a:	697b      	ldr	r3, [r7, #20]
 802290c:	2b00      	cmp	r3, #0
 802290e:	d102      	bne.n	8022916 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8022910:	f06f 0303 	mvn.w	r3, #3
 8022914:	e009      	b.n	802292a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8022916:	887a      	ldrh	r2, [r7, #2]
 8022918:	697b      	ldr	r3, [r7, #20]
 802291a:	9300      	str	r3, [sp, #0]
 802291c:	4613      	mov	r3, r2
 802291e:	687a      	ldr	r2, [r7, #4]
 8022920:	68b9      	ldr	r1, [r7, #8]
 8022922:	68f8      	ldr	r0, [r7, #12]
 8022924:	f000 f810 	bl	8022948 <udp_sendto_if>
 8022928:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 802292a:	4618      	mov	r0, r3
 802292c:	3718      	adds	r7, #24
 802292e:	46bd      	mov	sp, r7
 8022930:	bd80      	pop	{r7, pc}
 8022932:	bf00      	nop
 8022934:	0802acc4 	.word	0x0802acc4
 8022938:	0802ade8 	.word	0x0802ade8
 802293c:	0802ad18 	.word	0x0802ad18
 8022940:	0802ae00 	.word	0x0802ae00
 8022944:	0802ae1c 	.word	0x0802ae1c

08022948 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8022948:	b580      	push	{r7, lr}
 802294a:	b088      	sub	sp, #32
 802294c:	af02      	add	r7, sp, #8
 802294e:	60f8      	str	r0, [r7, #12]
 8022950:	60b9      	str	r1, [r7, #8]
 8022952:	607a      	str	r2, [r7, #4]
 8022954:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8022956:	68fb      	ldr	r3, [r7, #12]
 8022958:	2b00      	cmp	r3, #0
 802295a:	d109      	bne.n	8022970 <udp_sendto_if+0x28>
 802295c:	4b2e      	ldr	r3, [pc, #184]	@ (8022a18 <udp_sendto_if+0xd0>)
 802295e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8022962:	492e      	ldr	r1, [pc, #184]	@ (8022a1c <udp_sendto_if+0xd4>)
 8022964:	482e      	ldr	r0, [pc, #184]	@ (8022a20 <udp_sendto_if+0xd8>)
 8022966:	f003 ff97 	bl	8026898 <iprintf>
 802296a:	f06f 030f 	mvn.w	r3, #15
 802296e:	e04f      	b.n	8022a10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8022970:	68bb      	ldr	r3, [r7, #8]
 8022972:	2b00      	cmp	r3, #0
 8022974:	d109      	bne.n	802298a <udp_sendto_if+0x42>
 8022976:	4b28      	ldr	r3, [pc, #160]	@ (8022a18 <udp_sendto_if+0xd0>)
 8022978:	f240 2281 	movw	r2, #641	@ 0x281
 802297c:	4929      	ldr	r1, [pc, #164]	@ (8022a24 <udp_sendto_if+0xdc>)
 802297e:	4828      	ldr	r0, [pc, #160]	@ (8022a20 <udp_sendto_if+0xd8>)
 8022980:	f003 ff8a 	bl	8026898 <iprintf>
 8022984:	f06f 030f 	mvn.w	r3, #15
 8022988:	e042      	b.n	8022a10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802298a:	687b      	ldr	r3, [r7, #4]
 802298c:	2b00      	cmp	r3, #0
 802298e:	d109      	bne.n	80229a4 <udp_sendto_if+0x5c>
 8022990:	4b21      	ldr	r3, [pc, #132]	@ (8022a18 <udp_sendto_if+0xd0>)
 8022992:	f240 2282 	movw	r2, #642	@ 0x282
 8022996:	4924      	ldr	r1, [pc, #144]	@ (8022a28 <udp_sendto_if+0xe0>)
 8022998:	4821      	ldr	r0, [pc, #132]	@ (8022a20 <udp_sendto_if+0xd8>)
 802299a:	f003 ff7d 	bl	8026898 <iprintf>
 802299e:	f06f 030f 	mvn.w	r3, #15
 80229a2:	e035      	b.n	8022a10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80229a4:	6a3b      	ldr	r3, [r7, #32]
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d109      	bne.n	80229be <udp_sendto_if+0x76>
 80229aa:	4b1b      	ldr	r3, [pc, #108]	@ (8022a18 <udp_sendto_if+0xd0>)
 80229ac:	f240 2283 	movw	r2, #643	@ 0x283
 80229b0:	491e      	ldr	r1, [pc, #120]	@ (8022a2c <udp_sendto_if+0xe4>)
 80229b2:	481b      	ldr	r0, [pc, #108]	@ (8022a20 <udp_sendto_if+0xd8>)
 80229b4:	f003 ff70 	bl	8026898 <iprintf>
 80229b8:	f06f 030f 	mvn.w	r3, #15
 80229bc:	e028      	b.n	8022a10 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80229be:	68fb      	ldr	r3, [r7, #12]
 80229c0:	2b00      	cmp	r3, #0
 80229c2:	d009      	beq.n	80229d8 <udp_sendto_if+0x90>
 80229c4:	68fb      	ldr	r3, [r7, #12]
 80229c6:	681b      	ldr	r3, [r3, #0]
 80229c8:	2b00      	cmp	r3, #0
 80229ca:	d005      	beq.n	80229d8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80229cc:	68fb      	ldr	r3, [r7, #12]
 80229ce:	681b      	ldr	r3, [r3, #0]
 80229d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80229d4:	2be0      	cmp	r3, #224	@ 0xe0
 80229d6:	d103      	bne.n	80229e0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80229d8:	6a3b      	ldr	r3, [r7, #32]
 80229da:	3304      	adds	r3, #4
 80229dc:	617b      	str	r3, [r7, #20]
 80229de:	e00b      	b.n	80229f8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80229e0:	68fb      	ldr	r3, [r7, #12]
 80229e2:	681a      	ldr	r2, [r3, #0]
 80229e4:	6a3b      	ldr	r3, [r7, #32]
 80229e6:	3304      	adds	r3, #4
 80229e8:	681b      	ldr	r3, [r3, #0]
 80229ea:	429a      	cmp	r2, r3
 80229ec:	d002      	beq.n	80229f4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80229ee:	f06f 0303 	mvn.w	r3, #3
 80229f2:	e00d      	b.n	8022a10 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80229f4:	68fb      	ldr	r3, [r7, #12]
 80229f6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80229f8:	887a      	ldrh	r2, [r7, #2]
 80229fa:	697b      	ldr	r3, [r7, #20]
 80229fc:	9301      	str	r3, [sp, #4]
 80229fe:	6a3b      	ldr	r3, [r7, #32]
 8022a00:	9300      	str	r3, [sp, #0]
 8022a02:	4613      	mov	r3, r2
 8022a04:	687a      	ldr	r2, [r7, #4]
 8022a06:	68b9      	ldr	r1, [r7, #8]
 8022a08:	68f8      	ldr	r0, [r7, #12]
 8022a0a:	f000 f811 	bl	8022a30 <udp_sendto_if_src>
 8022a0e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8022a10:	4618      	mov	r0, r3
 8022a12:	3718      	adds	r7, #24
 8022a14:	46bd      	mov	sp, r7
 8022a16:	bd80      	pop	{r7, pc}
 8022a18:	0802acc4 	.word	0x0802acc4
 8022a1c:	0802ae38 	.word	0x0802ae38
 8022a20:	0802ad18 	.word	0x0802ad18
 8022a24:	0802ae54 	.word	0x0802ae54
 8022a28:	0802ae70 	.word	0x0802ae70
 8022a2c:	0802ae90 	.word	0x0802ae90

08022a30 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8022a30:	b580      	push	{r7, lr}
 8022a32:	b08c      	sub	sp, #48	@ 0x30
 8022a34:	af04      	add	r7, sp, #16
 8022a36:	60f8      	str	r0, [r7, #12]
 8022a38:	60b9      	str	r1, [r7, #8]
 8022a3a:	607a      	str	r2, [r7, #4]
 8022a3c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8022a3e:	68fb      	ldr	r3, [r7, #12]
 8022a40:	2b00      	cmp	r3, #0
 8022a42:	d109      	bne.n	8022a58 <udp_sendto_if_src+0x28>
 8022a44:	4b65      	ldr	r3, [pc, #404]	@ (8022bdc <udp_sendto_if_src+0x1ac>)
 8022a46:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8022a4a:	4965      	ldr	r1, [pc, #404]	@ (8022be0 <udp_sendto_if_src+0x1b0>)
 8022a4c:	4865      	ldr	r0, [pc, #404]	@ (8022be4 <udp_sendto_if_src+0x1b4>)
 8022a4e:	f003 ff23 	bl	8026898 <iprintf>
 8022a52:	f06f 030f 	mvn.w	r3, #15
 8022a56:	e0bc      	b.n	8022bd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8022a58:	68bb      	ldr	r3, [r7, #8]
 8022a5a:	2b00      	cmp	r3, #0
 8022a5c:	d109      	bne.n	8022a72 <udp_sendto_if_src+0x42>
 8022a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8022bdc <udp_sendto_if_src+0x1ac>)
 8022a60:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8022a64:	4960      	ldr	r1, [pc, #384]	@ (8022be8 <udp_sendto_if_src+0x1b8>)
 8022a66:	485f      	ldr	r0, [pc, #380]	@ (8022be4 <udp_sendto_if_src+0x1b4>)
 8022a68:	f003 ff16 	bl	8026898 <iprintf>
 8022a6c:	f06f 030f 	mvn.w	r3, #15
 8022a70:	e0af      	b.n	8022bd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8022a72:	687b      	ldr	r3, [r7, #4]
 8022a74:	2b00      	cmp	r3, #0
 8022a76:	d109      	bne.n	8022a8c <udp_sendto_if_src+0x5c>
 8022a78:	4b58      	ldr	r3, [pc, #352]	@ (8022bdc <udp_sendto_if_src+0x1ac>)
 8022a7a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8022a7e:	495b      	ldr	r1, [pc, #364]	@ (8022bec <udp_sendto_if_src+0x1bc>)
 8022a80:	4858      	ldr	r0, [pc, #352]	@ (8022be4 <udp_sendto_if_src+0x1b4>)
 8022a82:	f003 ff09 	bl	8026898 <iprintf>
 8022a86:	f06f 030f 	mvn.w	r3, #15
 8022a8a:	e0a2      	b.n	8022bd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8022a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	d109      	bne.n	8022aa6 <udp_sendto_if_src+0x76>
 8022a92:	4b52      	ldr	r3, [pc, #328]	@ (8022bdc <udp_sendto_if_src+0x1ac>)
 8022a94:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8022a98:	4955      	ldr	r1, [pc, #340]	@ (8022bf0 <udp_sendto_if_src+0x1c0>)
 8022a9a:	4852      	ldr	r0, [pc, #328]	@ (8022be4 <udp_sendto_if_src+0x1b4>)
 8022a9c:	f003 fefc 	bl	8026898 <iprintf>
 8022aa0:	f06f 030f 	mvn.w	r3, #15
 8022aa4:	e095      	b.n	8022bd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8022aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022aa8:	2b00      	cmp	r3, #0
 8022aaa:	d109      	bne.n	8022ac0 <udp_sendto_if_src+0x90>
 8022aac:	4b4b      	ldr	r3, [pc, #300]	@ (8022bdc <udp_sendto_if_src+0x1ac>)
 8022aae:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8022ab2:	4950      	ldr	r1, [pc, #320]	@ (8022bf4 <udp_sendto_if_src+0x1c4>)
 8022ab4:	484b      	ldr	r0, [pc, #300]	@ (8022be4 <udp_sendto_if_src+0x1b4>)
 8022ab6:	f003 feef 	bl	8026898 <iprintf>
 8022aba:	f06f 030f 	mvn.w	r3, #15
 8022abe:	e088      	b.n	8022bd2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8022ac0:	68fb      	ldr	r3, [r7, #12]
 8022ac2:	8a5b      	ldrh	r3, [r3, #18]
 8022ac4:	2b00      	cmp	r3, #0
 8022ac6:	d10f      	bne.n	8022ae8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8022ac8:	68f9      	ldr	r1, [r7, #12]
 8022aca:	68fb      	ldr	r3, [r7, #12]
 8022acc:	8a5b      	ldrh	r3, [r3, #18]
 8022ace:	461a      	mov	r2, r3
 8022ad0:	68f8      	ldr	r0, [r7, #12]
 8022ad2:	f000 f893 	bl	8022bfc <udp_bind>
 8022ad6:	4603      	mov	r3, r0
 8022ad8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8022ada:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8022ade:	2b00      	cmp	r3, #0
 8022ae0:	d002      	beq.n	8022ae8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8022ae2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8022ae6:	e074      	b.n	8022bd2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8022ae8:	68bb      	ldr	r3, [r7, #8]
 8022aea:	891b      	ldrh	r3, [r3, #8]
 8022aec:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8022af0:	4293      	cmp	r3, r2
 8022af2:	d902      	bls.n	8022afa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8022af4:	f04f 33ff 	mov.w	r3, #4294967295
 8022af8:	e06b      	b.n	8022bd2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8022afa:	2108      	movs	r1, #8
 8022afc:	68b8      	ldr	r0, [r7, #8]
 8022afe:	f7f9 febf 	bl	801c880 <pbuf_add_header>
 8022b02:	4603      	mov	r3, r0
 8022b04:	2b00      	cmp	r3, #0
 8022b06:	d015      	beq.n	8022b34 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8022b08:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8022b0c:	2108      	movs	r1, #8
 8022b0e:	2022      	movs	r0, #34	@ 0x22
 8022b10:	f7f9 fc6a 	bl	801c3e8 <pbuf_alloc>
 8022b14:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8022b16:	69fb      	ldr	r3, [r7, #28]
 8022b18:	2b00      	cmp	r3, #0
 8022b1a:	d102      	bne.n	8022b22 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8022b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8022b20:	e057      	b.n	8022bd2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8022b22:	68bb      	ldr	r3, [r7, #8]
 8022b24:	891b      	ldrh	r3, [r3, #8]
 8022b26:	2b00      	cmp	r3, #0
 8022b28:	d006      	beq.n	8022b38 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8022b2a:	68b9      	ldr	r1, [r7, #8]
 8022b2c:	69f8      	ldr	r0, [r7, #28]
 8022b2e:	f7fa f861 	bl	801cbf4 <pbuf_chain>
 8022b32:	e001      	b.n	8022b38 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8022b34:	68bb      	ldr	r3, [r7, #8]
 8022b36:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8022b38:	69fb      	ldr	r3, [r7, #28]
 8022b3a:	895b      	ldrh	r3, [r3, #10]
 8022b3c:	2b07      	cmp	r3, #7
 8022b3e:	d806      	bhi.n	8022b4e <udp_sendto_if_src+0x11e>
 8022b40:	4b26      	ldr	r3, [pc, #152]	@ (8022bdc <udp_sendto_if_src+0x1ac>)
 8022b42:	f240 320d 	movw	r2, #781	@ 0x30d
 8022b46:	492c      	ldr	r1, [pc, #176]	@ (8022bf8 <udp_sendto_if_src+0x1c8>)
 8022b48:	4826      	ldr	r0, [pc, #152]	@ (8022be4 <udp_sendto_if_src+0x1b4>)
 8022b4a:	f003 fea5 	bl	8026898 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8022b4e:	69fb      	ldr	r3, [r7, #28]
 8022b50:	685b      	ldr	r3, [r3, #4]
 8022b52:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8022b54:	68fb      	ldr	r3, [r7, #12]
 8022b56:	8a5b      	ldrh	r3, [r3, #18]
 8022b58:	4618      	mov	r0, r3
 8022b5a:	f7f8 fa8d 	bl	801b078 <lwip_htons>
 8022b5e:	4603      	mov	r3, r0
 8022b60:	461a      	mov	r2, r3
 8022b62:	697b      	ldr	r3, [r7, #20]
 8022b64:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8022b66:	887b      	ldrh	r3, [r7, #2]
 8022b68:	4618      	mov	r0, r3
 8022b6a:	f7f8 fa85 	bl	801b078 <lwip_htons>
 8022b6e:	4603      	mov	r3, r0
 8022b70:	461a      	mov	r2, r3
 8022b72:	697b      	ldr	r3, [r7, #20]
 8022b74:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8022b76:	697b      	ldr	r3, [r7, #20]
 8022b78:	2200      	movs	r2, #0
 8022b7a:	719a      	strb	r2, [r3, #6]
 8022b7c:	2200      	movs	r2, #0
 8022b7e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8022b80:	69fb      	ldr	r3, [r7, #28]
 8022b82:	891b      	ldrh	r3, [r3, #8]
 8022b84:	4618      	mov	r0, r3
 8022b86:	f7f8 fa77 	bl	801b078 <lwip_htons>
 8022b8a:	4603      	mov	r3, r0
 8022b8c:	461a      	mov	r2, r3
 8022b8e:	697b      	ldr	r3, [r7, #20]
 8022b90:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8022b92:	2311      	movs	r3, #17
 8022b94:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8022b96:	68fb      	ldr	r3, [r7, #12]
 8022b98:	7adb      	ldrb	r3, [r3, #11]
 8022b9a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8022b9c:	68fb      	ldr	r3, [r7, #12]
 8022b9e:	7a9b      	ldrb	r3, [r3, #10]
 8022ba0:	7cb9      	ldrb	r1, [r7, #18]
 8022ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022ba4:	9202      	str	r2, [sp, #8]
 8022ba6:	7cfa      	ldrb	r2, [r7, #19]
 8022ba8:	9201      	str	r2, [sp, #4]
 8022baa:	9300      	str	r3, [sp, #0]
 8022bac:	460b      	mov	r3, r1
 8022bae:	687a      	ldr	r2, [r7, #4]
 8022bb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022bb2:	69f8      	ldr	r0, [r7, #28]
 8022bb4:	f001 fc48 	bl	8024448 <ip4_output_if_src>
 8022bb8:	4603      	mov	r3, r0
 8022bba:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8022bbc:	69fa      	ldr	r2, [r7, #28]
 8022bbe:	68bb      	ldr	r3, [r7, #8]
 8022bc0:	429a      	cmp	r2, r3
 8022bc2:	d004      	beq.n	8022bce <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8022bc4:	69f8      	ldr	r0, [r7, #28]
 8022bc6:	f7f9 fef1 	bl	801c9ac <pbuf_free>
    q = NULL;
 8022bca:	2300      	movs	r3, #0
 8022bcc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8022bce:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8022bd2:	4618      	mov	r0, r3
 8022bd4:	3720      	adds	r7, #32
 8022bd6:	46bd      	mov	sp, r7
 8022bd8:	bd80      	pop	{r7, pc}
 8022bda:	bf00      	nop
 8022bdc:	0802acc4 	.word	0x0802acc4
 8022be0:	0802aeb0 	.word	0x0802aeb0
 8022be4:	0802ad18 	.word	0x0802ad18
 8022be8:	0802aed0 	.word	0x0802aed0
 8022bec:	0802aef0 	.word	0x0802aef0
 8022bf0:	0802af14 	.word	0x0802af14
 8022bf4:	0802af38 	.word	0x0802af38
 8022bf8:	0802af5c 	.word	0x0802af5c

08022bfc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8022bfc:	b580      	push	{r7, lr}
 8022bfe:	b086      	sub	sp, #24
 8022c00:	af00      	add	r7, sp, #0
 8022c02:	60f8      	str	r0, [r7, #12]
 8022c04:	60b9      	str	r1, [r7, #8]
 8022c06:	4613      	mov	r3, r2
 8022c08:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8022c0a:	68bb      	ldr	r3, [r7, #8]
 8022c0c:	2b00      	cmp	r3, #0
 8022c0e:	d101      	bne.n	8022c14 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8022c10:	4b39      	ldr	r3, [pc, #228]	@ (8022cf8 <udp_bind+0xfc>)
 8022c12:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8022c14:	68fb      	ldr	r3, [r7, #12]
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	d109      	bne.n	8022c2e <udp_bind+0x32>
 8022c1a:	4b38      	ldr	r3, [pc, #224]	@ (8022cfc <udp_bind+0x100>)
 8022c1c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8022c20:	4937      	ldr	r1, [pc, #220]	@ (8022d00 <udp_bind+0x104>)
 8022c22:	4838      	ldr	r0, [pc, #224]	@ (8022d04 <udp_bind+0x108>)
 8022c24:	f003 fe38 	bl	8026898 <iprintf>
 8022c28:	f06f 030f 	mvn.w	r3, #15
 8022c2c:	e060      	b.n	8022cf0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8022c2e:	2300      	movs	r3, #0
 8022c30:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022c32:	4b35      	ldr	r3, [pc, #212]	@ (8022d08 <udp_bind+0x10c>)
 8022c34:	681b      	ldr	r3, [r3, #0]
 8022c36:	617b      	str	r3, [r7, #20]
 8022c38:	e009      	b.n	8022c4e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8022c3a:	68fa      	ldr	r2, [r7, #12]
 8022c3c:	697b      	ldr	r3, [r7, #20]
 8022c3e:	429a      	cmp	r2, r3
 8022c40:	d102      	bne.n	8022c48 <udp_bind+0x4c>
      rebind = 1;
 8022c42:	2301      	movs	r3, #1
 8022c44:	74fb      	strb	r3, [r7, #19]
      break;
 8022c46:	e005      	b.n	8022c54 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022c48:	697b      	ldr	r3, [r7, #20]
 8022c4a:	68db      	ldr	r3, [r3, #12]
 8022c4c:	617b      	str	r3, [r7, #20]
 8022c4e:	697b      	ldr	r3, [r7, #20]
 8022c50:	2b00      	cmp	r3, #0
 8022c52:	d1f2      	bne.n	8022c3a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8022c54:	88fb      	ldrh	r3, [r7, #6]
 8022c56:	2b00      	cmp	r3, #0
 8022c58:	d109      	bne.n	8022c6e <udp_bind+0x72>
    port = udp_new_port();
 8022c5a:	f7ff fc35 	bl	80224c8 <udp_new_port>
 8022c5e:	4603      	mov	r3, r0
 8022c60:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8022c62:	88fb      	ldrh	r3, [r7, #6]
 8022c64:	2b00      	cmp	r3, #0
 8022c66:	d12c      	bne.n	8022cc2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8022c68:	f06f 0307 	mvn.w	r3, #7
 8022c6c:	e040      	b.n	8022cf0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022c6e:	4b26      	ldr	r3, [pc, #152]	@ (8022d08 <udp_bind+0x10c>)
 8022c70:	681b      	ldr	r3, [r3, #0]
 8022c72:	617b      	str	r3, [r7, #20]
 8022c74:	e022      	b.n	8022cbc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8022c76:	68fa      	ldr	r2, [r7, #12]
 8022c78:	697b      	ldr	r3, [r7, #20]
 8022c7a:	429a      	cmp	r2, r3
 8022c7c:	d01b      	beq.n	8022cb6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8022c7e:	697b      	ldr	r3, [r7, #20]
 8022c80:	8a5b      	ldrh	r3, [r3, #18]
 8022c82:	88fa      	ldrh	r2, [r7, #6]
 8022c84:	429a      	cmp	r2, r3
 8022c86:	d116      	bne.n	8022cb6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8022c88:	697b      	ldr	r3, [r7, #20]
 8022c8a:	681a      	ldr	r2, [r3, #0]
 8022c8c:	68bb      	ldr	r3, [r7, #8]
 8022c8e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8022c90:	429a      	cmp	r2, r3
 8022c92:	d00d      	beq.n	8022cb0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8022c94:	68bb      	ldr	r3, [r7, #8]
 8022c96:	2b00      	cmp	r3, #0
 8022c98:	d00a      	beq.n	8022cb0 <udp_bind+0xb4>
 8022c9a:	68bb      	ldr	r3, [r7, #8]
 8022c9c:	681b      	ldr	r3, [r3, #0]
 8022c9e:	2b00      	cmp	r3, #0
 8022ca0:	d006      	beq.n	8022cb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8022ca2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8022ca4:	2b00      	cmp	r3, #0
 8022ca6:	d003      	beq.n	8022cb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8022ca8:	697b      	ldr	r3, [r7, #20]
 8022caa:	681b      	ldr	r3, [r3, #0]
 8022cac:	2b00      	cmp	r3, #0
 8022cae:	d102      	bne.n	8022cb6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8022cb0:	f06f 0307 	mvn.w	r3, #7
 8022cb4:	e01c      	b.n	8022cf0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022cb6:	697b      	ldr	r3, [r7, #20]
 8022cb8:	68db      	ldr	r3, [r3, #12]
 8022cba:	617b      	str	r3, [r7, #20]
 8022cbc:	697b      	ldr	r3, [r7, #20]
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	d1d9      	bne.n	8022c76 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8022cc2:	68bb      	ldr	r3, [r7, #8]
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	d002      	beq.n	8022cce <udp_bind+0xd2>
 8022cc8:	68bb      	ldr	r3, [r7, #8]
 8022cca:	681b      	ldr	r3, [r3, #0]
 8022ccc:	e000      	b.n	8022cd0 <udp_bind+0xd4>
 8022cce:	2300      	movs	r3, #0
 8022cd0:	68fa      	ldr	r2, [r7, #12]
 8022cd2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8022cd4:	68fb      	ldr	r3, [r7, #12]
 8022cd6:	88fa      	ldrh	r2, [r7, #6]
 8022cd8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8022cda:	7cfb      	ldrb	r3, [r7, #19]
 8022cdc:	2b00      	cmp	r3, #0
 8022cde:	d106      	bne.n	8022cee <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8022ce0:	4b09      	ldr	r3, [pc, #36]	@ (8022d08 <udp_bind+0x10c>)
 8022ce2:	681a      	ldr	r2, [r3, #0]
 8022ce4:	68fb      	ldr	r3, [r7, #12]
 8022ce6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8022ce8:	4a07      	ldr	r2, [pc, #28]	@ (8022d08 <udp_bind+0x10c>)
 8022cea:	68fb      	ldr	r3, [r7, #12]
 8022cec:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8022cee:	2300      	movs	r3, #0
}
 8022cf0:	4618      	mov	r0, r3
 8022cf2:	3718      	adds	r7, #24
 8022cf4:	46bd      	mov	sp, r7
 8022cf6:	bd80      	pop	{r7, pc}
 8022cf8:	0802cf04 	.word	0x0802cf04
 8022cfc:	0802acc4 	.word	0x0802acc4
 8022d00:	0802af8c 	.word	0x0802af8c
 8022d04:	0802ad18 	.word	0x0802ad18
 8022d08:	2003c530 	.word	0x2003c530

08022d0c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8022d0c:	b580      	push	{r7, lr}
 8022d0e:	b086      	sub	sp, #24
 8022d10:	af00      	add	r7, sp, #0
 8022d12:	60f8      	str	r0, [r7, #12]
 8022d14:	60b9      	str	r1, [r7, #8]
 8022d16:	4613      	mov	r3, r2
 8022d18:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8022d1a:	68fb      	ldr	r3, [r7, #12]
 8022d1c:	2b00      	cmp	r3, #0
 8022d1e:	d109      	bne.n	8022d34 <udp_connect+0x28>
 8022d20:	4b2c      	ldr	r3, [pc, #176]	@ (8022dd4 <udp_connect+0xc8>)
 8022d22:	f240 4235 	movw	r2, #1077	@ 0x435
 8022d26:	492c      	ldr	r1, [pc, #176]	@ (8022dd8 <udp_connect+0xcc>)
 8022d28:	482c      	ldr	r0, [pc, #176]	@ (8022ddc <udp_connect+0xd0>)
 8022d2a:	f003 fdb5 	bl	8026898 <iprintf>
 8022d2e:	f06f 030f 	mvn.w	r3, #15
 8022d32:	e04b      	b.n	8022dcc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8022d34:	68bb      	ldr	r3, [r7, #8]
 8022d36:	2b00      	cmp	r3, #0
 8022d38:	d109      	bne.n	8022d4e <udp_connect+0x42>
 8022d3a:	4b26      	ldr	r3, [pc, #152]	@ (8022dd4 <udp_connect+0xc8>)
 8022d3c:	f240 4236 	movw	r2, #1078	@ 0x436
 8022d40:	4927      	ldr	r1, [pc, #156]	@ (8022de0 <udp_connect+0xd4>)
 8022d42:	4826      	ldr	r0, [pc, #152]	@ (8022ddc <udp_connect+0xd0>)
 8022d44:	f003 fda8 	bl	8026898 <iprintf>
 8022d48:	f06f 030f 	mvn.w	r3, #15
 8022d4c:	e03e      	b.n	8022dcc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8022d4e:	68fb      	ldr	r3, [r7, #12]
 8022d50:	8a5b      	ldrh	r3, [r3, #18]
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	d10f      	bne.n	8022d76 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8022d56:	68f9      	ldr	r1, [r7, #12]
 8022d58:	68fb      	ldr	r3, [r7, #12]
 8022d5a:	8a5b      	ldrh	r3, [r3, #18]
 8022d5c:	461a      	mov	r2, r3
 8022d5e:	68f8      	ldr	r0, [r7, #12]
 8022d60:	f7ff ff4c 	bl	8022bfc <udp_bind>
 8022d64:	4603      	mov	r3, r0
 8022d66:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8022d68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8022d6c:	2b00      	cmp	r3, #0
 8022d6e:	d002      	beq.n	8022d76 <udp_connect+0x6a>
      return err;
 8022d70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8022d74:	e02a      	b.n	8022dcc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8022d76:	68bb      	ldr	r3, [r7, #8]
 8022d78:	2b00      	cmp	r3, #0
 8022d7a:	d002      	beq.n	8022d82 <udp_connect+0x76>
 8022d7c:	68bb      	ldr	r3, [r7, #8]
 8022d7e:	681b      	ldr	r3, [r3, #0]
 8022d80:	e000      	b.n	8022d84 <udp_connect+0x78>
 8022d82:	2300      	movs	r3, #0
 8022d84:	68fa      	ldr	r2, [r7, #12]
 8022d86:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8022d88:	68fb      	ldr	r3, [r7, #12]
 8022d8a:	88fa      	ldrh	r2, [r7, #6]
 8022d8c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8022d8e:	68fb      	ldr	r3, [r7, #12]
 8022d90:	7c1b      	ldrb	r3, [r3, #16]
 8022d92:	f043 0304 	orr.w	r3, r3, #4
 8022d96:	b2da      	uxtb	r2, r3
 8022d98:	68fb      	ldr	r3, [r7, #12]
 8022d9a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022d9c:	4b11      	ldr	r3, [pc, #68]	@ (8022de4 <udp_connect+0xd8>)
 8022d9e:	681b      	ldr	r3, [r3, #0]
 8022da0:	617b      	str	r3, [r7, #20]
 8022da2:	e008      	b.n	8022db6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8022da4:	68fa      	ldr	r2, [r7, #12]
 8022da6:	697b      	ldr	r3, [r7, #20]
 8022da8:	429a      	cmp	r2, r3
 8022daa:	d101      	bne.n	8022db0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8022dac:	2300      	movs	r3, #0
 8022dae:	e00d      	b.n	8022dcc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022db0:	697b      	ldr	r3, [r7, #20]
 8022db2:	68db      	ldr	r3, [r3, #12]
 8022db4:	617b      	str	r3, [r7, #20]
 8022db6:	697b      	ldr	r3, [r7, #20]
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	d1f3      	bne.n	8022da4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8022dbc:	4b09      	ldr	r3, [pc, #36]	@ (8022de4 <udp_connect+0xd8>)
 8022dbe:	681a      	ldr	r2, [r3, #0]
 8022dc0:	68fb      	ldr	r3, [r7, #12]
 8022dc2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8022dc4:	4a07      	ldr	r2, [pc, #28]	@ (8022de4 <udp_connect+0xd8>)
 8022dc6:	68fb      	ldr	r3, [r7, #12]
 8022dc8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8022dca:	2300      	movs	r3, #0
}
 8022dcc:	4618      	mov	r0, r3
 8022dce:	3718      	adds	r7, #24
 8022dd0:	46bd      	mov	sp, r7
 8022dd2:	bd80      	pop	{r7, pc}
 8022dd4:	0802acc4 	.word	0x0802acc4
 8022dd8:	0802afa4 	.word	0x0802afa4
 8022ddc:	0802ad18 	.word	0x0802ad18
 8022de0:	0802afc0 	.word	0x0802afc0
 8022de4:	2003c530 	.word	0x2003c530

08022de8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8022de8:	b580      	push	{r7, lr}
 8022dea:	b082      	sub	sp, #8
 8022dec:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8022dee:	2000      	movs	r0, #0
 8022df0:	f7f8 fec4 	bl	801bb7c <memp_malloc>
 8022df4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8022df6:	687b      	ldr	r3, [r7, #4]
 8022df8:	2b00      	cmp	r3, #0
 8022dfa:	d007      	beq.n	8022e0c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8022dfc:	2220      	movs	r2, #32
 8022dfe:	2100      	movs	r1, #0
 8022e00:	6878      	ldr	r0, [r7, #4]
 8022e02:	f003 fde8 	bl	80269d6 <memset>
    pcb->ttl = UDP_TTL;
 8022e06:	687b      	ldr	r3, [r7, #4]
 8022e08:	22ff      	movs	r2, #255	@ 0xff
 8022e0a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8022e0c:	687b      	ldr	r3, [r7, #4]
}
 8022e0e:	4618      	mov	r0, r3
 8022e10:	3708      	adds	r7, #8
 8022e12:	46bd      	mov	sp, r7
 8022e14:	bd80      	pop	{r7, pc}
	...

08022e18 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8022e18:	b480      	push	{r7}
 8022e1a:	b085      	sub	sp, #20
 8022e1c:	af00      	add	r7, sp, #0
 8022e1e:	6078      	str	r0, [r7, #4]
 8022e20:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8022e22:	687b      	ldr	r3, [r7, #4]
 8022e24:	2b00      	cmp	r3, #0
 8022e26:	d01e      	beq.n	8022e66 <udp_netif_ip_addr_changed+0x4e>
 8022e28:	687b      	ldr	r3, [r7, #4]
 8022e2a:	681b      	ldr	r3, [r3, #0]
 8022e2c:	2b00      	cmp	r3, #0
 8022e2e:	d01a      	beq.n	8022e66 <udp_netif_ip_addr_changed+0x4e>
 8022e30:	683b      	ldr	r3, [r7, #0]
 8022e32:	2b00      	cmp	r3, #0
 8022e34:	d017      	beq.n	8022e66 <udp_netif_ip_addr_changed+0x4e>
 8022e36:	683b      	ldr	r3, [r7, #0]
 8022e38:	681b      	ldr	r3, [r3, #0]
 8022e3a:	2b00      	cmp	r3, #0
 8022e3c:	d013      	beq.n	8022e66 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8022e74 <udp_netif_ip_addr_changed+0x5c>)
 8022e40:	681b      	ldr	r3, [r3, #0]
 8022e42:	60fb      	str	r3, [r7, #12]
 8022e44:	e00c      	b.n	8022e60 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8022e46:	68fb      	ldr	r3, [r7, #12]
 8022e48:	681a      	ldr	r2, [r3, #0]
 8022e4a:	687b      	ldr	r3, [r7, #4]
 8022e4c:	681b      	ldr	r3, [r3, #0]
 8022e4e:	429a      	cmp	r2, r3
 8022e50:	d103      	bne.n	8022e5a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8022e52:	683b      	ldr	r3, [r7, #0]
 8022e54:	681a      	ldr	r2, [r3, #0]
 8022e56:	68fb      	ldr	r3, [r7, #12]
 8022e58:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022e5a:	68fb      	ldr	r3, [r7, #12]
 8022e5c:	68db      	ldr	r3, [r3, #12]
 8022e5e:	60fb      	str	r3, [r7, #12]
 8022e60:	68fb      	ldr	r3, [r7, #12]
 8022e62:	2b00      	cmp	r3, #0
 8022e64:	d1ef      	bne.n	8022e46 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8022e66:	bf00      	nop
 8022e68:	3714      	adds	r7, #20
 8022e6a:	46bd      	mov	sp, r7
 8022e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e70:	4770      	bx	lr
 8022e72:	bf00      	nop
 8022e74:	2003c530 	.word	0x2003c530

08022e78 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8022e78:	b580      	push	{r7, lr}
 8022e7a:	b082      	sub	sp, #8
 8022e7c:	af00      	add	r7, sp, #0
 8022e7e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8022e80:	4915      	ldr	r1, [pc, #84]	@ (8022ed8 <etharp_free_entry+0x60>)
 8022e82:	687a      	ldr	r2, [r7, #4]
 8022e84:	4613      	mov	r3, r2
 8022e86:	005b      	lsls	r3, r3, #1
 8022e88:	4413      	add	r3, r2
 8022e8a:	00db      	lsls	r3, r3, #3
 8022e8c:	440b      	add	r3, r1
 8022e8e:	681b      	ldr	r3, [r3, #0]
 8022e90:	2b00      	cmp	r3, #0
 8022e92:	d013      	beq.n	8022ebc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8022e94:	4910      	ldr	r1, [pc, #64]	@ (8022ed8 <etharp_free_entry+0x60>)
 8022e96:	687a      	ldr	r2, [r7, #4]
 8022e98:	4613      	mov	r3, r2
 8022e9a:	005b      	lsls	r3, r3, #1
 8022e9c:	4413      	add	r3, r2
 8022e9e:	00db      	lsls	r3, r3, #3
 8022ea0:	440b      	add	r3, r1
 8022ea2:	681b      	ldr	r3, [r3, #0]
 8022ea4:	4618      	mov	r0, r3
 8022ea6:	f7f9 fd81 	bl	801c9ac <pbuf_free>
    arp_table[i].q = NULL;
 8022eaa:	490b      	ldr	r1, [pc, #44]	@ (8022ed8 <etharp_free_entry+0x60>)
 8022eac:	687a      	ldr	r2, [r7, #4]
 8022eae:	4613      	mov	r3, r2
 8022eb0:	005b      	lsls	r3, r3, #1
 8022eb2:	4413      	add	r3, r2
 8022eb4:	00db      	lsls	r3, r3, #3
 8022eb6:	440b      	add	r3, r1
 8022eb8:	2200      	movs	r2, #0
 8022eba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8022ebc:	4906      	ldr	r1, [pc, #24]	@ (8022ed8 <etharp_free_entry+0x60>)
 8022ebe:	687a      	ldr	r2, [r7, #4]
 8022ec0:	4613      	mov	r3, r2
 8022ec2:	005b      	lsls	r3, r3, #1
 8022ec4:	4413      	add	r3, r2
 8022ec6:	00db      	lsls	r3, r3, #3
 8022ec8:	440b      	add	r3, r1
 8022eca:	3314      	adds	r3, #20
 8022ecc:	2200      	movs	r2, #0
 8022ece:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8022ed0:	bf00      	nop
 8022ed2:	3708      	adds	r7, #8
 8022ed4:	46bd      	mov	sp, r7
 8022ed6:	bd80      	pop	{r7, pc}
 8022ed8:	2003c534 	.word	0x2003c534

08022edc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8022edc:	b580      	push	{r7, lr}
 8022ede:	b082      	sub	sp, #8
 8022ee0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022ee2:	2300      	movs	r3, #0
 8022ee4:	607b      	str	r3, [r7, #4]
 8022ee6:	e096      	b.n	8023016 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8022ee8:	494f      	ldr	r1, [pc, #316]	@ (8023028 <etharp_tmr+0x14c>)
 8022eea:	687a      	ldr	r2, [r7, #4]
 8022eec:	4613      	mov	r3, r2
 8022eee:	005b      	lsls	r3, r3, #1
 8022ef0:	4413      	add	r3, r2
 8022ef2:	00db      	lsls	r3, r3, #3
 8022ef4:	440b      	add	r3, r1
 8022ef6:	3314      	adds	r3, #20
 8022ef8:	781b      	ldrb	r3, [r3, #0]
 8022efa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8022efc:	78fb      	ldrb	r3, [r7, #3]
 8022efe:	2b00      	cmp	r3, #0
 8022f00:	f000 8086 	beq.w	8023010 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8022f04:	4948      	ldr	r1, [pc, #288]	@ (8023028 <etharp_tmr+0x14c>)
 8022f06:	687a      	ldr	r2, [r7, #4]
 8022f08:	4613      	mov	r3, r2
 8022f0a:	005b      	lsls	r3, r3, #1
 8022f0c:	4413      	add	r3, r2
 8022f0e:	00db      	lsls	r3, r3, #3
 8022f10:	440b      	add	r3, r1
 8022f12:	3312      	adds	r3, #18
 8022f14:	881b      	ldrh	r3, [r3, #0]
 8022f16:	3301      	adds	r3, #1
 8022f18:	b298      	uxth	r0, r3
 8022f1a:	4943      	ldr	r1, [pc, #268]	@ (8023028 <etharp_tmr+0x14c>)
 8022f1c:	687a      	ldr	r2, [r7, #4]
 8022f1e:	4613      	mov	r3, r2
 8022f20:	005b      	lsls	r3, r3, #1
 8022f22:	4413      	add	r3, r2
 8022f24:	00db      	lsls	r3, r3, #3
 8022f26:	440b      	add	r3, r1
 8022f28:	3312      	adds	r3, #18
 8022f2a:	4602      	mov	r2, r0
 8022f2c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8022f2e:	493e      	ldr	r1, [pc, #248]	@ (8023028 <etharp_tmr+0x14c>)
 8022f30:	687a      	ldr	r2, [r7, #4]
 8022f32:	4613      	mov	r3, r2
 8022f34:	005b      	lsls	r3, r3, #1
 8022f36:	4413      	add	r3, r2
 8022f38:	00db      	lsls	r3, r3, #3
 8022f3a:	440b      	add	r3, r1
 8022f3c:	3312      	adds	r3, #18
 8022f3e:	881b      	ldrh	r3, [r3, #0]
 8022f40:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8022f44:	d215      	bcs.n	8022f72 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8022f46:	4938      	ldr	r1, [pc, #224]	@ (8023028 <etharp_tmr+0x14c>)
 8022f48:	687a      	ldr	r2, [r7, #4]
 8022f4a:	4613      	mov	r3, r2
 8022f4c:	005b      	lsls	r3, r3, #1
 8022f4e:	4413      	add	r3, r2
 8022f50:	00db      	lsls	r3, r3, #3
 8022f52:	440b      	add	r3, r1
 8022f54:	3314      	adds	r3, #20
 8022f56:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8022f58:	2b01      	cmp	r3, #1
 8022f5a:	d10e      	bne.n	8022f7a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8022f5c:	4932      	ldr	r1, [pc, #200]	@ (8023028 <etharp_tmr+0x14c>)
 8022f5e:	687a      	ldr	r2, [r7, #4]
 8022f60:	4613      	mov	r3, r2
 8022f62:	005b      	lsls	r3, r3, #1
 8022f64:	4413      	add	r3, r2
 8022f66:	00db      	lsls	r3, r3, #3
 8022f68:	440b      	add	r3, r1
 8022f6a:	3312      	adds	r3, #18
 8022f6c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8022f6e:	2b04      	cmp	r3, #4
 8022f70:	d903      	bls.n	8022f7a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8022f72:	6878      	ldr	r0, [r7, #4]
 8022f74:	f7ff ff80 	bl	8022e78 <etharp_free_entry>
 8022f78:	e04a      	b.n	8023010 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8022f7a:	492b      	ldr	r1, [pc, #172]	@ (8023028 <etharp_tmr+0x14c>)
 8022f7c:	687a      	ldr	r2, [r7, #4]
 8022f7e:	4613      	mov	r3, r2
 8022f80:	005b      	lsls	r3, r3, #1
 8022f82:	4413      	add	r3, r2
 8022f84:	00db      	lsls	r3, r3, #3
 8022f86:	440b      	add	r3, r1
 8022f88:	3314      	adds	r3, #20
 8022f8a:	781b      	ldrb	r3, [r3, #0]
 8022f8c:	2b03      	cmp	r3, #3
 8022f8e:	d10a      	bne.n	8022fa6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8022f90:	4925      	ldr	r1, [pc, #148]	@ (8023028 <etharp_tmr+0x14c>)
 8022f92:	687a      	ldr	r2, [r7, #4]
 8022f94:	4613      	mov	r3, r2
 8022f96:	005b      	lsls	r3, r3, #1
 8022f98:	4413      	add	r3, r2
 8022f9a:	00db      	lsls	r3, r3, #3
 8022f9c:	440b      	add	r3, r1
 8022f9e:	3314      	adds	r3, #20
 8022fa0:	2204      	movs	r2, #4
 8022fa2:	701a      	strb	r2, [r3, #0]
 8022fa4:	e034      	b.n	8023010 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8022fa6:	4920      	ldr	r1, [pc, #128]	@ (8023028 <etharp_tmr+0x14c>)
 8022fa8:	687a      	ldr	r2, [r7, #4]
 8022faa:	4613      	mov	r3, r2
 8022fac:	005b      	lsls	r3, r3, #1
 8022fae:	4413      	add	r3, r2
 8022fb0:	00db      	lsls	r3, r3, #3
 8022fb2:	440b      	add	r3, r1
 8022fb4:	3314      	adds	r3, #20
 8022fb6:	781b      	ldrb	r3, [r3, #0]
 8022fb8:	2b04      	cmp	r3, #4
 8022fba:	d10a      	bne.n	8022fd2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8022fbc:	491a      	ldr	r1, [pc, #104]	@ (8023028 <etharp_tmr+0x14c>)
 8022fbe:	687a      	ldr	r2, [r7, #4]
 8022fc0:	4613      	mov	r3, r2
 8022fc2:	005b      	lsls	r3, r3, #1
 8022fc4:	4413      	add	r3, r2
 8022fc6:	00db      	lsls	r3, r3, #3
 8022fc8:	440b      	add	r3, r1
 8022fca:	3314      	adds	r3, #20
 8022fcc:	2202      	movs	r2, #2
 8022fce:	701a      	strb	r2, [r3, #0]
 8022fd0:	e01e      	b.n	8023010 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8022fd2:	4915      	ldr	r1, [pc, #84]	@ (8023028 <etharp_tmr+0x14c>)
 8022fd4:	687a      	ldr	r2, [r7, #4]
 8022fd6:	4613      	mov	r3, r2
 8022fd8:	005b      	lsls	r3, r3, #1
 8022fda:	4413      	add	r3, r2
 8022fdc:	00db      	lsls	r3, r3, #3
 8022fde:	440b      	add	r3, r1
 8022fe0:	3314      	adds	r3, #20
 8022fe2:	781b      	ldrb	r3, [r3, #0]
 8022fe4:	2b01      	cmp	r3, #1
 8022fe6:	d113      	bne.n	8023010 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8022fe8:	490f      	ldr	r1, [pc, #60]	@ (8023028 <etharp_tmr+0x14c>)
 8022fea:	687a      	ldr	r2, [r7, #4]
 8022fec:	4613      	mov	r3, r2
 8022fee:	005b      	lsls	r3, r3, #1
 8022ff0:	4413      	add	r3, r2
 8022ff2:	00db      	lsls	r3, r3, #3
 8022ff4:	440b      	add	r3, r1
 8022ff6:	3308      	adds	r3, #8
 8022ff8:	6818      	ldr	r0, [r3, #0]
 8022ffa:	687a      	ldr	r2, [r7, #4]
 8022ffc:	4613      	mov	r3, r2
 8022ffe:	005b      	lsls	r3, r3, #1
 8023000:	4413      	add	r3, r2
 8023002:	00db      	lsls	r3, r3, #3
 8023004:	4a08      	ldr	r2, [pc, #32]	@ (8023028 <etharp_tmr+0x14c>)
 8023006:	4413      	add	r3, r2
 8023008:	3304      	adds	r3, #4
 802300a:	4619      	mov	r1, r3
 802300c:	f000 fe6e 	bl	8023cec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023010:	687b      	ldr	r3, [r7, #4]
 8023012:	3301      	adds	r3, #1
 8023014:	607b      	str	r3, [r7, #4]
 8023016:	687b      	ldr	r3, [r7, #4]
 8023018:	2b09      	cmp	r3, #9
 802301a:	f77f af65 	ble.w	8022ee8 <etharp_tmr+0xc>
      }
    }
  }
}
 802301e:	bf00      	nop
 8023020:	bf00      	nop
 8023022:	3708      	adds	r7, #8
 8023024:	46bd      	mov	sp, r7
 8023026:	bd80      	pop	{r7, pc}
 8023028:	2003c534 	.word	0x2003c534

0802302c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 802302c:	b580      	push	{r7, lr}
 802302e:	b08a      	sub	sp, #40	@ 0x28
 8023030:	af00      	add	r7, sp, #0
 8023032:	60f8      	str	r0, [r7, #12]
 8023034:	460b      	mov	r3, r1
 8023036:	607a      	str	r2, [r7, #4]
 8023038:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 802303a:	230a      	movs	r3, #10
 802303c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 802303e:	230a      	movs	r3, #10
 8023040:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8023042:	230a      	movs	r3, #10
 8023044:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8023046:	2300      	movs	r3, #0
 8023048:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 802304a:	230a      	movs	r3, #10
 802304c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 802304e:	2300      	movs	r3, #0
 8023050:	83bb      	strh	r3, [r7, #28]
 8023052:	2300      	movs	r3, #0
 8023054:	837b      	strh	r3, [r7, #26]
 8023056:	2300      	movs	r3, #0
 8023058:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802305a:	2300      	movs	r3, #0
 802305c:	843b      	strh	r3, [r7, #32]
 802305e:	e0ae      	b.n	80231be <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8023060:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023064:	49a6      	ldr	r1, [pc, #664]	@ (8023300 <etharp_find_entry+0x2d4>)
 8023066:	4613      	mov	r3, r2
 8023068:	005b      	lsls	r3, r3, #1
 802306a:	4413      	add	r3, r2
 802306c:	00db      	lsls	r3, r3, #3
 802306e:	440b      	add	r3, r1
 8023070:	3314      	adds	r3, #20
 8023072:	781b      	ldrb	r3, [r3, #0]
 8023074:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8023076:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 802307a:	2b0a      	cmp	r3, #10
 802307c:	d105      	bne.n	802308a <etharp_find_entry+0x5e>
 802307e:	7dfb      	ldrb	r3, [r7, #23]
 8023080:	2b00      	cmp	r3, #0
 8023082:	d102      	bne.n	802308a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8023084:	8c3b      	ldrh	r3, [r7, #32]
 8023086:	847b      	strh	r3, [r7, #34]	@ 0x22
 8023088:	e095      	b.n	80231b6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 802308a:	7dfb      	ldrb	r3, [r7, #23]
 802308c:	2b00      	cmp	r3, #0
 802308e:	f000 8092 	beq.w	80231b6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8023092:	7dfb      	ldrb	r3, [r7, #23]
 8023094:	2b01      	cmp	r3, #1
 8023096:	d009      	beq.n	80230ac <etharp_find_entry+0x80>
 8023098:	7dfb      	ldrb	r3, [r7, #23]
 802309a:	2b01      	cmp	r3, #1
 802309c:	d806      	bhi.n	80230ac <etharp_find_entry+0x80>
 802309e:	4b99      	ldr	r3, [pc, #612]	@ (8023304 <etharp_find_entry+0x2d8>)
 80230a0:	f240 1223 	movw	r2, #291	@ 0x123
 80230a4:	4998      	ldr	r1, [pc, #608]	@ (8023308 <etharp_find_entry+0x2dc>)
 80230a6:	4899      	ldr	r0, [pc, #612]	@ (802330c <etharp_find_entry+0x2e0>)
 80230a8:	f003 fbf6 	bl	8026898 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80230ac:	68fb      	ldr	r3, [r7, #12]
 80230ae:	2b00      	cmp	r3, #0
 80230b0:	d020      	beq.n	80230f4 <etharp_find_entry+0xc8>
 80230b2:	68fb      	ldr	r3, [r7, #12]
 80230b4:	6819      	ldr	r1, [r3, #0]
 80230b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80230ba:	4891      	ldr	r0, [pc, #580]	@ (8023300 <etharp_find_entry+0x2d4>)
 80230bc:	4613      	mov	r3, r2
 80230be:	005b      	lsls	r3, r3, #1
 80230c0:	4413      	add	r3, r2
 80230c2:	00db      	lsls	r3, r3, #3
 80230c4:	4403      	add	r3, r0
 80230c6:	3304      	adds	r3, #4
 80230c8:	681b      	ldr	r3, [r3, #0]
 80230ca:	4299      	cmp	r1, r3
 80230cc:	d112      	bne.n	80230f4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80230ce:	687b      	ldr	r3, [r7, #4]
 80230d0:	2b00      	cmp	r3, #0
 80230d2:	d00c      	beq.n	80230ee <etharp_find_entry+0xc2>
 80230d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80230d8:	4989      	ldr	r1, [pc, #548]	@ (8023300 <etharp_find_entry+0x2d4>)
 80230da:	4613      	mov	r3, r2
 80230dc:	005b      	lsls	r3, r3, #1
 80230de:	4413      	add	r3, r2
 80230e0:	00db      	lsls	r3, r3, #3
 80230e2:	440b      	add	r3, r1
 80230e4:	3308      	adds	r3, #8
 80230e6:	681b      	ldr	r3, [r3, #0]
 80230e8:	687a      	ldr	r2, [r7, #4]
 80230ea:	429a      	cmp	r2, r3
 80230ec:	d102      	bne.n	80230f4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80230ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80230f2:	e100      	b.n	80232f6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80230f4:	7dfb      	ldrb	r3, [r7, #23]
 80230f6:	2b01      	cmp	r3, #1
 80230f8:	d140      	bne.n	802317c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80230fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80230fe:	4980      	ldr	r1, [pc, #512]	@ (8023300 <etharp_find_entry+0x2d4>)
 8023100:	4613      	mov	r3, r2
 8023102:	005b      	lsls	r3, r3, #1
 8023104:	4413      	add	r3, r2
 8023106:	00db      	lsls	r3, r3, #3
 8023108:	440b      	add	r3, r1
 802310a:	681b      	ldr	r3, [r3, #0]
 802310c:	2b00      	cmp	r3, #0
 802310e:	d01a      	beq.n	8023146 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8023110:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023114:	497a      	ldr	r1, [pc, #488]	@ (8023300 <etharp_find_entry+0x2d4>)
 8023116:	4613      	mov	r3, r2
 8023118:	005b      	lsls	r3, r3, #1
 802311a:	4413      	add	r3, r2
 802311c:	00db      	lsls	r3, r3, #3
 802311e:	440b      	add	r3, r1
 8023120:	3312      	adds	r3, #18
 8023122:	881b      	ldrh	r3, [r3, #0]
 8023124:	8bba      	ldrh	r2, [r7, #28]
 8023126:	429a      	cmp	r2, r3
 8023128:	d845      	bhi.n	80231b6 <etharp_find_entry+0x18a>
            old_queue = i;
 802312a:	8c3b      	ldrh	r3, [r7, #32]
 802312c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 802312e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023132:	4973      	ldr	r1, [pc, #460]	@ (8023300 <etharp_find_entry+0x2d4>)
 8023134:	4613      	mov	r3, r2
 8023136:	005b      	lsls	r3, r3, #1
 8023138:	4413      	add	r3, r2
 802313a:	00db      	lsls	r3, r3, #3
 802313c:	440b      	add	r3, r1
 802313e:	3312      	adds	r3, #18
 8023140:	881b      	ldrh	r3, [r3, #0]
 8023142:	83bb      	strh	r3, [r7, #28]
 8023144:	e037      	b.n	80231b6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8023146:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802314a:	496d      	ldr	r1, [pc, #436]	@ (8023300 <etharp_find_entry+0x2d4>)
 802314c:	4613      	mov	r3, r2
 802314e:	005b      	lsls	r3, r3, #1
 8023150:	4413      	add	r3, r2
 8023152:	00db      	lsls	r3, r3, #3
 8023154:	440b      	add	r3, r1
 8023156:	3312      	adds	r3, #18
 8023158:	881b      	ldrh	r3, [r3, #0]
 802315a:	8b7a      	ldrh	r2, [r7, #26]
 802315c:	429a      	cmp	r2, r3
 802315e:	d82a      	bhi.n	80231b6 <etharp_find_entry+0x18a>
            old_pending = i;
 8023160:	8c3b      	ldrh	r3, [r7, #32]
 8023162:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8023164:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023168:	4965      	ldr	r1, [pc, #404]	@ (8023300 <etharp_find_entry+0x2d4>)
 802316a:	4613      	mov	r3, r2
 802316c:	005b      	lsls	r3, r3, #1
 802316e:	4413      	add	r3, r2
 8023170:	00db      	lsls	r3, r3, #3
 8023172:	440b      	add	r3, r1
 8023174:	3312      	adds	r3, #18
 8023176:	881b      	ldrh	r3, [r3, #0]
 8023178:	837b      	strh	r3, [r7, #26]
 802317a:	e01c      	b.n	80231b6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 802317c:	7dfb      	ldrb	r3, [r7, #23]
 802317e:	2b01      	cmp	r3, #1
 8023180:	d919      	bls.n	80231b6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8023182:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023186:	495e      	ldr	r1, [pc, #376]	@ (8023300 <etharp_find_entry+0x2d4>)
 8023188:	4613      	mov	r3, r2
 802318a:	005b      	lsls	r3, r3, #1
 802318c:	4413      	add	r3, r2
 802318e:	00db      	lsls	r3, r3, #3
 8023190:	440b      	add	r3, r1
 8023192:	3312      	adds	r3, #18
 8023194:	881b      	ldrh	r3, [r3, #0]
 8023196:	8b3a      	ldrh	r2, [r7, #24]
 8023198:	429a      	cmp	r2, r3
 802319a:	d80c      	bhi.n	80231b6 <etharp_find_entry+0x18a>
            old_stable = i;
 802319c:	8c3b      	ldrh	r3, [r7, #32]
 802319e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80231a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80231a4:	4956      	ldr	r1, [pc, #344]	@ (8023300 <etharp_find_entry+0x2d4>)
 80231a6:	4613      	mov	r3, r2
 80231a8:	005b      	lsls	r3, r3, #1
 80231aa:	4413      	add	r3, r2
 80231ac:	00db      	lsls	r3, r3, #3
 80231ae:	440b      	add	r3, r1
 80231b0:	3312      	adds	r3, #18
 80231b2:	881b      	ldrh	r3, [r3, #0]
 80231b4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80231b6:	8c3b      	ldrh	r3, [r7, #32]
 80231b8:	3301      	adds	r3, #1
 80231ba:	b29b      	uxth	r3, r3
 80231bc:	843b      	strh	r3, [r7, #32]
 80231be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80231c2:	2b09      	cmp	r3, #9
 80231c4:	f77f af4c 	ble.w	8023060 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80231c8:	7afb      	ldrb	r3, [r7, #11]
 80231ca:	f003 0302 	and.w	r3, r3, #2
 80231ce:	2b00      	cmp	r3, #0
 80231d0:	d108      	bne.n	80231e4 <etharp_find_entry+0x1b8>
 80231d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80231d6:	2b0a      	cmp	r3, #10
 80231d8:	d107      	bne.n	80231ea <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80231da:	7afb      	ldrb	r3, [r7, #11]
 80231dc:	f003 0301 	and.w	r3, r3, #1
 80231e0:	2b00      	cmp	r3, #0
 80231e2:	d102      	bne.n	80231ea <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80231e4:	f04f 33ff 	mov.w	r3, #4294967295
 80231e8:	e085      	b.n	80232f6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80231ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80231ee:	2b09      	cmp	r3, #9
 80231f0:	dc02      	bgt.n	80231f8 <etharp_find_entry+0x1cc>
    i = empty;
 80231f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80231f4:	843b      	strh	r3, [r7, #32]
 80231f6:	e039      	b.n	802326c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80231f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80231fc:	2b09      	cmp	r3, #9
 80231fe:	dc14      	bgt.n	802322a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8023200:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8023202:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8023204:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023208:	493d      	ldr	r1, [pc, #244]	@ (8023300 <etharp_find_entry+0x2d4>)
 802320a:	4613      	mov	r3, r2
 802320c:	005b      	lsls	r3, r3, #1
 802320e:	4413      	add	r3, r2
 8023210:	00db      	lsls	r3, r3, #3
 8023212:	440b      	add	r3, r1
 8023214:	681b      	ldr	r3, [r3, #0]
 8023216:	2b00      	cmp	r3, #0
 8023218:	d018      	beq.n	802324c <etharp_find_entry+0x220>
 802321a:	4b3a      	ldr	r3, [pc, #232]	@ (8023304 <etharp_find_entry+0x2d8>)
 802321c:	f240 126d 	movw	r2, #365	@ 0x16d
 8023220:	493b      	ldr	r1, [pc, #236]	@ (8023310 <etharp_find_entry+0x2e4>)
 8023222:	483a      	ldr	r0, [pc, #232]	@ (802330c <etharp_find_entry+0x2e0>)
 8023224:	f003 fb38 	bl	8026898 <iprintf>
 8023228:	e010      	b.n	802324c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 802322a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 802322e:	2b09      	cmp	r3, #9
 8023230:	dc02      	bgt.n	8023238 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8023232:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8023234:	843b      	strh	r3, [r7, #32]
 8023236:	e009      	b.n	802324c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8023238:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802323c:	2b09      	cmp	r3, #9
 802323e:	dc02      	bgt.n	8023246 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8023240:	8bfb      	ldrh	r3, [r7, #30]
 8023242:	843b      	strh	r3, [r7, #32]
 8023244:	e002      	b.n	802324c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8023246:	f04f 33ff 	mov.w	r3, #4294967295
 802324a:	e054      	b.n	80232f6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 802324c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023250:	2b09      	cmp	r3, #9
 8023252:	dd06      	ble.n	8023262 <etharp_find_entry+0x236>
 8023254:	4b2b      	ldr	r3, [pc, #172]	@ (8023304 <etharp_find_entry+0x2d8>)
 8023256:	f240 127f 	movw	r2, #383	@ 0x17f
 802325a:	492e      	ldr	r1, [pc, #184]	@ (8023314 <etharp_find_entry+0x2e8>)
 802325c:	482b      	ldr	r0, [pc, #172]	@ (802330c <etharp_find_entry+0x2e0>)
 802325e:	f003 fb1b 	bl	8026898 <iprintf>
    etharp_free_entry(i);
 8023262:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023266:	4618      	mov	r0, r3
 8023268:	f7ff fe06 	bl	8022e78 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 802326c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023270:	2b09      	cmp	r3, #9
 8023272:	dd06      	ble.n	8023282 <etharp_find_entry+0x256>
 8023274:	4b23      	ldr	r3, [pc, #140]	@ (8023304 <etharp_find_entry+0x2d8>)
 8023276:	f240 1283 	movw	r2, #387	@ 0x183
 802327a:	4926      	ldr	r1, [pc, #152]	@ (8023314 <etharp_find_entry+0x2e8>)
 802327c:	4823      	ldr	r0, [pc, #140]	@ (802330c <etharp_find_entry+0x2e0>)
 802327e:	f003 fb0b 	bl	8026898 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8023282:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023286:	491e      	ldr	r1, [pc, #120]	@ (8023300 <etharp_find_entry+0x2d4>)
 8023288:	4613      	mov	r3, r2
 802328a:	005b      	lsls	r3, r3, #1
 802328c:	4413      	add	r3, r2
 802328e:	00db      	lsls	r3, r3, #3
 8023290:	440b      	add	r3, r1
 8023292:	3314      	adds	r3, #20
 8023294:	781b      	ldrb	r3, [r3, #0]
 8023296:	2b00      	cmp	r3, #0
 8023298:	d006      	beq.n	80232a8 <etharp_find_entry+0x27c>
 802329a:	4b1a      	ldr	r3, [pc, #104]	@ (8023304 <etharp_find_entry+0x2d8>)
 802329c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80232a0:	491d      	ldr	r1, [pc, #116]	@ (8023318 <etharp_find_entry+0x2ec>)
 80232a2:	481a      	ldr	r0, [pc, #104]	@ (802330c <etharp_find_entry+0x2e0>)
 80232a4:	f003 faf8 	bl	8026898 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80232a8:	68fb      	ldr	r3, [r7, #12]
 80232aa:	2b00      	cmp	r3, #0
 80232ac:	d00b      	beq.n	80232c6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80232ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80232b2:	68fb      	ldr	r3, [r7, #12]
 80232b4:	6819      	ldr	r1, [r3, #0]
 80232b6:	4812      	ldr	r0, [pc, #72]	@ (8023300 <etharp_find_entry+0x2d4>)
 80232b8:	4613      	mov	r3, r2
 80232ba:	005b      	lsls	r3, r3, #1
 80232bc:	4413      	add	r3, r2
 80232be:	00db      	lsls	r3, r3, #3
 80232c0:	4403      	add	r3, r0
 80232c2:	3304      	adds	r3, #4
 80232c4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80232c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80232ca:	490d      	ldr	r1, [pc, #52]	@ (8023300 <etharp_find_entry+0x2d4>)
 80232cc:	4613      	mov	r3, r2
 80232ce:	005b      	lsls	r3, r3, #1
 80232d0:	4413      	add	r3, r2
 80232d2:	00db      	lsls	r3, r3, #3
 80232d4:	440b      	add	r3, r1
 80232d6:	3312      	adds	r3, #18
 80232d8:	2200      	movs	r2, #0
 80232da:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80232dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80232e0:	4907      	ldr	r1, [pc, #28]	@ (8023300 <etharp_find_entry+0x2d4>)
 80232e2:	4613      	mov	r3, r2
 80232e4:	005b      	lsls	r3, r3, #1
 80232e6:	4413      	add	r3, r2
 80232e8:	00db      	lsls	r3, r3, #3
 80232ea:	440b      	add	r3, r1
 80232ec:	3308      	adds	r3, #8
 80232ee:	687a      	ldr	r2, [r7, #4]
 80232f0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80232f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80232f6:	4618      	mov	r0, r3
 80232f8:	3728      	adds	r7, #40	@ 0x28
 80232fa:	46bd      	mov	sp, r7
 80232fc:	bd80      	pop	{r7, pc}
 80232fe:	bf00      	nop
 8023300:	2003c534 	.word	0x2003c534
 8023304:	0802b028 	.word	0x0802b028
 8023308:	0802b060 	.word	0x0802b060
 802330c:	0802b0a0 	.word	0x0802b0a0
 8023310:	0802b0c8 	.word	0x0802b0c8
 8023314:	0802b0e0 	.word	0x0802b0e0
 8023318:	0802b0f4 	.word	0x0802b0f4

0802331c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 802331c:	b580      	push	{r7, lr}
 802331e:	b088      	sub	sp, #32
 8023320:	af02      	add	r7, sp, #8
 8023322:	60f8      	str	r0, [r7, #12]
 8023324:	60b9      	str	r1, [r7, #8]
 8023326:	607a      	str	r2, [r7, #4]
 8023328:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802332a:	68fb      	ldr	r3, [r7, #12]
 802332c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8023330:	2b06      	cmp	r3, #6
 8023332:	d006      	beq.n	8023342 <etharp_update_arp_entry+0x26>
 8023334:	4b48      	ldr	r3, [pc, #288]	@ (8023458 <etharp_update_arp_entry+0x13c>)
 8023336:	f240 12a9 	movw	r2, #425	@ 0x1a9
 802333a:	4948      	ldr	r1, [pc, #288]	@ (802345c <etharp_update_arp_entry+0x140>)
 802333c:	4848      	ldr	r0, [pc, #288]	@ (8023460 <etharp_update_arp_entry+0x144>)
 802333e:	f003 faab 	bl	8026898 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8023342:	68bb      	ldr	r3, [r7, #8]
 8023344:	2b00      	cmp	r3, #0
 8023346:	d012      	beq.n	802336e <etharp_update_arp_entry+0x52>
 8023348:	68bb      	ldr	r3, [r7, #8]
 802334a:	681b      	ldr	r3, [r3, #0]
 802334c:	2b00      	cmp	r3, #0
 802334e:	d00e      	beq.n	802336e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8023350:	68bb      	ldr	r3, [r7, #8]
 8023352:	681b      	ldr	r3, [r3, #0]
 8023354:	68f9      	ldr	r1, [r7, #12]
 8023356:	4618      	mov	r0, r3
 8023358:	f001 f924 	bl	80245a4 <ip4_addr_isbroadcast_u32>
 802335c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 802335e:	2b00      	cmp	r3, #0
 8023360:	d105      	bne.n	802336e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8023362:	68bb      	ldr	r3, [r7, #8]
 8023364:	681b      	ldr	r3, [r3, #0]
 8023366:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802336a:	2be0      	cmp	r3, #224	@ 0xe0
 802336c:	d102      	bne.n	8023374 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 802336e:	f06f 030f 	mvn.w	r3, #15
 8023372:	e06c      	b.n	802344e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8023374:	78fb      	ldrb	r3, [r7, #3]
 8023376:	68fa      	ldr	r2, [r7, #12]
 8023378:	4619      	mov	r1, r3
 802337a:	68b8      	ldr	r0, [r7, #8]
 802337c:	f7ff fe56 	bl	802302c <etharp_find_entry>
 8023380:	4603      	mov	r3, r0
 8023382:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8023384:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023388:	2b00      	cmp	r3, #0
 802338a:	da02      	bge.n	8023392 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 802338c:	8afb      	ldrh	r3, [r7, #22]
 802338e:	b25b      	sxtb	r3, r3
 8023390:	e05d      	b.n	802344e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8023392:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023396:	4933      	ldr	r1, [pc, #204]	@ (8023464 <etharp_update_arp_entry+0x148>)
 8023398:	4613      	mov	r3, r2
 802339a:	005b      	lsls	r3, r3, #1
 802339c:	4413      	add	r3, r2
 802339e:	00db      	lsls	r3, r3, #3
 80233a0:	440b      	add	r3, r1
 80233a2:	3314      	adds	r3, #20
 80233a4:	2202      	movs	r2, #2
 80233a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80233a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80233ac:	492d      	ldr	r1, [pc, #180]	@ (8023464 <etharp_update_arp_entry+0x148>)
 80233ae:	4613      	mov	r3, r2
 80233b0:	005b      	lsls	r3, r3, #1
 80233b2:	4413      	add	r3, r2
 80233b4:	00db      	lsls	r3, r3, #3
 80233b6:	440b      	add	r3, r1
 80233b8:	3308      	adds	r3, #8
 80233ba:	68fa      	ldr	r2, [r7, #12]
 80233bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80233be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80233c2:	4613      	mov	r3, r2
 80233c4:	005b      	lsls	r3, r3, #1
 80233c6:	4413      	add	r3, r2
 80233c8:	00db      	lsls	r3, r3, #3
 80233ca:	3308      	adds	r3, #8
 80233cc:	4a25      	ldr	r2, [pc, #148]	@ (8023464 <etharp_update_arp_entry+0x148>)
 80233ce:	4413      	add	r3, r2
 80233d0:	3304      	adds	r3, #4
 80233d2:	2206      	movs	r2, #6
 80233d4:	6879      	ldr	r1, [r7, #4]
 80233d6:	4618      	mov	r0, r3
 80233d8:	f003 fbdd 	bl	8026b96 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80233dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80233e0:	4920      	ldr	r1, [pc, #128]	@ (8023464 <etharp_update_arp_entry+0x148>)
 80233e2:	4613      	mov	r3, r2
 80233e4:	005b      	lsls	r3, r3, #1
 80233e6:	4413      	add	r3, r2
 80233e8:	00db      	lsls	r3, r3, #3
 80233ea:	440b      	add	r3, r1
 80233ec:	3312      	adds	r3, #18
 80233ee:	2200      	movs	r2, #0
 80233f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80233f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80233f6:	491b      	ldr	r1, [pc, #108]	@ (8023464 <etharp_update_arp_entry+0x148>)
 80233f8:	4613      	mov	r3, r2
 80233fa:	005b      	lsls	r3, r3, #1
 80233fc:	4413      	add	r3, r2
 80233fe:	00db      	lsls	r3, r3, #3
 8023400:	440b      	add	r3, r1
 8023402:	681b      	ldr	r3, [r3, #0]
 8023404:	2b00      	cmp	r3, #0
 8023406:	d021      	beq.n	802344c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8023408:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802340c:	4915      	ldr	r1, [pc, #84]	@ (8023464 <etharp_update_arp_entry+0x148>)
 802340e:	4613      	mov	r3, r2
 8023410:	005b      	lsls	r3, r3, #1
 8023412:	4413      	add	r3, r2
 8023414:	00db      	lsls	r3, r3, #3
 8023416:	440b      	add	r3, r1
 8023418:	681b      	ldr	r3, [r3, #0]
 802341a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 802341c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023420:	4910      	ldr	r1, [pc, #64]	@ (8023464 <etharp_update_arp_entry+0x148>)
 8023422:	4613      	mov	r3, r2
 8023424:	005b      	lsls	r3, r3, #1
 8023426:	4413      	add	r3, r2
 8023428:	00db      	lsls	r3, r3, #3
 802342a:	440b      	add	r3, r1
 802342c:	2200      	movs	r2, #0
 802342e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8023430:	68fb      	ldr	r3, [r7, #12]
 8023432:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8023436:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802343a:	9300      	str	r3, [sp, #0]
 802343c:	687b      	ldr	r3, [r7, #4]
 802343e:	6939      	ldr	r1, [r7, #16]
 8023440:	68f8      	ldr	r0, [r7, #12]
 8023442:	f001 ffbd 	bl	80253c0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8023446:	6938      	ldr	r0, [r7, #16]
 8023448:	f7f9 fab0 	bl	801c9ac <pbuf_free>
  }
  return ERR_OK;
 802344c:	2300      	movs	r3, #0
}
 802344e:	4618      	mov	r0, r3
 8023450:	3718      	adds	r7, #24
 8023452:	46bd      	mov	sp, r7
 8023454:	bd80      	pop	{r7, pc}
 8023456:	bf00      	nop
 8023458:	0802b028 	.word	0x0802b028
 802345c:	0802b120 	.word	0x0802b120
 8023460:	0802b0a0 	.word	0x0802b0a0
 8023464:	2003c534 	.word	0x2003c534

08023468 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8023468:	b580      	push	{r7, lr}
 802346a:	b084      	sub	sp, #16
 802346c:	af00      	add	r7, sp, #0
 802346e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023470:	2300      	movs	r3, #0
 8023472:	60fb      	str	r3, [r7, #12]
 8023474:	e01e      	b.n	80234b4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8023476:	4913      	ldr	r1, [pc, #76]	@ (80234c4 <etharp_cleanup_netif+0x5c>)
 8023478:	68fa      	ldr	r2, [r7, #12]
 802347a:	4613      	mov	r3, r2
 802347c:	005b      	lsls	r3, r3, #1
 802347e:	4413      	add	r3, r2
 8023480:	00db      	lsls	r3, r3, #3
 8023482:	440b      	add	r3, r1
 8023484:	3314      	adds	r3, #20
 8023486:	781b      	ldrb	r3, [r3, #0]
 8023488:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802348a:	7afb      	ldrb	r3, [r7, #11]
 802348c:	2b00      	cmp	r3, #0
 802348e:	d00e      	beq.n	80234ae <etharp_cleanup_netif+0x46>
 8023490:	490c      	ldr	r1, [pc, #48]	@ (80234c4 <etharp_cleanup_netif+0x5c>)
 8023492:	68fa      	ldr	r2, [r7, #12]
 8023494:	4613      	mov	r3, r2
 8023496:	005b      	lsls	r3, r3, #1
 8023498:	4413      	add	r3, r2
 802349a:	00db      	lsls	r3, r3, #3
 802349c:	440b      	add	r3, r1
 802349e:	3308      	adds	r3, #8
 80234a0:	681b      	ldr	r3, [r3, #0]
 80234a2:	687a      	ldr	r2, [r7, #4]
 80234a4:	429a      	cmp	r2, r3
 80234a6:	d102      	bne.n	80234ae <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80234a8:	68f8      	ldr	r0, [r7, #12]
 80234aa:	f7ff fce5 	bl	8022e78 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80234ae:	68fb      	ldr	r3, [r7, #12]
 80234b0:	3301      	adds	r3, #1
 80234b2:	60fb      	str	r3, [r7, #12]
 80234b4:	68fb      	ldr	r3, [r7, #12]
 80234b6:	2b09      	cmp	r3, #9
 80234b8:	dddd      	ble.n	8023476 <etharp_cleanup_netif+0xe>
    }
  }
}
 80234ba:	bf00      	nop
 80234bc:	bf00      	nop
 80234be:	3710      	adds	r7, #16
 80234c0:	46bd      	mov	sp, r7
 80234c2:	bd80      	pop	{r7, pc}
 80234c4:	2003c534 	.word	0x2003c534

080234c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80234c8:	b5b0      	push	{r4, r5, r7, lr}
 80234ca:	b08a      	sub	sp, #40	@ 0x28
 80234cc:	af04      	add	r7, sp, #16
 80234ce:	6078      	str	r0, [r7, #4]
 80234d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80234d2:	683b      	ldr	r3, [r7, #0]
 80234d4:	2b00      	cmp	r3, #0
 80234d6:	d107      	bne.n	80234e8 <etharp_input+0x20>
 80234d8:	4b3d      	ldr	r3, [pc, #244]	@ (80235d0 <etharp_input+0x108>)
 80234da:	f240 228a 	movw	r2, #650	@ 0x28a
 80234de:	493d      	ldr	r1, [pc, #244]	@ (80235d4 <etharp_input+0x10c>)
 80234e0:	483d      	ldr	r0, [pc, #244]	@ (80235d8 <etharp_input+0x110>)
 80234e2:	f003 f9d9 	bl	8026898 <iprintf>
 80234e6:	e06f      	b.n	80235c8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80234e8:	687b      	ldr	r3, [r7, #4]
 80234ea:	685b      	ldr	r3, [r3, #4]
 80234ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80234ee:	693b      	ldr	r3, [r7, #16]
 80234f0:	881b      	ldrh	r3, [r3, #0]
 80234f2:	b29b      	uxth	r3, r3
 80234f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80234f8:	d10c      	bne.n	8023514 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80234fa:	693b      	ldr	r3, [r7, #16]
 80234fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80234fe:	2b06      	cmp	r3, #6
 8023500:	d108      	bne.n	8023514 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8023502:	693b      	ldr	r3, [r7, #16]
 8023504:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8023506:	2b04      	cmp	r3, #4
 8023508:	d104      	bne.n	8023514 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 802350a:	693b      	ldr	r3, [r7, #16]
 802350c:	885b      	ldrh	r3, [r3, #2]
 802350e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8023510:	2b08      	cmp	r3, #8
 8023512:	d003      	beq.n	802351c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8023514:	6878      	ldr	r0, [r7, #4]
 8023516:	f7f9 fa49 	bl	801c9ac <pbuf_free>
    return;
 802351a:	e055      	b.n	80235c8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 802351c:	693b      	ldr	r3, [r7, #16]
 802351e:	330e      	adds	r3, #14
 8023520:	681b      	ldr	r3, [r3, #0]
 8023522:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8023524:	693b      	ldr	r3, [r7, #16]
 8023526:	3318      	adds	r3, #24
 8023528:	681b      	ldr	r3, [r3, #0]
 802352a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802352c:	683b      	ldr	r3, [r7, #0]
 802352e:	3304      	adds	r3, #4
 8023530:	681b      	ldr	r3, [r3, #0]
 8023532:	2b00      	cmp	r3, #0
 8023534:	d102      	bne.n	802353c <etharp_input+0x74>
    for_us = 0;
 8023536:	2300      	movs	r3, #0
 8023538:	75fb      	strb	r3, [r7, #23]
 802353a:	e009      	b.n	8023550 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 802353c:	68ba      	ldr	r2, [r7, #8]
 802353e:	683b      	ldr	r3, [r7, #0]
 8023540:	3304      	adds	r3, #4
 8023542:	681b      	ldr	r3, [r3, #0]
 8023544:	429a      	cmp	r2, r3
 8023546:	bf0c      	ite	eq
 8023548:	2301      	moveq	r3, #1
 802354a:	2300      	movne	r3, #0
 802354c:	b2db      	uxtb	r3, r3
 802354e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8023550:	693b      	ldr	r3, [r7, #16]
 8023552:	f103 0208 	add.w	r2, r3, #8
 8023556:	7dfb      	ldrb	r3, [r7, #23]
 8023558:	2b00      	cmp	r3, #0
 802355a:	d001      	beq.n	8023560 <etharp_input+0x98>
 802355c:	2301      	movs	r3, #1
 802355e:	e000      	b.n	8023562 <etharp_input+0x9a>
 8023560:	2302      	movs	r3, #2
 8023562:	f107 010c 	add.w	r1, r7, #12
 8023566:	6838      	ldr	r0, [r7, #0]
 8023568:	f7ff fed8 	bl	802331c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 802356c:	693b      	ldr	r3, [r7, #16]
 802356e:	88db      	ldrh	r3, [r3, #6]
 8023570:	b29b      	uxth	r3, r3
 8023572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023576:	d003      	beq.n	8023580 <etharp_input+0xb8>
 8023578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802357c:	d01e      	beq.n	80235bc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 802357e:	e020      	b.n	80235c2 <etharp_input+0xfa>
      if (for_us) {
 8023580:	7dfb      	ldrb	r3, [r7, #23]
 8023582:	2b00      	cmp	r3, #0
 8023584:	d01c      	beq.n	80235c0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8023586:	683b      	ldr	r3, [r7, #0]
 8023588:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 802358c:	693b      	ldr	r3, [r7, #16]
 802358e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8023592:	683b      	ldr	r3, [r7, #0]
 8023594:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8023598:	683b      	ldr	r3, [r7, #0]
 802359a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 802359c:	693a      	ldr	r2, [r7, #16]
 802359e:	3208      	adds	r2, #8
        etharp_raw(netif,
 80235a0:	2102      	movs	r1, #2
 80235a2:	9103      	str	r1, [sp, #12]
 80235a4:	f107 010c 	add.w	r1, r7, #12
 80235a8:	9102      	str	r1, [sp, #8]
 80235aa:	9201      	str	r2, [sp, #4]
 80235ac:	9300      	str	r3, [sp, #0]
 80235ae:	462b      	mov	r3, r5
 80235b0:	4622      	mov	r2, r4
 80235b2:	4601      	mov	r1, r0
 80235b4:	6838      	ldr	r0, [r7, #0]
 80235b6:	f000 faeb 	bl	8023b90 <etharp_raw>
      break;
 80235ba:	e001      	b.n	80235c0 <etharp_input+0xf8>
      break;
 80235bc:	bf00      	nop
 80235be:	e000      	b.n	80235c2 <etharp_input+0xfa>
      break;
 80235c0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80235c2:	6878      	ldr	r0, [r7, #4]
 80235c4:	f7f9 f9f2 	bl	801c9ac <pbuf_free>
}
 80235c8:	3718      	adds	r7, #24
 80235ca:	46bd      	mov	sp, r7
 80235cc:	bdb0      	pop	{r4, r5, r7, pc}
 80235ce:	bf00      	nop
 80235d0:	0802b028 	.word	0x0802b028
 80235d4:	0802b178 	.word	0x0802b178
 80235d8:	0802b0a0 	.word	0x0802b0a0

080235dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80235dc:	b580      	push	{r7, lr}
 80235de:	b086      	sub	sp, #24
 80235e0:	af02      	add	r7, sp, #8
 80235e2:	60f8      	str	r0, [r7, #12]
 80235e4:	60b9      	str	r1, [r7, #8]
 80235e6:	4613      	mov	r3, r2
 80235e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80235ea:	79fa      	ldrb	r2, [r7, #7]
 80235ec:	4944      	ldr	r1, [pc, #272]	@ (8023700 <etharp_output_to_arp_index+0x124>)
 80235ee:	4613      	mov	r3, r2
 80235f0:	005b      	lsls	r3, r3, #1
 80235f2:	4413      	add	r3, r2
 80235f4:	00db      	lsls	r3, r3, #3
 80235f6:	440b      	add	r3, r1
 80235f8:	3314      	adds	r3, #20
 80235fa:	781b      	ldrb	r3, [r3, #0]
 80235fc:	2b01      	cmp	r3, #1
 80235fe:	d806      	bhi.n	802360e <etharp_output_to_arp_index+0x32>
 8023600:	4b40      	ldr	r3, [pc, #256]	@ (8023704 <etharp_output_to_arp_index+0x128>)
 8023602:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8023606:	4940      	ldr	r1, [pc, #256]	@ (8023708 <etharp_output_to_arp_index+0x12c>)
 8023608:	4840      	ldr	r0, [pc, #256]	@ (802370c <etharp_output_to_arp_index+0x130>)
 802360a:	f003 f945 	bl	8026898 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802360e:	79fa      	ldrb	r2, [r7, #7]
 8023610:	493b      	ldr	r1, [pc, #236]	@ (8023700 <etharp_output_to_arp_index+0x124>)
 8023612:	4613      	mov	r3, r2
 8023614:	005b      	lsls	r3, r3, #1
 8023616:	4413      	add	r3, r2
 8023618:	00db      	lsls	r3, r3, #3
 802361a:	440b      	add	r3, r1
 802361c:	3314      	adds	r3, #20
 802361e:	781b      	ldrb	r3, [r3, #0]
 8023620:	2b02      	cmp	r3, #2
 8023622:	d153      	bne.n	80236cc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8023624:	79fa      	ldrb	r2, [r7, #7]
 8023626:	4936      	ldr	r1, [pc, #216]	@ (8023700 <etharp_output_to_arp_index+0x124>)
 8023628:	4613      	mov	r3, r2
 802362a:	005b      	lsls	r3, r3, #1
 802362c:	4413      	add	r3, r2
 802362e:	00db      	lsls	r3, r3, #3
 8023630:	440b      	add	r3, r1
 8023632:	3312      	adds	r3, #18
 8023634:	881b      	ldrh	r3, [r3, #0]
 8023636:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 802363a:	d919      	bls.n	8023670 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 802363c:	79fa      	ldrb	r2, [r7, #7]
 802363e:	4613      	mov	r3, r2
 8023640:	005b      	lsls	r3, r3, #1
 8023642:	4413      	add	r3, r2
 8023644:	00db      	lsls	r3, r3, #3
 8023646:	4a2e      	ldr	r2, [pc, #184]	@ (8023700 <etharp_output_to_arp_index+0x124>)
 8023648:	4413      	add	r3, r2
 802364a:	3304      	adds	r3, #4
 802364c:	4619      	mov	r1, r3
 802364e:	68f8      	ldr	r0, [r7, #12]
 8023650:	f000 fb4c 	bl	8023cec <etharp_request>
 8023654:	4603      	mov	r3, r0
 8023656:	2b00      	cmp	r3, #0
 8023658:	d138      	bne.n	80236cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 802365a:	79fa      	ldrb	r2, [r7, #7]
 802365c:	4928      	ldr	r1, [pc, #160]	@ (8023700 <etharp_output_to_arp_index+0x124>)
 802365e:	4613      	mov	r3, r2
 8023660:	005b      	lsls	r3, r3, #1
 8023662:	4413      	add	r3, r2
 8023664:	00db      	lsls	r3, r3, #3
 8023666:	440b      	add	r3, r1
 8023668:	3314      	adds	r3, #20
 802366a:	2203      	movs	r2, #3
 802366c:	701a      	strb	r2, [r3, #0]
 802366e:	e02d      	b.n	80236cc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8023670:	79fa      	ldrb	r2, [r7, #7]
 8023672:	4923      	ldr	r1, [pc, #140]	@ (8023700 <etharp_output_to_arp_index+0x124>)
 8023674:	4613      	mov	r3, r2
 8023676:	005b      	lsls	r3, r3, #1
 8023678:	4413      	add	r3, r2
 802367a:	00db      	lsls	r3, r3, #3
 802367c:	440b      	add	r3, r1
 802367e:	3312      	adds	r3, #18
 8023680:	881b      	ldrh	r3, [r3, #0]
 8023682:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8023686:	d321      	bcc.n	80236cc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023688:	79fa      	ldrb	r2, [r7, #7]
 802368a:	4613      	mov	r3, r2
 802368c:	005b      	lsls	r3, r3, #1
 802368e:	4413      	add	r3, r2
 8023690:	00db      	lsls	r3, r3, #3
 8023692:	4a1b      	ldr	r2, [pc, #108]	@ (8023700 <etharp_output_to_arp_index+0x124>)
 8023694:	4413      	add	r3, r2
 8023696:	1d19      	adds	r1, r3, #4
 8023698:	79fa      	ldrb	r2, [r7, #7]
 802369a:	4613      	mov	r3, r2
 802369c:	005b      	lsls	r3, r3, #1
 802369e:	4413      	add	r3, r2
 80236a0:	00db      	lsls	r3, r3, #3
 80236a2:	3308      	adds	r3, #8
 80236a4:	4a16      	ldr	r2, [pc, #88]	@ (8023700 <etharp_output_to_arp_index+0x124>)
 80236a6:	4413      	add	r3, r2
 80236a8:	3304      	adds	r3, #4
 80236aa:	461a      	mov	r2, r3
 80236ac:	68f8      	ldr	r0, [r7, #12]
 80236ae:	f000 fafb 	bl	8023ca8 <etharp_request_dst>
 80236b2:	4603      	mov	r3, r0
 80236b4:	2b00      	cmp	r3, #0
 80236b6:	d109      	bne.n	80236cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80236b8:	79fa      	ldrb	r2, [r7, #7]
 80236ba:	4911      	ldr	r1, [pc, #68]	@ (8023700 <etharp_output_to_arp_index+0x124>)
 80236bc:	4613      	mov	r3, r2
 80236be:	005b      	lsls	r3, r3, #1
 80236c0:	4413      	add	r3, r2
 80236c2:	00db      	lsls	r3, r3, #3
 80236c4:	440b      	add	r3, r1
 80236c6:	3314      	adds	r3, #20
 80236c8:	2203      	movs	r2, #3
 80236ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80236cc:	68fb      	ldr	r3, [r7, #12]
 80236ce:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80236d2:	79fa      	ldrb	r2, [r7, #7]
 80236d4:	4613      	mov	r3, r2
 80236d6:	005b      	lsls	r3, r3, #1
 80236d8:	4413      	add	r3, r2
 80236da:	00db      	lsls	r3, r3, #3
 80236dc:	3308      	adds	r3, #8
 80236de:	4a08      	ldr	r2, [pc, #32]	@ (8023700 <etharp_output_to_arp_index+0x124>)
 80236e0:	4413      	add	r3, r2
 80236e2:	3304      	adds	r3, #4
 80236e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80236e8:	9200      	str	r2, [sp, #0]
 80236ea:	460a      	mov	r2, r1
 80236ec:	68b9      	ldr	r1, [r7, #8]
 80236ee:	68f8      	ldr	r0, [r7, #12]
 80236f0:	f001 fe66 	bl	80253c0 <ethernet_output>
 80236f4:	4603      	mov	r3, r0
}
 80236f6:	4618      	mov	r0, r3
 80236f8:	3710      	adds	r7, #16
 80236fa:	46bd      	mov	sp, r7
 80236fc:	bd80      	pop	{r7, pc}
 80236fe:	bf00      	nop
 8023700:	2003c534 	.word	0x2003c534
 8023704:	0802b028 	.word	0x0802b028
 8023708:	0802b198 	.word	0x0802b198
 802370c:	0802b0a0 	.word	0x0802b0a0

08023710 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8023710:	b580      	push	{r7, lr}
 8023712:	b08a      	sub	sp, #40	@ 0x28
 8023714:	af02      	add	r7, sp, #8
 8023716:	60f8      	str	r0, [r7, #12]
 8023718:	60b9      	str	r1, [r7, #8]
 802371a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 802371c:	687b      	ldr	r3, [r7, #4]
 802371e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023720:	68fb      	ldr	r3, [r7, #12]
 8023722:	2b00      	cmp	r3, #0
 8023724:	d106      	bne.n	8023734 <etharp_output+0x24>
 8023726:	4b73      	ldr	r3, [pc, #460]	@ (80238f4 <etharp_output+0x1e4>)
 8023728:	f240 321e 	movw	r2, #798	@ 0x31e
 802372c:	4972      	ldr	r1, [pc, #456]	@ (80238f8 <etharp_output+0x1e8>)
 802372e:	4873      	ldr	r0, [pc, #460]	@ (80238fc <etharp_output+0x1ec>)
 8023730:	f003 f8b2 	bl	8026898 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023734:	68bb      	ldr	r3, [r7, #8]
 8023736:	2b00      	cmp	r3, #0
 8023738:	d106      	bne.n	8023748 <etharp_output+0x38>
 802373a:	4b6e      	ldr	r3, [pc, #440]	@ (80238f4 <etharp_output+0x1e4>)
 802373c:	f240 321f 	movw	r2, #799	@ 0x31f
 8023740:	496f      	ldr	r1, [pc, #444]	@ (8023900 <etharp_output+0x1f0>)
 8023742:	486e      	ldr	r0, [pc, #440]	@ (80238fc <etharp_output+0x1ec>)
 8023744:	f003 f8a8 	bl	8026898 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8023748:	687b      	ldr	r3, [r7, #4]
 802374a:	2b00      	cmp	r3, #0
 802374c:	d106      	bne.n	802375c <etharp_output+0x4c>
 802374e:	4b69      	ldr	r3, [pc, #420]	@ (80238f4 <etharp_output+0x1e4>)
 8023750:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8023754:	496b      	ldr	r1, [pc, #428]	@ (8023904 <etharp_output+0x1f4>)
 8023756:	4869      	ldr	r0, [pc, #420]	@ (80238fc <etharp_output+0x1ec>)
 8023758:	f003 f89e 	bl	8026898 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 802375c:	687b      	ldr	r3, [r7, #4]
 802375e:	681b      	ldr	r3, [r3, #0]
 8023760:	68f9      	ldr	r1, [r7, #12]
 8023762:	4618      	mov	r0, r3
 8023764:	f000 ff1e 	bl	80245a4 <ip4_addr_isbroadcast_u32>
 8023768:	4603      	mov	r3, r0
 802376a:	2b00      	cmp	r3, #0
 802376c:	d002      	beq.n	8023774 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 802376e:	4b66      	ldr	r3, [pc, #408]	@ (8023908 <etharp_output+0x1f8>)
 8023770:	61fb      	str	r3, [r7, #28]
 8023772:	e0af      	b.n	80238d4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8023774:	687b      	ldr	r3, [r7, #4]
 8023776:	681b      	ldr	r3, [r3, #0]
 8023778:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802377c:	2be0      	cmp	r3, #224	@ 0xe0
 802377e:	d118      	bne.n	80237b2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8023780:	2301      	movs	r3, #1
 8023782:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8023784:	2300      	movs	r3, #0
 8023786:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8023788:	235e      	movs	r3, #94	@ 0x5e
 802378a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 802378c:	687b      	ldr	r3, [r7, #4]
 802378e:	3301      	adds	r3, #1
 8023790:	781b      	ldrb	r3, [r3, #0]
 8023792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8023796:	b2db      	uxtb	r3, r3
 8023798:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 802379a:	687b      	ldr	r3, [r7, #4]
 802379c:	3302      	adds	r3, #2
 802379e:	781b      	ldrb	r3, [r3, #0]
 80237a0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80237a2:	687b      	ldr	r3, [r7, #4]
 80237a4:	3303      	adds	r3, #3
 80237a6:	781b      	ldrb	r3, [r3, #0]
 80237a8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80237aa:	f107 0310 	add.w	r3, r7, #16
 80237ae:	61fb      	str	r3, [r7, #28]
 80237b0:	e090      	b.n	80238d4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80237b2:	687b      	ldr	r3, [r7, #4]
 80237b4:	681a      	ldr	r2, [r3, #0]
 80237b6:	68fb      	ldr	r3, [r7, #12]
 80237b8:	3304      	adds	r3, #4
 80237ba:	681b      	ldr	r3, [r3, #0]
 80237bc:	405a      	eors	r2, r3
 80237be:	68fb      	ldr	r3, [r7, #12]
 80237c0:	3308      	adds	r3, #8
 80237c2:	681b      	ldr	r3, [r3, #0]
 80237c4:	4013      	ands	r3, r2
 80237c6:	2b00      	cmp	r3, #0
 80237c8:	d012      	beq.n	80237f0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80237ca:	687b      	ldr	r3, [r7, #4]
 80237cc:	681b      	ldr	r3, [r3, #0]
 80237ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80237d0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80237d4:	4293      	cmp	r3, r2
 80237d6:	d00b      	beq.n	80237f0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80237d8:	68fb      	ldr	r3, [r7, #12]
 80237da:	330c      	adds	r3, #12
 80237dc:	681b      	ldr	r3, [r3, #0]
 80237de:	2b00      	cmp	r3, #0
 80237e0:	d003      	beq.n	80237ea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80237e2:	68fb      	ldr	r3, [r7, #12]
 80237e4:	330c      	adds	r3, #12
 80237e6:	61bb      	str	r3, [r7, #24]
 80237e8:	e002      	b.n	80237f0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80237ea:	f06f 0303 	mvn.w	r3, #3
 80237ee:	e07d      	b.n	80238ec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80237f0:	4b46      	ldr	r3, [pc, #280]	@ (802390c <etharp_output+0x1fc>)
 80237f2:	781b      	ldrb	r3, [r3, #0]
 80237f4:	4619      	mov	r1, r3
 80237f6:	4a46      	ldr	r2, [pc, #280]	@ (8023910 <etharp_output+0x200>)
 80237f8:	460b      	mov	r3, r1
 80237fa:	005b      	lsls	r3, r3, #1
 80237fc:	440b      	add	r3, r1
 80237fe:	00db      	lsls	r3, r3, #3
 8023800:	4413      	add	r3, r2
 8023802:	3314      	adds	r3, #20
 8023804:	781b      	ldrb	r3, [r3, #0]
 8023806:	2b01      	cmp	r3, #1
 8023808:	d925      	bls.n	8023856 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 802380a:	4b40      	ldr	r3, [pc, #256]	@ (802390c <etharp_output+0x1fc>)
 802380c:	781b      	ldrb	r3, [r3, #0]
 802380e:	4619      	mov	r1, r3
 8023810:	4a3f      	ldr	r2, [pc, #252]	@ (8023910 <etharp_output+0x200>)
 8023812:	460b      	mov	r3, r1
 8023814:	005b      	lsls	r3, r3, #1
 8023816:	440b      	add	r3, r1
 8023818:	00db      	lsls	r3, r3, #3
 802381a:	4413      	add	r3, r2
 802381c:	3308      	adds	r3, #8
 802381e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8023820:	68fa      	ldr	r2, [r7, #12]
 8023822:	429a      	cmp	r2, r3
 8023824:	d117      	bne.n	8023856 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8023826:	69bb      	ldr	r3, [r7, #24]
 8023828:	681a      	ldr	r2, [r3, #0]
 802382a:	4b38      	ldr	r3, [pc, #224]	@ (802390c <etharp_output+0x1fc>)
 802382c:	781b      	ldrb	r3, [r3, #0]
 802382e:	4618      	mov	r0, r3
 8023830:	4937      	ldr	r1, [pc, #220]	@ (8023910 <etharp_output+0x200>)
 8023832:	4603      	mov	r3, r0
 8023834:	005b      	lsls	r3, r3, #1
 8023836:	4403      	add	r3, r0
 8023838:	00db      	lsls	r3, r3, #3
 802383a:	440b      	add	r3, r1
 802383c:	3304      	adds	r3, #4
 802383e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8023840:	429a      	cmp	r2, r3
 8023842:	d108      	bne.n	8023856 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8023844:	4b31      	ldr	r3, [pc, #196]	@ (802390c <etharp_output+0x1fc>)
 8023846:	781b      	ldrb	r3, [r3, #0]
 8023848:	461a      	mov	r2, r3
 802384a:	68b9      	ldr	r1, [r7, #8]
 802384c:	68f8      	ldr	r0, [r7, #12]
 802384e:	f7ff fec5 	bl	80235dc <etharp_output_to_arp_index>
 8023852:	4603      	mov	r3, r0
 8023854:	e04a      	b.n	80238ec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023856:	2300      	movs	r3, #0
 8023858:	75fb      	strb	r3, [r7, #23]
 802385a:	e031      	b.n	80238c0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802385c:	7dfa      	ldrb	r2, [r7, #23]
 802385e:	492c      	ldr	r1, [pc, #176]	@ (8023910 <etharp_output+0x200>)
 8023860:	4613      	mov	r3, r2
 8023862:	005b      	lsls	r3, r3, #1
 8023864:	4413      	add	r3, r2
 8023866:	00db      	lsls	r3, r3, #3
 8023868:	440b      	add	r3, r1
 802386a:	3314      	adds	r3, #20
 802386c:	781b      	ldrb	r3, [r3, #0]
 802386e:	2b01      	cmp	r3, #1
 8023870:	d923      	bls.n	80238ba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8023872:	7dfa      	ldrb	r2, [r7, #23]
 8023874:	4926      	ldr	r1, [pc, #152]	@ (8023910 <etharp_output+0x200>)
 8023876:	4613      	mov	r3, r2
 8023878:	005b      	lsls	r3, r3, #1
 802387a:	4413      	add	r3, r2
 802387c:	00db      	lsls	r3, r3, #3
 802387e:	440b      	add	r3, r1
 8023880:	3308      	adds	r3, #8
 8023882:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023884:	68fa      	ldr	r2, [r7, #12]
 8023886:	429a      	cmp	r2, r3
 8023888:	d117      	bne.n	80238ba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 802388a:	69bb      	ldr	r3, [r7, #24]
 802388c:	6819      	ldr	r1, [r3, #0]
 802388e:	7dfa      	ldrb	r2, [r7, #23]
 8023890:	481f      	ldr	r0, [pc, #124]	@ (8023910 <etharp_output+0x200>)
 8023892:	4613      	mov	r3, r2
 8023894:	005b      	lsls	r3, r3, #1
 8023896:	4413      	add	r3, r2
 8023898:	00db      	lsls	r3, r3, #3
 802389a:	4403      	add	r3, r0
 802389c:	3304      	adds	r3, #4
 802389e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80238a0:	4299      	cmp	r1, r3
 80238a2:	d10a      	bne.n	80238ba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80238a4:	4a19      	ldr	r2, [pc, #100]	@ (802390c <etharp_output+0x1fc>)
 80238a6:	7dfb      	ldrb	r3, [r7, #23]
 80238a8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80238aa:	7dfb      	ldrb	r3, [r7, #23]
 80238ac:	461a      	mov	r2, r3
 80238ae:	68b9      	ldr	r1, [r7, #8]
 80238b0:	68f8      	ldr	r0, [r7, #12]
 80238b2:	f7ff fe93 	bl	80235dc <etharp_output_to_arp_index>
 80238b6:	4603      	mov	r3, r0
 80238b8:	e018      	b.n	80238ec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80238ba:	7dfb      	ldrb	r3, [r7, #23]
 80238bc:	3301      	adds	r3, #1
 80238be:	75fb      	strb	r3, [r7, #23]
 80238c0:	7dfb      	ldrb	r3, [r7, #23]
 80238c2:	2b09      	cmp	r3, #9
 80238c4:	d9ca      	bls.n	802385c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80238c6:	68ba      	ldr	r2, [r7, #8]
 80238c8:	69b9      	ldr	r1, [r7, #24]
 80238ca:	68f8      	ldr	r0, [r7, #12]
 80238cc:	f000 f822 	bl	8023914 <etharp_query>
 80238d0:	4603      	mov	r3, r0
 80238d2:	e00b      	b.n	80238ec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80238d4:	68fb      	ldr	r3, [r7, #12]
 80238d6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80238da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80238de:	9300      	str	r3, [sp, #0]
 80238e0:	69fb      	ldr	r3, [r7, #28]
 80238e2:	68b9      	ldr	r1, [r7, #8]
 80238e4:	68f8      	ldr	r0, [r7, #12]
 80238e6:	f001 fd6b 	bl	80253c0 <ethernet_output>
 80238ea:	4603      	mov	r3, r0
}
 80238ec:	4618      	mov	r0, r3
 80238ee:	3720      	adds	r7, #32
 80238f0:	46bd      	mov	sp, r7
 80238f2:	bd80      	pop	{r7, pc}
 80238f4:	0802b028 	.word	0x0802b028
 80238f8:	0802b178 	.word	0x0802b178
 80238fc:	0802b0a0 	.word	0x0802b0a0
 8023900:	0802b1c8 	.word	0x0802b1c8
 8023904:	0802b168 	.word	0x0802b168
 8023908:	0802cf08 	.word	0x0802cf08
 802390c:	2003c624 	.word	0x2003c624
 8023910:	2003c534 	.word	0x2003c534

08023914 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8023914:	b580      	push	{r7, lr}
 8023916:	b08c      	sub	sp, #48	@ 0x30
 8023918:	af02      	add	r7, sp, #8
 802391a:	60f8      	str	r0, [r7, #12]
 802391c:	60b9      	str	r1, [r7, #8]
 802391e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8023920:	68fb      	ldr	r3, [r7, #12]
 8023922:	3326      	adds	r3, #38	@ 0x26
 8023924:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8023926:	23ff      	movs	r3, #255	@ 0xff
 8023928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 802392c:	2300      	movs	r3, #0
 802392e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8023930:	68bb      	ldr	r3, [r7, #8]
 8023932:	681b      	ldr	r3, [r3, #0]
 8023934:	68f9      	ldr	r1, [r7, #12]
 8023936:	4618      	mov	r0, r3
 8023938:	f000 fe34 	bl	80245a4 <ip4_addr_isbroadcast_u32>
 802393c:	4603      	mov	r3, r0
 802393e:	2b00      	cmp	r3, #0
 8023940:	d10c      	bne.n	802395c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8023942:	68bb      	ldr	r3, [r7, #8]
 8023944:	681b      	ldr	r3, [r3, #0]
 8023946:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802394a:	2be0      	cmp	r3, #224	@ 0xe0
 802394c:	d006      	beq.n	802395c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802394e:	68bb      	ldr	r3, [r7, #8]
 8023950:	2b00      	cmp	r3, #0
 8023952:	d003      	beq.n	802395c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8023954:	68bb      	ldr	r3, [r7, #8]
 8023956:	681b      	ldr	r3, [r3, #0]
 8023958:	2b00      	cmp	r3, #0
 802395a:	d102      	bne.n	8023962 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 802395c:	f06f 030f 	mvn.w	r3, #15
 8023960:	e101      	b.n	8023b66 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8023962:	68fa      	ldr	r2, [r7, #12]
 8023964:	2101      	movs	r1, #1
 8023966:	68b8      	ldr	r0, [r7, #8]
 8023968:	f7ff fb60 	bl	802302c <etharp_find_entry>
 802396c:	4603      	mov	r3, r0
 802396e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8023970:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8023974:	2b00      	cmp	r3, #0
 8023976:	da02      	bge.n	802397e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8023978:	8a7b      	ldrh	r3, [r7, #18]
 802397a:	b25b      	sxtb	r3, r3
 802397c:	e0f3      	b.n	8023b66 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802397e:	8a7b      	ldrh	r3, [r7, #18]
 8023980:	2b7e      	cmp	r3, #126	@ 0x7e
 8023982:	d906      	bls.n	8023992 <etharp_query+0x7e>
 8023984:	4b7a      	ldr	r3, [pc, #488]	@ (8023b70 <etharp_query+0x25c>)
 8023986:	f240 32c1 	movw	r2, #961	@ 0x3c1
 802398a:	497a      	ldr	r1, [pc, #488]	@ (8023b74 <etharp_query+0x260>)
 802398c:	487a      	ldr	r0, [pc, #488]	@ (8023b78 <etharp_query+0x264>)
 802398e:	f002 ff83 	bl	8026898 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8023992:	8a7b      	ldrh	r3, [r7, #18]
 8023994:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8023996:	7c7a      	ldrb	r2, [r7, #17]
 8023998:	4978      	ldr	r1, [pc, #480]	@ (8023b7c <etharp_query+0x268>)
 802399a:	4613      	mov	r3, r2
 802399c:	005b      	lsls	r3, r3, #1
 802399e:	4413      	add	r3, r2
 80239a0:	00db      	lsls	r3, r3, #3
 80239a2:	440b      	add	r3, r1
 80239a4:	3314      	adds	r3, #20
 80239a6:	781b      	ldrb	r3, [r3, #0]
 80239a8:	2b00      	cmp	r3, #0
 80239aa:	d115      	bne.n	80239d8 <etharp_query+0xc4>
    is_new_entry = 1;
 80239ac:	2301      	movs	r3, #1
 80239ae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80239b0:	7c7a      	ldrb	r2, [r7, #17]
 80239b2:	4972      	ldr	r1, [pc, #456]	@ (8023b7c <etharp_query+0x268>)
 80239b4:	4613      	mov	r3, r2
 80239b6:	005b      	lsls	r3, r3, #1
 80239b8:	4413      	add	r3, r2
 80239ba:	00db      	lsls	r3, r3, #3
 80239bc:	440b      	add	r3, r1
 80239be:	3314      	adds	r3, #20
 80239c0:	2201      	movs	r2, #1
 80239c2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80239c4:	7c7a      	ldrb	r2, [r7, #17]
 80239c6:	496d      	ldr	r1, [pc, #436]	@ (8023b7c <etharp_query+0x268>)
 80239c8:	4613      	mov	r3, r2
 80239ca:	005b      	lsls	r3, r3, #1
 80239cc:	4413      	add	r3, r2
 80239ce:	00db      	lsls	r3, r3, #3
 80239d0:	440b      	add	r3, r1
 80239d2:	3308      	adds	r3, #8
 80239d4:	68fa      	ldr	r2, [r7, #12]
 80239d6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80239d8:	7c7a      	ldrb	r2, [r7, #17]
 80239da:	4968      	ldr	r1, [pc, #416]	@ (8023b7c <etharp_query+0x268>)
 80239dc:	4613      	mov	r3, r2
 80239de:	005b      	lsls	r3, r3, #1
 80239e0:	4413      	add	r3, r2
 80239e2:	00db      	lsls	r3, r3, #3
 80239e4:	440b      	add	r3, r1
 80239e6:	3314      	adds	r3, #20
 80239e8:	781b      	ldrb	r3, [r3, #0]
 80239ea:	2b01      	cmp	r3, #1
 80239ec:	d011      	beq.n	8023a12 <etharp_query+0xfe>
 80239ee:	7c7a      	ldrb	r2, [r7, #17]
 80239f0:	4962      	ldr	r1, [pc, #392]	@ (8023b7c <etharp_query+0x268>)
 80239f2:	4613      	mov	r3, r2
 80239f4:	005b      	lsls	r3, r3, #1
 80239f6:	4413      	add	r3, r2
 80239f8:	00db      	lsls	r3, r3, #3
 80239fa:	440b      	add	r3, r1
 80239fc:	3314      	adds	r3, #20
 80239fe:	781b      	ldrb	r3, [r3, #0]
 8023a00:	2b01      	cmp	r3, #1
 8023a02:	d806      	bhi.n	8023a12 <etharp_query+0xfe>
 8023a04:	4b5a      	ldr	r3, [pc, #360]	@ (8023b70 <etharp_query+0x25c>)
 8023a06:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8023a0a:	495d      	ldr	r1, [pc, #372]	@ (8023b80 <etharp_query+0x26c>)
 8023a0c:	485a      	ldr	r0, [pc, #360]	@ (8023b78 <etharp_query+0x264>)
 8023a0e:	f002 ff43 	bl	8026898 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8023a12:	6a3b      	ldr	r3, [r7, #32]
 8023a14:	2b00      	cmp	r3, #0
 8023a16:	d102      	bne.n	8023a1e <etharp_query+0x10a>
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	2b00      	cmp	r3, #0
 8023a1c:	d10c      	bne.n	8023a38 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8023a1e:	68b9      	ldr	r1, [r7, #8]
 8023a20:	68f8      	ldr	r0, [r7, #12]
 8023a22:	f000 f963 	bl	8023cec <etharp_request>
 8023a26:	4603      	mov	r3, r0
 8023a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8023a2c:	687b      	ldr	r3, [r7, #4]
 8023a2e:	2b00      	cmp	r3, #0
 8023a30:	d102      	bne.n	8023a38 <etharp_query+0x124>
      return result;
 8023a32:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8023a36:	e096      	b.n	8023b66 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8023a38:	687b      	ldr	r3, [r7, #4]
 8023a3a:	2b00      	cmp	r3, #0
 8023a3c:	d106      	bne.n	8023a4c <etharp_query+0x138>
 8023a3e:	4b4c      	ldr	r3, [pc, #304]	@ (8023b70 <etharp_query+0x25c>)
 8023a40:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8023a44:	494f      	ldr	r1, [pc, #316]	@ (8023b84 <etharp_query+0x270>)
 8023a46:	484c      	ldr	r0, [pc, #304]	@ (8023b78 <etharp_query+0x264>)
 8023a48:	f002 ff26 	bl	8026898 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8023a4c:	7c7a      	ldrb	r2, [r7, #17]
 8023a4e:	494b      	ldr	r1, [pc, #300]	@ (8023b7c <etharp_query+0x268>)
 8023a50:	4613      	mov	r3, r2
 8023a52:	005b      	lsls	r3, r3, #1
 8023a54:	4413      	add	r3, r2
 8023a56:	00db      	lsls	r3, r3, #3
 8023a58:	440b      	add	r3, r1
 8023a5a:	3314      	adds	r3, #20
 8023a5c:	781b      	ldrb	r3, [r3, #0]
 8023a5e:	2b01      	cmp	r3, #1
 8023a60:	d917      	bls.n	8023a92 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8023a62:	4a49      	ldr	r2, [pc, #292]	@ (8023b88 <etharp_query+0x274>)
 8023a64:	7c7b      	ldrb	r3, [r7, #17]
 8023a66:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8023a68:	7c7a      	ldrb	r2, [r7, #17]
 8023a6a:	4613      	mov	r3, r2
 8023a6c:	005b      	lsls	r3, r3, #1
 8023a6e:	4413      	add	r3, r2
 8023a70:	00db      	lsls	r3, r3, #3
 8023a72:	3308      	adds	r3, #8
 8023a74:	4a41      	ldr	r2, [pc, #260]	@ (8023b7c <etharp_query+0x268>)
 8023a76:	4413      	add	r3, r2
 8023a78:	3304      	adds	r3, #4
 8023a7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8023a7e:	9200      	str	r2, [sp, #0]
 8023a80:	697a      	ldr	r2, [r7, #20]
 8023a82:	6879      	ldr	r1, [r7, #4]
 8023a84:	68f8      	ldr	r0, [r7, #12]
 8023a86:	f001 fc9b 	bl	80253c0 <ethernet_output>
 8023a8a:	4603      	mov	r3, r0
 8023a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8023a90:	e067      	b.n	8023b62 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8023a92:	7c7a      	ldrb	r2, [r7, #17]
 8023a94:	4939      	ldr	r1, [pc, #228]	@ (8023b7c <etharp_query+0x268>)
 8023a96:	4613      	mov	r3, r2
 8023a98:	005b      	lsls	r3, r3, #1
 8023a9a:	4413      	add	r3, r2
 8023a9c:	00db      	lsls	r3, r3, #3
 8023a9e:	440b      	add	r3, r1
 8023aa0:	3314      	adds	r3, #20
 8023aa2:	781b      	ldrb	r3, [r3, #0]
 8023aa4:	2b01      	cmp	r3, #1
 8023aa6:	d15c      	bne.n	8023b62 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8023aa8:	2300      	movs	r3, #0
 8023aaa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8023aac:	687b      	ldr	r3, [r7, #4]
 8023aae:	61fb      	str	r3, [r7, #28]
    while (p) {
 8023ab0:	e01c      	b.n	8023aec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8023ab2:	69fb      	ldr	r3, [r7, #28]
 8023ab4:	895a      	ldrh	r2, [r3, #10]
 8023ab6:	69fb      	ldr	r3, [r7, #28]
 8023ab8:	891b      	ldrh	r3, [r3, #8]
 8023aba:	429a      	cmp	r2, r3
 8023abc:	d10a      	bne.n	8023ad4 <etharp_query+0x1c0>
 8023abe:	69fb      	ldr	r3, [r7, #28]
 8023ac0:	681b      	ldr	r3, [r3, #0]
 8023ac2:	2b00      	cmp	r3, #0
 8023ac4:	d006      	beq.n	8023ad4 <etharp_query+0x1c0>
 8023ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8023b70 <etharp_query+0x25c>)
 8023ac8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8023acc:	492f      	ldr	r1, [pc, #188]	@ (8023b8c <etharp_query+0x278>)
 8023ace:	482a      	ldr	r0, [pc, #168]	@ (8023b78 <etharp_query+0x264>)
 8023ad0:	f002 fee2 	bl	8026898 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8023ad4:	69fb      	ldr	r3, [r7, #28]
 8023ad6:	7b1b      	ldrb	r3, [r3, #12]
 8023ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	d002      	beq.n	8023ae6 <etharp_query+0x1d2>
        copy_needed = 1;
 8023ae0:	2301      	movs	r3, #1
 8023ae2:	61bb      	str	r3, [r7, #24]
        break;
 8023ae4:	e005      	b.n	8023af2 <etharp_query+0x1de>
      }
      p = p->next;
 8023ae6:	69fb      	ldr	r3, [r7, #28]
 8023ae8:	681b      	ldr	r3, [r3, #0]
 8023aea:	61fb      	str	r3, [r7, #28]
    while (p) {
 8023aec:	69fb      	ldr	r3, [r7, #28]
 8023aee:	2b00      	cmp	r3, #0
 8023af0:	d1df      	bne.n	8023ab2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8023af2:	69bb      	ldr	r3, [r7, #24]
 8023af4:	2b00      	cmp	r3, #0
 8023af6:	d007      	beq.n	8023b08 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8023af8:	687a      	ldr	r2, [r7, #4]
 8023afa:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8023afe:	200e      	movs	r0, #14
 8023b00:	f7f9 f9cc 	bl	801ce9c <pbuf_clone>
 8023b04:	61f8      	str	r0, [r7, #28]
 8023b06:	e004      	b.n	8023b12 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8023b08:	687b      	ldr	r3, [r7, #4]
 8023b0a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8023b0c:	69f8      	ldr	r0, [r7, #28]
 8023b0e:	f7f8 fff3 	bl	801caf8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8023b12:	69fb      	ldr	r3, [r7, #28]
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	d021      	beq.n	8023b5c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8023b18:	7c7a      	ldrb	r2, [r7, #17]
 8023b1a:	4918      	ldr	r1, [pc, #96]	@ (8023b7c <etharp_query+0x268>)
 8023b1c:	4613      	mov	r3, r2
 8023b1e:	005b      	lsls	r3, r3, #1
 8023b20:	4413      	add	r3, r2
 8023b22:	00db      	lsls	r3, r3, #3
 8023b24:	440b      	add	r3, r1
 8023b26:	681b      	ldr	r3, [r3, #0]
 8023b28:	2b00      	cmp	r3, #0
 8023b2a:	d00a      	beq.n	8023b42 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8023b2c:	7c7a      	ldrb	r2, [r7, #17]
 8023b2e:	4913      	ldr	r1, [pc, #76]	@ (8023b7c <etharp_query+0x268>)
 8023b30:	4613      	mov	r3, r2
 8023b32:	005b      	lsls	r3, r3, #1
 8023b34:	4413      	add	r3, r2
 8023b36:	00db      	lsls	r3, r3, #3
 8023b38:	440b      	add	r3, r1
 8023b3a:	681b      	ldr	r3, [r3, #0]
 8023b3c:	4618      	mov	r0, r3
 8023b3e:	f7f8 ff35 	bl	801c9ac <pbuf_free>
      }
      arp_table[i].q = p;
 8023b42:	7c7a      	ldrb	r2, [r7, #17]
 8023b44:	490d      	ldr	r1, [pc, #52]	@ (8023b7c <etharp_query+0x268>)
 8023b46:	4613      	mov	r3, r2
 8023b48:	005b      	lsls	r3, r3, #1
 8023b4a:	4413      	add	r3, r2
 8023b4c:	00db      	lsls	r3, r3, #3
 8023b4e:	440b      	add	r3, r1
 8023b50:	69fa      	ldr	r2, [r7, #28]
 8023b52:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8023b54:	2300      	movs	r3, #0
 8023b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8023b5a:	e002      	b.n	8023b62 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8023b5c:	23ff      	movs	r3, #255	@ 0xff
 8023b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8023b62:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8023b66:	4618      	mov	r0, r3
 8023b68:	3728      	adds	r7, #40	@ 0x28
 8023b6a:	46bd      	mov	sp, r7
 8023b6c:	bd80      	pop	{r7, pc}
 8023b6e:	bf00      	nop
 8023b70:	0802b028 	.word	0x0802b028
 8023b74:	0802b1d4 	.word	0x0802b1d4
 8023b78:	0802b0a0 	.word	0x0802b0a0
 8023b7c:	2003c534 	.word	0x2003c534
 8023b80:	0802b1e4 	.word	0x0802b1e4
 8023b84:	0802b1c8 	.word	0x0802b1c8
 8023b88:	2003c624 	.word	0x2003c624
 8023b8c:	0802b20c 	.word	0x0802b20c

08023b90 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8023b90:	b580      	push	{r7, lr}
 8023b92:	b08a      	sub	sp, #40	@ 0x28
 8023b94:	af02      	add	r7, sp, #8
 8023b96:	60f8      	str	r0, [r7, #12]
 8023b98:	60b9      	str	r1, [r7, #8]
 8023b9a:	607a      	str	r2, [r7, #4]
 8023b9c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8023b9e:	2300      	movs	r3, #0
 8023ba0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023ba2:	68fb      	ldr	r3, [r7, #12]
 8023ba4:	2b00      	cmp	r3, #0
 8023ba6:	d106      	bne.n	8023bb6 <etharp_raw+0x26>
 8023ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8023c94 <etharp_raw+0x104>)
 8023baa:	f240 4257 	movw	r2, #1111	@ 0x457
 8023bae:	493a      	ldr	r1, [pc, #232]	@ (8023c98 <etharp_raw+0x108>)
 8023bb0:	483a      	ldr	r0, [pc, #232]	@ (8023c9c <etharp_raw+0x10c>)
 8023bb2:	f002 fe71 	bl	8026898 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8023bb6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8023bba:	211c      	movs	r1, #28
 8023bbc:	200e      	movs	r0, #14
 8023bbe:	f7f8 fc13 	bl	801c3e8 <pbuf_alloc>
 8023bc2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8023bc4:	69bb      	ldr	r3, [r7, #24]
 8023bc6:	2b00      	cmp	r3, #0
 8023bc8:	d102      	bne.n	8023bd0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8023bca:	f04f 33ff 	mov.w	r3, #4294967295
 8023bce:	e05d      	b.n	8023c8c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8023bd0:	69bb      	ldr	r3, [r7, #24]
 8023bd2:	895b      	ldrh	r3, [r3, #10]
 8023bd4:	2b1b      	cmp	r3, #27
 8023bd6:	d806      	bhi.n	8023be6 <etharp_raw+0x56>
 8023bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8023c94 <etharp_raw+0x104>)
 8023bda:	f240 4262 	movw	r2, #1122	@ 0x462
 8023bde:	4930      	ldr	r1, [pc, #192]	@ (8023ca0 <etharp_raw+0x110>)
 8023be0:	482e      	ldr	r0, [pc, #184]	@ (8023c9c <etharp_raw+0x10c>)
 8023be2:	f002 fe59 	bl	8026898 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8023be6:	69bb      	ldr	r3, [r7, #24]
 8023be8:	685b      	ldr	r3, [r3, #4]
 8023bea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8023bec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8023bee:	4618      	mov	r0, r3
 8023bf0:	f7f7 fa42 	bl	801b078 <lwip_htons>
 8023bf4:	4603      	mov	r3, r0
 8023bf6:	461a      	mov	r2, r3
 8023bf8:	697b      	ldr	r3, [r7, #20]
 8023bfa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8023bfc:	68fb      	ldr	r3, [r7, #12]
 8023bfe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8023c02:	2b06      	cmp	r3, #6
 8023c04:	d006      	beq.n	8023c14 <etharp_raw+0x84>
 8023c06:	4b23      	ldr	r3, [pc, #140]	@ (8023c94 <etharp_raw+0x104>)
 8023c08:	f240 4269 	movw	r2, #1129	@ 0x469
 8023c0c:	4925      	ldr	r1, [pc, #148]	@ (8023ca4 <etharp_raw+0x114>)
 8023c0e:	4823      	ldr	r0, [pc, #140]	@ (8023c9c <etharp_raw+0x10c>)
 8023c10:	f002 fe42 	bl	8026898 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8023c14:	697b      	ldr	r3, [r7, #20]
 8023c16:	3308      	adds	r3, #8
 8023c18:	2206      	movs	r2, #6
 8023c1a:	6839      	ldr	r1, [r7, #0]
 8023c1c:	4618      	mov	r0, r3
 8023c1e:	f002 ffba 	bl	8026b96 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8023c22:	697b      	ldr	r3, [r7, #20]
 8023c24:	3312      	adds	r3, #18
 8023c26:	2206      	movs	r2, #6
 8023c28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8023c2a:	4618      	mov	r0, r3
 8023c2c:	f002 ffb3 	bl	8026b96 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8023c30:	697b      	ldr	r3, [r7, #20]
 8023c32:	330e      	adds	r3, #14
 8023c34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8023c36:	6812      	ldr	r2, [r2, #0]
 8023c38:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8023c3a:	697b      	ldr	r3, [r7, #20]
 8023c3c:	3318      	adds	r3, #24
 8023c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023c40:	6812      	ldr	r2, [r2, #0]
 8023c42:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8023c44:	697b      	ldr	r3, [r7, #20]
 8023c46:	2200      	movs	r2, #0
 8023c48:	701a      	strb	r2, [r3, #0]
 8023c4a:	2200      	movs	r2, #0
 8023c4c:	f042 0201 	orr.w	r2, r2, #1
 8023c50:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8023c52:	697b      	ldr	r3, [r7, #20]
 8023c54:	2200      	movs	r2, #0
 8023c56:	f042 0208 	orr.w	r2, r2, #8
 8023c5a:	709a      	strb	r2, [r3, #2]
 8023c5c:	2200      	movs	r2, #0
 8023c5e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8023c60:	697b      	ldr	r3, [r7, #20]
 8023c62:	2206      	movs	r2, #6
 8023c64:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8023c66:	697b      	ldr	r3, [r7, #20]
 8023c68:	2204      	movs	r2, #4
 8023c6a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8023c6c:	f640 0306 	movw	r3, #2054	@ 0x806
 8023c70:	9300      	str	r3, [sp, #0]
 8023c72:	687b      	ldr	r3, [r7, #4]
 8023c74:	68ba      	ldr	r2, [r7, #8]
 8023c76:	69b9      	ldr	r1, [r7, #24]
 8023c78:	68f8      	ldr	r0, [r7, #12]
 8023c7a:	f001 fba1 	bl	80253c0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8023c7e:	69b8      	ldr	r0, [r7, #24]
 8023c80:	f7f8 fe94 	bl	801c9ac <pbuf_free>
  p = NULL;
 8023c84:	2300      	movs	r3, #0
 8023c86:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8023c88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8023c8c:	4618      	mov	r0, r3
 8023c8e:	3720      	adds	r7, #32
 8023c90:	46bd      	mov	sp, r7
 8023c92:	bd80      	pop	{r7, pc}
 8023c94:	0802b028 	.word	0x0802b028
 8023c98:	0802b178 	.word	0x0802b178
 8023c9c:	0802b0a0 	.word	0x0802b0a0
 8023ca0:	0802b228 	.word	0x0802b228
 8023ca4:	0802b25c 	.word	0x0802b25c

08023ca8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8023ca8:	b580      	push	{r7, lr}
 8023caa:	b088      	sub	sp, #32
 8023cac:	af04      	add	r7, sp, #16
 8023cae:	60f8      	str	r0, [r7, #12]
 8023cb0:	60b9      	str	r1, [r7, #8]
 8023cb2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023cb4:	68fb      	ldr	r3, [r7, #12]
 8023cb6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023cba:	68fb      	ldr	r3, [r7, #12]
 8023cbc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8023cc0:	68fb      	ldr	r3, [r7, #12]
 8023cc2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023cc4:	2201      	movs	r2, #1
 8023cc6:	9203      	str	r2, [sp, #12]
 8023cc8:	68ba      	ldr	r2, [r7, #8]
 8023cca:	9202      	str	r2, [sp, #8]
 8023ccc:	4a06      	ldr	r2, [pc, #24]	@ (8023ce8 <etharp_request_dst+0x40>)
 8023cce:	9201      	str	r2, [sp, #4]
 8023cd0:	9300      	str	r3, [sp, #0]
 8023cd2:	4603      	mov	r3, r0
 8023cd4:	687a      	ldr	r2, [r7, #4]
 8023cd6:	68f8      	ldr	r0, [r7, #12]
 8023cd8:	f7ff ff5a 	bl	8023b90 <etharp_raw>
 8023cdc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8023cde:	4618      	mov	r0, r3
 8023ce0:	3710      	adds	r7, #16
 8023ce2:	46bd      	mov	sp, r7
 8023ce4:	bd80      	pop	{r7, pc}
 8023ce6:	bf00      	nop
 8023ce8:	0802cf10 	.word	0x0802cf10

08023cec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8023cec:	b580      	push	{r7, lr}
 8023cee:	b082      	sub	sp, #8
 8023cf0:	af00      	add	r7, sp, #0
 8023cf2:	6078      	str	r0, [r7, #4]
 8023cf4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8023cf6:	4a05      	ldr	r2, [pc, #20]	@ (8023d0c <etharp_request+0x20>)
 8023cf8:	6839      	ldr	r1, [r7, #0]
 8023cfa:	6878      	ldr	r0, [r7, #4]
 8023cfc:	f7ff ffd4 	bl	8023ca8 <etharp_request_dst>
 8023d00:	4603      	mov	r3, r0
}
 8023d02:	4618      	mov	r0, r3
 8023d04:	3708      	adds	r7, #8
 8023d06:	46bd      	mov	sp, r7
 8023d08:	bd80      	pop	{r7, pc}
 8023d0a:	bf00      	nop
 8023d0c:	0802cf08 	.word	0x0802cf08

08023d10 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8023d10:	b580      	push	{r7, lr}
 8023d12:	b08e      	sub	sp, #56	@ 0x38
 8023d14:	af04      	add	r7, sp, #16
 8023d16:	6078      	str	r0, [r7, #4]
 8023d18:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8023d1a:	4b87      	ldr	r3, [pc, #540]	@ (8023f38 <icmp_input+0x228>)
 8023d1c:	689b      	ldr	r3, [r3, #8]
 8023d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8023d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023d22:	781b      	ldrb	r3, [r3, #0]
 8023d24:	f003 030f 	and.w	r3, r3, #15
 8023d28:	b2db      	uxtb	r3, r3
 8023d2a:	009b      	lsls	r3, r3, #2
 8023d2c:	b2db      	uxtb	r3, r3
 8023d2e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8023d30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8023d32:	2b13      	cmp	r3, #19
 8023d34:	f240 80e8 	bls.w	8023f08 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8023d38:	687b      	ldr	r3, [r7, #4]
 8023d3a:	895b      	ldrh	r3, [r3, #10]
 8023d3c:	2b03      	cmp	r3, #3
 8023d3e:	f240 80e5 	bls.w	8023f0c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8023d42:	687b      	ldr	r3, [r7, #4]
 8023d44:	685b      	ldr	r3, [r3, #4]
 8023d46:	781b      	ldrb	r3, [r3, #0]
 8023d48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8023d4c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8023d50:	2b00      	cmp	r3, #0
 8023d52:	f000 80d2 	beq.w	8023efa <icmp_input+0x1ea>
 8023d56:	2b08      	cmp	r3, #8
 8023d58:	f040 80d2 	bne.w	8023f00 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8023d5c:	4b77      	ldr	r3, [pc, #476]	@ (8023f3c <icmp_input+0x22c>)
 8023d5e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023d60:	4b75      	ldr	r3, [pc, #468]	@ (8023f38 <icmp_input+0x228>)
 8023d62:	695b      	ldr	r3, [r3, #20]
 8023d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8023d68:	2be0      	cmp	r3, #224	@ 0xe0
 8023d6a:	f000 80d6 	beq.w	8023f1a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8023d6e:	4b72      	ldr	r3, [pc, #456]	@ (8023f38 <icmp_input+0x228>)
 8023d70:	695b      	ldr	r3, [r3, #20]
 8023d72:	4a71      	ldr	r2, [pc, #452]	@ (8023f38 <icmp_input+0x228>)
 8023d74:	6812      	ldr	r2, [r2, #0]
 8023d76:	4611      	mov	r1, r2
 8023d78:	4618      	mov	r0, r3
 8023d7a:	f000 fc13 	bl	80245a4 <ip4_addr_isbroadcast_u32>
 8023d7e:	4603      	mov	r3, r0
 8023d80:	2b00      	cmp	r3, #0
 8023d82:	f040 80cc 	bne.w	8023f1e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8023d86:	687b      	ldr	r3, [r7, #4]
 8023d88:	891b      	ldrh	r3, [r3, #8]
 8023d8a:	2b07      	cmp	r3, #7
 8023d8c:	f240 80c0 	bls.w	8023f10 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8023d90:	6878      	ldr	r0, [r7, #4]
 8023d92:	f7f7 fa0e 	bl	801b1b2 <inet_chksum_pbuf>
 8023d96:	4603      	mov	r3, r0
 8023d98:	2b00      	cmp	r3, #0
 8023d9a:	d003      	beq.n	8023da4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8023d9c:	6878      	ldr	r0, [r7, #4]
 8023d9e:	f7f8 fe05 	bl	801c9ac <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8023da2:	e0c5      	b.n	8023f30 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023da4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8023da6:	330e      	adds	r3, #14
 8023da8:	4619      	mov	r1, r3
 8023daa:	6878      	ldr	r0, [r7, #4]
 8023dac:	f7f8 fd68 	bl	801c880 <pbuf_add_header>
 8023db0:	4603      	mov	r3, r0
 8023db2:	2b00      	cmp	r3, #0
 8023db4:	d04b      	beq.n	8023e4e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8023db6:	687b      	ldr	r3, [r7, #4]
 8023db8:	891a      	ldrh	r2, [r3, #8]
 8023dba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8023dbc:	4413      	add	r3, r2
 8023dbe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8023dc0:	687b      	ldr	r3, [r7, #4]
 8023dc2:	891b      	ldrh	r3, [r3, #8]
 8023dc4:	8b7a      	ldrh	r2, [r7, #26]
 8023dc6:	429a      	cmp	r2, r3
 8023dc8:	f0c0 80ab 	bcc.w	8023f22 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8023dcc:	8b7b      	ldrh	r3, [r7, #26]
 8023dce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8023dd2:	4619      	mov	r1, r3
 8023dd4:	200e      	movs	r0, #14
 8023dd6:	f7f8 fb07 	bl	801c3e8 <pbuf_alloc>
 8023dda:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8023ddc:	697b      	ldr	r3, [r7, #20]
 8023dde:	2b00      	cmp	r3, #0
 8023de0:	f000 80a1 	beq.w	8023f26 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8023de4:	697b      	ldr	r3, [r7, #20]
 8023de6:	895b      	ldrh	r3, [r3, #10]
 8023de8:	461a      	mov	r2, r3
 8023dea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8023dec:	3308      	adds	r3, #8
 8023dee:	429a      	cmp	r2, r3
 8023df0:	d203      	bcs.n	8023dfa <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8023df2:	6978      	ldr	r0, [r7, #20]
 8023df4:	f7f8 fdda 	bl	801c9ac <pbuf_free>
          goto icmperr;
 8023df8:	e096      	b.n	8023f28 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8023dfa:	697b      	ldr	r3, [r7, #20]
 8023dfc:	685b      	ldr	r3, [r3, #4]
 8023dfe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8023e00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8023e02:	4618      	mov	r0, r3
 8023e04:	f002 fec7 	bl	8026b96 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8023e08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8023e0a:	4619      	mov	r1, r3
 8023e0c:	6978      	ldr	r0, [r7, #20]
 8023e0e:	f7f8 fd47 	bl	801c8a0 <pbuf_remove_header>
 8023e12:	4603      	mov	r3, r0
 8023e14:	2b00      	cmp	r3, #0
 8023e16:	d009      	beq.n	8023e2c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8023e18:	4b49      	ldr	r3, [pc, #292]	@ (8023f40 <icmp_input+0x230>)
 8023e1a:	22b6      	movs	r2, #182	@ 0xb6
 8023e1c:	4949      	ldr	r1, [pc, #292]	@ (8023f44 <icmp_input+0x234>)
 8023e1e:	484a      	ldr	r0, [pc, #296]	@ (8023f48 <icmp_input+0x238>)
 8023e20:	f002 fd3a 	bl	8026898 <iprintf>
          pbuf_free(r);
 8023e24:	6978      	ldr	r0, [r7, #20]
 8023e26:	f7f8 fdc1 	bl	801c9ac <pbuf_free>
          goto icmperr;
 8023e2a:	e07d      	b.n	8023f28 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8023e2c:	6879      	ldr	r1, [r7, #4]
 8023e2e:	6978      	ldr	r0, [r7, #20]
 8023e30:	f7f8 fef0 	bl	801cc14 <pbuf_copy>
 8023e34:	4603      	mov	r3, r0
 8023e36:	2b00      	cmp	r3, #0
 8023e38:	d003      	beq.n	8023e42 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8023e3a:	6978      	ldr	r0, [r7, #20]
 8023e3c:	f7f8 fdb6 	bl	801c9ac <pbuf_free>
          goto icmperr;
 8023e40:	e072      	b.n	8023f28 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8023e42:	6878      	ldr	r0, [r7, #4]
 8023e44:	f7f8 fdb2 	bl	801c9ac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8023e48:	697b      	ldr	r3, [r7, #20]
 8023e4a:	607b      	str	r3, [r7, #4]
 8023e4c:	e00f      	b.n	8023e6e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023e4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8023e50:	330e      	adds	r3, #14
 8023e52:	4619      	mov	r1, r3
 8023e54:	6878      	ldr	r0, [r7, #4]
 8023e56:	f7f8 fd23 	bl	801c8a0 <pbuf_remove_header>
 8023e5a:	4603      	mov	r3, r0
 8023e5c:	2b00      	cmp	r3, #0
 8023e5e:	d006      	beq.n	8023e6e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8023e60:	4b37      	ldr	r3, [pc, #220]	@ (8023f40 <icmp_input+0x230>)
 8023e62:	22c7      	movs	r2, #199	@ 0xc7
 8023e64:	4939      	ldr	r1, [pc, #228]	@ (8023f4c <icmp_input+0x23c>)
 8023e66:	4838      	ldr	r0, [pc, #224]	@ (8023f48 <icmp_input+0x238>)
 8023e68:	f002 fd16 	bl	8026898 <iprintf>
          goto icmperr;
 8023e6c:	e05c      	b.n	8023f28 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8023e6e:	687b      	ldr	r3, [r7, #4]
 8023e70:	685b      	ldr	r3, [r3, #4]
 8023e72:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8023e74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8023e76:	4619      	mov	r1, r3
 8023e78:	6878      	ldr	r0, [r7, #4]
 8023e7a:	f7f8 fd01 	bl	801c880 <pbuf_add_header>
 8023e7e:	4603      	mov	r3, r0
 8023e80:	2b00      	cmp	r3, #0
 8023e82:	d13c      	bne.n	8023efe <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8023e84:	687b      	ldr	r3, [r7, #4]
 8023e86:	685b      	ldr	r3, [r3, #4]
 8023e88:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8023e8a:	69fb      	ldr	r3, [r7, #28]
 8023e8c:	681a      	ldr	r2, [r3, #0]
 8023e8e:	68fb      	ldr	r3, [r7, #12]
 8023e90:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8023e92:	4b29      	ldr	r3, [pc, #164]	@ (8023f38 <icmp_input+0x228>)
 8023e94:	691a      	ldr	r2, [r3, #16]
 8023e96:	68fb      	ldr	r3, [r7, #12]
 8023e98:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8023e9a:	693b      	ldr	r3, [r7, #16]
 8023e9c:	2200      	movs	r2, #0
 8023e9e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8023ea0:	693b      	ldr	r3, [r7, #16]
 8023ea2:	885b      	ldrh	r3, [r3, #2]
 8023ea4:	b29b      	uxth	r3, r3
 8023ea6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8023eaa:	4293      	cmp	r3, r2
 8023eac:	d907      	bls.n	8023ebe <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8023eae:	693b      	ldr	r3, [r7, #16]
 8023eb0:	885b      	ldrh	r3, [r3, #2]
 8023eb2:	b29b      	uxth	r3, r3
 8023eb4:	3309      	adds	r3, #9
 8023eb6:	b29a      	uxth	r2, r3
 8023eb8:	693b      	ldr	r3, [r7, #16]
 8023eba:	805a      	strh	r2, [r3, #2]
 8023ebc:	e006      	b.n	8023ecc <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8023ebe:	693b      	ldr	r3, [r7, #16]
 8023ec0:	885b      	ldrh	r3, [r3, #2]
 8023ec2:	b29b      	uxth	r3, r3
 8023ec4:	3308      	adds	r3, #8
 8023ec6:	b29a      	uxth	r2, r3
 8023ec8:	693b      	ldr	r3, [r7, #16]
 8023eca:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8023ecc:	68fb      	ldr	r3, [r7, #12]
 8023ece:	22ff      	movs	r2, #255	@ 0xff
 8023ed0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8023ed2:	68fb      	ldr	r3, [r7, #12]
 8023ed4:	2200      	movs	r2, #0
 8023ed6:	729a      	strb	r2, [r3, #10]
 8023ed8:	2200      	movs	r2, #0
 8023eda:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8023edc:	683b      	ldr	r3, [r7, #0]
 8023ede:	9302      	str	r3, [sp, #8]
 8023ee0:	2301      	movs	r3, #1
 8023ee2:	9301      	str	r3, [sp, #4]
 8023ee4:	2300      	movs	r3, #0
 8023ee6:	9300      	str	r3, [sp, #0]
 8023ee8:	23ff      	movs	r3, #255	@ 0xff
 8023eea:	2200      	movs	r2, #0
 8023eec:	69f9      	ldr	r1, [r7, #28]
 8023eee:	6878      	ldr	r0, [r7, #4]
 8023ef0:	f000 fa80 	bl	80243f4 <ip4_output_if>
 8023ef4:	4603      	mov	r3, r0
 8023ef6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8023ef8:	e001      	b.n	8023efe <icmp_input+0x1ee>
      break;
 8023efa:	bf00      	nop
 8023efc:	e000      	b.n	8023f00 <icmp_input+0x1f0>
      break;
 8023efe:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8023f00:	6878      	ldr	r0, [r7, #4]
 8023f02:	f7f8 fd53 	bl	801c9ac <pbuf_free>
  return;
 8023f06:	e013      	b.n	8023f30 <icmp_input+0x220>
    goto lenerr;
 8023f08:	bf00      	nop
 8023f0a:	e002      	b.n	8023f12 <icmp_input+0x202>
    goto lenerr;
 8023f0c:	bf00      	nop
 8023f0e:	e000      	b.n	8023f12 <icmp_input+0x202>
        goto lenerr;
 8023f10:	bf00      	nop
lenerr:
  pbuf_free(p);
 8023f12:	6878      	ldr	r0, [r7, #4]
 8023f14:	f7f8 fd4a 	bl	801c9ac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8023f18:	e00a      	b.n	8023f30 <icmp_input+0x220>
        goto icmperr;
 8023f1a:	bf00      	nop
 8023f1c:	e004      	b.n	8023f28 <icmp_input+0x218>
        goto icmperr;
 8023f1e:	bf00      	nop
 8023f20:	e002      	b.n	8023f28 <icmp_input+0x218>
          goto icmperr;
 8023f22:	bf00      	nop
 8023f24:	e000      	b.n	8023f28 <icmp_input+0x218>
          goto icmperr;
 8023f26:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8023f28:	6878      	ldr	r0, [r7, #4]
 8023f2a:	f7f8 fd3f 	bl	801c9ac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8023f2e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8023f30:	3728      	adds	r7, #40	@ 0x28
 8023f32:	46bd      	mov	sp, r7
 8023f34:	bd80      	pop	{r7, pc}
 8023f36:	bf00      	nop
 8023f38:	200193d0 	.word	0x200193d0
 8023f3c:	200193e4 	.word	0x200193e4
 8023f40:	0802b2a0 	.word	0x0802b2a0
 8023f44:	0802b2d8 	.word	0x0802b2d8
 8023f48:	0802b310 	.word	0x0802b310
 8023f4c:	0802b338 	.word	0x0802b338

08023f50 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8023f50:	b580      	push	{r7, lr}
 8023f52:	b082      	sub	sp, #8
 8023f54:	af00      	add	r7, sp, #0
 8023f56:	6078      	str	r0, [r7, #4]
 8023f58:	460b      	mov	r3, r1
 8023f5a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8023f5c:	78fb      	ldrb	r3, [r7, #3]
 8023f5e:	461a      	mov	r2, r3
 8023f60:	2103      	movs	r1, #3
 8023f62:	6878      	ldr	r0, [r7, #4]
 8023f64:	f000 f814 	bl	8023f90 <icmp_send_response>
}
 8023f68:	bf00      	nop
 8023f6a:	3708      	adds	r7, #8
 8023f6c:	46bd      	mov	sp, r7
 8023f6e:	bd80      	pop	{r7, pc}

08023f70 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8023f70:	b580      	push	{r7, lr}
 8023f72:	b082      	sub	sp, #8
 8023f74:	af00      	add	r7, sp, #0
 8023f76:	6078      	str	r0, [r7, #4]
 8023f78:	460b      	mov	r3, r1
 8023f7a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8023f7c:	78fb      	ldrb	r3, [r7, #3]
 8023f7e:	461a      	mov	r2, r3
 8023f80:	210b      	movs	r1, #11
 8023f82:	6878      	ldr	r0, [r7, #4]
 8023f84:	f000 f804 	bl	8023f90 <icmp_send_response>
}
 8023f88:	bf00      	nop
 8023f8a:	3708      	adds	r7, #8
 8023f8c:	46bd      	mov	sp, r7
 8023f8e:	bd80      	pop	{r7, pc}

08023f90 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8023f90:	b580      	push	{r7, lr}
 8023f92:	b08c      	sub	sp, #48	@ 0x30
 8023f94:	af04      	add	r7, sp, #16
 8023f96:	6078      	str	r0, [r7, #4]
 8023f98:	460b      	mov	r3, r1
 8023f9a:	70fb      	strb	r3, [r7, #3]
 8023f9c:	4613      	mov	r3, r2
 8023f9e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8023fa0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8023fa4:	2124      	movs	r1, #36	@ 0x24
 8023fa6:	2022      	movs	r0, #34	@ 0x22
 8023fa8:	f7f8 fa1e 	bl	801c3e8 <pbuf_alloc>
 8023fac:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8023fae:	69fb      	ldr	r3, [r7, #28]
 8023fb0:	2b00      	cmp	r3, #0
 8023fb2:	d056      	beq.n	8024062 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8023fb4:	69fb      	ldr	r3, [r7, #28]
 8023fb6:	895b      	ldrh	r3, [r3, #10]
 8023fb8:	2b23      	cmp	r3, #35	@ 0x23
 8023fba:	d806      	bhi.n	8023fca <icmp_send_response+0x3a>
 8023fbc:	4b2b      	ldr	r3, [pc, #172]	@ (802406c <icmp_send_response+0xdc>)
 8023fbe:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8023fc2:	492b      	ldr	r1, [pc, #172]	@ (8024070 <icmp_send_response+0xe0>)
 8023fc4:	482b      	ldr	r0, [pc, #172]	@ (8024074 <icmp_send_response+0xe4>)
 8023fc6:	f002 fc67 	bl	8026898 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8023fca:	687b      	ldr	r3, [r7, #4]
 8023fcc:	685b      	ldr	r3, [r3, #4]
 8023fce:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8023fd0:	69fb      	ldr	r3, [r7, #28]
 8023fd2:	685b      	ldr	r3, [r3, #4]
 8023fd4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8023fd6:	697b      	ldr	r3, [r7, #20]
 8023fd8:	78fa      	ldrb	r2, [r7, #3]
 8023fda:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8023fdc:	697b      	ldr	r3, [r7, #20]
 8023fde:	78ba      	ldrb	r2, [r7, #2]
 8023fe0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8023fe2:	697b      	ldr	r3, [r7, #20]
 8023fe4:	2200      	movs	r2, #0
 8023fe6:	711a      	strb	r2, [r3, #4]
 8023fe8:	2200      	movs	r2, #0
 8023fea:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8023fec:	697b      	ldr	r3, [r7, #20]
 8023fee:	2200      	movs	r2, #0
 8023ff0:	719a      	strb	r2, [r3, #6]
 8023ff2:	2200      	movs	r2, #0
 8023ff4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8023ff6:	69fb      	ldr	r3, [r7, #28]
 8023ff8:	685b      	ldr	r3, [r3, #4]
 8023ffa:	f103 0008 	add.w	r0, r3, #8
 8023ffe:	687b      	ldr	r3, [r7, #4]
 8024000:	685b      	ldr	r3, [r3, #4]
 8024002:	221c      	movs	r2, #28
 8024004:	4619      	mov	r1, r3
 8024006:	f002 fdc6 	bl	8026b96 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 802400a:	69bb      	ldr	r3, [r7, #24]
 802400c:	68db      	ldr	r3, [r3, #12]
 802400e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8024010:	f107 030c 	add.w	r3, r7, #12
 8024014:	4618      	mov	r0, r3
 8024016:	f000 f82f 	bl	8024078 <ip4_route>
 802401a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 802401c:	693b      	ldr	r3, [r7, #16]
 802401e:	2b00      	cmp	r3, #0
 8024020:	d01b      	beq.n	802405a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8024022:	697b      	ldr	r3, [r7, #20]
 8024024:	2200      	movs	r2, #0
 8024026:	709a      	strb	r2, [r3, #2]
 8024028:	2200      	movs	r2, #0
 802402a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 802402c:	69fb      	ldr	r3, [r7, #28]
 802402e:	895b      	ldrh	r3, [r3, #10]
 8024030:	4619      	mov	r1, r3
 8024032:	6978      	ldr	r0, [r7, #20]
 8024034:	f7f7 f8ab 	bl	801b18e <inet_chksum>
 8024038:	4603      	mov	r3, r0
 802403a:	461a      	mov	r2, r3
 802403c:	697b      	ldr	r3, [r7, #20]
 802403e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8024040:	f107 020c 	add.w	r2, r7, #12
 8024044:	693b      	ldr	r3, [r7, #16]
 8024046:	9302      	str	r3, [sp, #8]
 8024048:	2301      	movs	r3, #1
 802404a:	9301      	str	r3, [sp, #4]
 802404c:	2300      	movs	r3, #0
 802404e:	9300      	str	r3, [sp, #0]
 8024050:	23ff      	movs	r3, #255	@ 0xff
 8024052:	2100      	movs	r1, #0
 8024054:	69f8      	ldr	r0, [r7, #28]
 8024056:	f000 f9cd 	bl	80243f4 <ip4_output_if>
  }
  pbuf_free(q);
 802405a:	69f8      	ldr	r0, [r7, #28]
 802405c:	f7f8 fca6 	bl	801c9ac <pbuf_free>
 8024060:	e000      	b.n	8024064 <icmp_send_response+0xd4>
    return;
 8024062:	bf00      	nop
}
 8024064:	3720      	adds	r7, #32
 8024066:	46bd      	mov	sp, r7
 8024068:	bd80      	pop	{r7, pc}
 802406a:	bf00      	nop
 802406c:	0802b2a0 	.word	0x0802b2a0
 8024070:	0802b36c 	.word	0x0802b36c
 8024074:	0802b310 	.word	0x0802b310

08024078 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8024078:	b480      	push	{r7}
 802407a:	b085      	sub	sp, #20
 802407c:	af00      	add	r7, sp, #0
 802407e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8024080:	4b33      	ldr	r3, [pc, #204]	@ (8024150 <ip4_route+0xd8>)
 8024082:	681b      	ldr	r3, [r3, #0]
 8024084:	60fb      	str	r3, [r7, #12]
 8024086:	e036      	b.n	80240f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8024088:	68fb      	ldr	r3, [r7, #12]
 802408a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802408e:	f003 0301 	and.w	r3, r3, #1
 8024092:	b2db      	uxtb	r3, r3
 8024094:	2b00      	cmp	r3, #0
 8024096:	d02b      	beq.n	80240f0 <ip4_route+0x78>
 8024098:	68fb      	ldr	r3, [r7, #12]
 802409a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802409e:	089b      	lsrs	r3, r3, #2
 80240a0:	f003 0301 	and.w	r3, r3, #1
 80240a4:	b2db      	uxtb	r3, r3
 80240a6:	2b00      	cmp	r3, #0
 80240a8:	d022      	beq.n	80240f0 <ip4_route+0x78>
 80240aa:	68fb      	ldr	r3, [r7, #12]
 80240ac:	3304      	adds	r3, #4
 80240ae:	681b      	ldr	r3, [r3, #0]
 80240b0:	2b00      	cmp	r3, #0
 80240b2:	d01d      	beq.n	80240f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80240b4:	687b      	ldr	r3, [r7, #4]
 80240b6:	681a      	ldr	r2, [r3, #0]
 80240b8:	68fb      	ldr	r3, [r7, #12]
 80240ba:	3304      	adds	r3, #4
 80240bc:	681b      	ldr	r3, [r3, #0]
 80240be:	405a      	eors	r2, r3
 80240c0:	68fb      	ldr	r3, [r7, #12]
 80240c2:	3308      	adds	r3, #8
 80240c4:	681b      	ldr	r3, [r3, #0]
 80240c6:	4013      	ands	r3, r2
 80240c8:	2b00      	cmp	r3, #0
 80240ca:	d101      	bne.n	80240d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80240cc:	68fb      	ldr	r3, [r7, #12]
 80240ce:	e038      	b.n	8024142 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80240d0:	68fb      	ldr	r3, [r7, #12]
 80240d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80240d6:	f003 0302 	and.w	r3, r3, #2
 80240da:	2b00      	cmp	r3, #0
 80240dc:	d108      	bne.n	80240f0 <ip4_route+0x78>
 80240de:	687b      	ldr	r3, [r7, #4]
 80240e0:	681a      	ldr	r2, [r3, #0]
 80240e2:	68fb      	ldr	r3, [r7, #12]
 80240e4:	330c      	adds	r3, #12
 80240e6:	681b      	ldr	r3, [r3, #0]
 80240e8:	429a      	cmp	r2, r3
 80240ea:	d101      	bne.n	80240f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80240ec:	68fb      	ldr	r3, [r7, #12]
 80240ee:	e028      	b.n	8024142 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80240f0:	68fb      	ldr	r3, [r7, #12]
 80240f2:	681b      	ldr	r3, [r3, #0]
 80240f4:	60fb      	str	r3, [r7, #12]
 80240f6:	68fb      	ldr	r3, [r7, #12]
 80240f8:	2b00      	cmp	r3, #0
 80240fa:	d1c5      	bne.n	8024088 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80240fc:	4b15      	ldr	r3, [pc, #84]	@ (8024154 <ip4_route+0xdc>)
 80240fe:	681b      	ldr	r3, [r3, #0]
 8024100:	2b00      	cmp	r3, #0
 8024102:	d01a      	beq.n	802413a <ip4_route+0xc2>
 8024104:	4b13      	ldr	r3, [pc, #76]	@ (8024154 <ip4_route+0xdc>)
 8024106:	681b      	ldr	r3, [r3, #0]
 8024108:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802410c:	f003 0301 	and.w	r3, r3, #1
 8024110:	2b00      	cmp	r3, #0
 8024112:	d012      	beq.n	802413a <ip4_route+0xc2>
 8024114:	4b0f      	ldr	r3, [pc, #60]	@ (8024154 <ip4_route+0xdc>)
 8024116:	681b      	ldr	r3, [r3, #0]
 8024118:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802411c:	f003 0304 	and.w	r3, r3, #4
 8024120:	2b00      	cmp	r3, #0
 8024122:	d00a      	beq.n	802413a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8024124:	4b0b      	ldr	r3, [pc, #44]	@ (8024154 <ip4_route+0xdc>)
 8024126:	681b      	ldr	r3, [r3, #0]
 8024128:	3304      	adds	r3, #4
 802412a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802412c:	2b00      	cmp	r3, #0
 802412e:	d004      	beq.n	802413a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8024130:	687b      	ldr	r3, [r7, #4]
 8024132:	681b      	ldr	r3, [r3, #0]
 8024134:	b2db      	uxtb	r3, r3
 8024136:	2b7f      	cmp	r3, #127	@ 0x7f
 8024138:	d101      	bne.n	802413e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 802413a:	2300      	movs	r3, #0
 802413c:	e001      	b.n	8024142 <ip4_route+0xca>
  }

  return netif_default;
 802413e:	4b05      	ldr	r3, [pc, #20]	@ (8024154 <ip4_route+0xdc>)
 8024140:	681b      	ldr	r3, [r3, #0]
}
 8024142:	4618      	mov	r0, r3
 8024144:	3714      	adds	r7, #20
 8024146:	46bd      	mov	sp, r7
 8024148:	f85d 7b04 	ldr.w	r7, [sp], #4
 802414c:	4770      	bx	lr
 802414e:	bf00      	nop
 8024150:	2003c4c8 	.word	0x2003c4c8
 8024154:	2003c4cc 	.word	0x2003c4cc

08024158 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8024158:	b580      	push	{r7, lr}
 802415a:	b082      	sub	sp, #8
 802415c:	af00      	add	r7, sp, #0
 802415e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8024160:	687b      	ldr	r3, [r7, #4]
 8024162:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8024166:	f003 0301 	and.w	r3, r3, #1
 802416a:	b2db      	uxtb	r3, r3
 802416c:	2b00      	cmp	r3, #0
 802416e:	d016      	beq.n	802419e <ip4_input_accept+0x46>
 8024170:	687b      	ldr	r3, [r7, #4]
 8024172:	3304      	adds	r3, #4
 8024174:	681b      	ldr	r3, [r3, #0]
 8024176:	2b00      	cmp	r3, #0
 8024178:	d011      	beq.n	802419e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802417a:	4b0b      	ldr	r3, [pc, #44]	@ (80241a8 <ip4_input_accept+0x50>)
 802417c:	695a      	ldr	r2, [r3, #20]
 802417e:	687b      	ldr	r3, [r7, #4]
 8024180:	3304      	adds	r3, #4
 8024182:	681b      	ldr	r3, [r3, #0]
 8024184:	429a      	cmp	r2, r3
 8024186:	d008      	beq.n	802419a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8024188:	4b07      	ldr	r3, [pc, #28]	@ (80241a8 <ip4_input_accept+0x50>)
 802418a:	695b      	ldr	r3, [r3, #20]
 802418c:	6879      	ldr	r1, [r7, #4]
 802418e:	4618      	mov	r0, r3
 8024190:	f000 fa08 	bl	80245a4 <ip4_addr_isbroadcast_u32>
 8024194:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8024196:	2b00      	cmp	r3, #0
 8024198:	d001      	beq.n	802419e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 802419a:	2301      	movs	r3, #1
 802419c:	e000      	b.n	80241a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802419e:	2300      	movs	r3, #0
}
 80241a0:	4618      	mov	r0, r3
 80241a2:	3708      	adds	r7, #8
 80241a4:	46bd      	mov	sp, r7
 80241a6:	bd80      	pop	{r7, pc}
 80241a8:	200193d0 	.word	0x200193d0

080241ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80241ac:	b580      	push	{r7, lr}
 80241ae:	b086      	sub	sp, #24
 80241b0:	af00      	add	r7, sp, #0
 80241b2:	6078      	str	r0, [r7, #4]
 80241b4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80241b6:	687b      	ldr	r3, [r7, #4]
 80241b8:	685b      	ldr	r3, [r3, #4]
 80241ba:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80241bc:	697b      	ldr	r3, [r7, #20]
 80241be:	781b      	ldrb	r3, [r3, #0]
 80241c0:	091b      	lsrs	r3, r3, #4
 80241c2:	b2db      	uxtb	r3, r3
 80241c4:	2b04      	cmp	r3, #4
 80241c6:	d004      	beq.n	80241d2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80241c8:	6878      	ldr	r0, [r7, #4]
 80241ca:	f7f8 fbef 	bl	801c9ac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80241ce:	2300      	movs	r3, #0
 80241d0:	e107      	b.n	80243e2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80241d2:	697b      	ldr	r3, [r7, #20]
 80241d4:	781b      	ldrb	r3, [r3, #0]
 80241d6:	f003 030f 	and.w	r3, r3, #15
 80241da:	b2db      	uxtb	r3, r3
 80241dc:	009b      	lsls	r3, r3, #2
 80241de:	b2db      	uxtb	r3, r3
 80241e0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80241e2:	697b      	ldr	r3, [r7, #20]
 80241e4:	885b      	ldrh	r3, [r3, #2]
 80241e6:	b29b      	uxth	r3, r3
 80241e8:	4618      	mov	r0, r3
 80241ea:	f7f6 ff45 	bl	801b078 <lwip_htons>
 80241ee:	4603      	mov	r3, r0
 80241f0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80241f2:	687b      	ldr	r3, [r7, #4]
 80241f4:	891b      	ldrh	r3, [r3, #8]
 80241f6:	89ba      	ldrh	r2, [r7, #12]
 80241f8:	429a      	cmp	r2, r3
 80241fa:	d204      	bcs.n	8024206 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80241fc:	89bb      	ldrh	r3, [r7, #12]
 80241fe:	4619      	mov	r1, r3
 8024200:	6878      	ldr	r0, [r7, #4]
 8024202:	f7f8 fa4f 	bl	801c6a4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8024206:	687b      	ldr	r3, [r7, #4]
 8024208:	895b      	ldrh	r3, [r3, #10]
 802420a:	89fa      	ldrh	r2, [r7, #14]
 802420c:	429a      	cmp	r2, r3
 802420e:	d807      	bhi.n	8024220 <ip4_input+0x74>
 8024210:	687b      	ldr	r3, [r7, #4]
 8024212:	891b      	ldrh	r3, [r3, #8]
 8024214:	89ba      	ldrh	r2, [r7, #12]
 8024216:	429a      	cmp	r2, r3
 8024218:	d802      	bhi.n	8024220 <ip4_input+0x74>
 802421a:	89fb      	ldrh	r3, [r7, #14]
 802421c:	2b13      	cmp	r3, #19
 802421e:	d804      	bhi.n	802422a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8024220:	6878      	ldr	r0, [r7, #4]
 8024222:	f7f8 fbc3 	bl	801c9ac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8024226:	2300      	movs	r3, #0
 8024228:	e0db      	b.n	80243e2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802422a:	697b      	ldr	r3, [r7, #20]
 802422c:	691b      	ldr	r3, [r3, #16]
 802422e:	4a6f      	ldr	r2, [pc, #444]	@ (80243ec <ip4_input+0x240>)
 8024230:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8024232:	697b      	ldr	r3, [r7, #20]
 8024234:	68db      	ldr	r3, [r3, #12]
 8024236:	4a6d      	ldr	r2, [pc, #436]	@ (80243ec <ip4_input+0x240>)
 8024238:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802423a:	4b6c      	ldr	r3, [pc, #432]	@ (80243ec <ip4_input+0x240>)
 802423c:	695b      	ldr	r3, [r3, #20]
 802423e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8024242:	2be0      	cmp	r3, #224	@ 0xe0
 8024244:	d112      	bne.n	802426c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8024246:	683b      	ldr	r3, [r7, #0]
 8024248:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802424c:	f003 0301 	and.w	r3, r3, #1
 8024250:	b2db      	uxtb	r3, r3
 8024252:	2b00      	cmp	r3, #0
 8024254:	d007      	beq.n	8024266 <ip4_input+0xba>
 8024256:	683b      	ldr	r3, [r7, #0]
 8024258:	3304      	adds	r3, #4
 802425a:	681b      	ldr	r3, [r3, #0]
 802425c:	2b00      	cmp	r3, #0
 802425e:	d002      	beq.n	8024266 <ip4_input+0xba>
      netif = inp;
 8024260:	683b      	ldr	r3, [r7, #0]
 8024262:	613b      	str	r3, [r7, #16]
 8024264:	e02a      	b.n	80242bc <ip4_input+0x110>
    } else {
      netif = NULL;
 8024266:	2300      	movs	r3, #0
 8024268:	613b      	str	r3, [r7, #16]
 802426a:	e027      	b.n	80242bc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 802426c:	6838      	ldr	r0, [r7, #0]
 802426e:	f7ff ff73 	bl	8024158 <ip4_input_accept>
 8024272:	4603      	mov	r3, r0
 8024274:	2b00      	cmp	r3, #0
 8024276:	d002      	beq.n	802427e <ip4_input+0xd2>
      netif = inp;
 8024278:	683b      	ldr	r3, [r7, #0]
 802427a:	613b      	str	r3, [r7, #16]
 802427c:	e01e      	b.n	80242bc <ip4_input+0x110>
    } else {
      netif = NULL;
 802427e:	2300      	movs	r3, #0
 8024280:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8024282:	4b5a      	ldr	r3, [pc, #360]	@ (80243ec <ip4_input+0x240>)
 8024284:	695b      	ldr	r3, [r3, #20]
 8024286:	b2db      	uxtb	r3, r3
 8024288:	2b7f      	cmp	r3, #127	@ 0x7f
 802428a:	d017      	beq.n	80242bc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 802428c:	4b58      	ldr	r3, [pc, #352]	@ (80243f0 <ip4_input+0x244>)
 802428e:	681b      	ldr	r3, [r3, #0]
 8024290:	613b      	str	r3, [r7, #16]
 8024292:	e00e      	b.n	80242b2 <ip4_input+0x106>
          if (netif == inp) {
 8024294:	693a      	ldr	r2, [r7, #16]
 8024296:	683b      	ldr	r3, [r7, #0]
 8024298:	429a      	cmp	r2, r3
 802429a:	d006      	beq.n	80242aa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 802429c:	6938      	ldr	r0, [r7, #16]
 802429e:	f7ff ff5b 	bl	8024158 <ip4_input_accept>
 80242a2:	4603      	mov	r3, r0
 80242a4:	2b00      	cmp	r3, #0
 80242a6:	d108      	bne.n	80242ba <ip4_input+0x10e>
 80242a8:	e000      	b.n	80242ac <ip4_input+0x100>
            continue;
 80242aa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80242ac:	693b      	ldr	r3, [r7, #16]
 80242ae:	681b      	ldr	r3, [r3, #0]
 80242b0:	613b      	str	r3, [r7, #16]
 80242b2:	693b      	ldr	r3, [r7, #16]
 80242b4:	2b00      	cmp	r3, #0
 80242b6:	d1ed      	bne.n	8024294 <ip4_input+0xe8>
 80242b8:	e000      	b.n	80242bc <ip4_input+0x110>
            break;
 80242ba:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80242bc:	4b4b      	ldr	r3, [pc, #300]	@ (80243ec <ip4_input+0x240>)
 80242be:	691b      	ldr	r3, [r3, #16]
 80242c0:	6839      	ldr	r1, [r7, #0]
 80242c2:	4618      	mov	r0, r3
 80242c4:	f000 f96e 	bl	80245a4 <ip4_addr_isbroadcast_u32>
 80242c8:	4603      	mov	r3, r0
 80242ca:	2b00      	cmp	r3, #0
 80242cc:	d105      	bne.n	80242da <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80242ce:	4b47      	ldr	r3, [pc, #284]	@ (80243ec <ip4_input+0x240>)
 80242d0:	691b      	ldr	r3, [r3, #16]
 80242d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80242d6:	2be0      	cmp	r3, #224	@ 0xe0
 80242d8:	d104      	bne.n	80242e4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80242da:	6878      	ldr	r0, [r7, #4]
 80242dc:	f7f8 fb66 	bl	801c9ac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80242e0:	2300      	movs	r3, #0
 80242e2:	e07e      	b.n	80243e2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80242e4:	693b      	ldr	r3, [r7, #16]
 80242e6:	2b00      	cmp	r3, #0
 80242e8:	d104      	bne.n	80242f4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80242ea:	6878      	ldr	r0, [r7, #4]
 80242ec:	f7f8 fb5e 	bl	801c9ac <pbuf_free>
    return ERR_OK;
 80242f0:	2300      	movs	r3, #0
 80242f2:	e076      	b.n	80243e2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80242f4:	697b      	ldr	r3, [r7, #20]
 80242f6:	88db      	ldrh	r3, [r3, #6]
 80242f8:	b29b      	uxth	r3, r3
 80242fa:	461a      	mov	r2, r3
 80242fc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8024300:	4013      	ands	r3, r2
 8024302:	2b00      	cmp	r3, #0
 8024304:	d00b      	beq.n	802431e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8024306:	6878      	ldr	r0, [r7, #4]
 8024308:	f000 fc92 	bl	8024c30 <ip4_reass>
 802430c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802430e:	687b      	ldr	r3, [r7, #4]
 8024310:	2b00      	cmp	r3, #0
 8024312:	d101      	bne.n	8024318 <ip4_input+0x16c>
      return ERR_OK;
 8024314:	2300      	movs	r3, #0
 8024316:	e064      	b.n	80243e2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8024318:	687b      	ldr	r3, [r7, #4]
 802431a:	685b      	ldr	r3, [r3, #4]
 802431c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802431e:	4a33      	ldr	r2, [pc, #204]	@ (80243ec <ip4_input+0x240>)
 8024320:	693b      	ldr	r3, [r7, #16]
 8024322:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8024324:	4a31      	ldr	r2, [pc, #196]	@ (80243ec <ip4_input+0x240>)
 8024326:	683b      	ldr	r3, [r7, #0]
 8024328:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 802432a:	4a30      	ldr	r2, [pc, #192]	@ (80243ec <ip4_input+0x240>)
 802432c:	697b      	ldr	r3, [r7, #20]
 802432e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8024330:	697b      	ldr	r3, [r7, #20]
 8024332:	781b      	ldrb	r3, [r3, #0]
 8024334:	f003 030f 	and.w	r3, r3, #15
 8024338:	b2db      	uxtb	r3, r3
 802433a:	009b      	lsls	r3, r3, #2
 802433c:	b2db      	uxtb	r3, r3
 802433e:	461a      	mov	r2, r3
 8024340:	4b2a      	ldr	r3, [pc, #168]	@ (80243ec <ip4_input+0x240>)
 8024342:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8024344:	89fb      	ldrh	r3, [r7, #14]
 8024346:	4619      	mov	r1, r3
 8024348:	6878      	ldr	r0, [r7, #4]
 802434a:	f7f8 faa9 	bl	801c8a0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802434e:	697b      	ldr	r3, [r7, #20]
 8024350:	7a5b      	ldrb	r3, [r3, #9]
 8024352:	2b11      	cmp	r3, #17
 8024354:	d006      	beq.n	8024364 <ip4_input+0x1b8>
 8024356:	2b11      	cmp	r3, #17
 8024358:	dc13      	bgt.n	8024382 <ip4_input+0x1d6>
 802435a:	2b01      	cmp	r3, #1
 802435c:	d00c      	beq.n	8024378 <ip4_input+0x1cc>
 802435e:	2b06      	cmp	r3, #6
 8024360:	d005      	beq.n	802436e <ip4_input+0x1c2>
 8024362:	e00e      	b.n	8024382 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8024364:	6839      	ldr	r1, [r7, #0]
 8024366:	6878      	ldr	r0, [r7, #4]
 8024368:	f7fe f94a 	bl	8022600 <udp_input>
        break;
 802436c:	e026      	b.n	80243bc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 802436e:	6839      	ldr	r1, [r7, #0]
 8024370:	6878      	ldr	r0, [r7, #4]
 8024372:	f7fa f961 	bl	801e638 <tcp_input>
        break;
 8024376:	e021      	b.n	80243bc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8024378:	6839      	ldr	r1, [r7, #0]
 802437a:	6878      	ldr	r0, [r7, #4]
 802437c:	f7ff fcc8 	bl	8023d10 <icmp_input>
        break;
 8024380:	e01c      	b.n	80243bc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8024382:	4b1a      	ldr	r3, [pc, #104]	@ (80243ec <ip4_input+0x240>)
 8024384:	695b      	ldr	r3, [r3, #20]
 8024386:	6939      	ldr	r1, [r7, #16]
 8024388:	4618      	mov	r0, r3
 802438a:	f000 f90b 	bl	80245a4 <ip4_addr_isbroadcast_u32>
 802438e:	4603      	mov	r3, r0
 8024390:	2b00      	cmp	r3, #0
 8024392:	d10f      	bne.n	80243b4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8024394:	4b15      	ldr	r3, [pc, #84]	@ (80243ec <ip4_input+0x240>)
 8024396:	695b      	ldr	r3, [r3, #20]
 8024398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802439c:	2be0      	cmp	r3, #224	@ 0xe0
 802439e:	d009      	beq.n	80243b4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80243a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80243a4:	4619      	mov	r1, r3
 80243a6:	6878      	ldr	r0, [r7, #4]
 80243a8:	f7f8 faed 	bl	801c986 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80243ac:	2102      	movs	r1, #2
 80243ae:	6878      	ldr	r0, [r7, #4]
 80243b0:	f7ff fdce 	bl	8023f50 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80243b4:	6878      	ldr	r0, [r7, #4]
 80243b6:	f7f8 faf9 	bl	801c9ac <pbuf_free>
        break;
 80243ba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80243bc:	4b0b      	ldr	r3, [pc, #44]	@ (80243ec <ip4_input+0x240>)
 80243be:	2200      	movs	r2, #0
 80243c0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80243c2:	4b0a      	ldr	r3, [pc, #40]	@ (80243ec <ip4_input+0x240>)
 80243c4:	2200      	movs	r2, #0
 80243c6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80243c8:	4b08      	ldr	r3, [pc, #32]	@ (80243ec <ip4_input+0x240>)
 80243ca:	2200      	movs	r2, #0
 80243cc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80243ce:	4b07      	ldr	r3, [pc, #28]	@ (80243ec <ip4_input+0x240>)
 80243d0:	2200      	movs	r2, #0
 80243d2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80243d4:	4b05      	ldr	r3, [pc, #20]	@ (80243ec <ip4_input+0x240>)
 80243d6:	2200      	movs	r2, #0
 80243d8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80243da:	4b04      	ldr	r3, [pc, #16]	@ (80243ec <ip4_input+0x240>)
 80243dc:	2200      	movs	r2, #0
 80243de:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80243e0:	2300      	movs	r3, #0
}
 80243e2:	4618      	mov	r0, r3
 80243e4:	3718      	adds	r7, #24
 80243e6:	46bd      	mov	sp, r7
 80243e8:	bd80      	pop	{r7, pc}
 80243ea:	bf00      	nop
 80243ec:	200193d0 	.word	0x200193d0
 80243f0:	2003c4c8 	.word	0x2003c4c8

080243f4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80243f4:	b580      	push	{r7, lr}
 80243f6:	b08a      	sub	sp, #40	@ 0x28
 80243f8:	af04      	add	r7, sp, #16
 80243fa:	60f8      	str	r0, [r7, #12]
 80243fc:	60b9      	str	r1, [r7, #8]
 80243fe:	607a      	str	r2, [r7, #4]
 8024400:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8024402:	68bb      	ldr	r3, [r7, #8]
 8024404:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8024406:	687b      	ldr	r3, [r7, #4]
 8024408:	2b00      	cmp	r3, #0
 802440a:	d009      	beq.n	8024420 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 802440c:	68bb      	ldr	r3, [r7, #8]
 802440e:	2b00      	cmp	r3, #0
 8024410:	d003      	beq.n	802441a <ip4_output_if+0x26>
 8024412:	68bb      	ldr	r3, [r7, #8]
 8024414:	681b      	ldr	r3, [r3, #0]
 8024416:	2b00      	cmp	r3, #0
 8024418:	d102      	bne.n	8024420 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 802441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802441c:	3304      	adds	r3, #4
 802441e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8024420:	78fa      	ldrb	r2, [r7, #3]
 8024422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024424:	9302      	str	r3, [sp, #8]
 8024426:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 802442a:	9301      	str	r3, [sp, #4]
 802442c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8024430:	9300      	str	r3, [sp, #0]
 8024432:	4613      	mov	r3, r2
 8024434:	687a      	ldr	r2, [r7, #4]
 8024436:	6979      	ldr	r1, [r7, #20]
 8024438:	68f8      	ldr	r0, [r7, #12]
 802443a:	f000 f805 	bl	8024448 <ip4_output_if_src>
 802443e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8024440:	4618      	mov	r0, r3
 8024442:	3718      	adds	r7, #24
 8024444:	46bd      	mov	sp, r7
 8024446:	bd80      	pop	{r7, pc}

08024448 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8024448:	b580      	push	{r7, lr}
 802444a:	b088      	sub	sp, #32
 802444c:	af00      	add	r7, sp, #0
 802444e:	60f8      	str	r0, [r7, #12]
 8024450:	60b9      	str	r1, [r7, #8]
 8024452:	607a      	str	r2, [r7, #4]
 8024454:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8024456:	68fb      	ldr	r3, [r7, #12]
 8024458:	7b9b      	ldrb	r3, [r3, #14]
 802445a:	2b01      	cmp	r3, #1
 802445c:	d006      	beq.n	802446c <ip4_output_if_src+0x24>
 802445e:	4b4b      	ldr	r3, [pc, #300]	@ (802458c <ip4_output_if_src+0x144>)
 8024460:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8024464:	494a      	ldr	r1, [pc, #296]	@ (8024590 <ip4_output_if_src+0x148>)
 8024466:	484b      	ldr	r0, [pc, #300]	@ (8024594 <ip4_output_if_src+0x14c>)
 8024468:	f002 fa16 	bl	8026898 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 802446c:	687b      	ldr	r3, [r7, #4]
 802446e:	2b00      	cmp	r3, #0
 8024470:	d060      	beq.n	8024534 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8024472:	2314      	movs	r3, #20
 8024474:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8024476:	2114      	movs	r1, #20
 8024478:	68f8      	ldr	r0, [r7, #12]
 802447a:	f7f8 fa01 	bl	801c880 <pbuf_add_header>
 802447e:	4603      	mov	r3, r0
 8024480:	2b00      	cmp	r3, #0
 8024482:	d002      	beq.n	802448a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8024484:	f06f 0301 	mvn.w	r3, #1
 8024488:	e07c      	b.n	8024584 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 802448a:	68fb      	ldr	r3, [r7, #12]
 802448c:	685b      	ldr	r3, [r3, #4]
 802448e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8024490:	68fb      	ldr	r3, [r7, #12]
 8024492:	895b      	ldrh	r3, [r3, #10]
 8024494:	2b13      	cmp	r3, #19
 8024496:	d806      	bhi.n	80244a6 <ip4_output_if_src+0x5e>
 8024498:	4b3c      	ldr	r3, [pc, #240]	@ (802458c <ip4_output_if_src+0x144>)
 802449a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 802449e:	493e      	ldr	r1, [pc, #248]	@ (8024598 <ip4_output_if_src+0x150>)
 80244a0:	483c      	ldr	r0, [pc, #240]	@ (8024594 <ip4_output_if_src+0x14c>)
 80244a2:	f002 f9f9 	bl	8026898 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80244a6:	69fb      	ldr	r3, [r7, #28]
 80244a8:	78fa      	ldrb	r2, [r7, #3]
 80244aa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80244ac:	69fb      	ldr	r3, [r7, #28]
 80244ae:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80244b2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80244b4:	687b      	ldr	r3, [r7, #4]
 80244b6:	681a      	ldr	r2, [r3, #0]
 80244b8:	69fb      	ldr	r3, [r7, #28]
 80244ba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80244bc:	8b7b      	ldrh	r3, [r7, #26]
 80244be:	089b      	lsrs	r3, r3, #2
 80244c0:	b29b      	uxth	r3, r3
 80244c2:	b2db      	uxtb	r3, r3
 80244c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80244c8:	b2da      	uxtb	r2, r3
 80244ca:	69fb      	ldr	r3, [r7, #28]
 80244cc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80244ce:	69fb      	ldr	r3, [r7, #28]
 80244d0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80244d4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80244d6:	68fb      	ldr	r3, [r7, #12]
 80244d8:	891b      	ldrh	r3, [r3, #8]
 80244da:	4618      	mov	r0, r3
 80244dc:	f7f6 fdcc 	bl	801b078 <lwip_htons>
 80244e0:	4603      	mov	r3, r0
 80244e2:	461a      	mov	r2, r3
 80244e4:	69fb      	ldr	r3, [r7, #28]
 80244e6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80244e8:	69fb      	ldr	r3, [r7, #28]
 80244ea:	2200      	movs	r2, #0
 80244ec:	719a      	strb	r2, [r3, #6]
 80244ee:	2200      	movs	r2, #0
 80244f0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80244f2:	4b2a      	ldr	r3, [pc, #168]	@ (802459c <ip4_output_if_src+0x154>)
 80244f4:	881b      	ldrh	r3, [r3, #0]
 80244f6:	4618      	mov	r0, r3
 80244f8:	f7f6 fdbe 	bl	801b078 <lwip_htons>
 80244fc:	4603      	mov	r3, r0
 80244fe:	461a      	mov	r2, r3
 8024500:	69fb      	ldr	r3, [r7, #28]
 8024502:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8024504:	4b25      	ldr	r3, [pc, #148]	@ (802459c <ip4_output_if_src+0x154>)
 8024506:	881b      	ldrh	r3, [r3, #0]
 8024508:	3301      	adds	r3, #1
 802450a:	b29a      	uxth	r2, r3
 802450c:	4b23      	ldr	r3, [pc, #140]	@ (802459c <ip4_output_if_src+0x154>)
 802450e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8024510:	68bb      	ldr	r3, [r7, #8]
 8024512:	2b00      	cmp	r3, #0
 8024514:	d104      	bne.n	8024520 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8024516:	4b22      	ldr	r3, [pc, #136]	@ (80245a0 <ip4_output_if_src+0x158>)
 8024518:	681a      	ldr	r2, [r3, #0]
 802451a:	69fb      	ldr	r3, [r7, #28]
 802451c:	60da      	str	r2, [r3, #12]
 802451e:	e003      	b.n	8024528 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8024520:	68bb      	ldr	r3, [r7, #8]
 8024522:	681a      	ldr	r2, [r3, #0]
 8024524:	69fb      	ldr	r3, [r7, #28]
 8024526:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8024528:	69fb      	ldr	r3, [r7, #28]
 802452a:	2200      	movs	r2, #0
 802452c:	729a      	strb	r2, [r3, #10]
 802452e:	2200      	movs	r2, #0
 8024530:	72da      	strb	r2, [r3, #11]
 8024532:	e00f      	b.n	8024554 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8024534:	68fb      	ldr	r3, [r7, #12]
 8024536:	895b      	ldrh	r3, [r3, #10]
 8024538:	2b13      	cmp	r3, #19
 802453a:	d802      	bhi.n	8024542 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 802453c:	f06f 0301 	mvn.w	r3, #1
 8024540:	e020      	b.n	8024584 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8024542:	68fb      	ldr	r3, [r7, #12]
 8024544:	685b      	ldr	r3, [r3, #4]
 8024546:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8024548:	69fb      	ldr	r3, [r7, #28]
 802454a:	691b      	ldr	r3, [r3, #16]
 802454c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 802454e:	f107 0314 	add.w	r3, r7, #20
 8024552:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8024554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024556:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8024558:	2b00      	cmp	r3, #0
 802455a:	d00c      	beq.n	8024576 <ip4_output_if_src+0x12e>
 802455c:	68fb      	ldr	r3, [r7, #12]
 802455e:	891a      	ldrh	r2, [r3, #8]
 8024560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024562:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8024564:	429a      	cmp	r2, r3
 8024566:	d906      	bls.n	8024576 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8024568:	687a      	ldr	r2, [r7, #4]
 802456a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802456c:	68f8      	ldr	r0, [r7, #12]
 802456e:	f000 fd53 	bl	8025018 <ip4_frag>
 8024572:	4603      	mov	r3, r0
 8024574:	e006      	b.n	8024584 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8024576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024578:	695b      	ldr	r3, [r3, #20]
 802457a:	687a      	ldr	r2, [r7, #4]
 802457c:	68f9      	ldr	r1, [r7, #12]
 802457e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8024580:	4798      	blx	r3
 8024582:	4603      	mov	r3, r0
}
 8024584:	4618      	mov	r0, r3
 8024586:	3720      	adds	r7, #32
 8024588:	46bd      	mov	sp, r7
 802458a:	bd80      	pop	{r7, pc}
 802458c:	0802b398 	.word	0x0802b398
 8024590:	0802b3cc 	.word	0x0802b3cc
 8024594:	0802b3d8 	.word	0x0802b3d8
 8024598:	0802b400 	.word	0x0802b400
 802459c:	2003c626 	.word	0x2003c626
 80245a0:	0802cf04 	.word	0x0802cf04

080245a4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80245a4:	b480      	push	{r7}
 80245a6:	b085      	sub	sp, #20
 80245a8:	af00      	add	r7, sp, #0
 80245aa:	6078      	str	r0, [r7, #4]
 80245ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80245ae:	687b      	ldr	r3, [r7, #4]
 80245b0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80245b2:	687b      	ldr	r3, [r7, #4]
 80245b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80245b8:	d002      	beq.n	80245c0 <ip4_addr_isbroadcast_u32+0x1c>
 80245ba:	687b      	ldr	r3, [r7, #4]
 80245bc:	2b00      	cmp	r3, #0
 80245be:	d101      	bne.n	80245c4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80245c0:	2301      	movs	r3, #1
 80245c2:	e02a      	b.n	802461a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80245c4:	683b      	ldr	r3, [r7, #0]
 80245c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80245ca:	f003 0302 	and.w	r3, r3, #2
 80245ce:	2b00      	cmp	r3, #0
 80245d0:	d101      	bne.n	80245d6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80245d2:	2300      	movs	r3, #0
 80245d4:	e021      	b.n	802461a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80245d6:	683b      	ldr	r3, [r7, #0]
 80245d8:	3304      	adds	r3, #4
 80245da:	681b      	ldr	r3, [r3, #0]
 80245dc:	687a      	ldr	r2, [r7, #4]
 80245de:	429a      	cmp	r2, r3
 80245e0:	d101      	bne.n	80245e6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80245e2:	2300      	movs	r3, #0
 80245e4:	e019      	b.n	802461a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80245e6:	68fa      	ldr	r2, [r7, #12]
 80245e8:	683b      	ldr	r3, [r7, #0]
 80245ea:	3304      	adds	r3, #4
 80245ec:	681b      	ldr	r3, [r3, #0]
 80245ee:	405a      	eors	r2, r3
 80245f0:	683b      	ldr	r3, [r7, #0]
 80245f2:	3308      	adds	r3, #8
 80245f4:	681b      	ldr	r3, [r3, #0]
 80245f6:	4013      	ands	r3, r2
 80245f8:	2b00      	cmp	r3, #0
 80245fa:	d10d      	bne.n	8024618 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80245fc:	683b      	ldr	r3, [r7, #0]
 80245fe:	3308      	adds	r3, #8
 8024600:	681b      	ldr	r3, [r3, #0]
 8024602:	43da      	mvns	r2, r3
 8024604:	687b      	ldr	r3, [r7, #4]
 8024606:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8024608:	683b      	ldr	r3, [r7, #0]
 802460a:	3308      	adds	r3, #8
 802460c:	681b      	ldr	r3, [r3, #0]
 802460e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8024610:	429a      	cmp	r2, r3
 8024612:	d101      	bne.n	8024618 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8024614:	2301      	movs	r3, #1
 8024616:	e000      	b.n	802461a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8024618:	2300      	movs	r3, #0
  }
}
 802461a:	4618      	mov	r0, r3
 802461c:	3714      	adds	r7, #20
 802461e:	46bd      	mov	sp, r7
 8024620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024624:	4770      	bx	lr
	...

08024628 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8024628:	b580      	push	{r7, lr}
 802462a:	b084      	sub	sp, #16
 802462c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 802462e:	2300      	movs	r3, #0
 8024630:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8024632:	4b12      	ldr	r3, [pc, #72]	@ (802467c <ip_reass_tmr+0x54>)
 8024634:	681b      	ldr	r3, [r3, #0]
 8024636:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8024638:	e018      	b.n	802466c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 802463a:	68fb      	ldr	r3, [r7, #12]
 802463c:	7fdb      	ldrb	r3, [r3, #31]
 802463e:	2b00      	cmp	r3, #0
 8024640:	d00b      	beq.n	802465a <ip_reass_tmr+0x32>
      r->timer--;
 8024642:	68fb      	ldr	r3, [r7, #12]
 8024644:	7fdb      	ldrb	r3, [r3, #31]
 8024646:	3b01      	subs	r3, #1
 8024648:	b2da      	uxtb	r2, r3
 802464a:	68fb      	ldr	r3, [r7, #12]
 802464c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 802464e:	68fb      	ldr	r3, [r7, #12]
 8024650:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8024652:	68fb      	ldr	r3, [r7, #12]
 8024654:	681b      	ldr	r3, [r3, #0]
 8024656:	60fb      	str	r3, [r7, #12]
 8024658:	e008      	b.n	802466c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 802465a:	68fb      	ldr	r3, [r7, #12]
 802465c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 802465e:	68fb      	ldr	r3, [r7, #12]
 8024660:	681b      	ldr	r3, [r3, #0]
 8024662:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8024664:	68b9      	ldr	r1, [r7, #8]
 8024666:	6878      	ldr	r0, [r7, #4]
 8024668:	f000 f80a 	bl	8024680 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 802466c:	68fb      	ldr	r3, [r7, #12]
 802466e:	2b00      	cmp	r3, #0
 8024670:	d1e3      	bne.n	802463a <ip_reass_tmr+0x12>
    }
  }
}
 8024672:	bf00      	nop
 8024674:	bf00      	nop
 8024676:	3710      	adds	r7, #16
 8024678:	46bd      	mov	sp, r7
 802467a:	bd80      	pop	{r7, pc}
 802467c:	2003c628 	.word	0x2003c628

08024680 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8024680:	b580      	push	{r7, lr}
 8024682:	b088      	sub	sp, #32
 8024684:	af00      	add	r7, sp, #0
 8024686:	6078      	str	r0, [r7, #4]
 8024688:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 802468a:	2300      	movs	r3, #0
 802468c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 802468e:	683a      	ldr	r2, [r7, #0]
 8024690:	687b      	ldr	r3, [r7, #4]
 8024692:	429a      	cmp	r2, r3
 8024694:	d105      	bne.n	80246a2 <ip_reass_free_complete_datagram+0x22>
 8024696:	4b45      	ldr	r3, [pc, #276]	@ (80247ac <ip_reass_free_complete_datagram+0x12c>)
 8024698:	22ab      	movs	r2, #171	@ 0xab
 802469a:	4945      	ldr	r1, [pc, #276]	@ (80247b0 <ip_reass_free_complete_datagram+0x130>)
 802469c:	4845      	ldr	r0, [pc, #276]	@ (80247b4 <ip_reass_free_complete_datagram+0x134>)
 802469e:	f002 f8fb 	bl	8026898 <iprintf>
  if (prev != NULL) {
 80246a2:	683b      	ldr	r3, [r7, #0]
 80246a4:	2b00      	cmp	r3, #0
 80246a6:	d00a      	beq.n	80246be <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80246a8:	683b      	ldr	r3, [r7, #0]
 80246aa:	681b      	ldr	r3, [r3, #0]
 80246ac:	687a      	ldr	r2, [r7, #4]
 80246ae:	429a      	cmp	r2, r3
 80246b0:	d005      	beq.n	80246be <ip_reass_free_complete_datagram+0x3e>
 80246b2:	4b3e      	ldr	r3, [pc, #248]	@ (80247ac <ip_reass_free_complete_datagram+0x12c>)
 80246b4:	22ad      	movs	r2, #173	@ 0xad
 80246b6:	4940      	ldr	r1, [pc, #256]	@ (80247b8 <ip_reass_free_complete_datagram+0x138>)
 80246b8:	483e      	ldr	r0, [pc, #248]	@ (80247b4 <ip_reass_free_complete_datagram+0x134>)
 80246ba:	f002 f8ed 	bl	8026898 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80246be:	687b      	ldr	r3, [r7, #4]
 80246c0:	685b      	ldr	r3, [r3, #4]
 80246c2:	685b      	ldr	r3, [r3, #4]
 80246c4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80246c6:	697b      	ldr	r3, [r7, #20]
 80246c8:	889b      	ldrh	r3, [r3, #4]
 80246ca:	b29b      	uxth	r3, r3
 80246cc:	2b00      	cmp	r3, #0
 80246ce:	d12a      	bne.n	8024726 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80246d0:	687b      	ldr	r3, [r7, #4]
 80246d2:	685b      	ldr	r3, [r3, #4]
 80246d4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80246d6:	697b      	ldr	r3, [r7, #20]
 80246d8:	681a      	ldr	r2, [r3, #0]
 80246da:	687b      	ldr	r3, [r7, #4]
 80246dc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80246de:	69bb      	ldr	r3, [r7, #24]
 80246e0:	6858      	ldr	r0, [r3, #4]
 80246e2:	687b      	ldr	r3, [r7, #4]
 80246e4:	3308      	adds	r3, #8
 80246e6:	2214      	movs	r2, #20
 80246e8:	4619      	mov	r1, r3
 80246ea:	f002 fa54 	bl	8026b96 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80246ee:	2101      	movs	r1, #1
 80246f0:	69b8      	ldr	r0, [r7, #24]
 80246f2:	f7ff fc3d 	bl	8023f70 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80246f6:	69b8      	ldr	r0, [r7, #24]
 80246f8:	f7f8 f9e6 	bl	801cac8 <pbuf_clen>
 80246fc:	4603      	mov	r3, r0
 80246fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024700:	8bfa      	ldrh	r2, [r7, #30]
 8024702:	8a7b      	ldrh	r3, [r7, #18]
 8024704:	4413      	add	r3, r2
 8024706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802470a:	db05      	blt.n	8024718 <ip_reass_free_complete_datagram+0x98>
 802470c:	4b27      	ldr	r3, [pc, #156]	@ (80247ac <ip_reass_free_complete_datagram+0x12c>)
 802470e:	22bc      	movs	r2, #188	@ 0xbc
 8024710:	492a      	ldr	r1, [pc, #168]	@ (80247bc <ip_reass_free_complete_datagram+0x13c>)
 8024712:	4828      	ldr	r0, [pc, #160]	@ (80247b4 <ip_reass_free_complete_datagram+0x134>)
 8024714:	f002 f8c0 	bl	8026898 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8024718:	8bfa      	ldrh	r2, [r7, #30]
 802471a:	8a7b      	ldrh	r3, [r7, #18]
 802471c:	4413      	add	r3, r2
 802471e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8024720:	69b8      	ldr	r0, [r7, #24]
 8024722:	f7f8 f943 	bl	801c9ac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8024726:	687b      	ldr	r3, [r7, #4]
 8024728:	685b      	ldr	r3, [r3, #4]
 802472a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 802472c:	e01f      	b.n	802476e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 802472e:	69bb      	ldr	r3, [r7, #24]
 8024730:	685b      	ldr	r3, [r3, #4]
 8024732:	617b      	str	r3, [r7, #20]
    pcur = p;
 8024734:	69bb      	ldr	r3, [r7, #24]
 8024736:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8024738:	697b      	ldr	r3, [r7, #20]
 802473a:	681b      	ldr	r3, [r3, #0]
 802473c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 802473e:	68f8      	ldr	r0, [r7, #12]
 8024740:	f7f8 f9c2 	bl	801cac8 <pbuf_clen>
 8024744:	4603      	mov	r3, r0
 8024746:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024748:	8bfa      	ldrh	r2, [r7, #30]
 802474a:	8a7b      	ldrh	r3, [r7, #18]
 802474c:	4413      	add	r3, r2
 802474e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024752:	db05      	blt.n	8024760 <ip_reass_free_complete_datagram+0xe0>
 8024754:	4b15      	ldr	r3, [pc, #84]	@ (80247ac <ip_reass_free_complete_datagram+0x12c>)
 8024756:	22cc      	movs	r2, #204	@ 0xcc
 8024758:	4918      	ldr	r1, [pc, #96]	@ (80247bc <ip_reass_free_complete_datagram+0x13c>)
 802475a:	4816      	ldr	r0, [pc, #88]	@ (80247b4 <ip_reass_free_complete_datagram+0x134>)
 802475c:	f002 f89c 	bl	8026898 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8024760:	8bfa      	ldrh	r2, [r7, #30]
 8024762:	8a7b      	ldrh	r3, [r7, #18]
 8024764:	4413      	add	r3, r2
 8024766:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8024768:	68f8      	ldr	r0, [r7, #12]
 802476a:	f7f8 f91f 	bl	801c9ac <pbuf_free>
  while (p != NULL) {
 802476e:	69bb      	ldr	r3, [r7, #24]
 8024770:	2b00      	cmp	r3, #0
 8024772:	d1dc      	bne.n	802472e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8024774:	6839      	ldr	r1, [r7, #0]
 8024776:	6878      	ldr	r0, [r7, #4]
 8024778:	f000 f8c2 	bl	8024900 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 802477c:	4b10      	ldr	r3, [pc, #64]	@ (80247c0 <ip_reass_free_complete_datagram+0x140>)
 802477e:	881b      	ldrh	r3, [r3, #0]
 8024780:	8bfa      	ldrh	r2, [r7, #30]
 8024782:	429a      	cmp	r2, r3
 8024784:	d905      	bls.n	8024792 <ip_reass_free_complete_datagram+0x112>
 8024786:	4b09      	ldr	r3, [pc, #36]	@ (80247ac <ip_reass_free_complete_datagram+0x12c>)
 8024788:	22d2      	movs	r2, #210	@ 0xd2
 802478a:	490e      	ldr	r1, [pc, #56]	@ (80247c4 <ip_reass_free_complete_datagram+0x144>)
 802478c:	4809      	ldr	r0, [pc, #36]	@ (80247b4 <ip_reass_free_complete_datagram+0x134>)
 802478e:	f002 f883 	bl	8026898 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8024792:	4b0b      	ldr	r3, [pc, #44]	@ (80247c0 <ip_reass_free_complete_datagram+0x140>)
 8024794:	881a      	ldrh	r2, [r3, #0]
 8024796:	8bfb      	ldrh	r3, [r7, #30]
 8024798:	1ad3      	subs	r3, r2, r3
 802479a:	b29a      	uxth	r2, r3
 802479c:	4b08      	ldr	r3, [pc, #32]	@ (80247c0 <ip_reass_free_complete_datagram+0x140>)
 802479e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80247a0:	8bfb      	ldrh	r3, [r7, #30]
}
 80247a2:	4618      	mov	r0, r3
 80247a4:	3720      	adds	r7, #32
 80247a6:	46bd      	mov	sp, r7
 80247a8:	bd80      	pop	{r7, pc}
 80247aa:	bf00      	nop
 80247ac:	0802b430 	.word	0x0802b430
 80247b0:	0802b46c 	.word	0x0802b46c
 80247b4:	0802b478 	.word	0x0802b478
 80247b8:	0802b4a0 	.word	0x0802b4a0
 80247bc:	0802b4b4 	.word	0x0802b4b4
 80247c0:	2003c62c 	.word	0x2003c62c
 80247c4:	0802b4d4 	.word	0x0802b4d4

080247c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80247c8:	b580      	push	{r7, lr}
 80247ca:	b08a      	sub	sp, #40	@ 0x28
 80247cc:	af00      	add	r7, sp, #0
 80247ce:	6078      	str	r0, [r7, #4]
 80247d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80247d2:	2300      	movs	r3, #0
 80247d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80247d6:	2300      	movs	r3, #0
 80247d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80247da:	2300      	movs	r3, #0
 80247dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80247de:	2300      	movs	r3, #0
 80247e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80247e2:	2300      	movs	r3, #0
 80247e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80247e6:	4b28      	ldr	r3, [pc, #160]	@ (8024888 <ip_reass_remove_oldest_datagram+0xc0>)
 80247e8:	681b      	ldr	r3, [r3, #0]
 80247ea:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80247ec:	e030      	b.n	8024850 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80247ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80247f0:	695a      	ldr	r2, [r3, #20]
 80247f2:	687b      	ldr	r3, [r7, #4]
 80247f4:	68db      	ldr	r3, [r3, #12]
 80247f6:	429a      	cmp	r2, r3
 80247f8:	d10c      	bne.n	8024814 <ip_reass_remove_oldest_datagram+0x4c>
 80247fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80247fc:	699a      	ldr	r2, [r3, #24]
 80247fe:	687b      	ldr	r3, [r7, #4]
 8024800:	691b      	ldr	r3, [r3, #16]
 8024802:	429a      	cmp	r2, r3
 8024804:	d106      	bne.n	8024814 <ip_reass_remove_oldest_datagram+0x4c>
 8024806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024808:	899a      	ldrh	r2, [r3, #12]
 802480a:	687b      	ldr	r3, [r7, #4]
 802480c:	889b      	ldrh	r3, [r3, #4]
 802480e:	b29b      	uxth	r3, r3
 8024810:	429a      	cmp	r2, r3
 8024812:	d014      	beq.n	802483e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8024814:	693b      	ldr	r3, [r7, #16]
 8024816:	3301      	adds	r3, #1
 8024818:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 802481a:	6a3b      	ldr	r3, [r7, #32]
 802481c:	2b00      	cmp	r3, #0
 802481e:	d104      	bne.n	802482a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8024820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024822:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8024824:	69fb      	ldr	r3, [r7, #28]
 8024826:	61bb      	str	r3, [r7, #24]
 8024828:	e009      	b.n	802483e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 802482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802482c:	7fda      	ldrb	r2, [r3, #31]
 802482e:	6a3b      	ldr	r3, [r7, #32]
 8024830:	7fdb      	ldrb	r3, [r3, #31]
 8024832:	429a      	cmp	r2, r3
 8024834:	d803      	bhi.n	802483e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8024836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024838:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 802483a:	69fb      	ldr	r3, [r7, #28]
 802483c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 802483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024840:	681b      	ldr	r3, [r3, #0]
 8024842:	2b00      	cmp	r3, #0
 8024844:	d001      	beq.n	802484a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8024846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024848:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 802484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802484c:	681b      	ldr	r3, [r3, #0]
 802484e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8024850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024852:	2b00      	cmp	r3, #0
 8024854:	d1cb      	bne.n	80247ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8024856:	6a3b      	ldr	r3, [r7, #32]
 8024858:	2b00      	cmp	r3, #0
 802485a:	d008      	beq.n	802486e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 802485c:	69b9      	ldr	r1, [r7, #24]
 802485e:	6a38      	ldr	r0, [r7, #32]
 8024860:	f7ff ff0e 	bl	8024680 <ip_reass_free_complete_datagram>
 8024864:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8024866:	697a      	ldr	r2, [r7, #20]
 8024868:	68fb      	ldr	r3, [r7, #12]
 802486a:	4413      	add	r3, r2
 802486c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 802486e:	697a      	ldr	r2, [r7, #20]
 8024870:	683b      	ldr	r3, [r7, #0]
 8024872:	429a      	cmp	r2, r3
 8024874:	da02      	bge.n	802487c <ip_reass_remove_oldest_datagram+0xb4>
 8024876:	693b      	ldr	r3, [r7, #16]
 8024878:	2b01      	cmp	r3, #1
 802487a:	dcac      	bgt.n	80247d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 802487c:	697b      	ldr	r3, [r7, #20]
}
 802487e:	4618      	mov	r0, r3
 8024880:	3728      	adds	r7, #40	@ 0x28
 8024882:	46bd      	mov	sp, r7
 8024884:	bd80      	pop	{r7, pc}
 8024886:	bf00      	nop
 8024888:	2003c628 	.word	0x2003c628

0802488c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 802488c:	b580      	push	{r7, lr}
 802488e:	b084      	sub	sp, #16
 8024890:	af00      	add	r7, sp, #0
 8024892:	6078      	str	r0, [r7, #4]
 8024894:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8024896:	2004      	movs	r0, #4
 8024898:	f7f7 f970 	bl	801bb7c <memp_malloc>
 802489c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 802489e:	68fb      	ldr	r3, [r7, #12]
 80248a0:	2b00      	cmp	r3, #0
 80248a2:	d110      	bne.n	80248c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80248a4:	6839      	ldr	r1, [r7, #0]
 80248a6:	6878      	ldr	r0, [r7, #4]
 80248a8:	f7ff ff8e 	bl	80247c8 <ip_reass_remove_oldest_datagram>
 80248ac:	4602      	mov	r2, r0
 80248ae:	683b      	ldr	r3, [r7, #0]
 80248b0:	4293      	cmp	r3, r2
 80248b2:	dc03      	bgt.n	80248bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80248b4:	2004      	movs	r0, #4
 80248b6:	f7f7 f961 	bl	801bb7c <memp_malloc>
 80248ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80248bc:	68fb      	ldr	r3, [r7, #12]
 80248be:	2b00      	cmp	r3, #0
 80248c0:	d101      	bne.n	80248c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80248c2:	2300      	movs	r3, #0
 80248c4:	e016      	b.n	80248f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80248c6:	2220      	movs	r2, #32
 80248c8:	2100      	movs	r1, #0
 80248ca:	68f8      	ldr	r0, [r7, #12]
 80248cc:	f002 f883 	bl	80269d6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80248d0:	68fb      	ldr	r3, [r7, #12]
 80248d2:	220f      	movs	r2, #15
 80248d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80248d6:	4b09      	ldr	r3, [pc, #36]	@ (80248fc <ip_reass_enqueue_new_datagram+0x70>)
 80248d8:	681a      	ldr	r2, [r3, #0]
 80248da:	68fb      	ldr	r3, [r7, #12]
 80248dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80248de:	4a07      	ldr	r2, [pc, #28]	@ (80248fc <ip_reass_enqueue_new_datagram+0x70>)
 80248e0:	68fb      	ldr	r3, [r7, #12]
 80248e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80248e4:	68fb      	ldr	r3, [r7, #12]
 80248e6:	3308      	adds	r3, #8
 80248e8:	2214      	movs	r2, #20
 80248ea:	6879      	ldr	r1, [r7, #4]
 80248ec:	4618      	mov	r0, r3
 80248ee:	f002 f952 	bl	8026b96 <memcpy>
  return ipr;
 80248f2:	68fb      	ldr	r3, [r7, #12]
}
 80248f4:	4618      	mov	r0, r3
 80248f6:	3710      	adds	r7, #16
 80248f8:	46bd      	mov	sp, r7
 80248fa:	bd80      	pop	{r7, pc}
 80248fc:	2003c628 	.word	0x2003c628

08024900 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8024900:	b580      	push	{r7, lr}
 8024902:	b082      	sub	sp, #8
 8024904:	af00      	add	r7, sp, #0
 8024906:	6078      	str	r0, [r7, #4]
 8024908:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 802490a:	4b10      	ldr	r3, [pc, #64]	@ (802494c <ip_reass_dequeue_datagram+0x4c>)
 802490c:	681b      	ldr	r3, [r3, #0]
 802490e:	687a      	ldr	r2, [r7, #4]
 8024910:	429a      	cmp	r2, r3
 8024912:	d104      	bne.n	802491e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8024914:	687b      	ldr	r3, [r7, #4]
 8024916:	681b      	ldr	r3, [r3, #0]
 8024918:	4a0c      	ldr	r2, [pc, #48]	@ (802494c <ip_reass_dequeue_datagram+0x4c>)
 802491a:	6013      	str	r3, [r2, #0]
 802491c:	e00d      	b.n	802493a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 802491e:	683b      	ldr	r3, [r7, #0]
 8024920:	2b00      	cmp	r3, #0
 8024922:	d106      	bne.n	8024932 <ip_reass_dequeue_datagram+0x32>
 8024924:	4b0a      	ldr	r3, [pc, #40]	@ (8024950 <ip_reass_dequeue_datagram+0x50>)
 8024926:	f240 1245 	movw	r2, #325	@ 0x145
 802492a:	490a      	ldr	r1, [pc, #40]	@ (8024954 <ip_reass_dequeue_datagram+0x54>)
 802492c:	480a      	ldr	r0, [pc, #40]	@ (8024958 <ip_reass_dequeue_datagram+0x58>)
 802492e:	f001 ffb3 	bl	8026898 <iprintf>
    prev->next = ipr->next;
 8024932:	687b      	ldr	r3, [r7, #4]
 8024934:	681a      	ldr	r2, [r3, #0]
 8024936:	683b      	ldr	r3, [r7, #0]
 8024938:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 802493a:	6879      	ldr	r1, [r7, #4]
 802493c:	2004      	movs	r0, #4
 802493e:	f7f7 f993 	bl	801bc68 <memp_free>
}
 8024942:	bf00      	nop
 8024944:	3708      	adds	r7, #8
 8024946:	46bd      	mov	sp, r7
 8024948:	bd80      	pop	{r7, pc}
 802494a:	bf00      	nop
 802494c:	2003c628 	.word	0x2003c628
 8024950:	0802b430 	.word	0x0802b430
 8024954:	0802b4f8 	.word	0x0802b4f8
 8024958:	0802b478 	.word	0x0802b478

0802495c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 802495c:	b580      	push	{r7, lr}
 802495e:	b08c      	sub	sp, #48	@ 0x30
 8024960:	af00      	add	r7, sp, #0
 8024962:	60f8      	str	r0, [r7, #12]
 8024964:	60b9      	str	r1, [r7, #8]
 8024966:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8024968:	2300      	movs	r3, #0
 802496a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 802496c:	2301      	movs	r3, #1
 802496e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8024970:	68bb      	ldr	r3, [r7, #8]
 8024972:	685b      	ldr	r3, [r3, #4]
 8024974:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8024976:	69fb      	ldr	r3, [r7, #28]
 8024978:	885b      	ldrh	r3, [r3, #2]
 802497a:	b29b      	uxth	r3, r3
 802497c:	4618      	mov	r0, r3
 802497e:	f7f6 fb7b 	bl	801b078 <lwip_htons>
 8024982:	4603      	mov	r3, r0
 8024984:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8024986:	69fb      	ldr	r3, [r7, #28]
 8024988:	781b      	ldrb	r3, [r3, #0]
 802498a:	f003 030f 	and.w	r3, r3, #15
 802498e:	b2db      	uxtb	r3, r3
 8024990:	009b      	lsls	r3, r3, #2
 8024992:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8024994:	7e7b      	ldrb	r3, [r7, #25]
 8024996:	b29b      	uxth	r3, r3
 8024998:	8b7a      	ldrh	r2, [r7, #26]
 802499a:	429a      	cmp	r2, r3
 802499c:	d202      	bcs.n	80249a4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802499e:	f04f 33ff 	mov.w	r3, #4294967295
 80249a2:	e135      	b.n	8024c10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80249a4:	7e7b      	ldrb	r3, [r7, #25]
 80249a6:	b29b      	uxth	r3, r3
 80249a8:	8b7a      	ldrh	r2, [r7, #26]
 80249aa:	1ad3      	subs	r3, r2, r3
 80249ac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80249ae:	69fb      	ldr	r3, [r7, #28]
 80249b0:	88db      	ldrh	r3, [r3, #6]
 80249b2:	b29b      	uxth	r3, r3
 80249b4:	4618      	mov	r0, r3
 80249b6:	f7f6 fb5f 	bl	801b078 <lwip_htons>
 80249ba:	4603      	mov	r3, r0
 80249bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80249c0:	b29b      	uxth	r3, r3
 80249c2:	00db      	lsls	r3, r3, #3
 80249c4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80249c6:	68bb      	ldr	r3, [r7, #8]
 80249c8:	685b      	ldr	r3, [r3, #4]
 80249ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80249cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80249ce:	2200      	movs	r2, #0
 80249d0:	701a      	strb	r2, [r3, #0]
 80249d2:	2200      	movs	r2, #0
 80249d4:	705a      	strb	r2, [r3, #1]
 80249d6:	2200      	movs	r2, #0
 80249d8:	709a      	strb	r2, [r3, #2]
 80249da:	2200      	movs	r2, #0
 80249dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80249de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80249e0:	8afa      	ldrh	r2, [r7, #22]
 80249e2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80249e4:	8afa      	ldrh	r2, [r7, #22]
 80249e6:	8b7b      	ldrh	r3, [r7, #26]
 80249e8:	4413      	add	r3, r2
 80249ea:	b29a      	uxth	r2, r3
 80249ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80249ee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80249f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80249f2:	88db      	ldrh	r3, [r3, #6]
 80249f4:	b29b      	uxth	r3, r3
 80249f6:	8afa      	ldrh	r2, [r7, #22]
 80249f8:	429a      	cmp	r2, r3
 80249fa:	d902      	bls.n	8024a02 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80249fc:	f04f 33ff 	mov.w	r3, #4294967295
 8024a00:	e106      	b.n	8024c10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8024a02:	68fb      	ldr	r3, [r7, #12]
 8024a04:	685b      	ldr	r3, [r3, #4]
 8024a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8024a08:	e068      	b.n	8024adc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8024a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024a0c:	685b      	ldr	r3, [r3, #4]
 8024a0e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8024a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a12:	889b      	ldrh	r3, [r3, #4]
 8024a14:	b29a      	uxth	r2, r3
 8024a16:	693b      	ldr	r3, [r7, #16]
 8024a18:	889b      	ldrh	r3, [r3, #4]
 8024a1a:	b29b      	uxth	r3, r3
 8024a1c:	429a      	cmp	r2, r3
 8024a1e:	d235      	bcs.n	8024a8c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8024a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024a24:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8024a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024a28:	2b00      	cmp	r3, #0
 8024a2a:	d020      	beq.n	8024a6e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8024a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a2e:	889b      	ldrh	r3, [r3, #4]
 8024a30:	b29a      	uxth	r2, r3
 8024a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024a34:	88db      	ldrh	r3, [r3, #6]
 8024a36:	b29b      	uxth	r3, r3
 8024a38:	429a      	cmp	r2, r3
 8024a3a:	d307      	bcc.n	8024a4c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8024a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a3e:	88db      	ldrh	r3, [r3, #6]
 8024a40:	b29a      	uxth	r2, r3
 8024a42:	693b      	ldr	r3, [r7, #16]
 8024a44:	889b      	ldrh	r3, [r3, #4]
 8024a46:	b29b      	uxth	r3, r3
 8024a48:	429a      	cmp	r2, r3
 8024a4a:	d902      	bls.n	8024a52 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8024a50:	e0de      	b.n	8024c10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8024a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024a54:	68ba      	ldr	r2, [r7, #8]
 8024a56:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8024a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024a5a:	88db      	ldrh	r3, [r3, #6]
 8024a5c:	b29a      	uxth	r2, r3
 8024a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a60:	889b      	ldrh	r3, [r3, #4]
 8024a62:	b29b      	uxth	r3, r3
 8024a64:	429a      	cmp	r2, r3
 8024a66:	d03d      	beq.n	8024ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8024a68:	2300      	movs	r3, #0
 8024a6a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8024a6c:	e03a      	b.n	8024ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8024a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a70:	88db      	ldrh	r3, [r3, #6]
 8024a72:	b29a      	uxth	r2, r3
 8024a74:	693b      	ldr	r3, [r7, #16]
 8024a76:	889b      	ldrh	r3, [r3, #4]
 8024a78:	b29b      	uxth	r3, r3
 8024a7a:	429a      	cmp	r2, r3
 8024a7c:	d902      	bls.n	8024a84 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8024a82:	e0c5      	b.n	8024c10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8024a84:	68fb      	ldr	r3, [r7, #12]
 8024a86:	68ba      	ldr	r2, [r7, #8]
 8024a88:	605a      	str	r2, [r3, #4]
      break;
 8024a8a:	e02b      	b.n	8024ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8024a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024a8e:	889b      	ldrh	r3, [r3, #4]
 8024a90:	b29a      	uxth	r2, r3
 8024a92:	693b      	ldr	r3, [r7, #16]
 8024a94:	889b      	ldrh	r3, [r3, #4]
 8024a96:	b29b      	uxth	r3, r3
 8024a98:	429a      	cmp	r2, r3
 8024a9a:	d102      	bne.n	8024aa2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8024aa0:	e0b6      	b.n	8024c10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8024aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024aa4:	889b      	ldrh	r3, [r3, #4]
 8024aa6:	b29a      	uxth	r2, r3
 8024aa8:	693b      	ldr	r3, [r7, #16]
 8024aaa:	88db      	ldrh	r3, [r3, #6]
 8024aac:	b29b      	uxth	r3, r3
 8024aae:	429a      	cmp	r2, r3
 8024ab0:	d202      	bcs.n	8024ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8024ab6:	e0ab      	b.n	8024c10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8024ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024aba:	2b00      	cmp	r3, #0
 8024abc:	d009      	beq.n	8024ad2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8024abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024ac0:	88db      	ldrh	r3, [r3, #6]
 8024ac2:	b29a      	uxth	r2, r3
 8024ac4:	693b      	ldr	r3, [r7, #16]
 8024ac6:	889b      	ldrh	r3, [r3, #4]
 8024ac8:	b29b      	uxth	r3, r3
 8024aca:	429a      	cmp	r2, r3
 8024acc:	d001      	beq.n	8024ad2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8024ace:	2300      	movs	r3, #0
 8024ad0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8024ad2:	693b      	ldr	r3, [r7, #16]
 8024ad4:	681b      	ldr	r3, [r3, #0]
 8024ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8024ad8:	693b      	ldr	r3, [r7, #16]
 8024ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8024adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024ade:	2b00      	cmp	r3, #0
 8024ae0:	d193      	bne.n	8024a0a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8024ae2:	e000      	b.n	8024ae6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8024ae4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8024ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024ae8:	2b00      	cmp	r3, #0
 8024aea:	d12d      	bne.n	8024b48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8024aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024aee:	2b00      	cmp	r3, #0
 8024af0:	d01c      	beq.n	8024b2c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8024af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024af4:	88db      	ldrh	r3, [r3, #6]
 8024af6:	b29a      	uxth	r2, r3
 8024af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024afa:	889b      	ldrh	r3, [r3, #4]
 8024afc:	b29b      	uxth	r3, r3
 8024afe:	429a      	cmp	r2, r3
 8024b00:	d906      	bls.n	8024b10 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8024b02:	4b45      	ldr	r3, [pc, #276]	@ (8024c18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024b04:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8024b08:	4944      	ldr	r1, [pc, #272]	@ (8024c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8024b0a:	4845      	ldr	r0, [pc, #276]	@ (8024c20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024b0c:	f001 fec4 	bl	8026898 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8024b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024b12:	68ba      	ldr	r2, [r7, #8]
 8024b14:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8024b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024b18:	88db      	ldrh	r3, [r3, #6]
 8024b1a:	b29a      	uxth	r2, r3
 8024b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024b1e:	889b      	ldrh	r3, [r3, #4]
 8024b20:	b29b      	uxth	r3, r3
 8024b22:	429a      	cmp	r2, r3
 8024b24:	d010      	beq.n	8024b48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8024b26:	2300      	movs	r3, #0
 8024b28:	623b      	str	r3, [r7, #32]
 8024b2a:	e00d      	b.n	8024b48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8024b2c:	68fb      	ldr	r3, [r7, #12]
 8024b2e:	685b      	ldr	r3, [r3, #4]
 8024b30:	2b00      	cmp	r3, #0
 8024b32:	d006      	beq.n	8024b42 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8024b34:	4b38      	ldr	r3, [pc, #224]	@ (8024c18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024b36:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8024b3a:	493a      	ldr	r1, [pc, #232]	@ (8024c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8024b3c:	4838      	ldr	r0, [pc, #224]	@ (8024c20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024b3e:	f001 feab 	bl	8026898 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8024b42:	68fb      	ldr	r3, [r7, #12]
 8024b44:	68ba      	ldr	r2, [r7, #8]
 8024b46:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8024b48:	687b      	ldr	r3, [r7, #4]
 8024b4a:	2b00      	cmp	r3, #0
 8024b4c:	d105      	bne.n	8024b5a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8024b4e:	68fb      	ldr	r3, [r7, #12]
 8024b50:	7f9b      	ldrb	r3, [r3, #30]
 8024b52:	f003 0301 	and.w	r3, r3, #1
 8024b56:	2b00      	cmp	r3, #0
 8024b58:	d059      	beq.n	8024c0e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8024b5a:	6a3b      	ldr	r3, [r7, #32]
 8024b5c:	2b00      	cmp	r3, #0
 8024b5e:	d04f      	beq.n	8024c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8024b60:	68fb      	ldr	r3, [r7, #12]
 8024b62:	685b      	ldr	r3, [r3, #4]
 8024b64:	2b00      	cmp	r3, #0
 8024b66:	d006      	beq.n	8024b76 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8024b68:	68fb      	ldr	r3, [r7, #12]
 8024b6a:	685b      	ldr	r3, [r3, #4]
 8024b6c:	685b      	ldr	r3, [r3, #4]
 8024b6e:	889b      	ldrh	r3, [r3, #4]
 8024b70:	b29b      	uxth	r3, r3
 8024b72:	2b00      	cmp	r3, #0
 8024b74:	d002      	beq.n	8024b7c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8024b76:	2300      	movs	r3, #0
 8024b78:	623b      	str	r3, [r7, #32]
 8024b7a:	e041      	b.n	8024c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8024b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8024b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024b82:	681b      	ldr	r3, [r3, #0]
 8024b84:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8024b86:	e012      	b.n	8024bae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8024b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024b8a:	685b      	ldr	r3, [r3, #4]
 8024b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8024b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024b90:	88db      	ldrh	r3, [r3, #6]
 8024b92:	b29a      	uxth	r2, r3
 8024b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024b96:	889b      	ldrh	r3, [r3, #4]
 8024b98:	b29b      	uxth	r3, r3
 8024b9a:	429a      	cmp	r2, r3
 8024b9c:	d002      	beq.n	8024ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8024b9e:	2300      	movs	r3, #0
 8024ba0:	623b      	str	r3, [r7, #32]
            break;
 8024ba2:	e007      	b.n	8024bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8024ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8024ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024baa:	681b      	ldr	r3, [r3, #0]
 8024bac:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8024bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024bb0:	2b00      	cmp	r3, #0
 8024bb2:	d1e9      	bne.n	8024b88 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8024bb4:	6a3b      	ldr	r3, [r7, #32]
 8024bb6:	2b00      	cmp	r3, #0
 8024bb8:	d022      	beq.n	8024c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8024bba:	68fb      	ldr	r3, [r7, #12]
 8024bbc:	685b      	ldr	r3, [r3, #4]
 8024bbe:	2b00      	cmp	r3, #0
 8024bc0:	d106      	bne.n	8024bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8024bc2:	4b15      	ldr	r3, [pc, #84]	@ (8024c18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024bc4:	f240 12df 	movw	r2, #479	@ 0x1df
 8024bc8:	4917      	ldr	r1, [pc, #92]	@ (8024c28 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8024bca:	4815      	ldr	r0, [pc, #84]	@ (8024c20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024bcc:	f001 fe64 	bl	8026898 <iprintf>
          LWIP_ASSERT("sanity check",
 8024bd0:	68fb      	ldr	r3, [r7, #12]
 8024bd2:	685b      	ldr	r3, [r3, #4]
 8024bd4:	685b      	ldr	r3, [r3, #4]
 8024bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024bd8:	429a      	cmp	r2, r3
 8024bda:	d106      	bne.n	8024bea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8024bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8024c18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024bde:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8024be2:	4911      	ldr	r1, [pc, #68]	@ (8024c28 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8024be4:	480e      	ldr	r0, [pc, #56]	@ (8024c20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024be6:	f001 fe57 	bl	8026898 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8024bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024bec:	681b      	ldr	r3, [r3, #0]
 8024bee:	2b00      	cmp	r3, #0
 8024bf0:	d006      	beq.n	8024c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8024bf2:	4b09      	ldr	r3, [pc, #36]	@ (8024c18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024bf4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8024bf8:	490c      	ldr	r1, [pc, #48]	@ (8024c2c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8024bfa:	4809      	ldr	r0, [pc, #36]	@ (8024c20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024bfc:	f001 fe4c 	bl	8026898 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8024c00:	6a3b      	ldr	r3, [r7, #32]
 8024c02:	2b00      	cmp	r3, #0
 8024c04:	bf14      	ite	ne
 8024c06:	2301      	movne	r3, #1
 8024c08:	2300      	moveq	r3, #0
 8024c0a:	b2db      	uxtb	r3, r3
 8024c0c:	e000      	b.n	8024c10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8024c0e:	2300      	movs	r3, #0
}
 8024c10:	4618      	mov	r0, r3
 8024c12:	3730      	adds	r7, #48	@ 0x30
 8024c14:	46bd      	mov	sp, r7
 8024c16:	bd80      	pop	{r7, pc}
 8024c18:	0802b430 	.word	0x0802b430
 8024c1c:	0802b514 	.word	0x0802b514
 8024c20:	0802b478 	.word	0x0802b478
 8024c24:	0802b534 	.word	0x0802b534
 8024c28:	0802b56c 	.word	0x0802b56c
 8024c2c:	0802b57c 	.word	0x0802b57c

08024c30 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8024c30:	b580      	push	{r7, lr}
 8024c32:	b08e      	sub	sp, #56	@ 0x38
 8024c34:	af00      	add	r7, sp, #0
 8024c36:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8024c38:	687b      	ldr	r3, [r7, #4]
 8024c3a:	685b      	ldr	r3, [r3, #4]
 8024c3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8024c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024c40:	781b      	ldrb	r3, [r3, #0]
 8024c42:	f003 030f 	and.w	r3, r3, #15
 8024c46:	b2db      	uxtb	r3, r3
 8024c48:	009b      	lsls	r3, r3, #2
 8024c4a:	b2db      	uxtb	r3, r3
 8024c4c:	2b14      	cmp	r3, #20
 8024c4e:	f040 8171 	bne.w	8024f34 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8024c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024c54:	88db      	ldrh	r3, [r3, #6]
 8024c56:	b29b      	uxth	r3, r3
 8024c58:	4618      	mov	r0, r3
 8024c5a:	f7f6 fa0d 	bl	801b078 <lwip_htons>
 8024c5e:	4603      	mov	r3, r0
 8024c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024c64:	b29b      	uxth	r3, r3
 8024c66:	00db      	lsls	r3, r3, #3
 8024c68:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8024c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024c6c:	885b      	ldrh	r3, [r3, #2]
 8024c6e:	b29b      	uxth	r3, r3
 8024c70:	4618      	mov	r0, r3
 8024c72:	f7f6 fa01 	bl	801b078 <lwip_htons>
 8024c76:	4603      	mov	r3, r0
 8024c78:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8024c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024c7c:	781b      	ldrb	r3, [r3, #0]
 8024c7e:	f003 030f 	and.w	r3, r3, #15
 8024c82:	b2db      	uxtb	r3, r3
 8024c84:	009b      	lsls	r3, r3, #2
 8024c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8024c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8024c8e:	b29b      	uxth	r3, r3
 8024c90:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8024c92:	429a      	cmp	r2, r3
 8024c94:	f0c0 8150 	bcc.w	8024f38 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8024c98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8024c9c:	b29b      	uxth	r3, r3
 8024c9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8024ca0:	1ad3      	subs	r3, r2, r3
 8024ca2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8024ca4:	6878      	ldr	r0, [r7, #4]
 8024ca6:	f7f7 ff0f 	bl	801cac8 <pbuf_clen>
 8024caa:	4603      	mov	r3, r0
 8024cac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8024cae:	4b8c      	ldr	r3, [pc, #560]	@ (8024ee0 <ip4_reass+0x2b0>)
 8024cb0:	881b      	ldrh	r3, [r3, #0]
 8024cb2:	461a      	mov	r2, r3
 8024cb4:	8c3b      	ldrh	r3, [r7, #32]
 8024cb6:	4413      	add	r3, r2
 8024cb8:	2b0a      	cmp	r3, #10
 8024cba:	dd10      	ble.n	8024cde <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8024cbc:	8c3b      	ldrh	r3, [r7, #32]
 8024cbe:	4619      	mov	r1, r3
 8024cc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8024cc2:	f7ff fd81 	bl	80247c8 <ip_reass_remove_oldest_datagram>
 8024cc6:	4603      	mov	r3, r0
 8024cc8:	2b00      	cmp	r3, #0
 8024cca:	f000 8137 	beq.w	8024f3c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8024cce:	4b84      	ldr	r3, [pc, #528]	@ (8024ee0 <ip4_reass+0x2b0>)
 8024cd0:	881b      	ldrh	r3, [r3, #0]
 8024cd2:	461a      	mov	r2, r3
 8024cd4:	8c3b      	ldrh	r3, [r7, #32]
 8024cd6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8024cd8:	2b0a      	cmp	r3, #10
 8024cda:	f300 812f 	bgt.w	8024f3c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024cde:	4b81      	ldr	r3, [pc, #516]	@ (8024ee4 <ip4_reass+0x2b4>)
 8024ce0:	681b      	ldr	r3, [r3, #0]
 8024ce2:	633b      	str	r3, [r7, #48]	@ 0x30
 8024ce4:	e015      	b.n	8024d12 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8024ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024ce8:	695a      	ldr	r2, [r3, #20]
 8024cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024cec:	68db      	ldr	r3, [r3, #12]
 8024cee:	429a      	cmp	r2, r3
 8024cf0:	d10c      	bne.n	8024d0c <ip4_reass+0xdc>
 8024cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024cf4:	699a      	ldr	r2, [r3, #24]
 8024cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024cf8:	691b      	ldr	r3, [r3, #16]
 8024cfa:	429a      	cmp	r2, r3
 8024cfc:	d106      	bne.n	8024d0c <ip4_reass+0xdc>
 8024cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d00:	899a      	ldrh	r2, [r3, #12]
 8024d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024d04:	889b      	ldrh	r3, [r3, #4]
 8024d06:	b29b      	uxth	r3, r3
 8024d08:	429a      	cmp	r2, r3
 8024d0a:	d006      	beq.n	8024d1a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d0e:	681b      	ldr	r3, [r3, #0]
 8024d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8024d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d14:	2b00      	cmp	r3, #0
 8024d16:	d1e6      	bne.n	8024ce6 <ip4_reass+0xb6>
 8024d18:	e000      	b.n	8024d1c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8024d1a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8024d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	d109      	bne.n	8024d36 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8024d22:	8c3b      	ldrh	r3, [r7, #32]
 8024d24:	4619      	mov	r1, r3
 8024d26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8024d28:	f7ff fdb0 	bl	802488c <ip_reass_enqueue_new_datagram>
 8024d2c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8024d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d30:	2b00      	cmp	r3, #0
 8024d32:	d11c      	bne.n	8024d6e <ip4_reass+0x13e>
      goto nullreturn;
 8024d34:	e105      	b.n	8024f42 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8024d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024d38:	88db      	ldrh	r3, [r3, #6]
 8024d3a:	b29b      	uxth	r3, r3
 8024d3c:	4618      	mov	r0, r3
 8024d3e:	f7f6 f99b 	bl	801b078 <lwip_htons>
 8024d42:	4603      	mov	r3, r0
 8024d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024d48:	2b00      	cmp	r3, #0
 8024d4a:	d110      	bne.n	8024d6e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8024d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d4e:	89db      	ldrh	r3, [r3, #14]
 8024d50:	4618      	mov	r0, r3
 8024d52:	f7f6 f991 	bl	801b078 <lwip_htons>
 8024d56:	4603      	mov	r3, r0
 8024d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8024d5c:	2b00      	cmp	r3, #0
 8024d5e:	d006      	beq.n	8024d6e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8024d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d62:	3308      	adds	r3, #8
 8024d64:	2214      	movs	r2, #20
 8024d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8024d68:	4618      	mov	r0, r3
 8024d6a:	f001 ff14 	bl	8026b96 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8024d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024d70:	88db      	ldrh	r3, [r3, #6]
 8024d72:	b29b      	uxth	r3, r3
 8024d74:	f003 0320 	and.w	r3, r3, #32
 8024d78:	2b00      	cmp	r3, #0
 8024d7a:	bf0c      	ite	eq
 8024d7c:	2301      	moveq	r3, #1
 8024d7e:	2300      	movne	r3, #0
 8024d80:	b2db      	uxtb	r3, r3
 8024d82:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8024d84:	69fb      	ldr	r3, [r7, #28]
 8024d86:	2b00      	cmp	r3, #0
 8024d88:	d00e      	beq.n	8024da8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8024d8a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8024d8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8024d8e:	4413      	add	r3, r2
 8024d90:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8024d92:	8b7a      	ldrh	r2, [r7, #26]
 8024d94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8024d96:	429a      	cmp	r2, r3
 8024d98:	f0c0 80a0 	bcc.w	8024edc <ip4_reass+0x2ac>
 8024d9c:	8b7b      	ldrh	r3, [r7, #26]
 8024d9e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8024da2:	4293      	cmp	r3, r2
 8024da4:	f200 809a 	bhi.w	8024edc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8024da8:	69fa      	ldr	r2, [r7, #28]
 8024daa:	6879      	ldr	r1, [r7, #4]
 8024dac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8024dae:	f7ff fdd5 	bl	802495c <ip_reass_chain_frag_into_datagram_and_validate>
 8024db2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8024db4:	697b      	ldr	r3, [r7, #20]
 8024db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024dba:	f000 809b 	beq.w	8024ef4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8024dbe:	4b48      	ldr	r3, [pc, #288]	@ (8024ee0 <ip4_reass+0x2b0>)
 8024dc0:	881a      	ldrh	r2, [r3, #0]
 8024dc2:	8c3b      	ldrh	r3, [r7, #32]
 8024dc4:	4413      	add	r3, r2
 8024dc6:	b29a      	uxth	r2, r3
 8024dc8:	4b45      	ldr	r3, [pc, #276]	@ (8024ee0 <ip4_reass+0x2b0>)
 8024dca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8024dcc:	69fb      	ldr	r3, [r7, #28]
 8024dce:	2b00      	cmp	r3, #0
 8024dd0:	d00d      	beq.n	8024dee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8024dd2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8024dd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8024dd6:	4413      	add	r3, r2
 8024dd8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8024dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024ddc:	8a7a      	ldrh	r2, [r7, #18]
 8024dde:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8024de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024de2:	7f9b      	ldrb	r3, [r3, #30]
 8024de4:	f043 0301 	orr.w	r3, r3, #1
 8024de8:	b2da      	uxtb	r2, r3
 8024dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024dec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8024dee:	697b      	ldr	r3, [r7, #20]
 8024df0:	2b01      	cmp	r3, #1
 8024df2:	d171      	bne.n	8024ed8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8024df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024df6:	8b9b      	ldrh	r3, [r3, #28]
 8024df8:	3314      	adds	r3, #20
 8024dfa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8024dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024dfe:	685b      	ldr	r3, [r3, #4]
 8024e00:	685b      	ldr	r3, [r3, #4]
 8024e02:	681b      	ldr	r3, [r3, #0]
 8024e04:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8024e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024e08:	685b      	ldr	r3, [r3, #4]
 8024e0a:	685b      	ldr	r3, [r3, #4]
 8024e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8024e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024e10:	3308      	adds	r3, #8
 8024e12:	2214      	movs	r2, #20
 8024e14:	4619      	mov	r1, r3
 8024e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8024e18:	f001 febd 	bl	8026b96 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8024e1c:	8a3b      	ldrh	r3, [r7, #16]
 8024e1e:	4618      	mov	r0, r3
 8024e20:	f7f6 f92a 	bl	801b078 <lwip_htons>
 8024e24:	4603      	mov	r3, r0
 8024e26:	461a      	mov	r2, r3
 8024e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024e2a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8024e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024e2e:	2200      	movs	r2, #0
 8024e30:	719a      	strb	r2, [r3, #6]
 8024e32:	2200      	movs	r2, #0
 8024e34:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8024e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024e38:	2200      	movs	r2, #0
 8024e3a:	729a      	strb	r2, [r3, #10]
 8024e3c:	2200      	movs	r2, #0
 8024e3e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8024e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024e42:	685b      	ldr	r3, [r3, #4]
 8024e44:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8024e46:	e00d      	b.n	8024e64 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8024e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024e4a:	685b      	ldr	r3, [r3, #4]
 8024e4c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8024e4e:	2114      	movs	r1, #20
 8024e50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8024e52:	f7f7 fd25 	bl	801c8a0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8024e56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8024e58:	6878      	ldr	r0, [r7, #4]
 8024e5a:	f7f7 fe75 	bl	801cb48 <pbuf_cat>
      r = iprh->next_pbuf;
 8024e5e:	68fb      	ldr	r3, [r7, #12]
 8024e60:	681b      	ldr	r3, [r3, #0]
 8024e62:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8024e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024e66:	2b00      	cmp	r3, #0
 8024e68:	d1ee      	bne.n	8024e48 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8024e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8024ee4 <ip4_reass+0x2b4>)
 8024e6c:	681b      	ldr	r3, [r3, #0]
 8024e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024e70:	429a      	cmp	r2, r3
 8024e72:	d102      	bne.n	8024e7a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8024e74:	2300      	movs	r3, #0
 8024e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8024e78:	e010      	b.n	8024e9c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8024e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8024ee4 <ip4_reass+0x2b4>)
 8024e7c:	681b      	ldr	r3, [r3, #0]
 8024e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8024e80:	e007      	b.n	8024e92 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8024e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024e84:	681b      	ldr	r3, [r3, #0]
 8024e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024e88:	429a      	cmp	r2, r3
 8024e8a:	d006      	beq.n	8024e9a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8024e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024e8e:	681b      	ldr	r3, [r3, #0]
 8024e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8024e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024e94:	2b00      	cmp	r3, #0
 8024e96:	d1f4      	bne.n	8024e82 <ip4_reass+0x252>
 8024e98:	e000      	b.n	8024e9c <ip4_reass+0x26c>
          break;
 8024e9a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8024e9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8024e9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8024ea0:	f7ff fd2e 	bl	8024900 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8024ea4:	6878      	ldr	r0, [r7, #4]
 8024ea6:	f7f7 fe0f 	bl	801cac8 <pbuf_clen>
 8024eaa:	4603      	mov	r3, r0
 8024eac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8024eae:	4b0c      	ldr	r3, [pc, #48]	@ (8024ee0 <ip4_reass+0x2b0>)
 8024eb0:	881b      	ldrh	r3, [r3, #0]
 8024eb2:	8c3a      	ldrh	r2, [r7, #32]
 8024eb4:	429a      	cmp	r2, r3
 8024eb6:	d906      	bls.n	8024ec6 <ip4_reass+0x296>
 8024eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8024ee8 <ip4_reass+0x2b8>)
 8024eba:	f240 229b 	movw	r2, #667	@ 0x29b
 8024ebe:	490b      	ldr	r1, [pc, #44]	@ (8024eec <ip4_reass+0x2bc>)
 8024ec0:	480b      	ldr	r0, [pc, #44]	@ (8024ef0 <ip4_reass+0x2c0>)
 8024ec2:	f001 fce9 	bl	8026898 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8024ec6:	4b06      	ldr	r3, [pc, #24]	@ (8024ee0 <ip4_reass+0x2b0>)
 8024ec8:	881a      	ldrh	r2, [r3, #0]
 8024eca:	8c3b      	ldrh	r3, [r7, #32]
 8024ecc:	1ad3      	subs	r3, r2, r3
 8024ece:	b29a      	uxth	r2, r3
 8024ed0:	4b03      	ldr	r3, [pc, #12]	@ (8024ee0 <ip4_reass+0x2b0>)
 8024ed2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8024ed4:	687b      	ldr	r3, [r7, #4]
 8024ed6:	e038      	b.n	8024f4a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8024ed8:	2300      	movs	r3, #0
 8024eda:	e036      	b.n	8024f4a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8024edc:	bf00      	nop
 8024ede:	e00a      	b.n	8024ef6 <ip4_reass+0x2c6>
 8024ee0:	2003c62c 	.word	0x2003c62c
 8024ee4:	2003c628 	.word	0x2003c628
 8024ee8:	0802b430 	.word	0x0802b430
 8024eec:	0802b5a0 	.word	0x0802b5a0
 8024ef0:	0802b478 	.word	0x0802b478
    goto nullreturn_ipr;
 8024ef4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8024ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024ef8:	2b00      	cmp	r3, #0
 8024efa:	d106      	bne.n	8024f0a <ip4_reass+0x2da>
 8024efc:	4b15      	ldr	r3, [pc, #84]	@ (8024f54 <ip4_reass+0x324>)
 8024efe:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8024f02:	4915      	ldr	r1, [pc, #84]	@ (8024f58 <ip4_reass+0x328>)
 8024f04:	4815      	ldr	r0, [pc, #84]	@ (8024f5c <ip4_reass+0x32c>)
 8024f06:	f001 fcc7 	bl	8026898 <iprintf>
  if (ipr->p == NULL) {
 8024f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024f0c:	685b      	ldr	r3, [r3, #4]
 8024f0e:	2b00      	cmp	r3, #0
 8024f10:	d116      	bne.n	8024f40 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8024f12:	4b13      	ldr	r3, [pc, #76]	@ (8024f60 <ip4_reass+0x330>)
 8024f14:	681b      	ldr	r3, [r3, #0]
 8024f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024f18:	429a      	cmp	r2, r3
 8024f1a:	d006      	beq.n	8024f2a <ip4_reass+0x2fa>
 8024f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8024f54 <ip4_reass+0x324>)
 8024f1e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8024f22:	4910      	ldr	r1, [pc, #64]	@ (8024f64 <ip4_reass+0x334>)
 8024f24:	480d      	ldr	r0, [pc, #52]	@ (8024f5c <ip4_reass+0x32c>)
 8024f26:	f001 fcb7 	bl	8026898 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8024f2a:	2100      	movs	r1, #0
 8024f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8024f2e:	f7ff fce7 	bl	8024900 <ip_reass_dequeue_datagram>
 8024f32:	e006      	b.n	8024f42 <ip4_reass+0x312>
    goto nullreturn;
 8024f34:	bf00      	nop
 8024f36:	e004      	b.n	8024f42 <ip4_reass+0x312>
    goto nullreturn;
 8024f38:	bf00      	nop
 8024f3a:	e002      	b.n	8024f42 <ip4_reass+0x312>
      goto nullreturn;
 8024f3c:	bf00      	nop
 8024f3e:	e000      	b.n	8024f42 <ip4_reass+0x312>
  }

nullreturn:
 8024f40:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8024f42:	6878      	ldr	r0, [r7, #4]
 8024f44:	f7f7 fd32 	bl	801c9ac <pbuf_free>
  return NULL;
 8024f48:	2300      	movs	r3, #0
}
 8024f4a:	4618      	mov	r0, r3
 8024f4c:	3738      	adds	r7, #56	@ 0x38
 8024f4e:	46bd      	mov	sp, r7
 8024f50:	bd80      	pop	{r7, pc}
 8024f52:	bf00      	nop
 8024f54:	0802b430 	.word	0x0802b430
 8024f58:	0802b5bc 	.word	0x0802b5bc
 8024f5c:	0802b478 	.word	0x0802b478
 8024f60:	2003c628 	.word	0x2003c628
 8024f64:	0802b5c8 	.word	0x0802b5c8

08024f68 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8024f68:	b580      	push	{r7, lr}
 8024f6a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8024f6c:	2005      	movs	r0, #5
 8024f6e:	f7f6 fe05 	bl	801bb7c <memp_malloc>
 8024f72:	4603      	mov	r3, r0
}
 8024f74:	4618      	mov	r0, r3
 8024f76:	bd80      	pop	{r7, pc}

08024f78 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8024f78:	b580      	push	{r7, lr}
 8024f7a:	b082      	sub	sp, #8
 8024f7c:	af00      	add	r7, sp, #0
 8024f7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8024f80:	687b      	ldr	r3, [r7, #4]
 8024f82:	2b00      	cmp	r3, #0
 8024f84:	d106      	bne.n	8024f94 <ip_frag_free_pbuf_custom_ref+0x1c>
 8024f86:	4b07      	ldr	r3, [pc, #28]	@ (8024fa4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8024f88:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8024f8c:	4906      	ldr	r1, [pc, #24]	@ (8024fa8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8024f8e:	4807      	ldr	r0, [pc, #28]	@ (8024fac <ip_frag_free_pbuf_custom_ref+0x34>)
 8024f90:	f001 fc82 	bl	8026898 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8024f94:	6879      	ldr	r1, [r7, #4]
 8024f96:	2005      	movs	r0, #5
 8024f98:	f7f6 fe66 	bl	801bc68 <memp_free>
}
 8024f9c:	bf00      	nop
 8024f9e:	3708      	adds	r7, #8
 8024fa0:	46bd      	mov	sp, r7
 8024fa2:	bd80      	pop	{r7, pc}
 8024fa4:	0802b430 	.word	0x0802b430
 8024fa8:	0802b5e8 	.word	0x0802b5e8
 8024fac:	0802b478 	.word	0x0802b478

08024fb0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8024fb0:	b580      	push	{r7, lr}
 8024fb2:	b084      	sub	sp, #16
 8024fb4:	af00      	add	r7, sp, #0
 8024fb6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8024fb8:	687b      	ldr	r3, [r7, #4]
 8024fba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8024fbc:	68fb      	ldr	r3, [r7, #12]
 8024fbe:	2b00      	cmp	r3, #0
 8024fc0:	d106      	bne.n	8024fd0 <ipfrag_free_pbuf_custom+0x20>
 8024fc2:	4b11      	ldr	r3, [pc, #68]	@ (8025008 <ipfrag_free_pbuf_custom+0x58>)
 8024fc4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8024fc8:	4910      	ldr	r1, [pc, #64]	@ (802500c <ipfrag_free_pbuf_custom+0x5c>)
 8024fca:	4811      	ldr	r0, [pc, #68]	@ (8025010 <ipfrag_free_pbuf_custom+0x60>)
 8024fcc:	f001 fc64 	bl	8026898 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8024fd0:	68fa      	ldr	r2, [r7, #12]
 8024fd2:	687b      	ldr	r3, [r7, #4]
 8024fd4:	429a      	cmp	r2, r3
 8024fd6:	d006      	beq.n	8024fe6 <ipfrag_free_pbuf_custom+0x36>
 8024fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8025008 <ipfrag_free_pbuf_custom+0x58>)
 8024fda:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8024fde:	490d      	ldr	r1, [pc, #52]	@ (8025014 <ipfrag_free_pbuf_custom+0x64>)
 8024fe0:	480b      	ldr	r0, [pc, #44]	@ (8025010 <ipfrag_free_pbuf_custom+0x60>)
 8024fe2:	f001 fc59 	bl	8026898 <iprintf>
  if (pcr->original != NULL) {
 8024fe6:	68fb      	ldr	r3, [r7, #12]
 8024fe8:	695b      	ldr	r3, [r3, #20]
 8024fea:	2b00      	cmp	r3, #0
 8024fec:	d004      	beq.n	8024ff8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8024fee:	68fb      	ldr	r3, [r7, #12]
 8024ff0:	695b      	ldr	r3, [r3, #20]
 8024ff2:	4618      	mov	r0, r3
 8024ff4:	f7f7 fcda 	bl	801c9ac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8024ff8:	68f8      	ldr	r0, [r7, #12]
 8024ffa:	f7ff ffbd 	bl	8024f78 <ip_frag_free_pbuf_custom_ref>
}
 8024ffe:	bf00      	nop
 8025000:	3710      	adds	r7, #16
 8025002:	46bd      	mov	sp, r7
 8025004:	bd80      	pop	{r7, pc}
 8025006:	bf00      	nop
 8025008:	0802b430 	.word	0x0802b430
 802500c:	0802b5f4 	.word	0x0802b5f4
 8025010:	0802b478 	.word	0x0802b478
 8025014:	0802b600 	.word	0x0802b600

08025018 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8025018:	b580      	push	{r7, lr}
 802501a:	b094      	sub	sp, #80	@ 0x50
 802501c:	af02      	add	r7, sp, #8
 802501e:	60f8      	str	r0, [r7, #12]
 8025020:	60b9      	str	r1, [r7, #8]
 8025022:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8025024:	2300      	movs	r3, #0
 8025026:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802502a:	68bb      	ldr	r3, [r7, #8]
 802502c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 802502e:	3b14      	subs	r3, #20
 8025030:	2b00      	cmp	r3, #0
 8025032:	da00      	bge.n	8025036 <ip4_frag+0x1e>
 8025034:	3307      	adds	r3, #7
 8025036:	10db      	asrs	r3, r3, #3
 8025038:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 802503a:	2314      	movs	r3, #20
 802503c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802503e:	68fb      	ldr	r3, [r7, #12]
 8025040:	685b      	ldr	r3, [r3, #4]
 8025042:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8025044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025046:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8025048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802504a:	781b      	ldrb	r3, [r3, #0]
 802504c:	f003 030f 	and.w	r3, r3, #15
 8025050:	b2db      	uxtb	r3, r3
 8025052:	009b      	lsls	r3, r3, #2
 8025054:	b2db      	uxtb	r3, r3
 8025056:	2b14      	cmp	r3, #20
 8025058:	d002      	beq.n	8025060 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 802505a:	f06f 0305 	mvn.w	r3, #5
 802505e:	e110      	b.n	8025282 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8025060:	68fb      	ldr	r3, [r7, #12]
 8025062:	895b      	ldrh	r3, [r3, #10]
 8025064:	2b13      	cmp	r3, #19
 8025066:	d809      	bhi.n	802507c <ip4_frag+0x64>
 8025068:	4b88      	ldr	r3, [pc, #544]	@ (802528c <ip4_frag+0x274>)
 802506a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 802506e:	4988      	ldr	r1, [pc, #544]	@ (8025290 <ip4_frag+0x278>)
 8025070:	4888      	ldr	r0, [pc, #544]	@ (8025294 <ip4_frag+0x27c>)
 8025072:	f001 fc11 	bl	8026898 <iprintf>
 8025076:	f06f 0305 	mvn.w	r3, #5
 802507a:	e102      	b.n	8025282 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802507e:	88db      	ldrh	r3, [r3, #6]
 8025080:	b29b      	uxth	r3, r3
 8025082:	4618      	mov	r0, r3
 8025084:	f7f5 fff8 	bl	801b078 <lwip_htons>
 8025088:	4603      	mov	r3, r0
 802508a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 802508c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 802508e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025092:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8025096:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8025098:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 802509c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 802509e:	68fb      	ldr	r3, [r7, #12]
 80250a0:	891b      	ldrh	r3, [r3, #8]
 80250a2:	3b14      	subs	r3, #20
 80250a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80250a8:	e0e1      	b.n	802526e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80250aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80250ac:	00db      	lsls	r3, r3, #3
 80250ae:	b29b      	uxth	r3, r3
 80250b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80250b4:	4293      	cmp	r3, r2
 80250b6:	bf28      	it	cs
 80250b8:	4613      	movcs	r3, r2
 80250ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80250bc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80250c0:	2114      	movs	r1, #20
 80250c2:	200e      	movs	r0, #14
 80250c4:	f7f7 f990 	bl	801c3e8 <pbuf_alloc>
 80250c8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80250ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80250cc:	2b00      	cmp	r3, #0
 80250ce:	f000 80d5 	beq.w	802527c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80250d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80250d4:	895b      	ldrh	r3, [r3, #10]
 80250d6:	2b13      	cmp	r3, #19
 80250d8:	d806      	bhi.n	80250e8 <ip4_frag+0xd0>
 80250da:	4b6c      	ldr	r3, [pc, #432]	@ (802528c <ip4_frag+0x274>)
 80250dc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80250e0:	496d      	ldr	r1, [pc, #436]	@ (8025298 <ip4_frag+0x280>)
 80250e2:	486c      	ldr	r0, [pc, #432]	@ (8025294 <ip4_frag+0x27c>)
 80250e4:	f001 fbd8 	bl	8026898 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80250e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80250ea:	685b      	ldr	r3, [r3, #4]
 80250ec:	2214      	movs	r2, #20
 80250ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80250f0:	4618      	mov	r0, r3
 80250f2:	f001 fd50 	bl	8026b96 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80250f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80250f8:	685b      	ldr	r3, [r3, #4]
 80250fa:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80250fc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80250fe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8025102:	e064      	b.n	80251ce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8025104:	68fb      	ldr	r3, [r7, #12]
 8025106:	895a      	ldrh	r2, [r3, #10]
 8025108:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 802510a:	1ad3      	subs	r3, r2, r3
 802510c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802510e:	68fb      	ldr	r3, [r7, #12]
 8025110:	895b      	ldrh	r3, [r3, #10]
 8025112:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8025114:	429a      	cmp	r2, r3
 8025116:	d906      	bls.n	8025126 <ip4_frag+0x10e>
 8025118:	4b5c      	ldr	r3, [pc, #368]	@ (802528c <ip4_frag+0x274>)
 802511a:	f240 322d 	movw	r2, #813	@ 0x32d
 802511e:	495f      	ldr	r1, [pc, #380]	@ (802529c <ip4_frag+0x284>)
 8025120:	485c      	ldr	r0, [pc, #368]	@ (8025294 <ip4_frag+0x27c>)
 8025122:	f001 fbb9 	bl	8026898 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8025126:	8bfa      	ldrh	r2, [r7, #30]
 8025128:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 802512c:	4293      	cmp	r3, r2
 802512e:	bf28      	it	cs
 8025130:	4613      	movcs	r3, r2
 8025132:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8025136:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 802513a:	2b00      	cmp	r3, #0
 802513c:	d105      	bne.n	802514a <ip4_frag+0x132>
        poff = 0;
 802513e:	2300      	movs	r3, #0
 8025140:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8025142:	68fb      	ldr	r3, [r7, #12]
 8025144:	681b      	ldr	r3, [r3, #0]
 8025146:	60fb      	str	r3, [r7, #12]
        continue;
 8025148:	e041      	b.n	80251ce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 802514a:	f7ff ff0d 	bl	8024f68 <ip_frag_alloc_pbuf_custom_ref>
 802514e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8025150:	69bb      	ldr	r3, [r7, #24]
 8025152:	2b00      	cmp	r3, #0
 8025154:	d103      	bne.n	802515e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8025156:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8025158:	f7f7 fc28 	bl	801c9ac <pbuf_free>
        goto memerr;
 802515c:	e08f      	b.n	802527e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802515e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8025160:	68fb      	ldr	r3, [r7, #12]
 8025162:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8025164:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8025166:	4413      	add	r3, r2
 8025168:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 802516c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8025170:	9201      	str	r2, [sp, #4]
 8025172:	9300      	str	r3, [sp, #0]
 8025174:	4603      	mov	r3, r0
 8025176:	2241      	movs	r2, #65	@ 0x41
 8025178:	2000      	movs	r0, #0
 802517a:	f7f7 fa5f 	bl	801c63c <pbuf_alloced_custom>
 802517e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8025180:	697b      	ldr	r3, [r7, #20]
 8025182:	2b00      	cmp	r3, #0
 8025184:	d106      	bne.n	8025194 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8025186:	69b8      	ldr	r0, [r7, #24]
 8025188:	f7ff fef6 	bl	8024f78 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 802518c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802518e:	f7f7 fc0d 	bl	801c9ac <pbuf_free>
        goto memerr;
 8025192:	e074      	b.n	802527e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8025194:	68f8      	ldr	r0, [r7, #12]
 8025196:	f7f7 fcaf 	bl	801caf8 <pbuf_ref>
      pcr->original = p;
 802519a:	69bb      	ldr	r3, [r7, #24]
 802519c:	68fa      	ldr	r2, [r7, #12]
 802519e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80251a0:	69bb      	ldr	r3, [r7, #24]
 80251a2:	4a3f      	ldr	r2, [pc, #252]	@ (80252a0 <ip4_frag+0x288>)
 80251a4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80251a6:	6979      	ldr	r1, [r7, #20]
 80251a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80251aa:	f7f7 fccd 	bl	801cb48 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80251ae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80251b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80251b6:	1ad3      	subs	r3, r2, r3
 80251b8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80251bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80251c0:	2b00      	cmp	r3, #0
 80251c2:	d004      	beq.n	80251ce <ip4_frag+0x1b6>
        poff = 0;
 80251c4:	2300      	movs	r3, #0
 80251c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80251c8:	68fb      	ldr	r3, [r7, #12]
 80251ca:	681b      	ldr	r3, [r3, #0]
 80251cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80251ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80251d2:	2b00      	cmp	r3, #0
 80251d4:	d196      	bne.n	8025104 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80251d6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80251d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80251dc:	4413      	add	r3, r2
 80251de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80251e0:	68bb      	ldr	r3, [r7, #8]
 80251e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80251e4:	f1a3 0213 	sub.w	r2, r3, #19
 80251e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80251ec:	429a      	cmp	r2, r3
 80251ee:	bfcc      	ite	gt
 80251f0:	2301      	movgt	r3, #1
 80251f2:	2300      	movle	r3, #0
 80251f4:	b2db      	uxtb	r3, r3
 80251f6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80251f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80251fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025200:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8025202:	6a3b      	ldr	r3, [r7, #32]
 8025204:	2b00      	cmp	r3, #0
 8025206:	d002      	beq.n	802520e <ip4_frag+0x1f6>
 8025208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802520a:	2b00      	cmp	r3, #0
 802520c:	d003      	beq.n	8025216 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802520e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8025210:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8025214:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8025216:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8025218:	4618      	mov	r0, r3
 802521a:	f7f5 ff2d 	bl	801b078 <lwip_htons>
 802521e:	4603      	mov	r3, r0
 8025220:	461a      	mov	r2, r3
 8025222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025224:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8025226:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8025228:	3314      	adds	r3, #20
 802522a:	b29b      	uxth	r3, r3
 802522c:	4618      	mov	r0, r3
 802522e:	f7f5 ff23 	bl	801b078 <lwip_htons>
 8025232:	4603      	mov	r3, r0
 8025234:	461a      	mov	r2, r3
 8025236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025238:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 802523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802523c:	2200      	movs	r2, #0
 802523e:	729a      	strb	r2, [r3, #10]
 8025240:	2200      	movs	r2, #0
 8025242:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8025244:	68bb      	ldr	r3, [r7, #8]
 8025246:	695b      	ldr	r3, [r3, #20]
 8025248:	687a      	ldr	r2, [r7, #4]
 802524a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 802524c:	68b8      	ldr	r0, [r7, #8]
 802524e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8025250:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8025252:	f7f7 fbab 	bl	801c9ac <pbuf_free>
    left = (u16_t)(left - fragsize);
 8025256:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 802525a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 802525c:	1ad3      	subs	r3, r2, r3
 802525e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8025262:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8025266:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8025268:	4413      	add	r3, r2
 802526a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 802526e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8025272:	2b00      	cmp	r3, #0
 8025274:	f47f af19 	bne.w	80250aa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8025278:	2300      	movs	r3, #0
 802527a:	e002      	b.n	8025282 <ip4_frag+0x26a>
      goto memerr;
 802527c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802527e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8025282:	4618      	mov	r0, r3
 8025284:	3748      	adds	r7, #72	@ 0x48
 8025286:	46bd      	mov	sp, r7
 8025288:	bd80      	pop	{r7, pc}
 802528a:	bf00      	nop
 802528c:	0802b430 	.word	0x0802b430
 8025290:	0802b60c 	.word	0x0802b60c
 8025294:	0802b478 	.word	0x0802b478
 8025298:	0802b628 	.word	0x0802b628
 802529c:	0802b648 	.word	0x0802b648
 80252a0:	08024fb1 	.word	0x08024fb1

080252a4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80252a4:	b580      	push	{r7, lr}
 80252a6:	b086      	sub	sp, #24
 80252a8:	af00      	add	r7, sp, #0
 80252aa:	6078      	str	r0, [r7, #4]
 80252ac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80252ae:	230e      	movs	r3, #14
 80252b0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80252b2:	687b      	ldr	r3, [r7, #4]
 80252b4:	895b      	ldrh	r3, [r3, #10]
 80252b6:	2b0e      	cmp	r3, #14
 80252b8:	d96e      	bls.n	8025398 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80252ba:	687b      	ldr	r3, [r7, #4]
 80252bc:	7bdb      	ldrb	r3, [r3, #15]
 80252be:	2b00      	cmp	r3, #0
 80252c0:	d106      	bne.n	80252d0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80252c2:	683b      	ldr	r3, [r7, #0]
 80252c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80252c8:	3301      	adds	r3, #1
 80252ca:	b2da      	uxtb	r2, r3
 80252cc:	687b      	ldr	r3, [r7, #4]
 80252ce:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80252d0:	687b      	ldr	r3, [r7, #4]
 80252d2:	685b      	ldr	r3, [r3, #4]
 80252d4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80252d6:	693b      	ldr	r3, [r7, #16]
 80252d8:	7b1a      	ldrb	r2, [r3, #12]
 80252da:	7b5b      	ldrb	r3, [r3, #13]
 80252dc:	021b      	lsls	r3, r3, #8
 80252de:	4313      	orrs	r3, r2
 80252e0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80252e2:	693b      	ldr	r3, [r7, #16]
 80252e4:	781b      	ldrb	r3, [r3, #0]
 80252e6:	f003 0301 	and.w	r3, r3, #1
 80252ea:	2b00      	cmp	r3, #0
 80252ec:	d023      	beq.n	8025336 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80252ee:	693b      	ldr	r3, [r7, #16]
 80252f0:	781b      	ldrb	r3, [r3, #0]
 80252f2:	2b01      	cmp	r3, #1
 80252f4:	d10f      	bne.n	8025316 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80252f6:	693b      	ldr	r3, [r7, #16]
 80252f8:	785b      	ldrb	r3, [r3, #1]
 80252fa:	2b00      	cmp	r3, #0
 80252fc:	d11b      	bne.n	8025336 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80252fe:	693b      	ldr	r3, [r7, #16]
 8025300:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8025302:	2b5e      	cmp	r3, #94	@ 0x5e
 8025304:	d117      	bne.n	8025336 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8025306:	687b      	ldr	r3, [r7, #4]
 8025308:	7b5b      	ldrb	r3, [r3, #13]
 802530a:	f043 0310 	orr.w	r3, r3, #16
 802530e:	b2da      	uxtb	r2, r3
 8025310:	687b      	ldr	r3, [r7, #4]
 8025312:	735a      	strb	r2, [r3, #13]
 8025314:	e00f      	b.n	8025336 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8025316:	693b      	ldr	r3, [r7, #16]
 8025318:	2206      	movs	r2, #6
 802531a:	4928      	ldr	r1, [pc, #160]	@ (80253bc <ethernet_input+0x118>)
 802531c:	4618      	mov	r0, r3
 802531e:	f001 fb30 	bl	8026982 <memcmp>
 8025322:	4603      	mov	r3, r0
 8025324:	2b00      	cmp	r3, #0
 8025326:	d106      	bne.n	8025336 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8025328:	687b      	ldr	r3, [r7, #4]
 802532a:	7b5b      	ldrb	r3, [r3, #13]
 802532c:	f043 0308 	orr.w	r3, r3, #8
 8025330:	b2da      	uxtb	r2, r3
 8025332:	687b      	ldr	r3, [r7, #4]
 8025334:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8025336:	89fb      	ldrh	r3, [r7, #14]
 8025338:	2b08      	cmp	r3, #8
 802533a:	d003      	beq.n	8025344 <ethernet_input+0xa0>
 802533c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8025340:	d014      	beq.n	802536c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8025342:	e032      	b.n	80253aa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8025344:	683b      	ldr	r3, [r7, #0]
 8025346:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802534a:	f003 0308 	and.w	r3, r3, #8
 802534e:	2b00      	cmp	r3, #0
 8025350:	d024      	beq.n	802539c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8025352:	8afb      	ldrh	r3, [r7, #22]
 8025354:	4619      	mov	r1, r3
 8025356:	6878      	ldr	r0, [r7, #4]
 8025358:	f7f7 faa2 	bl	801c8a0 <pbuf_remove_header>
 802535c:	4603      	mov	r3, r0
 802535e:	2b00      	cmp	r3, #0
 8025360:	d11e      	bne.n	80253a0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8025362:	6839      	ldr	r1, [r7, #0]
 8025364:	6878      	ldr	r0, [r7, #4]
 8025366:	f7fe ff21 	bl	80241ac <ip4_input>
      break;
 802536a:	e013      	b.n	8025394 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 802536c:	683b      	ldr	r3, [r7, #0]
 802536e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8025372:	f003 0308 	and.w	r3, r3, #8
 8025376:	2b00      	cmp	r3, #0
 8025378:	d014      	beq.n	80253a4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802537a:	8afb      	ldrh	r3, [r7, #22]
 802537c:	4619      	mov	r1, r3
 802537e:	6878      	ldr	r0, [r7, #4]
 8025380:	f7f7 fa8e 	bl	801c8a0 <pbuf_remove_header>
 8025384:	4603      	mov	r3, r0
 8025386:	2b00      	cmp	r3, #0
 8025388:	d10e      	bne.n	80253a8 <ethernet_input+0x104>
        etharp_input(p, netif);
 802538a:	6839      	ldr	r1, [r7, #0]
 802538c:	6878      	ldr	r0, [r7, #4]
 802538e:	f7fe f89b 	bl	80234c8 <etharp_input>
      break;
 8025392:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8025394:	2300      	movs	r3, #0
 8025396:	e00c      	b.n	80253b2 <ethernet_input+0x10e>
    goto free_and_return;
 8025398:	bf00      	nop
 802539a:	e006      	b.n	80253aa <ethernet_input+0x106>
        goto free_and_return;
 802539c:	bf00      	nop
 802539e:	e004      	b.n	80253aa <ethernet_input+0x106>
        goto free_and_return;
 80253a0:	bf00      	nop
 80253a2:	e002      	b.n	80253aa <ethernet_input+0x106>
        goto free_and_return;
 80253a4:	bf00      	nop
 80253a6:	e000      	b.n	80253aa <ethernet_input+0x106>
        goto free_and_return;
 80253a8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80253aa:	6878      	ldr	r0, [r7, #4]
 80253ac:	f7f7 fafe 	bl	801c9ac <pbuf_free>
  return ERR_OK;
 80253b0:	2300      	movs	r3, #0
}
 80253b2:	4618      	mov	r0, r3
 80253b4:	3718      	adds	r7, #24
 80253b6:	46bd      	mov	sp, r7
 80253b8:	bd80      	pop	{r7, pc}
 80253ba:	bf00      	nop
 80253bc:	0802cf08 	.word	0x0802cf08

080253c0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80253c0:	b580      	push	{r7, lr}
 80253c2:	b086      	sub	sp, #24
 80253c4:	af00      	add	r7, sp, #0
 80253c6:	60f8      	str	r0, [r7, #12]
 80253c8:	60b9      	str	r1, [r7, #8]
 80253ca:	607a      	str	r2, [r7, #4]
 80253cc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80253ce:	8c3b      	ldrh	r3, [r7, #32]
 80253d0:	4618      	mov	r0, r3
 80253d2:	f7f5 fe51 	bl	801b078 <lwip_htons>
 80253d6:	4603      	mov	r3, r0
 80253d8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80253da:	210e      	movs	r1, #14
 80253dc:	68b8      	ldr	r0, [r7, #8]
 80253de:	f7f7 fa4f 	bl	801c880 <pbuf_add_header>
 80253e2:	4603      	mov	r3, r0
 80253e4:	2b00      	cmp	r3, #0
 80253e6:	d125      	bne.n	8025434 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80253e8:	68bb      	ldr	r3, [r7, #8]
 80253ea:	685b      	ldr	r3, [r3, #4]
 80253ec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80253ee:	693b      	ldr	r3, [r7, #16]
 80253f0:	8afa      	ldrh	r2, [r7, #22]
 80253f2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80253f4:	693b      	ldr	r3, [r7, #16]
 80253f6:	2206      	movs	r2, #6
 80253f8:	6839      	ldr	r1, [r7, #0]
 80253fa:	4618      	mov	r0, r3
 80253fc:	f001 fbcb 	bl	8026b96 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8025400:	693b      	ldr	r3, [r7, #16]
 8025402:	3306      	adds	r3, #6
 8025404:	2206      	movs	r2, #6
 8025406:	6879      	ldr	r1, [r7, #4]
 8025408:	4618      	mov	r0, r3
 802540a:	f001 fbc4 	bl	8026b96 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802540e:	68fb      	ldr	r3, [r7, #12]
 8025410:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8025414:	2b06      	cmp	r3, #6
 8025416:	d006      	beq.n	8025426 <ethernet_output+0x66>
 8025418:	4b0a      	ldr	r3, [pc, #40]	@ (8025444 <ethernet_output+0x84>)
 802541a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 802541e:	490a      	ldr	r1, [pc, #40]	@ (8025448 <ethernet_output+0x88>)
 8025420:	480a      	ldr	r0, [pc, #40]	@ (802544c <ethernet_output+0x8c>)
 8025422:	f001 fa39 	bl	8026898 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8025426:	68fb      	ldr	r3, [r7, #12]
 8025428:	699b      	ldr	r3, [r3, #24]
 802542a:	68b9      	ldr	r1, [r7, #8]
 802542c:	68f8      	ldr	r0, [r7, #12]
 802542e:	4798      	blx	r3
 8025430:	4603      	mov	r3, r0
 8025432:	e002      	b.n	802543a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8025434:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8025436:	f06f 0301 	mvn.w	r3, #1
}
 802543a:	4618      	mov	r0, r3
 802543c:	3718      	adds	r7, #24
 802543e:	46bd      	mov	sp, r7
 8025440:	bd80      	pop	{r7, pc}
 8025442:	bf00      	nop
 8025444:	0802b658 	.word	0x0802b658
 8025448:	0802b690 	.word	0x0802b690
 802544c:	0802b6c4 	.word	0x0802b6c4

08025450 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8025450:	b580      	push	{r7, lr}
 8025452:	b086      	sub	sp, #24
 8025454:	af00      	add	r7, sp, #0
 8025456:	6078      	str	r0, [r7, #4]
 8025458:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 802545a:	683b      	ldr	r3, [r7, #0]
 802545c:	60bb      	str	r3, [r7, #8]
 802545e:	2304      	movs	r3, #4
 8025460:	60fb      	str	r3, [r7, #12]
 8025462:	2300      	movs	r3, #0
 8025464:	613b      	str	r3, [r7, #16]
 8025466:	2300      	movs	r3, #0
 8025468:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802546a:	f107 0308 	add.w	r3, r7, #8
 802546e:	2100      	movs	r1, #0
 8025470:	4618      	mov	r0, r3
 8025472:	f7f2 fd4d 	bl	8017f10 <osMessageCreate>
 8025476:	4602      	mov	r2, r0
 8025478:	687b      	ldr	r3, [r7, #4]
 802547a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 802547c:	687b      	ldr	r3, [r7, #4]
 802547e:	681b      	ldr	r3, [r3, #0]
 8025480:	2b00      	cmp	r3, #0
 8025482:	d102      	bne.n	802548a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8025484:	f04f 33ff 	mov.w	r3, #4294967295
 8025488:	e000      	b.n	802548c <sys_mbox_new+0x3c>

  return ERR_OK;
 802548a:	2300      	movs	r3, #0
}
 802548c:	4618      	mov	r0, r3
 802548e:	3718      	adds	r7, #24
 8025490:	46bd      	mov	sp, r7
 8025492:	bd80      	pop	{r7, pc}

08025494 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8025494:	b580      	push	{r7, lr}
 8025496:	b084      	sub	sp, #16
 8025498:	af00      	add	r7, sp, #0
 802549a:	6078      	str	r0, [r7, #4]
 802549c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 802549e:	687b      	ldr	r3, [r7, #4]
 80254a0:	681b      	ldr	r3, [r3, #0]
 80254a2:	6839      	ldr	r1, [r7, #0]
 80254a4:	2200      	movs	r2, #0
 80254a6:	4618      	mov	r0, r3
 80254a8:	f7f2 fd5a 	bl	8017f60 <osMessagePut>
 80254ac:	4603      	mov	r3, r0
 80254ae:	2b00      	cmp	r3, #0
 80254b0:	d102      	bne.n	80254b8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80254b2:	2300      	movs	r3, #0
 80254b4:	73fb      	strb	r3, [r7, #15]
 80254b6:	e001      	b.n	80254bc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80254b8:	23ff      	movs	r3, #255	@ 0xff
 80254ba:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80254bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80254c0:	4618      	mov	r0, r3
 80254c2:	3710      	adds	r7, #16
 80254c4:	46bd      	mov	sp, r7
 80254c6:	bd80      	pop	{r7, pc}

080254c8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80254c8:	b580      	push	{r7, lr}
 80254ca:	b08c      	sub	sp, #48	@ 0x30
 80254cc:	af00      	add	r7, sp, #0
 80254ce:	61f8      	str	r0, [r7, #28]
 80254d0:	61b9      	str	r1, [r7, #24]
 80254d2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80254d4:	f7f2 fb3f 	bl	8017b56 <osKernelSysTick>
 80254d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80254da:	697b      	ldr	r3, [r7, #20]
 80254dc:	2b00      	cmp	r3, #0
 80254de:	d017      	beq.n	8025510 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80254e0:	69fb      	ldr	r3, [r7, #28]
 80254e2:	6819      	ldr	r1, [r3, #0]
 80254e4:	f107 0320 	add.w	r3, r7, #32
 80254e8:	697a      	ldr	r2, [r7, #20]
 80254ea:	4618      	mov	r0, r3
 80254ec:	f7f2 fd78 	bl	8017fe0 <osMessageGet>

    if(event.status == osEventMessage)
 80254f0:	6a3b      	ldr	r3, [r7, #32]
 80254f2:	2b10      	cmp	r3, #16
 80254f4:	d109      	bne.n	802550a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80254f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80254f8:	461a      	mov	r2, r3
 80254fa:	69bb      	ldr	r3, [r7, #24]
 80254fc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80254fe:	f7f2 fb2a 	bl	8017b56 <osKernelSysTick>
 8025502:	4602      	mov	r2, r0
 8025504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025506:	1ad3      	subs	r3, r2, r3
 8025508:	e019      	b.n	802553e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 802550a:	f04f 33ff 	mov.w	r3, #4294967295
 802550e:	e016      	b.n	802553e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8025510:	69fb      	ldr	r3, [r7, #28]
 8025512:	6819      	ldr	r1, [r3, #0]
 8025514:	463b      	mov	r3, r7
 8025516:	f04f 32ff 	mov.w	r2, #4294967295
 802551a:	4618      	mov	r0, r3
 802551c:	f7f2 fd60 	bl	8017fe0 <osMessageGet>
 8025520:	f107 0320 	add.w	r3, r7, #32
 8025524:	463a      	mov	r2, r7
 8025526:	ca07      	ldmia	r2, {r0, r1, r2}
 8025528:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 802552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802552e:	461a      	mov	r2, r3
 8025530:	69bb      	ldr	r3, [r7, #24]
 8025532:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8025534:	f7f2 fb0f 	bl	8017b56 <osKernelSysTick>
 8025538:	4602      	mov	r2, r0
 802553a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802553c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 802553e:	4618      	mov	r0, r3
 8025540:	3730      	adds	r7, #48	@ 0x30
 8025542:	46bd      	mov	sp, r7
 8025544:	bd80      	pop	{r7, pc}

08025546 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8025546:	b480      	push	{r7}
 8025548:	b083      	sub	sp, #12
 802554a:	af00      	add	r7, sp, #0
 802554c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 802554e:	687b      	ldr	r3, [r7, #4]
 8025550:	681b      	ldr	r3, [r3, #0]
 8025552:	2b00      	cmp	r3, #0
 8025554:	d101      	bne.n	802555a <sys_mbox_valid+0x14>
    return 0;
 8025556:	2300      	movs	r3, #0
 8025558:	e000      	b.n	802555c <sys_mbox_valid+0x16>
  else
    return 1;
 802555a:	2301      	movs	r3, #1
}
 802555c:	4618      	mov	r0, r3
 802555e:	370c      	adds	r7, #12
 8025560:	46bd      	mov	sp, r7
 8025562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025566:	4770      	bx	lr

08025568 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8025568:	b580      	push	{r7, lr}
 802556a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 802556c:	4803      	ldr	r0, [pc, #12]	@ (802557c <sys_init+0x14>)
 802556e:	f7f2 fb6e 	bl	8017c4e <osMutexCreate>
 8025572:	4603      	mov	r3, r0
 8025574:	4a02      	ldr	r2, [pc, #8]	@ (8025580 <sys_init+0x18>)
 8025576:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8025578:	bf00      	nop
 802557a:	bd80      	pop	{r7, pc}
 802557c:	0802cf18 	.word	0x0802cf18
 8025580:	2003c630 	.word	0x2003c630

08025584 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8025584:	b580      	push	{r7, lr}
 8025586:	b084      	sub	sp, #16
 8025588:	af00      	add	r7, sp, #0
 802558a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 802558c:	2300      	movs	r3, #0
 802558e:	60bb      	str	r3, [r7, #8]
 8025590:	2300      	movs	r3, #0
 8025592:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8025594:	f107 0308 	add.w	r3, r7, #8
 8025598:	4618      	mov	r0, r3
 802559a:	f7f2 fb58 	bl	8017c4e <osMutexCreate>
 802559e:	4602      	mov	r2, r0
 80255a0:	687b      	ldr	r3, [r7, #4]
 80255a2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80255a4:	687b      	ldr	r3, [r7, #4]
 80255a6:	681b      	ldr	r3, [r3, #0]
 80255a8:	2b00      	cmp	r3, #0
 80255aa:	d102      	bne.n	80255b2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80255ac:	f04f 33ff 	mov.w	r3, #4294967295
 80255b0:	e000      	b.n	80255b4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80255b2:	2300      	movs	r3, #0
}
 80255b4:	4618      	mov	r0, r3
 80255b6:	3710      	adds	r7, #16
 80255b8:	46bd      	mov	sp, r7
 80255ba:	bd80      	pop	{r7, pc}

080255bc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80255bc:	b580      	push	{r7, lr}
 80255be:	b082      	sub	sp, #8
 80255c0:	af00      	add	r7, sp, #0
 80255c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80255c4:	687b      	ldr	r3, [r7, #4]
 80255c6:	681b      	ldr	r3, [r3, #0]
 80255c8:	f04f 31ff 	mov.w	r1, #4294967295
 80255cc:	4618      	mov	r0, r3
 80255ce:	f7f2 fb57 	bl	8017c80 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80255d2:	bf00      	nop
 80255d4:	3708      	adds	r7, #8
 80255d6:	46bd      	mov	sp, r7
 80255d8:	bd80      	pop	{r7, pc}

080255da <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80255da:	b580      	push	{r7, lr}
 80255dc:	b082      	sub	sp, #8
 80255de:	af00      	add	r7, sp, #0
 80255e0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80255e2:	687b      	ldr	r3, [r7, #4]
 80255e4:	681b      	ldr	r3, [r3, #0]
 80255e6:	4618      	mov	r0, r3
 80255e8:	f7f2 fb98 	bl	8017d1c <osMutexRelease>
}
 80255ec:	bf00      	nop
 80255ee:	3708      	adds	r7, #8
 80255f0:	46bd      	mov	sp, r7
 80255f2:	bd80      	pop	{r7, pc}

080255f4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80255f4:	b580      	push	{r7, lr}
 80255f6:	b08c      	sub	sp, #48	@ 0x30
 80255f8:	af00      	add	r7, sp, #0
 80255fa:	60f8      	str	r0, [r7, #12]
 80255fc:	60b9      	str	r1, [r7, #8]
 80255fe:	607a      	str	r2, [r7, #4]
 8025600:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8025602:	f107 0314 	add.w	r3, r7, #20
 8025606:	2200      	movs	r2, #0
 8025608:	601a      	str	r2, [r3, #0]
 802560a:	605a      	str	r2, [r3, #4]
 802560c:	609a      	str	r2, [r3, #8]
 802560e:	60da      	str	r2, [r3, #12]
 8025610:	611a      	str	r2, [r3, #16]
 8025612:	615a      	str	r2, [r3, #20]
 8025614:	619a      	str	r2, [r3, #24]
 8025616:	68fb      	ldr	r3, [r7, #12]
 8025618:	617b      	str	r3, [r7, #20]
 802561a:	68bb      	ldr	r3, [r7, #8]
 802561c:	61bb      	str	r3, [r7, #24]
 802561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025620:	b21b      	sxth	r3, r3
 8025622:	83bb      	strh	r3, [r7, #28]
 8025624:	683b      	ldr	r3, [r7, #0]
 8025626:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8025628:	f107 0314 	add.w	r3, r7, #20
 802562c:	6879      	ldr	r1, [r7, #4]
 802562e:	4618      	mov	r0, r3
 8025630:	f7f2 faa1 	bl	8017b76 <osThreadCreate>
 8025634:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8025636:	4618      	mov	r0, r3
 8025638:	3730      	adds	r7, #48	@ 0x30
 802563a:	46bd      	mov	sp, r7
 802563c:	bd80      	pop	{r7, pc}
	...

08025640 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8025640:	b580      	push	{r7, lr}
 8025642:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8025644:	4b04      	ldr	r3, [pc, #16]	@ (8025658 <sys_arch_protect+0x18>)
 8025646:	681b      	ldr	r3, [r3, #0]
 8025648:	f04f 31ff 	mov.w	r1, #4294967295
 802564c:	4618      	mov	r0, r3
 802564e:	f7f2 fb17 	bl	8017c80 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8025652:	2301      	movs	r3, #1
}
 8025654:	4618      	mov	r0, r3
 8025656:	bd80      	pop	{r7, pc}
 8025658:	2003c630 	.word	0x2003c630

0802565c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 802565c:	b580      	push	{r7, lr}
 802565e:	b082      	sub	sp, #8
 8025660:	af00      	add	r7, sp, #0
 8025662:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8025664:	4b04      	ldr	r3, [pc, #16]	@ (8025678 <sys_arch_unprotect+0x1c>)
 8025666:	681b      	ldr	r3, [r3, #0]
 8025668:	4618      	mov	r0, r3
 802566a:	f7f2 fb57 	bl	8017d1c <osMutexRelease>
}
 802566e:	bf00      	nop
 8025670:	3708      	adds	r7, #8
 8025672:	46bd      	mov	sp, r7
 8025674:	bd80      	pop	{r7, pc}
 8025676:	bf00      	nop
 8025678:	2003c630 	.word	0x2003c630

0802567c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 802567c:	b580      	push	{r7, lr}
 802567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8025680:	2201      	movs	r2, #1
 8025682:	490e      	ldr	r1, [pc, #56]	@ (80256bc <MX_USB_HOST_Init+0x40>)
 8025684:	480e      	ldr	r0, [pc, #56]	@ (80256c0 <MX_USB_HOST_Init+0x44>)
 8025686:	f7f0 fb1d 	bl	8015cc4 <USBH_Init>
 802568a:	4603      	mov	r3, r0
 802568c:	2b00      	cmp	r3, #0
 802568e:	d001      	beq.n	8025694 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8025690:	f7dd f982 	bl	8002998 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8025694:	490b      	ldr	r1, [pc, #44]	@ (80256c4 <MX_USB_HOST_Init+0x48>)
 8025696:	480a      	ldr	r0, [pc, #40]	@ (80256c0 <MX_USB_HOST_Init+0x44>)
 8025698:	f7f0 fbe9 	bl	8015e6e <USBH_RegisterClass>
 802569c:	4603      	mov	r3, r0
 802569e:	2b00      	cmp	r3, #0
 80256a0:	d001      	beq.n	80256a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80256a2:	f7dd f979 	bl	8002998 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80256a6:	4806      	ldr	r0, [pc, #24]	@ (80256c0 <MX_USB_HOST_Init+0x44>)
 80256a8:	f7f0 fc6d 	bl	8015f86 <USBH_Start>
 80256ac:	4603      	mov	r3, r0
 80256ae:	2b00      	cmp	r3, #0
 80256b0:	d001      	beq.n	80256b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80256b2:	f7dd f971 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80256b6:	bf00      	nop
 80256b8:	bd80      	pop	{r7, pc}
 80256ba:	bf00      	nop
 80256bc:	080256c9 	.word	0x080256c9
 80256c0:	2003c634 	.word	0x2003c634
 80256c4:	2001007c 	.word	0x2001007c

080256c8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80256c8:	b480      	push	{r7}
 80256ca:	b083      	sub	sp, #12
 80256cc:	af00      	add	r7, sp, #0
 80256ce:	6078      	str	r0, [r7, #4]
 80256d0:	460b      	mov	r3, r1
 80256d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80256d4:	78fb      	ldrb	r3, [r7, #3]
 80256d6:	3b01      	subs	r3, #1
 80256d8:	2b04      	cmp	r3, #4
 80256da:	d819      	bhi.n	8025710 <USBH_UserProcess+0x48>
 80256dc:	a201      	add	r2, pc, #4	@ (adr r2, 80256e4 <USBH_UserProcess+0x1c>)
 80256de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80256e2:	bf00      	nop
 80256e4:	08025711 	.word	0x08025711
 80256e8:	08025701 	.word	0x08025701
 80256ec:	08025711 	.word	0x08025711
 80256f0:	08025709 	.word	0x08025709
 80256f4:	080256f9 	.word	0x080256f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80256f8:	4b09      	ldr	r3, [pc, #36]	@ (8025720 <USBH_UserProcess+0x58>)
 80256fa:	2203      	movs	r2, #3
 80256fc:	701a      	strb	r2, [r3, #0]
  break;
 80256fe:	e008      	b.n	8025712 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8025700:	4b07      	ldr	r3, [pc, #28]	@ (8025720 <USBH_UserProcess+0x58>)
 8025702:	2202      	movs	r2, #2
 8025704:	701a      	strb	r2, [r3, #0]
  break;
 8025706:	e004      	b.n	8025712 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8025708:	4b05      	ldr	r3, [pc, #20]	@ (8025720 <USBH_UserProcess+0x58>)
 802570a:	2201      	movs	r2, #1
 802570c:	701a      	strb	r2, [r3, #0]
  break;
 802570e:	e000      	b.n	8025712 <USBH_UserProcess+0x4a>

  default:
  break;
 8025710:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8025712:	bf00      	nop
 8025714:	370c      	adds	r7, #12
 8025716:	46bd      	mov	sp, r7
 8025718:	f85d 7b04 	ldr.w	r7, [sp], #4
 802571c:	4770      	bx	lr
 802571e:	bf00      	nop
 8025720:	2003ca18 	.word	0x2003ca18

08025724 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8025724:	b580      	push	{r7, lr}
 8025726:	b08a      	sub	sp, #40	@ 0x28
 8025728:	af00      	add	r7, sp, #0
 802572a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802572c:	f107 0314 	add.w	r3, r7, #20
 8025730:	2200      	movs	r2, #0
 8025732:	601a      	str	r2, [r3, #0]
 8025734:	605a      	str	r2, [r3, #4]
 8025736:	609a      	str	r2, [r3, #8]
 8025738:	60da      	str	r2, [r3, #12]
 802573a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 802573c:	687b      	ldr	r3, [r7, #4]
 802573e:	681b      	ldr	r3, [r3, #0]
 8025740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8025744:	d13c      	bne.n	80257c0 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025746:	4b20      	ldr	r3, [pc, #128]	@ (80257c8 <HAL_HCD_MspInit+0xa4>)
 8025748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802574a:	4a1f      	ldr	r2, [pc, #124]	@ (80257c8 <HAL_HCD_MspInit+0xa4>)
 802574c:	f043 0301 	orr.w	r3, r3, #1
 8025750:	6313      	str	r3, [r2, #48]	@ 0x30
 8025752:	4b1d      	ldr	r3, [pc, #116]	@ (80257c8 <HAL_HCD_MspInit+0xa4>)
 8025754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025756:	f003 0301 	and.w	r3, r3, #1
 802575a:	613b      	str	r3, [r7, #16]
 802575c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 802575e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8025762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025764:	2302      	movs	r3, #2
 8025766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025768:	2300      	movs	r3, #0
 802576a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802576c:	2303      	movs	r3, #3
 802576e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8025770:	230a      	movs	r3, #10
 8025772:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025774:	f107 0314 	add.w	r3, r7, #20
 8025778:	4619      	mov	r1, r3
 802577a:	4814      	ldr	r0, [pc, #80]	@ (80257cc <HAL_HCD_MspInit+0xa8>)
 802577c:	f7e5 ffc4 	bl	800b708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8025780:	4b11      	ldr	r3, [pc, #68]	@ (80257c8 <HAL_HCD_MspInit+0xa4>)
 8025782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025784:	4a10      	ldr	r2, [pc, #64]	@ (80257c8 <HAL_HCD_MspInit+0xa4>)
 8025786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802578a:	6353      	str	r3, [r2, #52]	@ 0x34
 802578c:	4b0e      	ldr	r3, [pc, #56]	@ (80257c8 <HAL_HCD_MspInit+0xa4>)
 802578e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8025794:	60fb      	str	r3, [r7, #12]
 8025796:	68fb      	ldr	r3, [r7, #12]
 8025798:	4b0b      	ldr	r3, [pc, #44]	@ (80257c8 <HAL_HCD_MspInit+0xa4>)
 802579a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802579c:	4a0a      	ldr	r2, [pc, #40]	@ (80257c8 <HAL_HCD_MspInit+0xa4>)
 802579e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80257a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80257a4:	4b08      	ldr	r3, [pc, #32]	@ (80257c8 <HAL_HCD_MspInit+0xa4>)
 80257a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80257a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80257ac:	60bb      	str	r3, [r7, #8]
 80257ae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80257b0:	2200      	movs	r2, #0
 80257b2:	2105      	movs	r1, #5
 80257b4:	2043      	movs	r0, #67	@ 0x43
 80257b6:	f7e1 fec3 	bl	8007540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80257ba:	2043      	movs	r0, #67	@ 0x43
 80257bc:	f7e1 fedc 	bl	8007578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80257c0:	bf00      	nop
 80257c2:	3728      	adds	r7, #40	@ 0x28
 80257c4:	46bd      	mov	sp, r7
 80257c6:	bd80      	pop	{r7, pc}
 80257c8:	40023800 	.word	0x40023800
 80257cc:	40020000 	.word	0x40020000

080257d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80257d0:	b580      	push	{r7, lr}
 80257d2:	b082      	sub	sp, #8
 80257d4:	af00      	add	r7, sp, #0
 80257d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80257d8:	687b      	ldr	r3, [r7, #4]
 80257da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80257de:	4618      	mov	r0, r3
 80257e0:	f7f1 f883 	bl	80168ea <USBH_LL_IncTimer>
}
 80257e4:	bf00      	nop
 80257e6:	3708      	adds	r7, #8
 80257e8:	46bd      	mov	sp, r7
 80257ea:	bd80      	pop	{r7, pc}

080257ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80257ec:	b580      	push	{r7, lr}
 80257ee:	b082      	sub	sp, #8
 80257f0:	af00      	add	r7, sp, #0
 80257f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80257f4:	687b      	ldr	r3, [r7, #4]
 80257f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80257fa:	4618      	mov	r0, r3
 80257fc:	f7f1 f8c7 	bl	801698e <USBH_LL_Connect>
}
 8025800:	bf00      	nop
 8025802:	3708      	adds	r7, #8
 8025804:	46bd      	mov	sp, r7
 8025806:	bd80      	pop	{r7, pc}

08025808 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8025808:	b580      	push	{r7, lr}
 802580a:	b082      	sub	sp, #8
 802580c:	af00      	add	r7, sp, #0
 802580e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8025810:	687b      	ldr	r3, [r7, #4]
 8025812:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8025816:	4618      	mov	r0, r3
 8025818:	f7f1 f8dc 	bl	80169d4 <USBH_LL_Disconnect>
}
 802581c:	bf00      	nop
 802581e:	3708      	adds	r7, #8
 8025820:	46bd      	mov	sp, r7
 8025822:	bd80      	pop	{r7, pc}

08025824 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8025824:	b580      	push	{r7, lr}
 8025826:	b082      	sub	sp, #8
 8025828:	af00      	add	r7, sp, #0
 802582a:	6078      	str	r0, [r7, #4]
 802582c:	460b      	mov	r3, r1
 802582e:	70fb      	strb	r3, [r7, #3]
 8025830:	4613      	mov	r3, r2
 8025832:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8025834:	687b      	ldr	r3, [r7, #4]
 8025836:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 802583a:	4618      	mov	r0, r3
 802583c:	f7f1 f911 	bl	8016a62 <USBH_LL_NotifyURBChange>
#endif
}
 8025840:	bf00      	nop
 8025842:	3708      	adds	r7, #8
 8025844:	46bd      	mov	sp, r7
 8025846:	bd80      	pop	{r7, pc}

08025848 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8025848:	b580      	push	{r7, lr}
 802584a:	b082      	sub	sp, #8
 802584c:	af00      	add	r7, sp, #0
 802584e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8025850:	687b      	ldr	r3, [r7, #4]
 8025852:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8025856:	4618      	mov	r0, r3
 8025858:	f7f1 f871 	bl	801693e <USBH_LL_PortEnabled>
}
 802585c:	bf00      	nop
 802585e:	3708      	adds	r7, #8
 8025860:	46bd      	mov	sp, r7
 8025862:	bd80      	pop	{r7, pc}

08025864 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8025864:	b580      	push	{r7, lr}
 8025866:	b082      	sub	sp, #8
 8025868:	af00      	add	r7, sp, #0
 802586a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802586c:	687b      	ldr	r3, [r7, #4]
 802586e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8025872:	4618      	mov	r0, r3
 8025874:	f7f1 f87d 	bl	8016972 <USBH_LL_PortDisabled>
}
 8025878:	bf00      	nop
 802587a:	3708      	adds	r7, #8
 802587c:	46bd      	mov	sp, r7
 802587e:	bd80      	pop	{r7, pc}

08025880 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8025880:	b580      	push	{r7, lr}
 8025882:	b082      	sub	sp, #8
 8025884:	af00      	add	r7, sp, #0
 8025886:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8025888:	687b      	ldr	r3, [r7, #4]
 802588a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 802588e:	2b01      	cmp	r3, #1
 8025890:	d12a      	bne.n	80258e8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8025892:	4a18      	ldr	r2, [pc, #96]	@ (80258f4 <USBH_LL_Init+0x74>)
 8025894:	687b      	ldr	r3, [r7, #4]
 8025896:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 802589a:	687b      	ldr	r3, [r7, #4]
 802589c:	4a15      	ldr	r2, [pc, #84]	@ (80258f4 <USBH_LL_Init+0x74>)
 802589e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80258a2:	4b14      	ldr	r3, [pc, #80]	@ (80258f4 <USBH_LL_Init+0x74>)
 80258a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80258a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80258aa:	4b12      	ldr	r3, [pc, #72]	@ (80258f4 <USBH_LL_Init+0x74>)
 80258ac:	2208      	movs	r2, #8
 80258ae:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80258b0:	4b10      	ldr	r3, [pc, #64]	@ (80258f4 <USBH_LL_Init+0x74>)
 80258b2:	2201      	movs	r2, #1
 80258b4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80258b6:	4b0f      	ldr	r3, [pc, #60]	@ (80258f4 <USBH_LL_Init+0x74>)
 80258b8:	2200      	movs	r2, #0
 80258ba:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80258bc:	4b0d      	ldr	r3, [pc, #52]	@ (80258f4 <USBH_LL_Init+0x74>)
 80258be:	2202      	movs	r2, #2
 80258c0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80258c2:	4b0c      	ldr	r3, [pc, #48]	@ (80258f4 <USBH_LL_Init+0x74>)
 80258c4:	2200      	movs	r2, #0
 80258c6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80258c8:	480a      	ldr	r0, [pc, #40]	@ (80258f4 <USBH_LL_Init+0x74>)
 80258ca:	f7e6 fa08 	bl	800bcde <HAL_HCD_Init>
 80258ce:	4603      	mov	r3, r0
 80258d0:	2b00      	cmp	r3, #0
 80258d2:	d001      	beq.n	80258d8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80258d4:	f7dd f860 	bl	8002998 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80258d8:	4806      	ldr	r0, [pc, #24]	@ (80258f4 <USBH_LL_Init+0x74>)
 80258da:	f7e6 fe69 	bl	800c5b0 <HAL_HCD_GetCurrentFrame>
 80258de:	4603      	mov	r3, r0
 80258e0:	4619      	mov	r1, r3
 80258e2:	6878      	ldr	r0, [r7, #4]
 80258e4:	f7f0 fff2 	bl	80168cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80258e8:	2300      	movs	r3, #0
}
 80258ea:	4618      	mov	r0, r3
 80258ec:	3708      	adds	r7, #8
 80258ee:	46bd      	mov	sp, r7
 80258f0:	bd80      	pop	{r7, pc}
 80258f2:	bf00      	nop
 80258f4:	2003ca1c 	.word	0x2003ca1c

080258f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80258f8:	b580      	push	{r7, lr}
 80258fa:	b084      	sub	sp, #16
 80258fc:	af00      	add	r7, sp, #0
 80258fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025900:	2300      	movs	r3, #0
 8025902:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8025904:	2300      	movs	r3, #0
 8025906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8025908:	687b      	ldr	r3, [r7, #4]
 802590a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802590e:	4618      	mov	r0, r3
 8025910:	f7e6 fdd6 	bl	800c4c0 <HAL_HCD_Start>
 8025914:	4603      	mov	r3, r0
 8025916:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8025918:	7bfb      	ldrb	r3, [r7, #15]
 802591a:	4618      	mov	r0, r3
 802591c:	f000 f95e 	bl	8025bdc <USBH_Get_USB_Status>
 8025920:	4603      	mov	r3, r0
 8025922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8025924:	7bbb      	ldrb	r3, [r7, #14]
}
 8025926:	4618      	mov	r0, r3
 8025928:	3710      	adds	r7, #16
 802592a:	46bd      	mov	sp, r7
 802592c:	bd80      	pop	{r7, pc}

0802592e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802592e:	b580      	push	{r7, lr}
 8025930:	b084      	sub	sp, #16
 8025932:	af00      	add	r7, sp, #0
 8025934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025936:	2300      	movs	r3, #0
 8025938:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802593a:	2300      	movs	r3, #0
 802593c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802593e:	687b      	ldr	r3, [r7, #4]
 8025940:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8025944:	4618      	mov	r0, r3
 8025946:	f7e6 fdde 	bl	800c506 <HAL_HCD_Stop>
 802594a:	4603      	mov	r3, r0
 802594c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802594e:	7bfb      	ldrb	r3, [r7, #15]
 8025950:	4618      	mov	r0, r3
 8025952:	f000 f943 	bl	8025bdc <USBH_Get_USB_Status>
 8025956:	4603      	mov	r3, r0
 8025958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802595a:	7bbb      	ldrb	r3, [r7, #14]
}
 802595c:	4618      	mov	r0, r3
 802595e:	3710      	adds	r7, #16
 8025960:	46bd      	mov	sp, r7
 8025962:	bd80      	pop	{r7, pc}

08025964 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8025964:	b580      	push	{r7, lr}
 8025966:	b084      	sub	sp, #16
 8025968:	af00      	add	r7, sp, #0
 802596a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802596c:	2301      	movs	r3, #1
 802596e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8025970:	687b      	ldr	r3, [r7, #4]
 8025972:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8025976:	4618      	mov	r0, r3
 8025978:	f7e6 fe28 	bl	800c5cc <HAL_HCD_GetCurrentSpeed>
 802597c:	4603      	mov	r3, r0
 802597e:	2b02      	cmp	r3, #2
 8025980:	d00c      	beq.n	802599c <USBH_LL_GetSpeed+0x38>
 8025982:	2b02      	cmp	r3, #2
 8025984:	d80d      	bhi.n	80259a2 <USBH_LL_GetSpeed+0x3e>
 8025986:	2b00      	cmp	r3, #0
 8025988:	d002      	beq.n	8025990 <USBH_LL_GetSpeed+0x2c>
 802598a:	2b01      	cmp	r3, #1
 802598c:	d003      	beq.n	8025996 <USBH_LL_GetSpeed+0x32>
 802598e:	e008      	b.n	80259a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8025990:	2300      	movs	r3, #0
 8025992:	73fb      	strb	r3, [r7, #15]
    break;
 8025994:	e008      	b.n	80259a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8025996:	2301      	movs	r3, #1
 8025998:	73fb      	strb	r3, [r7, #15]
    break;
 802599a:	e005      	b.n	80259a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 802599c:	2302      	movs	r3, #2
 802599e:	73fb      	strb	r3, [r7, #15]
    break;
 80259a0:	e002      	b.n	80259a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80259a2:	2301      	movs	r3, #1
 80259a4:	73fb      	strb	r3, [r7, #15]
    break;
 80259a6:	bf00      	nop
  }
  return  speed;
 80259a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80259aa:	4618      	mov	r0, r3
 80259ac:	3710      	adds	r7, #16
 80259ae:	46bd      	mov	sp, r7
 80259b0:	bd80      	pop	{r7, pc}

080259b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80259b2:	b580      	push	{r7, lr}
 80259b4:	b084      	sub	sp, #16
 80259b6:	af00      	add	r7, sp, #0
 80259b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80259ba:	2300      	movs	r3, #0
 80259bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80259be:	2300      	movs	r3, #0
 80259c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80259c2:	687b      	ldr	r3, [r7, #4]
 80259c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80259c8:	4618      	mov	r0, r3
 80259ca:	f7e6 fdb9 	bl	800c540 <HAL_HCD_ResetPort>
 80259ce:	4603      	mov	r3, r0
 80259d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80259d2:	7bfb      	ldrb	r3, [r7, #15]
 80259d4:	4618      	mov	r0, r3
 80259d6:	f000 f901 	bl	8025bdc <USBH_Get_USB_Status>
 80259da:	4603      	mov	r3, r0
 80259dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80259de:	7bbb      	ldrb	r3, [r7, #14]
}
 80259e0:	4618      	mov	r0, r3
 80259e2:	3710      	adds	r7, #16
 80259e4:	46bd      	mov	sp, r7
 80259e6:	bd80      	pop	{r7, pc}

080259e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80259e8:	b580      	push	{r7, lr}
 80259ea:	b082      	sub	sp, #8
 80259ec:	af00      	add	r7, sp, #0
 80259ee:	6078      	str	r0, [r7, #4]
 80259f0:	460b      	mov	r3, r1
 80259f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80259f4:	687b      	ldr	r3, [r7, #4]
 80259f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80259fa:	78fa      	ldrb	r2, [r7, #3]
 80259fc:	4611      	mov	r1, r2
 80259fe:	4618      	mov	r0, r3
 8025a00:	f7e6 fdc1 	bl	800c586 <HAL_HCD_HC_GetXferCount>
 8025a04:	4603      	mov	r3, r0
}
 8025a06:	4618      	mov	r0, r3
 8025a08:	3708      	adds	r7, #8
 8025a0a:	46bd      	mov	sp, r7
 8025a0c:	bd80      	pop	{r7, pc}

08025a0e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8025a0e:	b590      	push	{r4, r7, lr}
 8025a10:	b089      	sub	sp, #36	@ 0x24
 8025a12:	af04      	add	r7, sp, #16
 8025a14:	6078      	str	r0, [r7, #4]
 8025a16:	4608      	mov	r0, r1
 8025a18:	4611      	mov	r1, r2
 8025a1a:	461a      	mov	r2, r3
 8025a1c:	4603      	mov	r3, r0
 8025a1e:	70fb      	strb	r3, [r7, #3]
 8025a20:	460b      	mov	r3, r1
 8025a22:	70bb      	strb	r3, [r7, #2]
 8025a24:	4613      	mov	r3, r2
 8025a26:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025a28:	2300      	movs	r3, #0
 8025a2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8025a2c:	2300      	movs	r3, #0
 8025a2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8025a30:	687b      	ldr	r3, [r7, #4]
 8025a32:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8025a36:	787c      	ldrb	r4, [r7, #1]
 8025a38:	78ba      	ldrb	r2, [r7, #2]
 8025a3a:	78f9      	ldrb	r1, [r7, #3]
 8025a3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8025a3e:	9302      	str	r3, [sp, #8]
 8025a40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8025a44:	9301      	str	r3, [sp, #4]
 8025a46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025a4a:	9300      	str	r3, [sp, #0]
 8025a4c:	4623      	mov	r3, r4
 8025a4e:	f7e6 f9ad 	bl	800bdac <HAL_HCD_HC_Init>
 8025a52:	4603      	mov	r3, r0
 8025a54:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8025a56:	7bfb      	ldrb	r3, [r7, #15]
 8025a58:	4618      	mov	r0, r3
 8025a5a:	f000 f8bf 	bl	8025bdc <USBH_Get_USB_Status>
 8025a5e:	4603      	mov	r3, r0
 8025a60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8025a62:	7bbb      	ldrb	r3, [r7, #14]
}
 8025a64:	4618      	mov	r0, r3
 8025a66:	3714      	adds	r7, #20
 8025a68:	46bd      	mov	sp, r7
 8025a6a:	bd90      	pop	{r4, r7, pc}

08025a6c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8025a6c:	b580      	push	{r7, lr}
 8025a6e:	b084      	sub	sp, #16
 8025a70:	af00      	add	r7, sp, #0
 8025a72:	6078      	str	r0, [r7, #4]
 8025a74:	460b      	mov	r3, r1
 8025a76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025a78:	2300      	movs	r3, #0
 8025a7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8025a7c:	2300      	movs	r3, #0
 8025a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8025a80:	687b      	ldr	r3, [r7, #4]
 8025a82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8025a86:	78fa      	ldrb	r2, [r7, #3]
 8025a88:	4611      	mov	r1, r2
 8025a8a:	4618      	mov	r0, r3
 8025a8c:	f7e6 fa46 	bl	800bf1c <HAL_HCD_HC_Halt>
 8025a90:	4603      	mov	r3, r0
 8025a92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8025a94:	7bfb      	ldrb	r3, [r7, #15]
 8025a96:	4618      	mov	r0, r3
 8025a98:	f000 f8a0 	bl	8025bdc <USBH_Get_USB_Status>
 8025a9c:	4603      	mov	r3, r0
 8025a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8025aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8025aa2:	4618      	mov	r0, r3
 8025aa4:	3710      	adds	r7, #16
 8025aa6:	46bd      	mov	sp, r7
 8025aa8:	bd80      	pop	{r7, pc}

08025aaa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8025aaa:	b590      	push	{r4, r7, lr}
 8025aac:	b089      	sub	sp, #36	@ 0x24
 8025aae:	af04      	add	r7, sp, #16
 8025ab0:	6078      	str	r0, [r7, #4]
 8025ab2:	4608      	mov	r0, r1
 8025ab4:	4611      	mov	r1, r2
 8025ab6:	461a      	mov	r2, r3
 8025ab8:	4603      	mov	r3, r0
 8025aba:	70fb      	strb	r3, [r7, #3]
 8025abc:	460b      	mov	r3, r1
 8025abe:	70bb      	strb	r3, [r7, #2]
 8025ac0:	4613      	mov	r3, r2
 8025ac2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025ac4:	2300      	movs	r3, #0
 8025ac6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8025ac8:	2300      	movs	r3, #0
 8025aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8025acc:	687b      	ldr	r3, [r7, #4]
 8025ace:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8025ad2:	787c      	ldrb	r4, [r7, #1]
 8025ad4:	78ba      	ldrb	r2, [r7, #2]
 8025ad6:	78f9      	ldrb	r1, [r7, #3]
 8025ad8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8025adc:	9303      	str	r3, [sp, #12]
 8025ade:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8025ae0:	9302      	str	r3, [sp, #8]
 8025ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025ae4:	9301      	str	r3, [sp, #4]
 8025ae6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025aea:	9300      	str	r3, [sp, #0]
 8025aec:	4623      	mov	r3, r4
 8025aee:	f7e6 fa39 	bl	800bf64 <HAL_HCD_HC_SubmitRequest>
 8025af2:	4603      	mov	r3, r0
 8025af4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8025af6:	7bfb      	ldrb	r3, [r7, #15]
 8025af8:	4618      	mov	r0, r3
 8025afa:	f000 f86f 	bl	8025bdc <USBH_Get_USB_Status>
 8025afe:	4603      	mov	r3, r0
 8025b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8025b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8025b04:	4618      	mov	r0, r3
 8025b06:	3714      	adds	r7, #20
 8025b08:	46bd      	mov	sp, r7
 8025b0a:	bd90      	pop	{r4, r7, pc}

08025b0c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8025b0c:	b580      	push	{r7, lr}
 8025b0e:	b082      	sub	sp, #8
 8025b10:	af00      	add	r7, sp, #0
 8025b12:	6078      	str	r0, [r7, #4]
 8025b14:	460b      	mov	r3, r1
 8025b16:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8025b18:	687b      	ldr	r3, [r7, #4]
 8025b1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8025b1e:	78fa      	ldrb	r2, [r7, #3]
 8025b20:	4611      	mov	r1, r2
 8025b22:	4618      	mov	r0, r3
 8025b24:	f7e6 fd1a 	bl	800c55c <HAL_HCD_HC_GetURBState>
 8025b28:	4603      	mov	r3, r0
}
 8025b2a:	4618      	mov	r0, r3
 8025b2c:	3708      	adds	r7, #8
 8025b2e:	46bd      	mov	sp, r7
 8025b30:	bd80      	pop	{r7, pc}

08025b32 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8025b32:	b580      	push	{r7, lr}
 8025b34:	b082      	sub	sp, #8
 8025b36:	af00      	add	r7, sp, #0
 8025b38:	6078      	str	r0, [r7, #4]
 8025b3a:	460b      	mov	r3, r1
 8025b3c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8025b3e:	687b      	ldr	r3, [r7, #4]
 8025b40:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8025b44:	2b01      	cmp	r3, #1
 8025b46:	d103      	bne.n	8025b50 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8025b48:	78fb      	ldrb	r3, [r7, #3]
 8025b4a:	4618      	mov	r0, r3
 8025b4c:	f000 f872 	bl	8025c34 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8025b50:	20c8      	movs	r0, #200	@ 0xc8
 8025b52:	f7e1 f979 	bl	8006e48 <HAL_Delay>
  return USBH_OK;
 8025b56:	2300      	movs	r3, #0
}
 8025b58:	4618      	mov	r0, r3
 8025b5a:	3708      	adds	r7, #8
 8025b5c:	46bd      	mov	sp, r7
 8025b5e:	bd80      	pop	{r7, pc}

08025b60 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8025b60:	b480      	push	{r7}
 8025b62:	b085      	sub	sp, #20
 8025b64:	af00      	add	r7, sp, #0
 8025b66:	6078      	str	r0, [r7, #4]
 8025b68:	460b      	mov	r3, r1
 8025b6a:	70fb      	strb	r3, [r7, #3]
 8025b6c:	4613      	mov	r3, r2
 8025b6e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8025b70:	687b      	ldr	r3, [r7, #4]
 8025b72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8025b76:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8025b78:	78fa      	ldrb	r2, [r7, #3]
 8025b7a:	68f9      	ldr	r1, [r7, #12]
 8025b7c:	4613      	mov	r3, r2
 8025b7e:	011b      	lsls	r3, r3, #4
 8025b80:	1a9b      	subs	r3, r3, r2
 8025b82:	009b      	lsls	r3, r3, #2
 8025b84:	440b      	add	r3, r1
 8025b86:	3317      	adds	r3, #23
 8025b88:	781b      	ldrb	r3, [r3, #0]
 8025b8a:	2b00      	cmp	r3, #0
 8025b8c:	d00a      	beq.n	8025ba4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8025b8e:	78fa      	ldrb	r2, [r7, #3]
 8025b90:	68f9      	ldr	r1, [r7, #12]
 8025b92:	4613      	mov	r3, r2
 8025b94:	011b      	lsls	r3, r3, #4
 8025b96:	1a9b      	subs	r3, r3, r2
 8025b98:	009b      	lsls	r3, r3, #2
 8025b9a:	440b      	add	r3, r1
 8025b9c:	333c      	adds	r3, #60	@ 0x3c
 8025b9e:	78ba      	ldrb	r2, [r7, #2]
 8025ba0:	701a      	strb	r2, [r3, #0]
 8025ba2:	e009      	b.n	8025bb8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8025ba4:	78fa      	ldrb	r2, [r7, #3]
 8025ba6:	68f9      	ldr	r1, [r7, #12]
 8025ba8:	4613      	mov	r3, r2
 8025baa:	011b      	lsls	r3, r3, #4
 8025bac:	1a9b      	subs	r3, r3, r2
 8025bae:	009b      	lsls	r3, r3, #2
 8025bb0:	440b      	add	r3, r1
 8025bb2:	333d      	adds	r3, #61	@ 0x3d
 8025bb4:	78ba      	ldrb	r2, [r7, #2]
 8025bb6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8025bb8:	2300      	movs	r3, #0
}
 8025bba:	4618      	mov	r0, r3
 8025bbc:	3714      	adds	r7, #20
 8025bbe:	46bd      	mov	sp, r7
 8025bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bc4:	4770      	bx	lr

08025bc6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8025bc6:	b580      	push	{r7, lr}
 8025bc8:	b082      	sub	sp, #8
 8025bca:	af00      	add	r7, sp, #0
 8025bcc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8025bce:	6878      	ldr	r0, [r7, #4]
 8025bd0:	f7e1 f93a 	bl	8006e48 <HAL_Delay>
}
 8025bd4:	bf00      	nop
 8025bd6:	3708      	adds	r7, #8
 8025bd8:	46bd      	mov	sp, r7
 8025bda:	bd80      	pop	{r7, pc}

08025bdc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8025bdc:	b480      	push	{r7}
 8025bde:	b085      	sub	sp, #20
 8025be0:	af00      	add	r7, sp, #0
 8025be2:	4603      	mov	r3, r0
 8025be4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8025be6:	2300      	movs	r3, #0
 8025be8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8025bea:	79fb      	ldrb	r3, [r7, #7]
 8025bec:	2b03      	cmp	r3, #3
 8025bee:	d817      	bhi.n	8025c20 <USBH_Get_USB_Status+0x44>
 8025bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8025bf8 <USBH_Get_USB_Status+0x1c>)
 8025bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025bf6:	bf00      	nop
 8025bf8:	08025c09 	.word	0x08025c09
 8025bfc:	08025c0f 	.word	0x08025c0f
 8025c00:	08025c15 	.word	0x08025c15
 8025c04:	08025c1b 	.word	0x08025c1b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8025c08:	2300      	movs	r3, #0
 8025c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8025c0c:	e00b      	b.n	8025c26 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8025c0e:	2302      	movs	r3, #2
 8025c10:	73fb      	strb	r3, [r7, #15]
    break;
 8025c12:	e008      	b.n	8025c26 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8025c14:	2301      	movs	r3, #1
 8025c16:	73fb      	strb	r3, [r7, #15]
    break;
 8025c18:	e005      	b.n	8025c26 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8025c1a:	2302      	movs	r3, #2
 8025c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8025c1e:	e002      	b.n	8025c26 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8025c20:	2302      	movs	r3, #2
 8025c22:	73fb      	strb	r3, [r7, #15]
    break;
 8025c24:	bf00      	nop
  }
  return usb_status;
 8025c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8025c28:	4618      	mov	r0, r3
 8025c2a:	3714      	adds	r7, #20
 8025c2c:	46bd      	mov	sp, r7
 8025c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c32:	4770      	bx	lr

08025c34 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8025c34:	b580      	push	{r7, lr}
 8025c36:	b084      	sub	sp, #16
 8025c38:	af00      	add	r7, sp, #0
 8025c3a:	4603      	mov	r3, r0
 8025c3c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8025c3e:	79fb      	ldrb	r3, [r7, #7]
 8025c40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8025c42:	79fb      	ldrb	r3, [r7, #7]
 8025c44:	2b00      	cmp	r3, #0
 8025c46:	d102      	bne.n	8025c4e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8025c48:	2300      	movs	r3, #0
 8025c4a:	73fb      	strb	r3, [r7, #15]
 8025c4c:	e001      	b.n	8025c52 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8025c4e:	2301      	movs	r3, #1
 8025c50:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8025c52:	7bfb      	ldrb	r3, [r7, #15]
 8025c54:	461a      	mov	r2, r3
 8025c56:	2120      	movs	r1, #32
 8025c58:	4803      	ldr	r0, [pc, #12]	@ (8025c68 <MX_DriverVbusFS+0x34>)
 8025c5a:	f7e6 f80d 	bl	800bc78 <HAL_GPIO_WritePin>
}
 8025c5e:	bf00      	nop
 8025c60:	3710      	adds	r7, #16
 8025c62:	46bd      	mov	sp, r7
 8025c64:	bd80      	pop	{r7, pc}
 8025c66:	bf00      	nop
 8025c68:	40020c00 	.word	0x40020c00

08025c6c <malloc>:
 8025c6c:	4b02      	ldr	r3, [pc, #8]	@ (8025c78 <malloc+0xc>)
 8025c6e:	4601      	mov	r1, r0
 8025c70:	6818      	ldr	r0, [r3, #0]
 8025c72:	f000 b82d 	b.w	8025cd0 <_malloc_r>
 8025c76:	bf00      	nop
 8025c78:	200100b8 	.word	0x200100b8

08025c7c <free>:
 8025c7c:	4b02      	ldr	r3, [pc, #8]	@ (8025c88 <free+0xc>)
 8025c7e:	4601      	mov	r1, r0
 8025c80:	6818      	ldr	r0, [r3, #0]
 8025c82:	f001 be01 	b.w	8027888 <_free_r>
 8025c86:	bf00      	nop
 8025c88:	200100b8 	.word	0x200100b8

08025c8c <sbrk_aligned>:
 8025c8c:	b570      	push	{r4, r5, r6, lr}
 8025c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8025ccc <sbrk_aligned+0x40>)
 8025c90:	460c      	mov	r4, r1
 8025c92:	6831      	ldr	r1, [r6, #0]
 8025c94:	4605      	mov	r5, r0
 8025c96:	b911      	cbnz	r1, 8025c9e <sbrk_aligned+0x12>
 8025c98:	f000 ff34 	bl	8026b04 <_sbrk_r>
 8025c9c:	6030      	str	r0, [r6, #0]
 8025c9e:	4621      	mov	r1, r4
 8025ca0:	4628      	mov	r0, r5
 8025ca2:	f000 ff2f 	bl	8026b04 <_sbrk_r>
 8025ca6:	1c43      	adds	r3, r0, #1
 8025ca8:	d103      	bne.n	8025cb2 <sbrk_aligned+0x26>
 8025caa:	f04f 34ff 	mov.w	r4, #4294967295
 8025cae:	4620      	mov	r0, r4
 8025cb0:	bd70      	pop	{r4, r5, r6, pc}
 8025cb2:	1cc4      	adds	r4, r0, #3
 8025cb4:	f024 0403 	bic.w	r4, r4, #3
 8025cb8:	42a0      	cmp	r0, r4
 8025cba:	d0f8      	beq.n	8025cae <sbrk_aligned+0x22>
 8025cbc:	1a21      	subs	r1, r4, r0
 8025cbe:	4628      	mov	r0, r5
 8025cc0:	f000 ff20 	bl	8026b04 <_sbrk_r>
 8025cc4:	3001      	adds	r0, #1
 8025cc6:	d1f2      	bne.n	8025cae <sbrk_aligned+0x22>
 8025cc8:	e7ef      	b.n	8025caa <sbrk_aligned+0x1e>
 8025cca:	bf00      	nop
 8025ccc:	2003cdfc 	.word	0x2003cdfc

08025cd0 <_malloc_r>:
 8025cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025cd4:	1ccd      	adds	r5, r1, #3
 8025cd6:	f025 0503 	bic.w	r5, r5, #3
 8025cda:	3508      	adds	r5, #8
 8025cdc:	2d0c      	cmp	r5, #12
 8025cde:	bf38      	it	cc
 8025ce0:	250c      	movcc	r5, #12
 8025ce2:	2d00      	cmp	r5, #0
 8025ce4:	4606      	mov	r6, r0
 8025ce6:	db01      	blt.n	8025cec <_malloc_r+0x1c>
 8025ce8:	42a9      	cmp	r1, r5
 8025cea:	d904      	bls.n	8025cf6 <_malloc_r+0x26>
 8025cec:	230c      	movs	r3, #12
 8025cee:	6033      	str	r3, [r6, #0]
 8025cf0:	2000      	movs	r0, #0
 8025cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8025dcc <_malloc_r+0xfc>
 8025cfa:	f000 f869 	bl	8025dd0 <__malloc_lock>
 8025cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8025d02:	461c      	mov	r4, r3
 8025d04:	bb44      	cbnz	r4, 8025d58 <_malloc_r+0x88>
 8025d06:	4629      	mov	r1, r5
 8025d08:	4630      	mov	r0, r6
 8025d0a:	f7ff ffbf 	bl	8025c8c <sbrk_aligned>
 8025d0e:	1c43      	adds	r3, r0, #1
 8025d10:	4604      	mov	r4, r0
 8025d12:	d158      	bne.n	8025dc6 <_malloc_r+0xf6>
 8025d14:	f8d8 4000 	ldr.w	r4, [r8]
 8025d18:	4627      	mov	r7, r4
 8025d1a:	2f00      	cmp	r7, #0
 8025d1c:	d143      	bne.n	8025da6 <_malloc_r+0xd6>
 8025d1e:	2c00      	cmp	r4, #0
 8025d20:	d04b      	beq.n	8025dba <_malloc_r+0xea>
 8025d22:	6823      	ldr	r3, [r4, #0]
 8025d24:	4639      	mov	r1, r7
 8025d26:	4630      	mov	r0, r6
 8025d28:	eb04 0903 	add.w	r9, r4, r3
 8025d2c:	f000 feea 	bl	8026b04 <_sbrk_r>
 8025d30:	4581      	cmp	r9, r0
 8025d32:	d142      	bne.n	8025dba <_malloc_r+0xea>
 8025d34:	6821      	ldr	r1, [r4, #0]
 8025d36:	1a6d      	subs	r5, r5, r1
 8025d38:	4629      	mov	r1, r5
 8025d3a:	4630      	mov	r0, r6
 8025d3c:	f7ff ffa6 	bl	8025c8c <sbrk_aligned>
 8025d40:	3001      	adds	r0, #1
 8025d42:	d03a      	beq.n	8025dba <_malloc_r+0xea>
 8025d44:	6823      	ldr	r3, [r4, #0]
 8025d46:	442b      	add	r3, r5
 8025d48:	6023      	str	r3, [r4, #0]
 8025d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8025d4e:	685a      	ldr	r2, [r3, #4]
 8025d50:	bb62      	cbnz	r2, 8025dac <_malloc_r+0xdc>
 8025d52:	f8c8 7000 	str.w	r7, [r8]
 8025d56:	e00f      	b.n	8025d78 <_malloc_r+0xa8>
 8025d58:	6822      	ldr	r2, [r4, #0]
 8025d5a:	1b52      	subs	r2, r2, r5
 8025d5c:	d420      	bmi.n	8025da0 <_malloc_r+0xd0>
 8025d5e:	2a0b      	cmp	r2, #11
 8025d60:	d917      	bls.n	8025d92 <_malloc_r+0xc2>
 8025d62:	1961      	adds	r1, r4, r5
 8025d64:	42a3      	cmp	r3, r4
 8025d66:	6025      	str	r5, [r4, #0]
 8025d68:	bf18      	it	ne
 8025d6a:	6059      	strne	r1, [r3, #4]
 8025d6c:	6863      	ldr	r3, [r4, #4]
 8025d6e:	bf08      	it	eq
 8025d70:	f8c8 1000 	streq.w	r1, [r8]
 8025d74:	5162      	str	r2, [r4, r5]
 8025d76:	604b      	str	r3, [r1, #4]
 8025d78:	4630      	mov	r0, r6
 8025d7a:	f000 f82f 	bl	8025ddc <__malloc_unlock>
 8025d7e:	f104 000b 	add.w	r0, r4, #11
 8025d82:	1d23      	adds	r3, r4, #4
 8025d84:	f020 0007 	bic.w	r0, r0, #7
 8025d88:	1ac2      	subs	r2, r0, r3
 8025d8a:	bf1c      	itt	ne
 8025d8c:	1a1b      	subne	r3, r3, r0
 8025d8e:	50a3      	strne	r3, [r4, r2]
 8025d90:	e7af      	b.n	8025cf2 <_malloc_r+0x22>
 8025d92:	6862      	ldr	r2, [r4, #4]
 8025d94:	42a3      	cmp	r3, r4
 8025d96:	bf0c      	ite	eq
 8025d98:	f8c8 2000 	streq.w	r2, [r8]
 8025d9c:	605a      	strne	r2, [r3, #4]
 8025d9e:	e7eb      	b.n	8025d78 <_malloc_r+0xa8>
 8025da0:	4623      	mov	r3, r4
 8025da2:	6864      	ldr	r4, [r4, #4]
 8025da4:	e7ae      	b.n	8025d04 <_malloc_r+0x34>
 8025da6:	463c      	mov	r4, r7
 8025da8:	687f      	ldr	r7, [r7, #4]
 8025daa:	e7b6      	b.n	8025d1a <_malloc_r+0x4a>
 8025dac:	461a      	mov	r2, r3
 8025dae:	685b      	ldr	r3, [r3, #4]
 8025db0:	42a3      	cmp	r3, r4
 8025db2:	d1fb      	bne.n	8025dac <_malloc_r+0xdc>
 8025db4:	2300      	movs	r3, #0
 8025db6:	6053      	str	r3, [r2, #4]
 8025db8:	e7de      	b.n	8025d78 <_malloc_r+0xa8>
 8025dba:	230c      	movs	r3, #12
 8025dbc:	6033      	str	r3, [r6, #0]
 8025dbe:	4630      	mov	r0, r6
 8025dc0:	f000 f80c 	bl	8025ddc <__malloc_unlock>
 8025dc4:	e794      	b.n	8025cf0 <_malloc_r+0x20>
 8025dc6:	6005      	str	r5, [r0, #0]
 8025dc8:	e7d6      	b.n	8025d78 <_malloc_r+0xa8>
 8025dca:	bf00      	nop
 8025dcc:	2003ce00 	.word	0x2003ce00

08025dd0 <__malloc_lock>:
 8025dd0:	4801      	ldr	r0, [pc, #4]	@ (8025dd8 <__malloc_lock+0x8>)
 8025dd2:	f000 bede 	b.w	8026b92 <__retarget_lock_acquire_recursive>
 8025dd6:	bf00      	nop
 8025dd8:	2003cf44 	.word	0x2003cf44

08025ddc <__malloc_unlock>:
 8025ddc:	4801      	ldr	r0, [pc, #4]	@ (8025de4 <__malloc_unlock+0x8>)
 8025dde:	f000 bed9 	b.w	8026b94 <__retarget_lock_release_recursive>
 8025de2:	bf00      	nop
 8025de4:	2003cf44 	.word	0x2003cf44

08025de8 <rand>:
 8025de8:	4b16      	ldr	r3, [pc, #88]	@ (8025e44 <rand+0x5c>)
 8025dea:	b510      	push	{r4, lr}
 8025dec:	681c      	ldr	r4, [r3, #0]
 8025dee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8025df0:	b9b3      	cbnz	r3, 8025e20 <rand+0x38>
 8025df2:	2018      	movs	r0, #24
 8025df4:	f7ff ff3a 	bl	8025c6c <malloc>
 8025df8:	4602      	mov	r2, r0
 8025dfa:	6320      	str	r0, [r4, #48]	@ 0x30
 8025dfc:	b920      	cbnz	r0, 8025e08 <rand+0x20>
 8025dfe:	4b12      	ldr	r3, [pc, #72]	@ (8025e48 <rand+0x60>)
 8025e00:	4812      	ldr	r0, [pc, #72]	@ (8025e4c <rand+0x64>)
 8025e02:	2152      	movs	r1, #82	@ 0x52
 8025e04:	f000 fed6 	bl	8026bb4 <__assert_func>
 8025e08:	4911      	ldr	r1, [pc, #68]	@ (8025e50 <rand+0x68>)
 8025e0a:	4b12      	ldr	r3, [pc, #72]	@ (8025e54 <rand+0x6c>)
 8025e0c:	e9c0 1300 	strd	r1, r3, [r0]
 8025e10:	4b11      	ldr	r3, [pc, #68]	@ (8025e58 <rand+0x70>)
 8025e12:	6083      	str	r3, [r0, #8]
 8025e14:	230b      	movs	r3, #11
 8025e16:	8183      	strh	r3, [r0, #12]
 8025e18:	2100      	movs	r1, #0
 8025e1a:	2001      	movs	r0, #1
 8025e1c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8025e20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8025e22:	480e      	ldr	r0, [pc, #56]	@ (8025e5c <rand+0x74>)
 8025e24:	690b      	ldr	r3, [r1, #16]
 8025e26:	694c      	ldr	r4, [r1, #20]
 8025e28:	4a0d      	ldr	r2, [pc, #52]	@ (8025e60 <rand+0x78>)
 8025e2a:	4358      	muls	r0, r3
 8025e2c:	fb02 0004 	mla	r0, r2, r4, r0
 8025e30:	fba3 3202 	umull	r3, r2, r3, r2
 8025e34:	3301      	adds	r3, #1
 8025e36:	eb40 0002 	adc.w	r0, r0, r2
 8025e3a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8025e3e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8025e42:	bd10      	pop	{r4, pc}
 8025e44:	200100b8 	.word	0x200100b8
 8025e48:	0802cf20 	.word	0x0802cf20
 8025e4c:	0802cf37 	.word	0x0802cf37
 8025e50:	abcd330e 	.word	0xabcd330e
 8025e54:	e66d1234 	.word	0xe66d1234
 8025e58:	0005deec 	.word	0x0005deec
 8025e5c:	5851f42d 	.word	0x5851f42d
 8025e60:	4c957f2d 	.word	0x4c957f2d

08025e64 <__cvt>:
 8025e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025e68:	ec57 6b10 	vmov	r6, r7, d0
 8025e6c:	2f00      	cmp	r7, #0
 8025e6e:	460c      	mov	r4, r1
 8025e70:	4619      	mov	r1, r3
 8025e72:	463b      	mov	r3, r7
 8025e74:	bfbb      	ittet	lt
 8025e76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8025e7a:	461f      	movlt	r7, r3
 8025e7c:	2300      	movge	r3, #0
 8025e7e:	232d      	movlt	r3, #45	@ 0x2d
 8025e80:	700b      	strb	r3, [r1, #0]
 8025e82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025e84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8025e88:	4691      	mov	r9, r2
 8025e8a:	f023 0820 	bic.w	r8, r3, #32
 8025e8e:	bfbc      	itt	lt
 8025e90:	4632      	movlt	r2, r6
 8025e92:	4616      	movlt	r6, r2
 8025e94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8025e98:	d005      	beq.n	8025ea6 <__cvt+0x42>
 8025e9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8025e9e:	d100      	bne.n	8025ea2 <__cvt+0x3e>
 8025ea0:	3401      	adds	r4, #1
 8025ea2:	2102      	movs	r1, #2
 8025ea4:	e000      	b.n	8025ea8 <__cvt+0x44>
 8025ea6:	2103      	movs	r1, #3
 8025ea8:	ab03      	add	r3, sp, #12
 8025eaa:	9301      	str	r3, [sp, #4]
 8025eac:	ab02      	add	r3, sp, #8
 8025eae:	9300      	str	r3, [sp, #0]
 8025eb0:	ec47 6b10 	vmov	d0, r6, r7
 8025eb4:	4653      	mov	r3, sl
 8025eb6:	4622      	mov	r2, r4
 8025eb8:	f000 ff22 	bl	8026d00 <_dtoa_r>
 8025ebc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8025ec0:	4605      	mov	r5, r0
 8025ec2:	d119      	bne.n	8025ef8 <__cvt+0x94>
 8025ec4:	f019 0f01 	tst.w	r9, #1
 8025ec8:	d00e      	beq.n	8025ee8 <__cvt+0x84>
 8025eca:	eb00 0904 	add.w	r9, r0, r4
 8025ece:	2200      	movs	r2, #0
 8025ed0:	2300      	movs	r3, #0
 8025ed2:	4630      	mov	r0, r6
 8025ed4:	4639      	mov	r1, r7
 8025ed6:	f7da fe17 	bl	8000b08 <__aeabi_dcmpeq>
 8025eda:	b108      	cbz	r0, 8025ee0 <__cvt+0x7c>
 8025edc:	f8cd 900c 	str.w	r9, [sp, #12]
 8025ee0:	2230      	movs	r2, #48	@ 0x30
 8025ee2:	9b03      	ldr	r3, [sp, #12]
 8025ee4:	454b      	cmp	r3, r9
 8025ee6:	d31e      	bcc.n	8025f26 <__cvt+0xc2>
 8025ee8:	9b03      	ldr	r3, [sp, #12]
 8025eea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025eec:	1b5b      	subs	r3, r3, r5
 8025eee:	4628      	mov	r0, r5
 8025ef0:	6013      	str	r3, [r2, #0]
 8025ef2:	b004      	add	sp, #16
 8025ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025ef8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8025efc:	eb00 0904 	add.w	r9, r0, r4
 8025f00:	d1e5      	bne.n	8025ece <__cvt+0x6a>
 8025f02:	7803      	ldrb	r3, [r0, #0]
 8025f04:	2b30      	cmp	r3, #48	@ 0x30
 8025f06:	d10a      	bne.n	8025f1e <__cvt+0xba>
 8025f08:	2200      	movs	r2, #0
 8025f0a:	2300      	movs	r3, #0
 8025f0c:	4630      	mov	r0, r6
 8025f0e:	4639      	mov	r1, r7
 8025f10:	f7da fdfa 	bl	8000b08 <__aeabi_dcmpeq>
 8025f14:	b918      	cbnz	r0, 8025f1e <__cvt+0xba>
 8025f16:	f1c4 0401 	rsb	r4, r4, #1
 8025f1a:	f8ca 4000 	str.w	r4, [sl]
 8025f1e:	f8da 3000 	ldr.w	r3, [sl]
 8025f22:	4499      	add	r9, r3
 8025f24:	e7d3      	b.n	8025ece <__cvt+0x6a>
 8025f26:	1c59      	adds	r1, r3, #1
 8025f28:	9103      	str	r1, [sp, #12]
 8025f2a:	701a      	strb	r2, [r3, #0]
 8025f2c:	e7d9      	b.n	8025ee2 <__cvt+0x7e>

08025f2e <__exponent>:
 8025f2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025f30:	2900      	cmp	r1, #0
 8025f32:	bfba      	itte	lt
 8025f34:	4249      	neglt	r1, r1
 8025f36:	232d      	movlt	r3, #45	@ 0x2d
 8025f38:	232b      	movge	r3, #43	@ 0x2b
 8025f3a:	2909      	cmp	r1, #9
 8025f3c:	7002      	strb	r2, [r0, #0]
 8025f3e:	7043      	strb	r3, [r0, #1]
 8025f40:	dd29      	ble.n	8025f96 <__exponent+0x68>
 8025f42:	f10d 0307 	add.w	r3, sp, #7
 8025f46:	461d      	mov	r5, r3
 8025f48:	270a      	movs	r7, #10
 8025f4a:	461a      	mov	r2, r3
 8025f4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8025f50:	fb07 1416 	mls	r4, r7, r6, r1
 8025f54:	3430      	adds	r4, #48	@ 0x30
 8025f56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8025f5a:	460c      	mov	r4, r1
 8025f5c:	2c63      	cmp	r4, #99	@ 0x63
 8025f5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8025f62:	4631      	mov	r1, r6
 8025f64:	dcf1      	bgt.n	8025f4a <__exponent+0x1c>
 8025f66:	3130      	adds	r1, #48	@ 0x30
 8025f68:	1e94      	subs	r4, r2, #2
 8025f6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8025f6e:	1c41      	adds	r1, r0, #1
 8025f70:	4623      	mov	r3, r4
 8025f72:	42ab      	cmp	r3, r5
 8025f74:	d30a      	bcc.n	8025f8c <__exponent+0x5e>
 8025f76:	f10d 0309 	add.w	r3, sp, #9
 8025f7a:	1a9b      	subs	r3, r3, r2
 8025f7c:	42ac      	cmp	r4, r5
 8025f7e:	bf88      	it	hi
 8025f80:	2300      	movhi	r3, #0
 8025f82:	3302      	adds	r3, #2
 8025f84:	4403      	add	r3, r0
 8025f86:	1a18      	subs	r0, r3, r0
 8025f88:	b003      	add	sp, #12
 8025f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8025f90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8025f94:	e7ed      	b.n	8025f72 <__exponent+0x44>
 8025f96:	2330      	movs	r3, #48	@ 0x30
 8025f98:	3130      	adds	r1, #48	@ 0x30
 8025f9a:	7083      	strb	r3, [r0, #2]
 8025f9c:	70c1      	strb	r1, [r0, #3]
 8025f9e:	1d03      	adds	r3, r0, #4
 8025fa0:	e7f1      	b.n	8025f86 <__exponent+0x58>
	...

08025fa4 <_printf_float>:
 8025fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fa8:	b08d      	sub	sp, #52	@ 0x34
 8025faa:	460c      	mov	r4, r1
 8025fac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8025fb0:	4616      	mov	r6, r2
 8025fb2:	461f      	mov	r7, r3
 8025fb4:	4605      	mov	r5, r0
 8025fb6:	f000 fd17 	bl	80269e8 <_localeconv_r>
 8025fba:	6803      	ldr	r3, [r0, #0]
 8025fbc:	9304      	str	r3, [sp, #16]
 8025fbe:	4618      	mov	r0, r3
 8025fc0:	f7da f976 	bl	80002b0 <strlen>
 8025fc4:	2300      	movs	r3, #0
 8025fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8025fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8025fcc:	9005      	str	r0, [sp, #20]
 8025fce:	3307      	adds	r3, #7
 8025fd0:	f023 0307 	bic.w	r3, r3, #7
 8025fd4:	f103 0208 	add.w	r2, r3, #8
 8025fd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8025fdc:	f8d4 b000 	ldr.w	fp, [r4]
 8025fe0:	f8c8 2000 	str.w	r2, [r8]
 8025fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8025fe8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8025fec:	9307      	str	r3, [sp, #28]
 8025fee:	f8cd 8018 	str.w	r8, [sp, #24]
 8025ff2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8025ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025ffa:	4b9c      	ldr	r3, [pc, #624]	@ (802626c <_printf_float+0x2c8>)
 8025ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8026000:	f7da fdb4 	bl	8000b6c <__aeabi_dcmpun>
 8026004:	bb70      	cbnz	r0, 8026064 <_printf_float+0xc0>
 8026006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802600a:	4b98      	ldr	r3, [pc, #608]	@ (802626c <_printf_float+0x2c8>)
 802600c:	f04f 32ff 	mov.w	r2, #4294967295
 8026010:	f7da fd8e 	bl	8000b30 <__aeabi_dcmple>
 8026014:	bb30      	cbnz	r0, 8026064 <_printf_float+0xc0>
 8026016:	2200      	movs	r2, #0
 8026018:	2300      	movs	r3, #0
 802601a:	4640      	mov	r0, r8
 802601c:	4649      	mov	r1, r9
 802601e:	f7da fd7d 	bl	8000b1c <__aeabi_dcmplt>
 8026022:	b110      	cbz	r0, 802602a <_printf_float+0x86>
 8026024:	232d      	movs	r3, #45	@ 0x2d
 8026026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802602a:	4a91      	ldr	r2, [pc, #580]	@ (8026270 <_printf_float+0x2cc>)
 802602c:	4b91      	ldr	r3, [pc, #580]	@ (8026274 <_printf_float+0x2d0>)
 802602e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8026032:	bf94      	ite	ls
 8026034:	4690      	movls	r8, r2
 8026036:	4698      	movhi	r8, r3
 8026038:	2303      	movs	r3, #3
 802603a:	6123      	str	r3, [r4, #16]
 802603c:	f02b 0304 	bic.w	r3, fp, #4
 8026040:	6023      	str	r3, [r4, #0]
 8026042:	f04f 0900 	mov.w	r9, #0
 8026046:	9700      	str	r7, [sp, #0]
 8026048:	4633      	mov	r3, r6
 802604a:	aa0b      	add	r2, sp, #44	@ 0x2c
 802604c:	4621      	mov	r1, r4
 802604e:	4628      	mov	r0, r5
 8026050:	f000 f9d2 	bl	80263f8 <_printf_common>
 8026054:	3001      	adds	r0, #1
 8026056:	f040 808d 	bne.w	8026174 <_printf_float+0x1d0>
 802605a:	f04f 30ff 	mov.w	r0, #4294967295
 802605e:	b00d      	add	sp, #52	@ 0x34
 8026060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026064:	4642      	mov	r2, r8
 8026066:	464b      	mov	r3, r9
 8026068:	4640      	mov	r0, r8
 802606a:	4649      	mov	r1, r9
 802606c:	f7da fd7e 	bl	8000b6c <__aeabi_dcmpun>
 8026070:	b140      	cbz	r0, 8026084 <_printf_float+0xe0>
 8026072:	464b      	mov	r3, r9
 8026074:	2b00      	cmp	r3, #0
 8026076:	bfbc      	itt	lt
 8026078:	232d      	movlt	r3, #45	@ 0x2d
 802607a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 802607e:	4a7e      	ldr	r2, [pc, #504]	@ (8026278 <_printf_float+0x2d4>)
 8026080:	4b7e      	ldr	r3, [pc, #504]	@ (802627c <_printf_float+0x2d8>)
 8026082:	e7d4      	b.n	802602e <_printf_float+0x8a>
 8026084:	6863      	ldr	r3, [r4, #4]
 8026086:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 802608a:	9206      	str	r2, [sp, #24]
 802608c:	1c5a      	adds	r2, r3, #1
 802608e:	d13b      	bne.n	8026108 <_printf_float+0x164>
 8026090:	2306      	movs	r3, #6
 8026092:	6063      	str	r3, [r4, #4]
 8026094:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8026098:	2300      	movs	r3, #0
 802609a:	6022      	str	r2, [r4, #0]
 802609c:	9303      	str	r3, [sp, #12]
 802609e:	ab0a      	add	r3, sp, #40	@ 0x28
 80260a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80260a4:	ab09      	add	r3, sp, #36	@ 0x24
 80260a6:	9300      	str	r3, [sp, #0]
 80260a8:	6861      	ldr	r1, [r4, #4]
 80260aa:	ec49 8b10 	vmov	d0, r8, r9
 80260ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80260b2:	4628      	mov	r0, r5
 80260b4:	f7ff fed6 	bl	8025e64 <__cvt>
 80260b8:	9b06      	ldr	r3, [sp, #24]
 80260ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80260bc:	2b47      	cmp	r3, #71	@ 0x47
 80260be:	4680      	mov	r8, r0
 80260c0:	d129      	bne.n	8026116 <_printf_float+0x172>
 80260c2:	1cc8      	adds	r0, r1, #3
 80260c4:	db02      	blt.n	80260cc <_printf_float+0x128>
 80260c6:	6863      	ldr	r3, [r4, #4]
 80260c8:	4299      	cmp	r1, r3
 80260ca:	dd41      	ble.n	8026150 <_printf_float+0x1ac>
 80260cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80260d0:	fa5f fa8a 	uxtb.w	sl, sl
 80260d4:	3901      	subs	r1, #1
 80260d6:	4652      	mov	r2, sl
 80260d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80260dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80260de:	f7ff ff26 	bl	8025f2e <__exponent>
 80260e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80260e4:	1813      	adds	r3, r2, r0
 80260e6:	2a01      	cmp	r2, #1
 80260e8:	4681      	mov	r9, r0
 80260ea:	6123      	str	r3, [r4, #16]
 80260ec:	dc02      	bgt.n	80260f4 <_printf_float+0x150>
 80260ee:	6822      	ldr	r2, [r4, #0]
 80260f0:	07d2      	lsls	r2, r2, #31
 80260f2:	d501      	bpl.n	80260f8 <_printf_float+0x154>
 80260f4:	3301      	adds	r3, #1
 80260f6:	6123      	str	r3, [r4, #16]
 80260f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80260fc:	2b00      	cmp	r3, #0
 80260fe:	d0a2      	beq.n	8026046 <_printf_float+0xa2>
 8026100:	232d      	movs	r3, #45	@ 0x2d
 8026102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026106:	e79e      	b.n	8026046 <_printf_float+0xa2>
 8026108:	9a06      	ldr	r2, [sp, #24]
 802610a:	2a47      	cmp	r2, #71	@ 0x47
 802610c:	d1c2      	bne.n	8026094 <_printf_float+0xf0>
 802610e:	2b00      	cmp	r3, #0
 8026110:	d1c0      	bne.n	8026094 <_printf_float+0xf0>
 8026112:	2301      	movs	r3, #1
 8026114:	e7bd      	b.n	8026092 <_printf_float+0xee>
 8026116:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802611a:	d9db      	bls.n	80260d4 <_printf_float+0x130>
 802611c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8026120:	d118      	bne.n	8026154 <_printf_float+0x1b0>
 8026122:	2900      	cmp	r1, #0
 8026124:	6863      	ldr	r3, [r4, #4]
 8026126:	dd0b      	ble.n	8026140 <_printf_float+0x19c>
 8026128:	6121      	str	r1, [r4, #16]
 802612a:	b913      	cbnz	r3, 8026132 <_printf_float+0x18e>
 802612c:	6822      	ldr	r2, [r4, #0]
 802612e:	07d0      	lsls	r0, r2, #31
 8026130:	d502      	bpl.n	8026138 <_printf_float+0x194>
 8026132:	3301      	adds	r3, #1
 8026134:	440b      	add	r3, r1
 8026136:	6123      	str	r3, [r4, #16]
 8026138:	65a1      	str	r1, [r4, #88]	@ 0x58
 802613a:	f04f 0900 	mov.w	r9, #0
 802613e:	e7db      	b.n	80260f8 <_printf_float+0x154>
 8026140:	b913      	cbnz	r3, 8026148 <_printf_float+0x1a4>
 8026142:	6822      	ldr	r2, [r4, #0]
 8026144:	07d2      	lsls	r2, r2, #31
 8026146:	d501      	bpl.n	802614c <_printf_float+0x1a8>
 8026148:	3302      	adds	r3, #2
 802614a:	e7f4      	b.n	8026136 <_printf_float+0x192>
 802614c:	2301      	movs	r3, #1
 802614e:	e7f2      	b.n	8026136 <_printf_float+0x192>
 8026150:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8026154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026156:	4299      	cmp	r1, r3
 8026158:	db05      	blt.n	8026166 <_printf_float+0x1c2>
 802615a:	6823      	ldr	r3, [r4, #0]
 802615c:	6121      	str	r1, [r4, #16]
 802615e:	07d8      	lsls	r0, r3, #31
 8026160:	d5ea      	bpl.n	8026138 <_printf_float+0x194>
 8026162:	1c4b      	adds	r3, r1, #1
 8026164:	e7e7      	b.n	8026136 <_printf_float+0x192>
 8026166:	2900      	cmp	r1, #0
 8026168:	bfd4      	ite	le
 802616a:	f1c1 0202 	rsble	r2, r1, #2
 802616e:	2201      	movgt	r2, #1
 8026170:	4413      	add	r3, r2
 8026172:	e7e0      	b.n	8026136 <_printf_float+0x192>
 8026174:	6823      	ldr	r3, [r4, #0]
 8026176:	055a      	lsls	r2, r3, #21
 8026178:	d407      	bmi.n	802618a <_printf_float+0x1e6>
 802617a:	6923      	ldr	r3, [r4, #16]
 802617c:	4642      	mov	r2, r8
 802617e:	4631      	mov	r1, r6
 8026180:	4628      	mov	r0, r5
 8026182:	47b8      	blx	r7
 8026184:	3001      	adds	r0, #1
 8026186:	d12b      	bne.n	80261e0 <_printf_float+0x23c>
 8026188:	e767      	b.n	802605a <_printf_float+0xb6>
 802618a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802618e:	f240 80dd 	bls.w	802634c <_printf_float+0x3a8>
 8026192:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8026196:	2200      	movs	r2, #0
 8026198:	2300      	movs	r3, #0
 802619a:	f7da fcb5 	bl	8000b08 <__aeabi_dcmpeq>
 802619e:	2800      	cmp	r0, #0
 80261a0:	d033      	beq.n	802620a <_printf_float+0x266>
 80261a2:	4a37      	ldr	r2, [pc, #220]	@ (8026280 <_printf_float+0x2dc>)
 80261a4:	2301      	movs	r3, #1
 80261a6:	4631      	mov	r1, r6
 80261a8:	4628      	mov	r0, r5
 80261aa:	47b8      	blx	r7
 80261ac:	3001      	adds	r0, #1
 80261ae:	f43f af54 	beq.w	802605a <_printf_float+0xb6>
 80261b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80261b6:	4543      	cmp	r3, r8
 80261b8:	db02      	blt.n	80261c0 <_printf_float+0x21c>
 80261ba:	6823      	ldr	r3, [r4, #0]
 80261bc:	07d8      	lsls	r0, r3, #31
 80261be:	d50f      	bpl.n	80261e0 <_printf_float+0x23c>
 80261c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80261c4:	4631      	mov	r1, r6
 80261c6:	4628      	mov	r0, r5
 80261c8:	47b8      	blx	r7
 80261ca:	3001      	adds	r0, #1
 80261cc:	f43f af45 	beq.w	802605a <_printf_float+0xb6>
 80261d0:	f04f 0900 	mov.w	r9, #0
 80261d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80261d8:	f104 0a1a 	add.w	sl, r4, #26
 80261dc:	45c8      	cmp	r8, r9
 80261de:	dc09      	bgt.n	80261f4 <_printf_float+0x250>
 80261e0:	6823      	ldr	r3, [r4, #0]
 80261e2:	079b      	lsls	r3, r3, #30
 80261e4:	f100 8103 	bmi.w	80263ee <_printf_float+0x44a>
 80261e8:	68e0      	ldr	r0, [r4, #12]
 80261ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80261ec:	4298      	cmp	r0, r3
 80261ee:	bfb8      	it	lt
 80261f0:	4618      	movlt	r0, r3
 80261f2:	e734      	b.n	802605e <_printf_float+0xba>
 80261f4:	2301      	movs	r3, #1
 80261f6:	4652      	mov	r2, sl
 80261f8:	4631      	mov	r1, r6
 80261fa:	4628      	mov	r0, r5
 80261fc:	47b8      	blx	r7
 80261fe:	3001      	adds	r0, #1
 8026200:	f43f af2b 	beq.w	802605a <_printf_float+0xb6>
 8026204:	f109 0901 	add.w	r9, r9, #1
 8026208:	e7e8      	b.n	80261dc <_printf_float+0x238>
 802620a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802620c:	2b00      	cmp	r3, #0
 802620e:	dc39      	bgt.n	8026284 <_printf_float+0x2e0>
 8026210:	4a1b      	ldr	r2, [pc, #108]	@ (8026280 <_printf_float+0x2dc>)
 8026212:	2301      	movs	r3, #1
 8026214:	4631      	mov	r1, r6
 8026216:	4628      	mov	r0, r5
 8026218:	47b8      	blx	r7
 802621a:	3001      	adds	r0, #1
 802621c:	f43f af1d 	beq.w	802605a <_printf_float+0xb6>
 8026220:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8026224:	ea59 0303 	orrs.w	r3, r9, r3
 8026228:	d102      	bne.n	8026230 <_printf_float+0x28c>
 802622a:	6823      	ldr	r3, [r4, #0]
 802622c:	07d9      	lsls	r1, r3, #31
 802622e:	d5d7      	bpl.n	80261e0 <_printf_float+0x23c>
 8026230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026234:	4631      	mov	r1, r6
 8026236:	4628      	mov	r0, r5
 8026238:	47b8      	blx	r7
 802623a:	3001      	adds	r0, #1
 802623c:	f43f af0d 	beq.w	802605a <_printf_float+0xb6>
 8026240:	f04f 0a00 	mov.w	sl, #0
 8026244:	f104 0b1a 	add.w	fp, r4, #26
 8026248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802624a:	425b      	negs	r3, r3
 802624c:	4553      	cmp	r3, sl
 802624e:	dc01      	bgt.n	8026254 <_printf_float+0x2b0>
 8026250:	464b      	mov	r3, r9
 8026252:	e793      	b.n	802617c <_printf_float+0x1d8>
 8026254:	2301      	movs	r3, #1
 8026256:	465a      	mov	r2, fp
 8026258:	4631      	mov	r1, r6
 802625a:	4628      	mov	r0, r5
 802625c:	47b8      	blx	r7
 802625e:	3001      	adds	r0, #1
 8026260:	f43f aefb 	beq.w	802605a <_printf_float+0xb6>
 8026264:	f10a 0a01 	add.w	sl, sl, #1
 8026268:	e7ee      	b.n	8026248 <_printf_float+0x2a4>
 802626a:	bf00      	nop
 802626c:	7fefffff 	.word	0x7fefffff
 8026270:	0802d090 	.word	0x0802d090
 8026274:	0802d094 	.word	0x0802d094
 8026278:	0802d098 	.word	0x0802d098
 802627c:	0802d09c 	.word	0x0802d09c
 8026280:	0802d0a0 	.word	0x0802d0a0
 8026284:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8026286:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802628a:	4553      	cmp	r3, sl
 802628c:	bfa8      	it	ge
 802628e:	4653      	movge	r3, sl
 8026290:	2b00      	cmp	r3, #0
 8026292:	4699      	mov	r9, r3
 8026294:	dc36      	bgt.n	8026304 <_printf_float+0x360>
 8026296:	f04f 0b00 	mov.w	fp, #0
 802629a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802629e:	f104 021a 	add.w	r2, r4, #26
 80262a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80262a4:	9306      	str	r3, [sp, #24]
 80262a6:	eba3 0309 	sub.w	r3, r3, r9
 80262aa:	455b      	cmp	r3, fp
 80262ac:	dc31      	bgt.n	8026312 <_printf_float+0x36e>
 80262ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262b0:	459a      	cmp	sl, r3
 80262b2:	dc3a      	bgt.n	802632a <_printf_float+0x386>
 80262b4:	6823      	ldr	r3, [r4, #0]
 80262b6:	07da      	lsls	r2, r3, #31
 80262b8:	d437      	bmi.n	802632a <_printf_float+0x386>
 80262ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262bc:	ebaa 0903 	sub.w	r9, sl, r3
 80262c0:	9b06      	ldr	r3, [sp, #24]
 80262c2:	ebaa 0303 	sub.w	r3, sl, r3
 80262c6:	4599      	cmp	r9, r3
 80262c8:	bfa8      	it	ge
 80262ca:	4699      	movge	r9, r3
 80262cc:	f1b9 0f00 	cmp.w	r9, #0
 80262d0:	dc33      	bgt.n	802633a <_printf_float+0x396>
 80262d2:	f04f 0800 	mov.w	r8, #0
 80262d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80262da:	f104 0b1a 	add.w	fp, r4, #26
 80262de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262e0:	ebaa 0303 	sub.w	r3, sl, r3
 80262e4:	eba3 0309 	sub.w	r3, r3, r9
 80262e8:	4543      	cmp	r3, r8
 80262ea:	f77f af79 	ble.w	80261e0 <_printf_float+0x23c>
 80262ee:	2301      	movs	r3, #1
 80262f0:	465a      	mov	r2, fp
 80262f2:	4631      	mov	r1, r6
 80262f4:	4628      	mov	r0, r5
 80262f6:	47b8      	blx	r7
 80262f8:	3001      	adds	r0, #1
 80262fa:	f43f aeae 	beq.w	802605a <_printf_float+0xb6>
 80262fe:	f108 0801 	add.w	r8, r8, #1
 8026302:	e7ec      	b.n	80262de <_printf_float+0x33a>
 8026304:	4642      	mov	r2, r8
 8026306:	4631      	mov	r1, r6
 8026308:	4628      	mov	r0, r5
 802630a:	47b8      	blx	r7
 802630c:	3001      	adds	r0, #1
 802630e:	d1c2      	bne.n	8026296 <_printf_float+0x2f2>
 8026310:	e6a3      	b.n	802605a <_printf_float+0xb6>
 8026312:	2301      	movs	r3, #1
 8026314:	4631      	mov	r1, r6
 8026316:	4628      	mov	r0, r5
 8026318:	9206      	str	r2, [sp, #24]
 802631a:	47b8      	blx	r7
 802631c:	3001      	adds	r0, #1
 802631e:	f43f ae9c 	beq.w	802605a <_printf_float+0xb6>
 8026322:	9a06      	ldr	r2, [sp, #24]
 8026324:	f10b 0b01 	add.w	fp, fp, #1
 8026328:	e7bb      	b.n	80262a2 <_printf_float+0x2fe>
 802632a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802632e:	4631      	mov	r1, r6
 8026330:	4628      	mov	r0, r5
 8026332:	47b8      	blx	r7
 8026334:	3001      	adds	r0, #1
 8026336:	d1c0      	bne.n	80262ba <_printf_float+0x316>
 8026338:	e68f      	b.n	802605a <_printf_float+0xb6>
 802633a:	9a06      	ldr	r2, [sp, #24]
 802633c:	464b      	mov	r3, r9
 802633e:	4442      	add	r2, r8
 8026340:	4631      	mov	r1, r6
 8026342:	4628      	mov	r0, r5
 8026344:	47b8      	blx	r7
 8026346:	3001      	adds	r0, #1
 8026348:	d1c3      	bne.n	80262d2 <_printf_float+0x32e>
 802634a:	e686      	b.n	802605a <_printf_float+0xb6>
 802634c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8026350:	f1ba 0f01 	cmp.w	sl, #1
 8026354:	dc01      	bgt.n	802635a <_printf_float+0x3b6>
 8026356:	07db      	lsls	r3, r3, #31
 8026358:	d536      	bpl.n	80263c8 <_printf_float+0x424>
 802635a:	2301      	movs	r3, #1
 802635c:	4642      	mov	r2, r8
 802635e:	4631      	mov	r1, r6
 8026360:	4628      	mov	r0, r5
 8026362:	47b8      	blx	r7
 8026364:	3001      	adds	r0, #1
 8026366:	f43f ae78 	beq.w	802605a <_printf_float+0xb6>
 802636a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802636e:	4631      	mov	r1, r6
 8026370:	4628      	mov	r0, r5
 8026372:	47b8      	blx	r7
 8026374:	3001      	adds	r0, #1
 8026376:	f43f ae70 	beq.w	802605a <_printf_float+0xb6>
 802637a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802637e:	2200      	movs	r2, #0
 8026380:	2300      	movs	r3, #0
 8026382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026386:	f7da fbbf 	bl	8000b08 <__aeabi_dcmpeq>
 802638a:	b9c0      	cbnz	r0, 80263be <_printf_float+0x41a>
 802638c:	4653      	mov	r3, sl
 802638e:	f108 0201 	add.w	r2, r8, #1
 8026392:	4631      	mov	r1, r6
 8026394:	4628      	mov	r0, r5
 8026396:	47b8      	blx	r7
 8026398:	3001      	adds	r0, #1
 802639a:	d10c      	bne.n	80263b6 <_printf_float+0x412>
 802639c:	e65d      	b.n	802605a <_printf_float+0xb6>
 802639e:	2301      	movs	r3, #1
 80263a0:	465a      	mov	r2, fp
 80263a2:	4631      	mov	r1, r6
 80263a4:	4628      	mov	r0, r5
 80263a6:	47b8      	blx	r7
 80263a8:	3001      	adds	r0, #1
 80263aa:	f43f ae56 	beq.w	802605a <_printf_float+0xb6>
 80263ae:	f108 0801 	add.w	r8, r8, #1
 80263b2:	45d0      	cmp	r8, sl
 80263b4:	dbf3      	blt.n	802639e <_printf_float+0x3fa>
 80263b6:	464b      	mov	r3, r9
 80263b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80263bc:	e6df      	b.n	802617e <_printf_float+0x1da>
 80263be:	f04f 0800 	mov.w	r8, #0
 80263c2:	f104 0b1a 	add.w	fp, r4, #26
 80263c6:	e7f4      	b.n	80263b2 <_printf_float+0x40e>
 80263c8:	2301      	movs	r3, #1
 80263ca:	4642      	mov	r2, r8
 80263cc:	e7e1      	b.n	8026392 <_printf_float+0x3ee>
 80263ce:	2301      	movs	r3, #1
 80263d0:	464a      	mov	r2, r9
 80263d2:	4631      	mov	r1, r6
 80263d4:	4628      	mov	r0, r5
 80263d6:	47b8      	blx	r7
 80263d8:	3001      	adds	r0, #1
 80263da:	f43f ae3e 	beq.w	802605a <_printf_float+0xb6>
 80263de:	f108 0801 	add.w	r8, r8, #1
 80263e2:	68e3      	ldr	r3, [r4, #12]
 80263e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80263e6:	1a5b      	subs	r3, r3, r1
 80263e8:	4543      	cmp	r3, r8
 80263ea:	dcf0      	bgt.n	80263ce <_printf_float+0x42a>
 80263ec:	e6fc      	b.n	80261e8 <_printf_float+0x244>
 80263ee:	f04f 0800 	mov.w	r8, #0
 80263f2:	f104 0919 	add.w	r9, r4, #25
 80263f6:	e7f4      	b.n	80263e2 <_printf_float+0x43e>

080263f8 <_printf_common>:
 80263f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80263fc:	4616      	mov	r6, r2
 80263fe:	4698      	mov	r8, r3
 8026400:	688a      	ldr	r2, [r1, #8]
 8026402:	690b      	ldr	r3, [r1, #16]
 8026404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8026408:	4293      	cmp	r3, r2
 802640a:	bfb8      	it	lt
 802640c:	4613      	movlt	r3, r2
 802640e:	6033      	str	r3, [r6, #0]
 8026410:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8026414:	4607      	mov	r7, r0
 8026416:	460c      	mov	r4, r1
 8026418:	b10a      	cbz	r2, 802641e <_printf_common+0x26>
 802641a:	3301      	adds	r3, #1
 802641c:	6033      	str	r3, [r6, #0]
 802641e:	6823      	ldr	r3, [r4, #0]
 8026420:	0699      	lsls	r1, r3, #26
 8026422:	bf42      	ittt	mi
 8026424:	6833      	ldrmi	r3, [r6, #0]
 8026426:	3302      	addmi	r3, #2
 8026428:	6033      	strmi	r3, [r6, #0]
 802642a:	6825      	ldr	r5, [r4, #0]
 802642c:	f015 0506 	ands.w	r5, r5, #6
 8026430:	d106      	bne.n	8026440 <_printf_common+0x48>
 8026432:	f104 0a19 	add.w	sl, r4, #25
 8026436:	68e3      	ldr	r3, [r4, #12]
 8026438:	6832      	ldr	r2, [r6, #0]
 802643a:	1a9b      	subs	r3, r3, r2
 802643c:	42ab      	cmp	r3, r5
 802643e:	dc26      	bgt.n	802648e <_printf_common+0x96>
 8026440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8026444:	6822      	ldr	r2, [r4, #0]
 8026446:	3b00      	subs	r3, #0
 8026448:	bf18      	it	ne
 802644a:	2301      	movne	r3, #1
 802644c:	0692      	lsls	r2, r2, #26
 802644e:	d42b      	bmi.n	80264a8 <_printf_common+0xb0>
 8026450:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8026454:	4641      	mov	r1, r8
 8026456:	4638      	mov	r0, r7
 8026458:	47c8      	blx	r9
 802645a:	3001      	adds	r0, #1
 802645c:	d01e      	beq.n	802649c <_printf_common+0xa4>
 802645e:	6823      	ldr	r3, [r4, #0]
 8026460:	6922      	ldr	r2, [r4, #16]
 8026462:	f003 0306 	and.w	r3, r3, #6
 8026466:	2b04      	cmp	r3, #4
 8026468:	bf02      	ittt	eq
 802646a:	68e5      	ldreq	r5, [r4, #12]
 802646c:	6833      	ldreq	r3, [r6, #0]
 802646e:	1aed      	subeq	r5, r5, r3
 8026470:	68a3      	ldr	r3, [r4, #8]
 8026472:	bf0c      	ite	eq
 8026474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026478:	2500      	movne	r5, #0
 802647a:	4293      	cmp	r3, r2
 802647c:	bfc4      	itt	gt
 802647e:	1a9b      	subgt	r3, r3, r2
 8026480:	18ed      	addgt	r5, r5, r3
 8026482:	2600      	movs	r6, #0
 8026484:	341a      	adds	r4, #26
 8026486:	42b5      	cmp	r5, r6
 8026488:	d11a      	bne.n	80264c0 <_printf_common+0xc8>
 802648a:	2000      	movs	r0, #0
 802648c:	e008      	b.n	80264a0 <_printf_common+0xa8>
 802648e:	2301      	movs	r3, #1
 8026490:	4652      	mov	r2, sl
 8026492:	4641      	mov	r1, r8
 8026494:	4638      	mov	r0, r7
 8026496:	47c8      	blx	r9
 8026498:	3001      	adds	r0, #1
 802649a:	d103      	bne.n	80264a4 <_printf_common+0xac>
 802649c:	f04f 30ff 	mov.w	r0, #4294967295
 80264a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80264a4:	3501      	adds	r5, #1
 80264a6:	e7c6      	b.n	8026436 <_printf_common+0x3e>
 80264a8:	18e1      	adds	r1, r4, r3
 80264aa:	1c5a      	adds	r2, r3, #1
 80264ac:	2030      	movs	r0, #48	@ 0x30
 80264ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80264b2:	4422      	add	r2, r4
 80264b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80264b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80264bc:	3302      	adds	r3, #2
 80264be:	e7c7      	b.n	8026450 <_printf_common+0x58>
 80264c0:	2301      	movs	r3, #1
 80264c2:	4622      	mov	r2, r4
 80264c4:	4641      	mov	r1, r8
 80264c6:	4638      	mov	r0, r7
 80264c8:	47c8      	blx	r9
 80264ca:	3001      	adds	r0, #1
 80264cc:	d0e6      	beq.n	802649c <_printf_common+0xa4>
 80264ce:	3601      	adds	r6, #1
 80264d0:	e7d9      	b.n	8026486 <_printf_common+0x8e>
	...

080264d4 <_printf_i>:
 80264d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80264d8:	7e0f      	ldrb	r7, [r1, #24]
 80264da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80264dc:	2f78      	cmp	r7, #120	@ 0x78
 80264de:	4691      	mov	r9, r2
 80264e0:	4680      	mov	r8, r0
 80264e2:	460c      	mov	r4, r1
 80264e4:	469a      	mov	sl, r3
 80264e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80264ea:	d807      	bhi.n	80264fc <_printf_i+0x28>
 80264ec:	2f62      	cmp	r7, #98	@ 0x62
 80264ee:	d80a      	bhi.n	8026506 <_printf_i+0x32>
 80264f0:	2f00      	cmp	r7, #0
 80264f2:	f000 80d2 	beq.w	802669a <_printf_i+0x1c6>
 80264f6:	2f58      	cmp	r7, #88	@ 0x58
 80264f8:	f000 80b9 	beq.w	802666e <_printf_i+0x19a>
 80264fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8026504:	e03a      	b.n	802657c <_printf_i+0xa8>
 8026506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802650a:	2b15      	cmp	r3, #21
 802650c:	d8f6      	bhi.n	80264fc <_printf_i+0x28>
 802650e:	a101      	add	r1, pc, #4	@ (adr r1, 8026514 <_printf_i+0x40>)
 8026510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026514:	0802656d 	.word	0x0802656d
 8026518:	08026581 	.word	0x08026581
 802651c:	080264fd 	.word	0x080264fd
 8026520:	080264fd 	.word	0x080264fd
 8026524:	080264fd 	.word	0x080264fd
 8026528:	080264fd 	.word	0x080264fd
 802652c:	08026581 	.word	0x08026581
 8026530:	080264fd 	.word	0x080264fd
 8026534:	080264fd 	.word	0x080264fd
 8026538:	080264fd 	.word	0x080264fd
 802653c:	080264fd 	.word	0x080264fd
 8026540:	08026681 	.word	0x08026681
 8026544:	080265ab 	.word	0x080265ab
 8026548:	0802663b 	.word	0x0802663b
 802654c:	080264fd 	.word	0x080264fd
 8026550:	080264fd 	.word	0x080264fd
 8026554:	080266a3 	.word	0x080266a3
 8026558:	080264fd 	.word	0x080264fd
 802655c:	080265ab 	.word	0x080265ab
 8026560:	080264fd 	.word	0x080264fd
 8026564:	080264fd 	.word	0x080264fd
 8026568:	08026643 	.word	0x08026643
 802656c:	6833      	ldr	r3, [r6, #0]
 802656e:	1d1a      	adds	r2, r3, #4
 8026570:	681b      	ldr	r3, [r3, #0]
 8026572:	6032      	str	r2, [r6, #0]
 8026574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802657c:	2301      	movs	r3, #1
 802657e:	e09d      	b.n	80266bc <_printf_i+0x1e8>
 8026580:	6833      	ldr	r3, [r6, #0]
 8026582:	6820      	ldr	r0, [r4, #0]
 8026584:	1d19      	adds	r1, r3, #4
 8026586:	6031      	str	r1, [r6, #0]
 8026588:	0606      	lsls	r6, r0, #24
 802658a:	d501      	bpl.n	8026590 <_printf_i+0xbc>
 802658c:	681d      	ldr	r5, [r3, #0]
 802658e:	e003      	b.n	8026598 <_printf_i+0xc4>
 8026590:	0645      	lsls	r5, r0, #25
 8026592:	d5fb      	bpl.n	802658c <_printf_i+0xb8>
 8026594:	f9b3 5000 	ldrsh.w	r5, [r3]
 8026598:	2d00      	cmp	r5, #0
 802659a:	da03      	bge.n	80265a4 <_printf_i+0xd0>
 802659c:	232d      	movs	r3, #45	@ 0x2d
 802659e:	426d      	negs	r5, r5
 80265a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80265a4:	4859      	ldr	r0, [pc, #356]	@ (802670c <_printf_i+0x238>)
 80265a6:	230a      	movs	r3, #10
 80265a8:	e011      	b.n	80265ce <_printf_i+0xfa>
 80265aa:	6821      	ldr	r1, [r4, #0]
 80265ac:	6833      	ldr	r3, [r6, #0]
 80265ae:	0608      	lsls	r0, r1, #24
 80265b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80265b4:	d402      	bmi.n	80265bc <_printf_i+0xe8>
 80265b6:	0649      	lsls	r1, r1, #25
 80265b8:	bf48      	it	mi
 80265ba:	b2ad      	uxthmi	r5, r5
 80265bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80265be:	4853      	ldr	r0, [pc, #332]	@ (802670c <_printf_i+0x238>)
 80265c0:	6033      	str	r3, [r6, #0]
 80265c2:	bf14      	ite	ne
 80265c4:	230a      	movne	r3, #10
 80265c6:	2308      	moveq	r3, #8
 80265c8:	2100      	movs	r1, #0
 80265ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80265ce:	6866      	ldr	r6, [r4, #4]
 80265d0:	60a6      	str	r6, [r4, #8]
 80265d2:	2e00      	cmp	r6, #0
 80265d4:	bfa2      	ittt	ge
 80265d6:	6821      	ldrge	r1, [r4, #0]
 80265d8:	f021 0104 	bicge.w	r1, r1, #4
 80265dc:	6021      	strge	r1, [r4, #0]
 80265de:	b90d      	cbnz	r5, 80265e4 <_printf_i+0x110>
 80265e0:	2e00      	cmp	r6, #0
 80265e2:	d04b      	beq.n	802667c <_printf_i+0x1a8>
 80265e4:	4616      	mov	r6, r2
 80265e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80265ea:	fb03 5711 	mls	r7, r3, r1, r5
 80265ee:	5dc7      	ldrb	r7, [r0, r7]
 80265f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80265f4:	462f      	mov	r7, r5
 80265f6:	42bb      	cmp	r3, r7
 80265f8:	460d      	mov	r5, r1
 80265fa:	d9f4      	bls.n	80265e6 <_printf_i+0x112>
 80265fc:	2b08      	cmp	r3, #8
 80265fe:	d10b      	bne.n	8026618 <_printf_i+0x144>
 8026600:	6823      	ldr	r3, [r4, #0]
 8026602:	07df      	lsls	r7, r3, #31
 8026604:	d508      	bpl.n	8026618 <_printf_i+0x144>
 8026606:	6923      	ldr	r3, [r4, #16]
 8026608:	6861      	ldr	r1, [r4, #4]
 802660a:	4299      	cmp	r1, r3
 802660c:	bfde      	ittt	le
 802660e:	2330      	movle	r3, #48	@ 0x30
 8026610:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026614:	f106 36ff 	addle.w	r6, r6, #4294967295
 8026618:	1b92      	subs	r2, r2, r6
 802661a:	6122      	str	r2, [r4, #16]
 802661c:	f8cd a000 	str.w	sl, [sp]
 8026620:	464b      	mov	r3, r9
 8026622:	aa03      	add	r2, sp, #12
 8026624:	4621      	mov	r1, r4
 8026626:	4640      	mov	r0, r8
 8026628:	f7ff fee6 	bl	80263f8 <_printf_common>
 802662c:	3001      	adds	r0, #1
 802662e:	d14a      	bne.n	80266c6 <_printf_i+0x1f2>
 8026630:	f04f 30ff 	mov.w	r0, #4294967295
 8026634:	b004      	add	sp, #16
 8026636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802663a:	6823      	ldr	r3, [r4, #0]
 802663c:	f043 0320 	orr.w	r3, r3, #32
 8026640:	6023      	str	r3, [r4, #0]
 8026642:	4833      	ldr	r0, [pc, #204]	@ (8026710 <_printf_i+0x23c>)
 8026644:	2778      	movs	r7, #120	@ 0x78
 8026646:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802664a:	6823      	ldr	r3, [r4, #0]
 802664c:	6831      	ldr	r1, [r6, #0]
 802664e:	061f      	lsls	r7, r3, #24
 8026650:	f851 5b04 	ldr.w	r5, [r1], #4
 8026654:	d402      	bmi.n	802665c <_printf_i+0x188>
 8026656:	065f      	lsls	r7, r3, #25
 8026658:	bf48      	it	mi
 802665a:	b2ad      	uxthmi	r5, r5
 802665c:	6031      	str	r1, [r6, #0]
 802665e:	07d9      	lsls	r1, r3, #31
 8026660:	bf44      	itt	mi
 8026662:	f043 0320 	orrmi.w	r3, r3, #32
 8026666:	6023      	strmi	r3, [r4, #0]
 8026668:	b11d      	cbz	r5, 8026672 <_printf_i+0x19e>
 802666a:	2310      	movs	r3, #16
 802666c:	e7ac      	b.n	80265c8 <_printf_i+0xf4>
 802666e:	4827      	ldr	r0, [pc, #156]	@ (802670c <_printf_i+0x238>)
 8026670:	e7e9      	b.n	8026646 <_printf_i+0x172>
 8026672:	6823      	ldr	r3, [r4, #0]
 8026674:	f023 0320 	bic.w	r3, r3, #32
 8026678:	6023      	str	r3, [r4, #0]
 802667a:	e7f6      	b.n	802666a <_printf_i+0x196>
 802667c:	4616      	mov	r6, r2
 802667e:	e7bd      	b.n	80265fc <_printf_i+0x128>
 8026680:	6833      	ldr	r3, [r6, #0]
 8026682:	6825      	ldr	r5, [r4, #0]
 8026684:	6961      	ldr	r1, [r4, #20]
 8026686:	1d18      	adds	r0, r3, #4
 8026688:	6030      	str	r0, [r6, #0]
 802668a:	062e      	lsls	r6, r5, #24
 802668c:	681b      	ldr	r3, [r3, #0]
 802668e:	d501      	bpl.n	8026694 <_printf_i+0x1c0>
 8026690:	6019      	str	r1, [r3, #0]
 8026692:	e002      	b.n	802669a <_printf_i+0x1c6>
 8026694:	0668      	lsls	r0, r5, #25
 8026696:	d5fb      	bpl.n	8026690 <_printf_i+0x1bc>
 8026698:	8019      	strh	r1, [r3, #0]
 802669a:	2300      	movs	r3, #0
 802669c:	6123      	str	r3, [r4, #16]
 802669e:	4616      	mov	r6, r2
 80266a0:	e7bc      	b.n	802661c <_printf_i+0x148>
 80266a2:	6833      	ldr	r3, [r6, #0]
 80266a4:	1d1a      	adds	r2, r3, #4
 80266a6:	6032      	str	r2, [r6, #0]
 80266a8:	681e      	ldr	r6, [r3, #0]
 80266aa:	6862      	ldr	r2, [r4, #4]
 80266ac:	2100      	movs	r1, #0
 80266ae:	4630      	mov	r0, r6
 80266b0:	f7d9 fdae 	bl	8000210 <memchr>
 80266b4:	b108      	cbz	r0, 80266ba <_printf_i+0x1e6>
 80266b6:	1b80      	subs	r0, r0, r6
 80266b8:	6060      	str	r0, [r4, #4]
 80266ba:	6863      	ldr	r3, [r4, #4]
 80266bc:	6123      	str	r3, [r4, #16]
 80266be:	2300      	movs	r3, #0
 80266c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80266c4:	e7aa      	b.n	802661c <_printf_i+0x148>
 80266c6:	6923      	ldr	r3, [r4, #16]
 80266c8:	4632      	mov	r2, r6
 80266ca:	4649      	mov	r1, r9
 80266cc:	4640      	mov	r0, r8
 80266ce:	47d0      	blx	sl
 80266d0:	3001      	adds	r0, #1
 80266d2:	d0ad      	beq.n	8026630 <_printf_i+0x15c>
 80266d4:	6823      	ldr	r3, [r4, #0]
 80266d6:	079b      	lsls	r3, r3, #30
 80266d8:	d413      	bmi.n	8026702 <_printf_i+0x22e>
 80266da:	68e0      	ldr	r0, [r4, #12]
 80266dc:	9b03      	ldr	r3, [sp, #12]
 80266de:	4298      	cmp	r0, r3
 80266e0:	bfb8      	it	lt
 80266e2:	4618      	movlt	r0, r3
 80266e4:	e7a6      	b.n	8026634 <_printf_i+0x160>
 80266e6:	2301      	movs	r3, #1
 80266e8:	4632      	mov	r2, r6
 80266ea:	4649      	mov	r1, r9
 80266ec:	4640      	mov	r0, r8
 80266ee:	47d0      	blx	sl
 80266f0:	3001      	adds	r0, #1
 80266f2:	d09d      	beq.n	8026630 <_printf_i+0x15c>
 80266f4:	3501      	adds	r5, #1
 80266f6:	68e3      	ldr	r3, [r4, #12]
 80266f8:	9903      	ldr	r1, [sp, #12]
 80266fa:	1a5b      	subs	r3, r3, r1
 80266fc:	42ab      	cmp	r3, r5
 80266fe:	dcf2      	bgt.n	80266e6 <_printf_i+0x212>
 8026700:	e7eb      	b.n	80266da <_printf_i+0x206>
 8026702:	2500      	movs	r5, #0
 8026704:	f104 0619 	add.w	r6, r4, #25
 8026708:	e7f5      	b.n	80266f6 <_printf_i+0x222>
 802670a:	bf00      	nop
 802670c:	0802d0a2 	.word	0x0802d0a2
 8026710:	0802d0b3 	.word	0x0802d0b3

08026714 <std>:
 8026714:	2300      	movs	r3, #0
 8026716:	b510      	push	{r4, lr}
 8026718:	4604      	mov	r4, r0
 802671a:	e9c0 3300 	strd	r3, r3, [r0]
 802671e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026722:	6083      	str	r3, [r0, #8]
 8026724:	8181      	strh	r1, [r0, #12]
 8026726:	6643      	str	r3, [r0, #100]	@ 0x64
 8026728:	81c2      	strh	r2, [r0, #14]
 802672a:	6183      	str	r3, [r0, #24]
 802672c:	4619      	mov	r1, r3
 802672e:	2208      	movs	r2, #8
 8026730:	305c      	adds	r0, #92	@ 0x5c
 8026732:	f000 f950 	bl	80269d6 <memset>
 8026736:	4b0d      	ldr	r3, [pc, #52]	@ (802676c <std+0x58>)
 8026738:	6263      	str	r3, [r4, #36]	@ 0x24
 802673a:	4b0d      	ldr	r3, [pc, #52]	@ (8026770 <std+0x5c>)
 802673c:	62a3      	str	r3, [r4, #40]	@ 0x28
 802673e:	4b0d      	ldr	r3, [pc, #52]	@ (8026774 <std+0x60>)
 8026740:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8026742:	4b0d      	ldr	r3, [pc, #52]	@ (8026778 <std+0x64>)
 8026744:	6323      	str	r3, [r4, #48]	@ 0x30
 8026746:	4b0d      	ldr	r3, [pc, #52]	@ (802677c <std+0x68>)
 8026748:	6224      	str	r4, [r4, #32]
 802674a:	429c      	cmp	r4, r3
 802674c:	d006      	beq.n	802675c <std+0x48>
 802674e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8026752:	4294      	cmp	r4, r2
 8026754:	d002      	beq.n	802675c <std+0x48>
 8026756:	33d0      	adds	r3, #208	@ 0xd0
 8026758:	429c      	cmp	r4, r3
 802675a:	d105      	bne.n	8026768 <std+0x54>
 802675c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8026760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026764:	f000 ba14 	b.w	8026b90 <__retarget_lock_init_recursive>
 8026768:	bd10      	pop	{r4, pc}
 802676a:	bf00      	nop
 802676c:	080268fd 	.word	0x080268fd
 8026770:	0802691f 	.word	0x0802691f
 8026774:	08026957 	.word	0x08026957
 8026778:	0802697b 	.word	0x0802697b
 802677c:	2003ce04 	.word	0x2003ce04

08026780 <stdio_exit_handler>:
 8026780:	4a02      	ldr	r2, [pc, #8]	@ (802678c <stdio_exit_handler+0xc>)
 8026782:	4903      	ldr	r1, [pc, #12]	@ (8026790 <stdio_exit_handler+0x10>)
 8026784:	4803      	ldr	r0, [pc, #12]	@ (8026794 <stdio_exit_handler+0x14>)
 8026786:	f000 b869 	b.w	802685c <_fwalk_sglue>
 802678a:	bf00      	nop
 802678c:	200100ac 	.word	0x200100ac
 8026790:	0802865d 	.word	0x0802865d
 8026794:	200100bc 	.word	0x200100bc

08026798 <cleanup_stdio>:
 8026798:	6841      	ldr	r1, [r0, #4]
 802679a:	4b0c      	ldr	r3, [pc, #48]	@ (80267cc <cleanup_stdio+0x34>)
 802679c:	4299      	cmp	r1, r3
 802679e:	b510      	push	{r4, lr}
 80267a0:	4604      	mov	r4, r0
 80267a2:	d001      	beq.n	80267a8 <cleanup_stdio+0x10>
 80267a4:	f001 ff5a 	bl	802865c <_fflush_r>
 80267a8:	68a1      	ldr	r1, [r4, #8]
 80267aa:	4b09      	ldr	r3, [pc, #36]	@ (80267d0 <cleanup_stdio+0x38>)
 80267ac:	4299      	cmp	r1, r3
 80267ae:	d002      	beq.n	80267b6 <cleanup_stdio+0x1e>
 80267b0:	4620      	mov	r0, r4
 80267b2:	f001 ff53 	bl	802865c <_fflush_r>
 80267b6:	68e1      	ldr	r1, [r4, #12]
 80267b8:	4b06      	ldr	r3, [pc, #24]	@ (80267d4 <cleanup_stdio+0x3c>)
 80267ba:	4299      	cmp	r1, r3
 80267bc:	d004      	beq.n	80267c8 <cleanup_stdio+0x30>
 80267be:	4620      	mov	r0, r4
 80267c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80267c4:	f001 bf4a 	b.w	802865c <_fflush_r>
 80267c8:	bd10      	pop	{r4, pc}
 80267ca:	bf00      	nop
 80267cc:	2003ce04 	.word	0x2003ce04
 80267d0:	2003ce6c 	.word	0x2003ce6c
 80267d4:	2003ced4 	.word	0x2003ced4

080267d8 <global_stdio_init.part.0>:
 80267d8:	b510      	push	{r4, lr}
 80267da:	4b0b      	ldr	r3, [pc, #44]	@ (8026808 <global_stdio_init.part.0+0x30>)
 80267dc:	4c0b      	ldr	r4, [pc, #44]	@ (802680c <global_stdio_init.part.0+0x34>)
 80267de:	4a0c      	ldr	r2, [pc, #48]	@ (8026810 <global_stdio_init.part.0+0x38>)
 80267e0:	601a      	str	r2, [r3, #0]
 80267e2:	4620      	mov	r0, r4
 80267e4:	2200      	movs	r2, #0
 80267e6:	2104      	movs	r1, #4
 80267e8:	f7ff ff94 	bl	8026714 <std>
 80267ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80267f0:	2201      	movs	r2, #1
 80267f2:	2109      	movs	r1, #9
 80267f4:	f7ff ff8e 	bl	8026714 <std>
 80267f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80267fc:	2202      	movs	r2, #2
 80267fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026802:	2112      	movs	r1, #18
 8026804:	f7ff bf86 	b.w	8026714 <std>
 8026808:	2003cf3c 	.word	0x2003cf3c
 802680c:	2003ce04 	.word	0x2003ce04
 8026810:	08026781 	.word	0x08026781

08026814 <__sfp_lock_acquire>:
 8026814:	4801      	ldr	r0, [pc, #4]	@ (802681c <__sfp_lock_acquire+0x8>)
 8026816:	f000 b9bc 	b.w	8026b92 <__retarget_lock_acquire_recursive>
 802681a:	bf00      	nop
 802681c:	2003cf45 	.word	0x2003cf45

08026820 <__sfp_lock_release>:
 8026820:	4801      	ldr	r0, [pc, #4]	@ (8026828 <__sfp_lock_release+0x8>)
 8026822:	f000 b9b7 	b.w	8026b94 <__retarget_lock_release_recursive>
 8026826:	bf00      	nop
 8026828:	2003cf45 	.word	0x2003cf45

0802682c <__sinit>:
 802682c:	b510      	push	{r4, lr}
 802682e:	4604      	mov	r4, r0
 8026830:	f7ff fff0 	bl	8026814 <__sfp_lock_acquire>
 8026834:	6a23      	ldr	r3, [r4, #32]
 8026836:	b11b      	cbz	r3, 8026840 <__sinit+0x14>
 8026838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802683c:	f7ff bff0 	b.w	8026820 <__sfp_lock_release>
 8026840:	4b04      	ldr	r3, [pc, #16]	@ (8026854 <__sinit+0x28>)
 8026842:	6223      	str	r3, [r4, #32]
 8026844:	4b04      	ldr	r3, [pc, #16]	@ (8026858 <__sinit+0x2c>)
 8026846:	681b      	ldr	r3, [r3, #0]
 8026848:	2b00      	cmp	r3, #0
 802684a:	d1f5      	bne.n	8026838 <__sinit+0xc>
 802684c:	f7ff ffc4 	bl	80267d8 <global_stdio_init.part.0>
 8026850:	e7f2      	b.n	8026838 <__sinit+0xc>
 8026852:	bf00      	nop
 8026854:	08026799 	.word	0x08026799
 8026858:	2003cf3c 	.word	0x2003cf3c

0802685c <_fwalk_sglue>:
 802685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026860:	4607      	mov	r7, r0
 8026862:	4688      	mov	r8, r1
 8026864:	4614      	mov	r4, r2
 8026866:	2600      	movs	r6, #0
 8026868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802686c:	f1b9 0901 	subs.w	r9, r9, #1
 8026870:	d505      	bpl.n	802687e <_fwalk_sglue+0x22>
 8026872:	6824      	ldr	r4, [r4, #0]
 8026874:	2c00      	cmp	r4, #0
 8026876:	d1f7      	bne.n	8026868 <_fwalk_sglue+0xc>
 8026878:	4630      	mov	r0, r6
 802687a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802687e:	89ab      	ldrh	r3, [r5, #12]
 8026880:	2b01      	cmp	r3, #1
 8026882:	d907      	bls.n	8026894 <_fwalk_sglue+0x38>
 8026884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026888:	3301      	adds	r3, #1
 802688a:	d003      	beq.n	8026894 <_fwalk_sglue+0x38>
 802688c:	4629      	mov	r1, r5
 802688e:	4638      	mov	r0, r7
 8026890:	47c0      	blx	r8
 8026892:	4306      	orrs	r6, r0
 8026894:	3568      	adds	r5, #104	@ 0x68
 8026896:	e7e9      	b.n	802686c <_fwalk_sglue+0x10>

08026898 <iprintf>:
 8026898:	b40f      	push	{r0, r1, r2, r3}
 802689a:	b507      	push	{r0, r1, r2, lr}
 802689c:	4906      	ldr	r1, [pc, #24]	@ (80268b8 <iprintf+0x20>)
 802689e:	ab04      	add	r3, sp, #16
 80268a0:	6808      	ldr	r0, [r1, #0]
 80268a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80268a6:	6881      	ldr	r1, [r0, #8]
 80268a8:	9301      	str	r3, [sp, #4]
 80268aa:	f001 fd3b 	bl	8028324 <_vfiprintf_r>
 80268ae:	b003      	add	sp, #12
 80268b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80268b4:	b004      	add	sp, #16
 80268b6:	4770      	bx	lr
 80268b8:	200100b8 	.word	0x200100b8

080268bc <siprintf>:
 80268bc:	b40e      	push	{r1, r2, r3}
 80268be:	b500      	push	{lr}
 80268c0:	b09c      	sub	sp, #112	@ 0x70
 80268c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80268c4:	9002      	str	r0, [sp, #8]
 80268c6:	9006      	str	r0, [sp, #24]
 80268c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80268cc:	4809      	ldr	r0, [pc, #36]	@ (80268f4 <siprintf+0x38>)
 80268ce:	9107      	str	r1, [sp, #28]
 80268d0:	9104      	str	r1, [sp, #16]
 80268d2:	4909      	ldr	r1, [pc, #36]	@ (80268f8 <siprintf+0x3c>)
 80268d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80268d8:	9105      	str	r1, [sp, #20]
 80268da:	6800      	ldr	r0, [r0, #0]
 80268dc:	9301      	str	r3, [sp, #4]
 80268de:	a902      	add	r1, sp, #8
 80268e0:	f001 fbfa 	bl	80280d8 <_svfiprintf_r>
 80268e4:	9b02      	ldr	r3, [sp, #8]
 80268e6:	2200      	movs	r2, #0
 80268e8:	701a      	strb	r2, [r3, #0]
 80268ea:	b01c      	add	sp, #112	@ 0x70
 80268ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80268f0:	b003      	add	sp, #12
 80268f2:	4770      	bx	lr
 80268f4:	200100b8 	.word	0x200100b8
 80268f8:	ffff0208 	.word	0xffff0208

080268fc <__sread>:
 80268fc:	b510      	push	{r4, lr}
 80268fe:	460c      	mov	r4, r1
 8026900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026904:	f000 f8ec 	bl	8026ae0 <_read_r>
 8026908:	2800      	cmp	r0, #0
 802690a:	bfab      	itete	ge
 802690c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802690e:	89a3      	ldrhlt	r3, [r4, #12]
 8026910:	181b      	addge	r3, r3, r0
 8026912:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8026916:	bfac      	ite	ge
 8026918:	6563      	strge	r3, [r4, #84]	@ 0x54
 802691a:	81a3      	strhlt	r3, [r4, #12]
 802691c:	bd10      	pop	{r4, pc}

0802691e <__swrite>:
 802691e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026922:	461f      	mov	r7, r3
 8026924:	898b      	ldrh	r3, [r1, #12]
 8026926:	05db      	lsls	r3, r3, #23
 8026928:	4605      	mov	r5, r0
 802692a:	460c      	mov	r4, r1
 802692c:	4616      	mov	r6, r2
 802692e:	d505      	bpl.n	802693c <__swrite+0x1e>
 8026930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026934:	2302      	movs	r3, #2
 8026936:	2200      	movs	r2, #0
 8026938:	f000 f8c0 	bl	8026abc <_lseek_r>
 802693c:	89a3      	ldrh	r3, [r4, #12]
 802693e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026942:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8026946:	81a3      	strh	r3, [r4, #12]
 8026948:	4632      	mov	r2, r6
 802694a:	463b      	mov	r3, r7
 802694c:	4628      	mov	r0, r5
 802694e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026952:	f000 b8e7 	b.w	8026b24 <_write_r>

08026956 <__sseek>:
 8026956:	b510      	push	{r4, lr}
 8026958:	460c      	mov	r4, r1
 802695a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802695e:	f000 f8ad 	bl	8026abc <_lseek_r>
 8026962:	1c43      	adds	r3, r0, #1
 8026964:	89a3      	ldrh	r3, [r4, #12]
 8026966:	bf15      	itete	ne
 8026968:	6560      	strne	r0, [r4, #84]	@ 0x54
 802696a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802696e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8026972:	81a3      	strheq	r3, [r4, #12]
 8026974:	bf18      	it	ne
 8026976:	81a3      	strhne	r3, [r4, #12]
 8026978:	bd10      	pop	{r4, pc}

0802697a <__sclose>:
 802697a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802697e:	f000 b837 	b.w	80269f0 <_close_r>

08026982 <memcmp>:
 8026982:	b510      	push	{r4, lr}
 8026984:	3901      	subs	r1, #1
 8026986:	4402      	add	r2, r0
 8026988:	4290      	cmp	r0, r2
 802698a:	d101      	bne.n	8026990 <memcmp+0xe>
 802698c:	2000      	movs	r0, #0
 802698e:	e005      	b.n	802699c <memcmp+0x1a>
 8026990:	7803      	ldrb	r3, [r0, #0]
 8026992:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8026996:	42a3      	cmp	r3, r4
 8026998:	d001      	beq.n	802699e <memcmp+0x1c>
 802699a:	1b18      	subs	r0, r3, r4
 802699c:	bd10      	pop	{r4, pc}
 802699e:	3001      	adds	r0, #1
 80269a0:	e7f2      	b.n	8026988 <memcmp+0x6>

080269a2 <memmove>:
 80269a2:	4288      	cmp	r0, r1
 80269a4:	b510      	push	{r4, lr}
 80269a6:	eb01 0402 	add.w	r4, r1, r2
 80269aa:	d902      	bls.n	80269b2 <memmove+0x10>
 80269ac:	4284      	cmp	r4, r0
 80269ae:	4623      	mov	r3, r4
 80269b0:	d807      	bhi.n	80269c2 <memmove+0x20>
 80269b2:	1e43      	subs	r3, r0, #1
 80269b4:	42a1      	cmp	r1, r4
 80269b6:	d008      	beq.n	80269ca <memmove+0x28>
 80269b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80269bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80269c0:	e7f8      	b.n	80269b4 <memmove+0x12>
 80269c2:	4402      	add	r2, r0
 80269c4:	4601      	mov	r1, r0
 80269c6:	428a      	cmp	r2, r1
 80269c8:	d100      	bne.n	80269cc <memmove+0x2a>
 80269ca:	bd10      	pop	{r4, pc}
 80269cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80269d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80269d4:	e7f7      	b.n	80269c6 <memmove+0x24>

080269d6 <memset>:
 80269d6:	4402      	add	r2, r0
 80269d8:	4603      	mov	r3, r0
 80269da:	4293      	cmp	r3, r2
 80269dc:	d100      	bne.n	80269e0 <memset+0xa>
 80269de:	4770      	bx	lr
 80269e0:	f803 1b01 	strb.w	r1, [r3], #1
 80269e4:	e7f9      	b.n	80269da <memset+0x4>
	...

080269e8 <_localeconv_r>:
 80269e8:	4800      	ldr	r0, [pc, #0]	@ (80269ec <_localeconv_r+0x4>)
 80269ea:	4770      	bx	lr
 80269ec:	200101f8 	.word	0x200101f8

080269f0 <_close_r>:
 80269f0:	b538      	push	{r3, r4, r5, lr}
 80269f2:	4d06      	ldr	r5, [pc, #24]	@ (8026a0c <_close_r+0x1c>)
 80269f4:	2300      	movs	r3, #0
 80269f6:	4604      	mov	r4, r0
 80269f8:	4608      	mov	r0, r1
 80269fa:	602b      	str	r3, [r5, #0]
 80269fc:	f7dd f9c6 	bl	8003d8c <_close>
 8026a00:	1c43      	adds	r3, r0, #1
 8026a02:	d102      	bne.n	8026a0a <_close_r+0x1a>
 8026a04:	682b      	ldr	r3, [r5, #0]
 8026a06:	b103      	cbz	r3, 8026a0a <_close_r+0x1a>
 8026a08:	6023      	str	r3, [r4, #0]
 8026a0a:	bd38      	pop	{r3, r4, r5, pc}
 8026a0c:	2003cf40 	.word	0x2003cf40

08026a10 <_reclaim_reent>:
 8026a10:	4b29      	ldr	r3, [pc, #164]	@ (8026ab8 <_reclaim_reent+0xa8>)
 8026a12:	681b      	ldr	r3, [r3, #0]
 8026a14:	4283      	cmp	r3, r0
 8026a16:	b570      	push	{r4, r5, r6, lr}
 8026a18:	4604      	mov	r4, r0
 8026a1a:	d04b      	beq.n	8026ab4 <_reclaim_reent+0xa4>
 8026a1c:	69c3      	ldr	r3, [r0, #28]
 8026a1e:	b1ab      	cbz	r3, 8026a4c <_reclaim_reent+0x3c>
 8026a20:	68db      	ldr	r3, [r3, #12]
 8026a22:	b16b      	cbz	r3, 8026a40 <_reclaim_reent+0x30>
 8026a24:	2500      	movs	r5, #0
 8026a26:	69e3      	ldr	r3, [r4, #28]
 8026a28:	68db      	ldr	r3, [r3, #12]
 8026a2a:	5959      	ldr	r1, [r3, r5]
 8026a2c:	2900      	cmp	r1, #0
 8026a2e:	d13b      	bne.n	8026aa8 <_reclaim_reent+0x98>
 8026a30:	3504      	adds	r5, #4
 8026a32:	2d80      	cmp	r5, #128	@ 0x80
 8026a34:	d1f7      	bne.n	8026a26 <_reclaim_reent+0x16>
 8026a36:	69e3      	ldr	r3, [r4, #28]
 8026a38:	4620      	mov	r0, r4
 8026a3a:	68d9      	ldr	r1, [r3, #12]
 8026a3c:	f000 ff24 	bl	8027888 <_free_r>
 8026a40:	69e3      	ldr	r3, [r4, #28]
 8026a42:	6819      	ldr	r1, [r3, #0]
 8026a44:	b111      	cbz	r1, 8026a4c <_reclaim_reent+0x3c>
 8026a46:	4620      	mov	r0, r4
 8026a48:	f000 ff1e 	bl	8027888 <_free_r>
 8026a4c:	6961      	ldr	r1, [r4, #20]
 8026a4e:	b111      	cbz	r1, 8026a56 <_reclaim_reent+0x46>
 8026a50:	4620      	mov	r0, r4
 8026a52:	f000 ff19 	bl	8027888 <_free_r>
 8026a56:	69e1      	ldr	r1, [r4, #28]
 8026a58:	b111      	cbz	r1, 8026a60 <_reclaim_reent+0x50>
 8026a5a:	4620      	mov	r0, r4
 8026a5c:	f000 ff14 	bl	8027888 <_free_r>
 8026a60:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8026a62:	b111      	cbz	r1, 8026a6a <_reclaim_reent+0x5a>
 8026a64:	4620      	mov	r0, r4
 8026a66:	f000 ff0f 	bl	8027888 <_free_r>
 8026a6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026a6c:	b111      	cbz	r1, 8026a74 <_reclaim_reent+0x64>
 8026a6e:	4620      	mov	r0, r4
 8026a70:	f000 ff0a 	bl	8027888 <_free_r>
 8026a74:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8026a76:	b111      	cbz	r1, 8026a7e <_reclaim_reent+0x6e>
 8026a78:	4620      	mov	r0, r4
 8026a7a:	f000 ff05 	bl	8027888 <_free_r>
 8026a7e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8026a80:	b111      	cbz	r1, 8026a88 <_reclaim_reent+0x78>
 8026a82:	4620      	mov	r0, r4
 8026a84:	f000 ff00 	bl	8027888 <_free_r>
 8026a88:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8026a8a:	b111      	cbz	r1, 8026a92 <_reclaim_reent+0x82>
 8026a8c:	4620      	mov	r0, r4
 8026a8e:	f000 fefb 	bl	8027888 <_free_r>
 8026a92:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8026a94:	b111      	cbz	r1, 8026a9c <_reclaim_reent+0x8c>
 8026a96:	4620      	mov	r0, r4
 8026a98:	f000 fef6 	bl	8027888 <_free_r>
 8026a9c:	6a23      	ldr	r3, [r4, #32]
 8026a9e:	b14b      	cbz	r3, 8026ab4 <_reclaim_reent+0xa4>
 8026aa0:	4620      	mov	r0, r4
 8026aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026aa6:	4718      	bx	r3
 8026aa8:	680e      	ldr	r6, [r1, #0]
 8026aaa:	4620      	mov	r0, r4
 8026aac:	f000 feec 	bl	8027888 <_free_r>
 8026ab0:	4631      	mov	r1, r6
 8026ab2:	e7bb      	b.n	8026a2c <_reclaim_reent+0x1c>
 8026ab4:	bd70      	pop	{r4, r5, r6, pc}
 8026ab6:	bf00      	nop
 8026ab8:	200100b8 	.word	0x200100b8

08026abc <_lseek_r>:
 8026abc:	b538      	push	{r3, r4, r5, lr}
 8026abe:	4d07      	ldr	r5, [pc, #28]	@ (8026adc <_lseek_r+0x20>)
 8026ac0:	4604      	mov	r4, r0
 8026ac2:	4608      	mov	r0, r1
 8026ac4:	4611      	mov	r1, r2
 8026ac6:	2200      	movs	r2, #0
 8026ac8:	602a      	str	r2, [r5, #0]
 8026aca:	461a      	mov	r2, r3
 8026acc:	f7dd f985 	bl	8003dda <_lseek>
 8026ad0:	1c43      	adds	r3, r0, #1
 8026ad2:	d102      	bne.n	8026ada <_lseek_r+0x1e>
 8026ad4:	682b      	ldr	r3, [r5, #0]
 8026ad6:	b103      	cbz	r3, 8026ada <_lseek_r+0x1e>
 8026ad8:	6023      	str	r3, [r4, #0]
 8026ada:	bd38      	pop	{r3, r4, r5, pc}
 8026adc:	2003cf40 	.word	0x2003cf40

08026ae0 <_read_r>:
 8026ae0:	b538      	push	{r3, r4, r5, lr}
 8026ae2:	4d07      	ldr	r5, [pc, #28]	@ (8026b00 <_read_r+0x20>)
 8026ae4:	4604      	mov	r4, r0
 8026ae6:	4608      	mov	r0, r1
 8026ae8:	4611      	mov	r1, r2
 8026aea:	2200      	movs	r2, #0
 8026aec:	602a      	str	r2, [r5, #0]
 8026aee:	461a      	mov	r2, r3
 8026af0:	f7dd f913 	bl	8003d1a <_read>
 8026af4:	1c43      	adds	r3, r0, #1
 8026af6:	d102      	bne.n	8026afe <_read_r+0x1e>
 8026af8:	682b      	ldr	r3, [r5, #0]
 8026afa:	b103      	cbz	r3, 8026afe <_read_r+0x1e>
 8026afc:	6023      	str	r3, [r4, #0]
 8026afe:	bd38      	pop	{r3, r4, r5, pc}
 8026b00:	2003cf40 	.word	0x2003cf40

08026b04 <_sbrk_r>:
 8026b04:	b538      	push	{r3, r4, r5, lr}
 8026b06:	4d06      	ldr	r5, [pc, #24]	@ (8026b20 <_sbrk_r+0x1c>)
 8026b08:	2300      	movs	r3, #0
 8026b0a:	4604      	mov	r4, r0
 8026b0c:	4608      	mov	r0, r1
 8026b0e:	602b      	str	r3, [r5, #0]
 8026b10:	f7dd f970 	bl	8003df4 <_sbrk>
 8026b14:	1c43      	adds	r3, r0, #1
 8026b16:	d102      	bne.n	8026b1e <_sbrk_r+0x1a>
 8026b18:	682b      	ldr	r3, [r5, #0]
 8026b1a:	b103      	cbz	r3, 8026b1e <_sbrk_r+0x1a>
 8026b1c:	6023      	str	r3, [r4, #0]
 8026b1e:	bd38      	pop	{r3, r4, r5, pc}
 8026b20:	2003cf40 	.word	0x2003cf40

08026b24 <_write_r>:
 8026b24:	b538      	push	{r3, r4, r5, lr}
 8026b26:	4d07      	ldr	r5, [pc, #28]	@ (8026b44 <_write_r+0x20>)
 8026b28:	4604      	mov	r4, r0
 8026b2a:	4608      	mov	r0, r1
 8026b2c:	4611      	mov	r1, r2
 8026b2e:	2200      	movs	r2, #0
 8026b30:	602a      	str	r2, [r5, #0]
 8026b32:	461a      	mov	r2, r3
 8026b34:	f7dd f90e 	bl	8003d54 <_write>
 8026b38:	1c43      	adds	r3, r0, #1
 8026b3a:	d102      	bne.n	8026b42 <_write_r+0x1e>
 8026b3c:	682b      	ldr	r3, [r5, #0]
 8026b3e:	b103      	cbz	r3, 8026b42 <_write_r+0x1e>
 8026b40:	6023      	str	r3, [r4, #0]
 8026b42:	bd38      	pop	{r3, r4, r5, pc}
 8026b44:	2003cf40 	.word	0x2003cf40

08026b48 <__libc_init_array>:
 8026b48:	b570      	push	{r4, r5, r6, lr}
 8026b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8026b80 <__libc_init_array+0x38>)
 8026b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8026b84 <__libc_init_array+0x3c>)
 8026b4e:	1b64      	subs	r4, r4, r5
 8026b50:	10a4      	asrs	r4, r4, #2
 8026b52:	2600      	movs	r6, #0
 8026b54:	42a6      	cmp	r6, r4
 8026b56:	d109      	bne.n	8026b6c <__libc_init_array+0x24>
 8026b58:	4d0b      	ldr	r5, [pc, #44]	@ (8026b88 <__libc_init_array+0x40>)
 8026b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8026b8c <__libc_init_array+0x44>)
 8026b5c:	f001 ff84 	bl	8028a68 <_init>
 8026b60:	1b64      	subs	r4, r4, r5
 8026b62:	10a4      	asrs	r4, r4, #2
 8026b64:	2600      	movs	r6, #0
 8026b66:	42a6      	cmp	r6, r4
 8026b68:	d105      	bne.n	8026b76 <__libc_init_array+0x2e>
 8026b6a:	bd70      	pop	{r4, r5, r6, pc}
 8026b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8026b70:	4798      	blx	r3
 8026b72:	3601      	adds	r6, #1
 8026b74:	e7ee      	b.n	8026b54 <__libc_init_array+0xc>
 8026b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8026b7a:	4798      	blx	r3
 8026b7c:	3601      	adds	r6, #1
 8026b7e:	e7f2      	b.n	8026b66 <__libc_init_array+0x1e>
 8026b80:	0802d2f4 	.word	0x0802d2f4
 8026b84:	0802d2f4 	.word	0x0802d2f4
 8026b88:	0802d2f4 	.word	0x0802d2f4
 8026b8c:	0802d2f8 	.word	0x0802d2f8

08026b90 <__retarget_lock_init_recursive>:
 8026b90:	4770      	bx	lr

08026b92 <__retarget_lock_acquire_recursive>:
 8026b92:	4770      	bx	lr

08026b94 <__retarget_lock_release_recursive>:
 8026b94:	4770      	bx	lr

08026b96 <memcpy>:
 8026b96:	440a      	add	r2, r1
 8026b98:	4291      	cmp	r1, r2
 8026b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8026b9e:	d100      	bne.n	8026ba2 <memcpy+0xc>
 8026ba0:	4770      	bx	lr
 8026ba2:	b510      	push	{r4, lr}
 8026ba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026bac:	4291      	cmp	r1, r2
 8026bae:	d1f9      	bne.n	8026ba4 <memcpy+0xe>
 8026bb0:	bd10      	pop	{r4, pc}
	...

08026bb4 <__assert_func>:
 8026bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026bb6:	4614      	mov	r4, r2
 8026bb8:	461a      	mov	r2, r3
 8026bba:	4b09      	ldr	r3, [pc, #36]	@ (8026be0 <__assert_func+0x2c>)
 8026bbc:	681b      	ldr	r3, [r3, #0]
 8026bbe:	4605      	mov	r5, r0
 8026bc0:	68d8      	ldr	r0, [r3, #12]
 8026bc2:	b954      	cbnz	r4, 8026bda <__assert_func+0x26>
 8026bc4:	4b07      	ldr	r3, [pc, #28]	@ (8026be4 <__assert_func+0x30>)
 8026bc6:	461c      	mov	r4, r3
 8026bc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026bcc:	9100      	str	r1, [sp, #0]
 8026bce:	462b      	mov	r3, r5
 8026bd0:	4905      	ldr	r1, [pc, #20]	@ (8026be8 <__assert_func+0x34>)
 8026bd2:	f001 fd6b 	bl	80286ac <fiprintf>
 8026bd6:	f001 fe0f 	bl	80287f8 <abort>
 8026bda:	4b04      	ldr	r3, [pc, #16]	@ (8026bec <__assert_func+0x38>)
 8026bdc:	e7f4      	b.n	8026bc8 <__assert_func+0x14>
 8026bde:	bf00      	nop
 8026be0:	200100b8 	.word	0x200100b8
 8026be4:	0802d0ff 	.word	0x0802d0ff
 8026be8:	0802d0d1 	.word	0x0802d0d1
 8026bec:	0802d0c4 	.word	0x0802d0c4

08026bf0 <quorem>:
 8026bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bf4:	6903      	ldr	r3, [r0, #16]
 8026bf6:	690c      	ldr	r4, [r1, #16]
 8026bf8:	42a3      	cmp	r3, r4
 8026bfa:	4607      	mov	r7, r0
 8026bfc:	db7e      	blt.n	8026cfc <quorem+0x10c>
 8026bfe:	3c01      	subs	r4, #1
 8026c00:	f101 0814 	add.w	r8, r1, #20
 8026c04:	00a3      	lsls	r3, r4, #2
 8026c06:	f100 0514 	add.w	r5, r0, #20
 8026c0a:	9300      	str	r3, [sp, #0]
 8026c0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026c10:	9301      	str	r3, [sp, #4]
 8026c12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8026c16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026c1a:	3301      	adds	r3, #1
 8026c1c:	429a      	cmp	r2, r3
 8026c1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8026c22:	fbb2 f6f3 	udiv	r6, r2, r3
 8026c26:	d32e      	bcc.n	8026c86 <quorem+0x96>
 8026c28:	f04f 0a00 	mov.w	sl, #0
 8026c2c:	46c4      	mov	ip, r8
 8026c2e:	46ae      	mov	lr, r5
 8026c30:	46d3      	mov	fp, sl
 8026c32:	f85c 3b04 	ldr.w	r3, [ip], #4
 8026c36:	b298      	uxth	r0, r3
 8026c38:	fb06 a000 	mla	r0, r6, r0, sl
 8026c3c:	0c02      	lsrs	r2, r0, #16
 8026c3e:	0c1b      	lsrs	r3, r3, #16
 8026c40:	fb06 2303 	mla	r3, r6, r3, r2
 8026c44:	f8de 2000 	ldr.w	r2, [lr]
 8026c48:	b280      	uxth	r0, r0
 8026c4a:	b292      	uxth	r2, r2
 8026c4c:	1a12      	subs	r2, r2, r0
 8026c4e:	445a      	add	r2, fp
 8026c50:	f8de 0000 	ldr.w	r0, [lr]
 8026c54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026c58:	b29b      	uxth	r3, r3
 8026c5a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8026c5e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8026c62:	b292      	uxth	r2, r2
 8026c64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8026c68:	45e1      	cmp	r9, ip
 8026c6a:	f84e 2b04 	str.w	r2, [lr], #4
 8026c6e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8026c72:	d2de      	bcs.n	8026c32 <quorem+0x42>
 8026c74:	9b00      	ldr	r3, [sp, #0]
 8026c76:	58eb      	ldr	r3, [r5, r3]
 8026c78:	b92b      	cbnz	r3, 8026c86 <quorem+0x96>
 8026c7a:	9b01      	ldr	r3, [sp, #4]
 8026c7c:	3b04      	subs	r3, #4
 8026c7e:	429d      	cmp	r5, r3
 8026c80:	461a      	mov	r2, r3
 8026c82:	d32f      	bcc.n	8026ce4 <quorem+0xf4>
 8026c84:	613c      	str	r4, [r7, #16]
 8026c86:	4638      	mov	r0, r7
 8026c88:	f001 f8c2 	bl	8027e10 <__mcmp>
 8026c8c:	2800      	cmp	r0, #0
 8026c8e:	db25      	blt.n	8026cdc <quorem+0xec>
 8026c90:	4629      	mov	r1, r5
 8026c92:	2000      	movs	r0, #0
 8026c94:	f858 2b04 	ldr.w	r2, [r8], #4
 8026c98:	f8d1 c000 	ldr.w	ip, [r1]
 8026c9c:	fa1f fe82 	uxth.w	lr, r2
 8026ca0:	fa1f f38c 	uxth.w	r3, ip
 8026ca4:	eba3 030e 	sub.w	r3, r3, lr
 8026ca8:	4403      	add	r3, r0
 8026caa:	0c12      	lsrs	r2, r2, #16
 8026cac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8026cb0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8026cb4:	b29b      	uxth	r3, r3
 8026cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026cba:	45c1      	cmp	r9, r8
 8026cbc:	f841 3b04 	str.w	r3, [r1], #4
 8026cc0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8026cc4:	d2e6      	bcs.n	8026c94 <quorem+0xa4>
 8026cc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026cce:	b922      	cbnz	r2, 8026cda <quorem+0xea>
 8026cd0:	3b04      	subs	r3, #4
 8026cd2:	429d      	cmp	r5, r3
 8026cd4:	461a      	mov	r2, r3
 8026cd6:	d30b      	bcc.n	8026cf0 <quorem+0x100>
 8026cd8:	613c      	str	r4, [r7, #16]
 8026cda:	3601      	adds	r6, #1
 8026cdc:	4630      	mov	r0, r6
 8026cde:	b003      	add	sp, #12
 8026ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ce4:	6812      	ldr	r2, [r2, #0]
 8026ce6:	3b04      	subs	r3, #4
 8026ce8:	2a00      	cmp	r2, #0
 8026cea:	d1cb      	bne.n	8026c84 <quorem+0x94>
 8026cec:	3c01      	subs	r4, #1
 8026cee:	e7c6      	b.n	8026c7e <quorem+0x8e>
 8026cf0:	6812      	ldr	r2, [r2, #0]
 8026cf2:	3b04      	subs	r3, #4
 8026cf4:	2a00      	cmp	r2, #0
 8026cf6:	d1ef      	bne.n	8026cd8 <quorem+0xe8>
 8026cf8:	3c01      	subs	r4, #1
 8026cfa:	e7ea      	b.n	8026cd2 <quorem+0xe2>
 8026cfc:	2000      	movs	r0, #0
 8026cfe:	e7ee      	b.n	8026cde <quorem+0xee>

08026d00 <_dtoa_r>:
 8026d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d04:	69c7      	ldr	r7, [r0, #28]
 8026d06:	b099      	sub	sp, #100	@ 0x64
 8026d08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8026d0c:	ec55 4b10 	vmov	r4, r5, d0
 8026d10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8026d12:	9109      	str	r1, [sp, #36]	@ 0x24
 8026d14:	4683      	mov	fp, r0
 8026d16:	920e      	str	r2, [sp, #56]	@ 0x38
 8026d18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026d1a:	b97f      	cbnz	r7, 8026d3c <_dtoa_r+0x3c>
 8026d1c:	2010      	movs	r0, #16
 8026d1e:	f7fe ffa5 	bl	8025c6c <malloc>
 8026d22:	4602      	mov	r2, r0
 8026d24:	f8cb 001c 	str.w	r0, [fp, #28]
 8026d28:	b920      	cbnz	r0, 8026d34 <_dtoa_r+0x34>
 8026d2a:	4ba7      	ldr	r3, [pc, #668]	@ (8026fc8 <_dtoa_r+0x2c8>)
 8026d2c:	21ef      	movs	r1, #239	@ 0xef
 8026d2e:	48a7      	ldr	r0, [pc, #668]	@ (8026fcc <_dtoa_r+0x2cc>)
 8026d30:	f7ff ff40 	bl	8026bb4 <__assert_func>
 8026d34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8026d38:	6007      	str	r7, [r0, #0]
 8026d3a:	60c7      	str	r7, [r0, #12]
 8026d3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8026d40:	6819      	ldr	r1, [r3, #0]
 8026d42:	b159      	cbz	r1, 8026d5c <_dtoa_r+0x5c>
 8026d44:	685a      	ldr	r2, [r3, #4]
 8026d46:	604a      	str	r2, [r1, #4]
 8026d48:	2301      	movs	r3, #1
 8026d4a:	4093      	lsls	r3, r2
 8026d4c:	608b      	str	r3, [r1, #8]
 8026d4e:	4658      	mov	r0, fp
 8026d50:	f000 fe24 	bl	802799c <_Bfree>
 8026d54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8026d58:	2200      	movs	r2, #0
 8026d5a:	601a      	str	r2, [r3, #0]
 8026d5c:	1e2b      	subs	r3, r5, #0
 8026d5e:	bfb9      	ittee	lt
 8026d60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8026d64:	9303      	strlt	r3, [sp, #12]
 8026d66:	2300      	movge	r3, #0
 8026d68:	6033      	strge	r3, [r6, #0]
 8026d6a:	9f03      	ldr	r7, [sp, #12]
 8026d6c:	4b98      	ldr	r3, [pc, #608]	@ (8026fd0 <_dtoa_r+0x2d0>)
 8026d6e:	bfbc      	itt	lt
 8026d70:	2201      	movlt	r2, #1
 8026d72:	6032      	strlt	r2, [r6, #0]
 8026d74:	43bb      	bics	r3, r7
 8026d76:	d112      	bne.n	8026d9e <_dtoa_r+0x9e>
 8026d78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026d7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8026d7e:	6013      	str	r3, [r2, #0]
 8026d80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8026d84:	4323      	orrs	r3, r4
 8026d86:	f000 854d 	beq.w	8027824 <_dtoa_r+0xb24>
 8026d8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026d8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8026fe4 <_dtoa_r+0x2e4>
 8026d90:	2b00      	cmp	r3, #0
 8026d92:	f000 854f 	beq.w	8027834 <_dtoa_r+0xb34>
 8026d96:	f10a 0303 	add.w	r3, sl, #3
 8026d9a:	f000 bd49 	b.w	8027830 <_dtoa_r+0xb30>
 8026d9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026da2:	2200      	movs	r2, #0
 8026da4:	ec51 0b17 	vmov	r0, r1, d7
 8026da8:	2300      	movs	r3, #0
 8026daa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8026dae:	f7d9 feab 	bl	8000b08 <__aeabi_dcmpeq>
 8026db2:	4680      	mov	r8, r0
 8026db4:	b158      	cbz	r0, 8026dce <_dtoa_r+0xce>
 8026db6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026db8:	2301      	movs	r3, #1
 8026dba:	6013      	str	r3, [r2, #0]
 8026dbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026dbe:	b113      	cbz	r3, 8026dc6 <_dtoa_r+0xc6>
 8026dc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026dc2:	4b84      	ldr	r3, [pc, #528]	@ (8026fd4 <_dtoa_r+0x2d4>)
 8026dc4:	6013      	str	r3, [r2, #0]
 8026dc6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8026fe8 <_dtoa_r+0x2e8>
 8026dca:	f000 bd33 	b.w	8027834 <_dtoa_r+0xb34>
 8026dce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8026dd2:	aa16      	add	r2, sp, #88	@ 0x58
 8026dd4:	a917      	add	r1, sp, #92	@ 0x5c
 8026dd6:	4658      	mov	r0, fp
 8026dd8:	f001 f8ca 	bl	8027f70 <__d2b>
 8026ddc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8026de0:	4681      	mov	r9, r0
 8026de2:	2e00      	cmp	r6, #0
 8026de4:	d077      	beq.n	8026ed6 <_dtoa_r+0x1d6>
 8026de6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026de8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8026dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8026df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8026df4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8026df8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8026dfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8026e00:	4619      	mov	r1, r3
 8026e02:	2200      	movs	r2, #0
 8026e04:	4b74      	ldr	r3, [pc, #464]	@ (8026fd8 <_dtoa_r+0x2d8>)
 8026e06:	f7d9 fa5f 	bl	80002c8 <__aeabi_dsub>
 8026e0a:	a369      	add	r3, pc, #420	@ (adr r3, 8026fb0 <_dtoa_r+0x2b0>)
 8026e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e10:	f7d9 fc12 	bl	8000638 <__aeabi_dmul>
 8026e14:	a368      	add	r3, pc, #416	@ (adr r3, 8026fb8 <_dtoa_r+0x2b8>)
 8026e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e1a:	f7d9 fa57 	bl	80002cc <__adddf3>
 8026e1e:	4604      	mov	r4, r0
 8026e20:	4630      	mov	r0, r6
 8026e22:	460d      	mov	r5, r1
 8026e24:	f7d9 fb9e 	bl	8000564 <__aeabi_i2d>
 8026e28:	a365      	add	r3, pc, #404	@ (adr r3, 8026fc0 <_dtoa_r+0x2c0>)
 8026e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e2e:	f7d9 fc03 	bl	8000638 <__aeabi_dmul>
 8026e32:	4602      	mov	r2, r0
 8026e34:	460b      	mov	r3, r1
 8026e36:	4620      	mov	r0, r4
 8026e38:	4629      	mov	r1, r5
 8026e3a:	f7d9 fa47 	bl	80002cc <__adddf3>
 8026e3e:	4604      	mov	r4, r0
 8026e40:	460d      	mov	r5, r1
 8026e42:	f7d9 fea9 	bl	8000b98 <__aeabi_d2iz>
 8026e46:	2200      	movs	r2, #0
 8026e48:	4607      	mov	r7, r0
 8026e4a:	2300      	movs	r3, #0
 8026e4c:	4620      	mov	r0, r4
 8026e4e:	4629      	mov	r1, r5
 8026e50:	f7d9 fe64 	bl	8000b1c <__aeabi_dcmplt>
 8026e54:	b140      	cbz	r0, 8026e68 <_dtoa_r+0x168>
 8026e56:	4638      	mov	r0, r7
 8026e58:	f7d9 fb84 	bl	8000564 <__aeabi_i2d>
 8026e5c:	4622      	mov	r2, r4
 8026e5e:	462b      	mov	r3, r5
 8026e60:	f7d9 fe52 	bl	8000b08 <__aeabi_dcmpeq>
 8026e64:	b900      	cbnz	r0, 8026e68 <_dtoa_r+0x168>
 8026e66:	3f01      	subs	r7, #1
 8026e68:	2f16      	cmp	r7, #22
 8026e6a:	d851      	bhi.n	8026f10 <_dtoa_r+0x210>
 8026e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8026fdc <_dtoa_r+0x2dc>)
 8026e6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8026e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8026e7a:	f7d9 fe4f 	bl	8000b1c <__aeabi_dcmplt>
 8026e7e:	2800      	cmp	r0, #0
 8026e80:	d048      	beq.n	8026f14 <_dtoa_r+0x214>
 8026e82:	3f01      	subs	r7, #1
 8026e84:	2300      	movs	r3, #0
 8026e86:	9312      	str	r3, [sp, #72]	@ 0x48
 8026e88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026e8a:	1b9b      	subs	r3, r3, r6
 8026e8c:	1e5a      	subs	r2, r3, #1
 8026e8e:	bf44      	itt	mi
 8026e90:	f1c3 0801 	rsbmi	r8, r3, #1
 8026e94:	2300      	movmi	r3, #0
 8026e96:	9208      	str	r2, [sp, #32]
 8026e98:	bf54      	ite	pl
 8026e9a:	f04f 0800 	movpl.w	r8, #0
 8026e9e:	9308      	strmi	r3, [sp, #32]
 8026ea0:	2f00      	cmp	r7, #0
 8026ea2:	db39      	blt.n	8026f18 <_dtoa_r+0x218>
 8026ea4:	9b08      	ldr	r3, [sp, #32]
 8026ea6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8026ea8:	443b      	add	r3, r7
 8026eaa:	9308      	str	r3, [sp, #32]
 8026eac:	2300      	movs	r3, #0
 8026eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8026eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026eb2:	2b09      	cmp	r3, #9
 8026eb4:	d864      	bhi.n	8026f80 <_dtoa_r+0x280>
 8026eb6:	2b05      	cmp	r3, #5
 8026eb8:	bfc4      	itt	gt
 8026eba:	3b04      	subgt	r3, #4
 8026ebc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8026ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026ec0:	f1a3 0302 	sub.w	r3, r3, #2
 8026ec4:	bfcc      	ite	gt
 8026ec6:	2400      	movgt	r4, #0
 8026ec8:	2401      	movle	r4, #1
 8026eca:	2b03      	cmp	r3, #3
 8026ecc:	d863      	bhi.n	8026f96 <_dtoa_r+0x296>
 8026ece:	e8df f003 	tbb	[pc, r3]
 8026ed2:	372a      	.short	0x372a
 8026ed4:	5535      	.short	0x5535
 8026ed6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8026eda:	441e      	add	r6, r3
 8026edc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8026ee0:	2b20      	cmp	r3, #32
 8026ee2:	bfc1      	itttt	gt
 8026ee4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8026ee8:	409f      	lslgt	r7, r3
 8026eea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8026eee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8026ef2:	bfd6      	itet	le
 8026ef4:	f1c3 0320 	rsble	r3, r3, #32
 8026ef8:	ea47 0003 	orrgt.w	r0, r7, r3
 8026efc:	fa04 f003 	lslle.w	r0, r4, r3
 8026f00:	f7d9 fb20 	bl	8000544 <__aeabi_ui2d>
 8026f04:	2201      	movs	r2, #1
 8026f06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8026f0a:	3e01      	subs	r6, #1
 8026f0c:	9214      	str	r2, [sp, #80]	@ 0x50
 8026f0e:	e777      	b.n	8026e00 <_dtoa_r+0x100>
 8026f10:	2301      	movs	r3, #1
 8026f12:	e7b8      	b.n	8026e86 <_dtoa_r+0x186>
 8026f14:	9012      	str	r0, [sp, #72]	@ 0x48
 8026f16:	e7b7      	b.n	8026e88 <_dtoa_r+0x188>
 8026f18:	427b      	negs	r3, r7
 8026f1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8026f1c:	2300      	movs	r3, #0
 8026f1e:	eba8 0807 	sub.w	r8, r8, r7
 8026f22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026f24:	e7c4      	b.n	8026eb0 <_dtoa_r+0x1b0>
 8026f26:	2300      	movs	r3, #0
 8026f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026f2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026f2c:	2b00      	cmp	r3, #0
 8026f2e:	dc35      	bgt.n	8026f9c <_dtoa_r+0x29c>
 8026f30:	2301      	movs	r3, #1
 8026f32:	9300      	str	r3, [sp, #0]
 8026f34:	9307      	str	r3, [sp, #28]
 8026f36:	461a      	mov	r2, r3
 8026f38:	920e      	str	r2, [sp, #56]	@ 0x38
 8026f3a:	e00b      	b.n	8026f54 <_dtoa_r+0x254>
 8026f3c:	2301      	movs	r3, #1
 8026f3e:	e7f3      	b.n	8026f28 <_dtoa_r+0x228>
 8026f40:	2300      	movs	r3, #0
 8026f42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026f46:	18fb      	adds	r3, r7, r3
 8026f48:	9300      	str	r3, [sp, #0]
 8026f4a:	3301      	adds	r3, #1
 8026f4c:	2b01      	cmp	r3, #1
 8026f4e:	9307      	str	r3, [sp, #28]
 8026f50:	bfb8      	it	lt
 8026f52:	2301      	movlt	r3, #1
 8026f54:	f8db 001c 	ldr.w	r0, [fp, #28]
 8026f58:	2100      	movs	r1, #0
 8026f5a:	2204      	movs	r2, #4
 8026f5c:	f102 0514 	add.w	r5, r2, #20
 8026f60:	429d      	cmp	r5, r3
 8026f62:	d91f      	bls.n	8026fa4 <_dtoa_r+0x2a4>
 8026f64:	6041      	str	r1, [r0, #4]
 8026f66:	4658      	mov	r0, fp
 8026f68:	f000 fcd8 	bl	802791c <_Balloc>
 8026f6c:	4682      	mov	sl, r0
 8026f6e:	2800      	cmp	r0, #0
 8026f70:	d13c      	bne.n	8026fec <_dtoa_r+0x2ec>
 8026f72:	4b1b      	ldr	r3, [pc, #108]	@ (8026fe0 <_dtoa_r+0x2e0>)
 8026f74:	4602      	mov	r2, r0
 8026f76:	f240 11af 	movw	r1, #431	@ 0x1af
 8026f7a:	e6d8      	b.n	8026d2e <_dtoa_r+0x2e>
 8026f7c:	2301      	movs	r3, #1
 8026f7e:	e7e0      	b.n	8026f42 <_dtoa_r+0x242>
 8026f80:	2401      	movs	r4, #1
 8026f82:	2300      	movs	r3, #0
 8026f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8026f86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026f88:	f04f 33ff 	mov.w	r3, #4294967295
 8026f8c:	9300      	str	r3, [sp, #0]
 8026f8e:	9307      	str	r3, [sp, #28]
 8026f90:	2200      	movs	r2, #0
 8026f92:	2312      	movs	r3, #18
 8026f94:	e7d0      	b.n	8026f38 <_dtoa_r+0x238>
 8026f96:	2301      	movs	r3, #1
 8026f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026f9a:	e7f5      	b.n	8026f88 <_dtoa_r+0x288>
 8026f9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026f9e:	9300      	str	r3, [sp, #0]
 8026fa0:	9307      	str	r3, [sp, #28]
 8026fa2:	e7d7      	b.n	8026f54 <_dtoa_r+0x254>
 8026fa4:	3101      	adds	r1, #1
 8026fa6:	0052      	lsls	r2, r2, #1
 8026fa8:	e7d8      	b.n	8026f5c <_dtoa_r+0x25c>
 8026faa:	bf00      	nop
 8026fac:	f3af 8000 	nop.w
 8026fb0:	636f4361 	.word	0x636f4361
 8026fb4:	3fd287a7 	.word	0x3fd287a7
 8026fb8:	8b60c8b3 	.word	0x8b60c8b3
 8026fbc:	3fc68a28 	.word	0x3fc68a28
 8026fc0:	509f79fb 	.word	0x509f79fb
 8026fc4:	3fd34413 	.word	0x3fd34413
 8026fc8:	0802cf20 	.word	0x0802cf20
 8026fcc:	0802d10d 	.word	0x0802d10d
 8026fd0:	7ff00000 	.word	0x7ff00000
 8026fd4:	0802d0a1 	.word	0x0802d0a1
 8026fd8:	3ff80000 	.word	0x3ff80000
 8026fdc:	0802d208 	.word	0x0802d208
 8026fe0:	0802d165 	.word	0x0802d165
 8026fe4:	0802d109 	.word	0x0802d109
 8026fe8:	0802d0a0 	.word	0x0802d0a0
 8026fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8026ff0:	6018      	str	r0, [r3, #0]
 8026ff2:	9b07      	ldr	r3, [sp, #28]
 8026ff4:	2b0e      	cmp	r3, #14
 8026ff6:	f200 80a4 	bhi.w	8027142 <_dtoa_r+0x442>
 8026ffa:	2c00      	cmp	r4, #0
 8026ffc:	f000 80a1 	beq.w	8027142 <_dtoa_r+0x442>
 8027000:	2f00      	cmp	r7, #0
 8027002:	dd33      	ble.n	802706c <_dtoa_r+0x36c>
 8027004:	4bad      	ldr	r3, [pc, #692]	@ (80272bc <_dtoa_r+0x5bc>)
 8027006:	f007 020f 	and.w	r2, r7, #15
 802700a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802700e:	ed93 7b00 	vldr	d7, [r3]
 8027012:	05f8      	lsls	r0, r7, #23
 8027014:	ed8d 7b04 	vstr	d7, [sp, #16]
 8027018:	ea4f 1427 	mov.w	r4, r7, asr #4
 802701c:	d516      	bpl.n	802704c <_dtoa_r+0x34c>
 802701e:	4ba8      	ldr	r3, [pc, #672]	@ (80272c0 <_dtoa_r+0x5c0>)
 8027020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8027024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8027028:	f7d9 fc30 	bl	800088c <__aeabi_ddiv>
 802702c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027030:	f004 040f 	and.w	r4, r4, #15
 8027034:	2603      	movs	r6, #3
 8027036:	4da2      	ldr	r5, [pc, #648]	@ (80272c0 <_dtoa_r+0x5c0>)
 8027038:	b954      	cbnz	r4, 8027050 <_dtoa_r+0x350>
 802703a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802703e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027042:	f7d9 fc23 	bl	800088c <__aeabi_ddiv>
 8027046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802704a:	e028      	b.n	802709e <_dtoa_r+0x39e>
 802704c:	2602      	movs	r6, #2
 802704e:	e7f2      	b.n	8027036 <_dtoa_r+0x336>
 8027050:	07e1      	lsls	r1, r4, #31
 8027052:	d508      	bpl.n	8027066 <_dtoa_r+0x366>
 8027054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8027058:	e9d5 2300 	ldrd	r2, r3, [r5]
 802705c:	f7d9 faec 	bl	8000638 <__aeabi_dmul>
 8027060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8027064:	3601      	adds	r6, #1
 8027066:	1064      	asrs	r4, r4, #1
 8027068:	3508      	adds	r5, #8
 802706a:	e7e5      	b.n	8027038 <_dtoa_r+0x338>
 802706c:	f000 80d2 	beq.w	8027214 <_dtoa_r+0x514>
 8027070:	427c      	negs	r4, r7
 8027072:	4b92      	ldr	r3, [pc, #584]	@ (80272bc <_dtoa_r+0x5bc>)
 8027074:	4d92      	ldr	r5, [pc, #584]	@ (80272c0 <_dtoa_r+0x5c0>)
 8027076:	f004 020f 	and.w	r2, r4, #15
 802707a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027082:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8027086:	f7d9 fad7 	bl	8000638 <__aeabi_dmul>
 802708a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802708e:	1124      	asrs	r4, r4, #4
 8027090:	2300      	movs	r3, #0
 8027092:	2602      	movs	r6, #2
 8027094:	2c00      	cmp	r4, #0
 8027096:	f040 80b2 	bne.w	80271fe <_dtoa_r+0x4fe>
 802709a:	2b00      	cmp	r3, #0
 802709c:	d1d3      	bne.n	8027046 <_dtoa_r+0x346>
 802709e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80270a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80270a4:	2b00      	cmp	r3, #0
 80270a6:	f000 80b7 	beq.w	8027218 <_dtoa_r+0x518>
 80270aa:	4b86      	ldr	r3, [pc, #536]	@ (80272c4 <_dtoa_r+0x5c4>)
 80270ac:	2200      	movs	r2, #0
 80270ae:	4620      	mov	r0, r4
 80270b0:	4629      	mov	r1, r5
 80270b2:	f7d9 fd33 	bl	8000b1c <__aeabi_dcmplt>
 80270b6:	2800      	cmp	r0, #0
 80270b8:	f000 80ae 	beq.w	8027218 <_dtoa_r+0x518>
 80270bc:	9b07      	ldr	r3, [sp, #28]
 80270be:	2b00      	cmp	r3, #0
 80270c0:	f000 80aa 	beq.w	8027218 <_dtoa_r+0x518>
 80270c4:	9b00      	ldr	r3, [sp, #0]
 80270c6:	2b00      	cmp	r3, #0
 80270c8:	dd37      	ble.n	802713a <_dtoa_r+0x43a>
 80270ca:	1e7b      	subs	r3, r7, #1
 80270cc:	9304      	str	r3, [sp, #16]
 80270ce:	4620      	mov	r0, r4
 80270d0:	4b7d      	ldr	r3, [pc, #500]	@ (80272c8 <_dtoa_r+0x5c8>)
 80270d2:	2200      	movs	r2, #0
 80270d4:	4629      	mov	r1, r5
 80270d6:	f7d9 faaf 	bl	8000638 <__aeabi_dmul>
 80270da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80270de:	9c00      	ldr	r4, [sp, #0]
 80270e0:	3601      	adds	r6, #1
 80270e2:	4630      	mov	r0, r6
 80270e4:	f7d9 fa3e 	bl	8000564 <__aeabi_i2d>
 80270e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80270ec:	f7d9 faa4 	bl	8000638 <__aeabi_dmul>
 80270f0:	4b76      	ldr	r3, [pc, #472]	@ (80272cc <_dtoa_r+0x5cc>)
 80270f2:	2200      	movs	r2, #0
 80270f4:	f7d9 f8ea 	bl	80002cc <__adddf3>
 80270f8:	4605      	mov	r5, r0
 80270fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80270fe:	2c00      	cmp	r4, #0
 8027100:	f040 808d 	bne.w	802721e <_dtoa_r+0x51e>
 8027104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027108:	4b71      	ldr	r3, [pc, #452]	@ (80272d0 <_dtoa_r+0x5d0>)
 802710a:	2200      	movs	r2, #0
 802710c:	f7d9 f8dc 	bl	80002c8 <__aeabi_dsub>
 8027110:	4602      	mov	r2, r0
 8027112:	460b      	mov	r3, r1
 8027114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8027118:	462a      	mov	r2, r5
 802711a:	4633      	mov	r3, r6
 802711c:	f7d9 fd1c 	bl	8000b58 <__aeabi_dcmpgt>
 8027120:	2800      	cmp	r0, #0
 8027122:	f040 828b 	bne.w	802763c <_dtoa_r+0x93c>
 8027126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802712a:	462a      	mov	r2, r5
 802712c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8027130:	f7d9 fcf4 	bl	8000b1c <__aeabi_dcmplt>
 8027134:	2800      	cmp	r0, #0
 8027136:	f040 8128 	bne.w	802738a <_dtoa_r+0x68a>
 802713a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802713e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8027142:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027144:	2b00      	cmp	r3, #0
 8027146:	f2c0 815a 	blt.w	80273fe <_dtoa_r+0x6fe>
 802714a:	2f0e      	cmp	r7, #14
 802714c:	f300 8157 	bgt.w	80273fe <_dtoa_r+0x6fe>
 8027150:	4b5a      	ldr	r3, [pc, #360]	@ (80272bc <_dtoa_r+0x5bc>)
 8027152:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8027156:	ed93 7b00 	vldr	d7, [r3]
 802715a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802715c:	2b00      	cmp	r3, #0
 802715e:	ed8d 7b00 	vstr	d7, [sp]
 8027162:	da03      	bge.n	802716c <_dtoa_r+0x46c>
 8027164:	9b07      	ldr	r3, [sp, #28]
 8027166:	2b00      	cmp	r3, #0
 8027168:	f340 8101 	ble.w	802736e <_dtoa_r+0x66e>
 802716c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8027170:	4656      	mov	r6, sl
 8027172:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027176:	4620      	mov	r0, r4
 8027178:	4629      	mov	r1, r5
 802717a:	f7d9 fb87 	bl	800088c <__aeabi_ddiv>
 802717e:	f7d9 fd0b 	bl	8000b98 <__aeabi_d2iz>
 8027182:	4680      	mov	r8, r0
 8027184:	f7d9 f9ee 	bl	8000564 <__aeabi_i2d>
 8027188:	e9dd 2300 	ldrd	r2, r3, [sp]
 802718c:	f7d9 fa54 	bl	8000638 <__aeabi_dmul>
 8027190:	4602      	mov	r2, r0
 8027192:	460b      	mov	r3, r1
 8027194:	4620      	mov	r0, r4
 8027196:	4629      	mov	r1, r5
 8027198:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802719c:	f7d9 f894 	bl	80002c8 <__aeabi_dsub>
 80271a0:	f806 4b01 	strb.w	r4, [r6], #1
 80271a4:	9d07      	ldr	r5, [sp, #28]
 80271a6:	eba6 040a 	sub.w	r4, r6, sl
 80271aa:	42a5      	cmp	r5, r4
 80271ac:	4602      	mov	r2, r0
 80271ae:	460b      	mov	r3, r1
 80271b0:	f040 8117 	bne.w	80273e2 <_dtoa_r+0x6e2>
 80271b4:	f7d9 f88a 	bl	80002cc <__adddf3>
 80271b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80271bc:	4604      	mov	r4, r0
 80271be:	460d      	mov	r5, r1
 80271c0:	f7d9 fcca 	bl	8000b58 <__aeabi_dcmpgt>
 80271c4:	2800      	cmp	r0, #0
 80271c6:	f040 80f9 	bne.w	80273bc <_dtoa_r+0x6bc>
 80271ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80271ce:	4620      	mov	r0, r4
 80271d0:	4629      	mov	r1, r5
 80271d2:	f7d9 fc99 	bl	8000b08 <__aeabi_dcmpeq>
 80271d6:	b118      	cbz	r0, 80271e0 <_dtoa_r+0x4e0>
 80271d8:	f018 0f01 	tst.w	r8, #1
 80271dc:	f040 80ee 	bne.w	80273bc <_dtoa_r+0x6bc>
 80271e0:	4649      	mov	r1, r9
 80271e2:	4658      	mov	r0, fp
 80271e4:	f000 fbda 	bl	802799c <_Bfree>
 80271e8:	2300      	movs	r3, #0
 80271ea:	7033      	strb	r3, [r6, #0]
 80271ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80271ee:	3701      	adds	r7, #1
 80271f0:	601f      	str	r7, [r3, #0]
 80271f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80271f4:	2b00      	cmp	r3, #0
 80271f6:	f000 831d 	beq.w	8027834 <_dtoa_r+0xb34>
 80271fa:	601e      	str	r6, [r3, #0]
 80271fc:	e31a      	b.n	8027834 <_dtoa_r+0xb34>
 80271fe:	07e2      	lsls	r2, r4, #31
 8027200:	d505      	bpl.n	802720e <_dtoa_r+0x50e>
 8027202:	e9d5 2300 	ldrd	r2, r3, [r5]
 8027206:	f7d9 fa17 	bl	8000638 <__aeabi_dmul>
 802720a:	3601      	adds	r6, #1
 802720c:	2301      	movs	r3, #1
 802720e:	1064      	asrs	r4, r4, #1
 8027210:	3508      	adds	r5, #8
 8027212:	e73f      	b.n	8027094 <_dtoa_r+0x394>
 8027214:	2602      	movs	r6, #2
 8027216:	e742      	b.n	802709e <_dtoa_r+0x39e>
 8027218:	9c07      	ldr	r4, [sp, #28]
 802721a:	9704      	str	r7, [sp, #16]
 802721c:	e761      	b.n	80270e2 <_dtoa_r+0x3e2>
 802721e:	4b27      	ldr	r3, [pc, #156]	@ (80272bc <_dtoa_r+0x5bc>)
 8027220:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027222:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8027226:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802722a:	4454      	add	r4, sl
 802722c:	2900      	cmp	r1, #0
 802722e:	d053      	beq.n	80272d8 <_dtoa_r+0x5d8>
 8027230:	4928      	ldr	r1, [pc, #160]	@ (80272d4 <_dtoa_r+0x5d4>)
 8027232:	2000      	movs	r0, #0
 8027234:	f7d9 fb2a 	bl	800088c <__aeabi_ddiv>
 8027238:	4633      	mov	r3, r6
 802723a:	462a      	mov	r2, r5
 802723c:	f7d9 f844 	bl	80002c8 <__aeabi_dsub>
 8027240:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8027244:	4656      	mov	r6, sl
 8027246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802724a:	f7d9 fca5 	bl	8000b98 <__aeabi_d2iz>
 802724e:	4605      	mov	r5, r0
 8027250:	f7d9 f988 	bl	8000564 <__aeabi_i2d>
 8027254:	4602      	mov	r2, r0
 8027256:	460b      	mov	r3, r1
 8027258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802725c:	f7d9 f834 	bl	80002c8 <__aeabi_dsub>
 8027260:	3530      	adds	r5, #48	@ 0x30
 8027262:	4602      	mov	r2, r0
 8027264:	460b      	mov	r3, r1
 8027266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802726a:	f806 5b01 	strb.w	r5, [r6], #1
 802726e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8027272:	f7d9 fc53 	bl	8000b1c <__aeabi_dcmplt>
 8027276:	2800      	cmp	r0, #0
 8027278:	d171      	bne.n	802735e <_dtoa_r+0x65e>
 802727a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802727e:	4911      	ldr	r1, [pc, #68]	@ (80272c4 <_dtoa_r+0x5c4>)
 8027280:	2000      	movs	r0, #0
 8027282:	f7d9 f821 	bl	80002c8 <__aeabi_dsub>
 8027286:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802728a:	f7d9 fc47 	bl	8000b1c <__aeabi_dcmplt>
 802728e:	2800      	cmp	r0, #0
 8027290:	f040 8095 	bne.w	80273be <_dtoa_r+0x6be>
 8027294:	42a6      	cmp	r6, r4
 8027296:	f43f af50 	beq.w	802713a <_dtoa_r+0x43a>
 802729a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802729e:	4b0a      	ldr	r3, [pc, #40]	@ (80272c8 <_dtoa_r+0x5c8>)
 80272a0:	2200      	movs	r2, #0
 80272a2:	f7d9 f9c9 	bl	8000638 <__aeabi_dmul>
 80272a6:	4b08      	ldr	r3, [pc, #32]	@ (80272c8 <_dtoa_r+0x5c8>)
 80272a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80272ac:	2200      	movs	r2, #0
 80272ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80272b2:	f7d9 f9c1 	bl	8000638 <__aeabi_dmul>
 80272b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80272ba:	e7c4      	b.n	8027246 <_dtoa_r+0x546>
 80272bc:	0802d208 	.word	0x0802d208
 80272c0:	0802d1e0 	.word	0x0802d1e0
 80272c4:	3ff00000 	.word	0x3ff00000
 80272c8:	40240000 	.word	0x40240000
 80272cc:	401c0000 	.word	0x401c0000
 80272d0:	40140000 	.word	0x40140000
 80272d4:	3fe00000 	.word	0x3fe00000
 80272d8:	4631      	mov	r1, r6
 80272da:	4628      	mov	r0, r5
 80272dc:	f7d9 f9ac 	bl	8000638 <__aeabi_dmul>
 80272e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80272e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80272e6:	4656      	mov	r6, sl
 80272e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80272ec:	f7d9 fc54 	bl	8000b98 <__aeabi_d2iz>
 80272f0:	4605      	mov	r5, r0
 80272f2:	f7d9 f937 	bl	8000564 <__aeabi_i2d>
 80272f6:	4602      	mov	r2, r0
 80272f8:	460b      	mov	r3, r1
 80272fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80272fe:	f7d8 ffe3 	bl	80002c8 <__aeabi_dsub>
 8027302:	3530      	adds	r5, #48	@ 0x30
 8027304:	f806 5b01 	strb.w	r5, [r6], #1
 8027308:	4602      	mov	r2, r0
 802730a:	460b      	mov	r3, r1
 802730c:	42a6      	cmp	r6, r4
 802730e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8027312:	f04f 0200 	mov.w	r2, #0
 8027316:	d124      	bne.n	8027362 <_dtoa_r+0x662>
 8027318:	4bac      	ldr	r3, [pc, #688]	@ (80275cc <_dtoa_r+0x8cc>)
 802731a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802731e:	f7d8 ffd5 	bl	80002cc <__adddf3>
 8027322:	4602      	mov	r2, r0
 8027324:	460b      	mov	r3, r1
 8027326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802732a:	f7d9 fc15 	bl	8000b58 <__aeabi_dcmpgt>
 802732e:	2800      	cmp	r0, #0
 8027330:	d145      	bne.n	80273be <_dtoa_r+0x6be>
 8027332:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8027336:	49a5      	ldr	r1, [pc, #660]	@ (80275cc <_dtoa_r+0x8cc>)
 8027338:	2000      	movs	r0, #0
 802733a:	f7d8 ffc5 	bl	80002c8 <__aeabi_dsub>
 802733e:	4602      	mov	r2, r0
 8027340:	460b      	mov	r3, r1
 8027342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027346:	f7d9 fbe9 	bl	8000b1c <__aeabi_dcmplt>
 802734a:	2800      	cmp	r0, #0
 802734c:	f43f aef5 	beq.w	802713a <_dtoa_r+0x43a>
 8027350:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8027352:	1e73      	subs	r3, r6, #1
 8027354:	9315      	str	r3, [sp, #84]	@ 0x54
 8027356:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802735a:	2b30      	cmp	r3, #48	@ 0x30
 802735c:	d0f8      	beq.n	8027350 <_dtoa_r+0x650>
 802735e:	9f04      	ldr	r7, [sp, #16]
 8027360:	e73e      	b.n	80271e0 <_dtoa_r+0x4e0>
 8027362:	4b9b      	ldr	r3, [pc, #620]	@ (80275d0 <_dtoa_r+0x8d0>)
 8027364:	f7d9 f968 	bl	8000638 <__aeabi_dmul>
 8027368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802736c:	e7bc      	b.n	80272e8 <_dtoa_r+0x5e8>
 802736e:	d10c      	bne.n	802738a <_dtoa_r+0x68a>
 8027370:	4b98      	ldr	r3, [pc, #608]	@ (80275d4 <_dtoa_r+0x8d4>)
 8027372:	2200      	movs	r2, #0
 8027374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027378:	f7d9 f95e 	bl	8000638 <__aeabi_dmul>
 802737c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027380:	f7d9 fbe0 	bl	8000b44 <__aeabi_dcmpge>
 8027384:	2800      	cmp	r0, #0
 8027386:	f000 8157 	beq.w	8027638 <_dtoa_r+0x938>
 802738a:	2400      	movs	r4, #0
 802738c:	4625      	mov	r5, r4
 802738e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027390:	43db      	mvns	r3, r3
 8027392:	9304      	str	r3, [sp, #16]
 8027394:	4656      	mov	r6, sl
 8027396:	2700      	movs	r7, #0
 8027398:	4621      	mov	r1, r4
 802739a:	4658      	mov	r0, fp
 802739c:	f000 fafe 	bl	802799c <_Bfree>
 80273a0:	2d00      	cmp	r5, #0
 80273a2:	d0dc      	beq.n	802735e <_dtoa_r+0x65e>
 80273a4:	b12f      	cbz	r7, 80273b2 <_dtoa_r+0x6b2>
 80273a6:	42af      	cmp	r7, r5
 80273a8:	d003      	beq.n	80273b2 <_dtoa_r+0x6b2>
 80273aa:	4639      	mov	r1, r7
 80273ac:	4658      	mov	r0, fp
 80273ae:	f000 faf5 	bl	802799c <_Bfree>
 80273b2:	4629      	mov	r1, r5
 80273b4:	4658      	mov	r0, fp
 80273b6:	f000 faf1 	bl	802799c <_Bfree>
 80273ba:	e7d0      	b.n	802735e <_dtoa_r+0x65e>
 80273bc:	9704      	str	r7, [sp, #16]
 80273be:	4633      	mov	r3, r6
 80273c0:	461e      	mov	r6, r3
 80273c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80273c6:	2a39      	cmp	r2, #57	@ 0x39
 80273c8:	d107      	bne.n	80273da <_dtoa_r+0x6da>
 80273ca:	459a      	cmp	sl, r3
 80273cc:	d1f8      	bne.n	80273c0 <_dtoa_r+0x6c0>
 80273ce:	9a04      	ldr	r2, [sp, #16]
 80273d0:	3201      	adds	r2, #1
 80273d2:	9204      	str	r2, [sp, #16]
 80273d4:	2230      	movs	r2, #48	@ 0x30
 80273d6:	f88a 2000 	strb.w	r2, [sl]
 80273da:	781a      	ldrb	r2, [r3, #0]
 80273dc:	3201      	adds	r2, #1
 80273de:	701a      	strb	r2, [r3, #0]
 80273e0:	e7bd      	b.n	802735e <_dtoa_r+0x65e>
 80273e2:	4b7b      	ldr	r3, [pc, #492]	@ (80275d0 <_dtoa_r+0x8d0>)
 80273e4:	2200      	movs	r2, #0
 80273e6:	f7d9 f927 	bl	8000638 <__aeabi_dmul>
 80273ea:	2200      	movs	r2, #0
 80273ec:	2300      	movs	r3, #0
 80273ee:	4604      	mov	r4, r0
 80273f0:	460d      	mov	r5, r1
 80273f2:	f7d9 fb89 	bl	8000b08 <__aeabi_dcmpeq>
 80273f6:	2800      	cmp	r0, #0
 80273f8:	f43f aebb 	beq.w	8027172 <_dtoa_r+0x472>
 80273fc:	e6f0      	b.n	80271e0 <_dtoa_r+0x4e0>
 80273fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027400:	2a00      	cmp	r2, #0
 8027402:	f000 80db 	beq.w	80275bc <_dtoa_r+0x8bc>
 8027406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027408:	2a01      	cmp	r2, #1
 802740a:	f300 80bf 	bgt.w	802758c <_dtoa_r+0x88c>
 802740e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027410:	2a00      	cmp	r2, #0
 8027412:	f000 80b7 	beq.w	8027584 <_dtoa_r+0x884>
 8027416:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802741a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802741c:	4646      	mov	r6, r8
 802741e:	9a08      	ldr	r2, [sp, #32]
 8027420:	2101      	movs	r1, #1
 8027422:	441a      	add	r2, r3
 8027424:	4658      	mov	r0, fp
 8027426:	4498      	add	r8, r3
 8027428:	9208      	str	r2, [sp, #32]
 802742a:	f000 fb6b 	bl	8027b04 <__i2b>
 802742e:	4605      	mov	r5, r0
 8027430:	b15e      	cbz	r6, 802744a <_dtoa_r+0x74a>
 8027432:	9b08      	ldr	r3, [sp, #32]
 8027434:	2b00      	cmp	r3, #0
 8027436:	dd08      	ble.n	802744a <_dtoa_r+0x74a>
 8027438:	42b3      	cmp	r3, r6
 802743a:	9a08      	ldr	r2, [sp, #32]
 802743c:	bfa8      	it	ge
 802743e:	4633      	movge	r3, r6
 8027440:	eba8 0803 	sub.w	r8, r8, r3
 8027444:	1af6      	subs	r6, r6, r3
 8027446:	1ad3      	subs	r3, r2, r3
 8027448:	9308      	str	r3, [sp, #32]
 802744a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802744c:	b1f3      	cbz	r3, 802748c <_dtoa_r+0x78c>
 802744e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027450:	2b00      	cmp	r3, #0
 8027452:	f000 80b7 	beq.w	80275c4 <_dtoa_r+0x8c4>
 8027456:	b18c      	cbz	r4, 802747c <_dtoa_r+0x77c>
 8027458:	4629      	mov	r1, r5
 802745a:	4622      	mov	r2, r4
 802745c:	4658      	mov	r0, fp
 802745e:	f000 fc11 	bl	8027c84 <__pow5mult>
 8027462:	464a      	mov	r2, r9
 8027464:	4601      	mov	r1, r0
 8027466:	4605      	mov	r5, r0
 8027468:	4658      	mov	r0, fp
 802746a:	f000 fb61 	bl	8027b30 <__multiply>
 802746e:	4649      	mov	r1, r9
 8027470:	9004      	str	r0, [sp, #16]
 8027472:	4658      	mov	r0, fp
 8027474:	f000 fa92 	bl	802799c <_Bfree>
 8027478:	9b04      	ldr	r3, [sp, #16]
 802747a:	4699      	mov	r9, r3
 802747c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802747e:	1b1a      	subs	r2, r3, r4
 8027480:	d004      	beq.n	802748c <_dtoa_r+0x78c>
 8027482:	4649      	mov	r1, r9
 8027484:	4658      	mov	r0, fp
 8027486:	f000 fbfd 	bl	8027c84 <__pow5mult>
 802748a:	4681      	mov	r9, r0
 802748c:	2101      	movs	r1, #1
 802748e:	4658      	mov	r0, fp
 8027490:	f000 fb38 	bl	8027b04 <__i2b>
 8027494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027496:	4604      	mov	r4, r0
 8027498:	2b00      	cmp	r3, #0
 802749a:	f000 81cf 	beq.w	802783c <_dtoa_r+0xb3c>
 802749e:	461a      	mov	r2, r3
 80274a0:	4601      	mov	r1, r0
 80274a2:	4658      	mov	r0, fp
 80274a4:	f000 fbee 	bl	8027c84 <__pow5mult>
 80274a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80274aa:	2b01      	cmp	r3, #1
 80274ac:	4604      	mov	r4, r0
 80274ae:	f300 8095 	bgt.w	80275dc <_dtoa_r+0x8dc>
 80274b2:	9b02      	ldr	r3, [sp, #8]
 80274b4:	2b00      	cmp	r3, #0
 80274b6:	f040 8087 	bne.w	80275c8 <_dtoa_r+0x8c8>
 80274ba:	9b03      	ldr	r3, [sp, #12]
 80274bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80274c0:	2b00      	cmp	r3, #0
 80274c2:	f040 8089 	bne.w	80275d8 <_dtoa_r+0x8d8>
 80274c6:	9b03      	ldr	r3, [sp, #12]
 80274c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80274cc:	0d1b      	lsrs	r3, r3, #20
 80274ce:	051b      	lsls	r3, r3, #20
 80274d0:	b12b      	cbz	r3, 80274de <_dtoa_r+0x7de>
 80274d2:	9b08      	ldr	r3, [sp, #32]
 80274d4:	3301      	adds	r3, #1
 80274d6:	9308      	str	r3, [sp, #32]
 80274d8:	f108 0801 	add.w	r8, r8, #1
 80274dc:	2301      	movs	r3, #1
 80274de:	930a      	str	r3, [sp, #40]	@ 0x28
 80274e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80274e2:	2b00      	cmp	r3, #0
 80274e4:	f000 81b0 	beq.w	8027848 <_dtoa_r+0xb48>
 80274e8:	6923      	ldr	r3, [r4, #16]
 80274ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80274ee:	6918      	ldr	r0, [r3, #16]
 80274f0:	f000 fabc 	bl	8027a6c <__hi0bits>
 80274f4:	f1c0 0020 	rsb	r0, r0, #32
 80274f8:	9b08      	ldr	r3, [sp, #32]
 80274fa:	4418      	add	r0, r3
 80274fc:	f010 001f 	ands.w	r0, r0, #31
 8027500:	d077      	beq.n	80275f2 <_dtoa_r+0x8f2>
 8027502:	f1c0 0320 	rsb	r3, r0, #32
 8027506:	2b04      	cmp	r3, #4
 8027508:	dd6b      	ble.n	80275e2 <_dtoa_r+0x8e2>
 802750a:	9b08      	ldr	r3, [sp, #32]
 802750c:	f1c0 001c 	rsb	r0, r0, #28
 8027510:	4403      	add	r3, r0
 8027512:	4480      	add	r8, r0
 8027514:	4406      	add	r6, r0
 8027516:	9308      	str	r3, [sp, #32]
 8027518:	f1b8 0f00 	cmp.w	r8, #0
 802751c:	dd05      	ble.n	802752a <_dtoa_r+0x82a>
 802751e:	4649      	mov	r1, r9
 8027520:	4642      	mov	r2, r8
 8027522:	4658      	mov	r0, fp
 8027524:	f000 fc08 	bl	8027d38 <__lshift>
 8027528:	4681      	mov	r9, r0
 802752a:	9b08      	ldr	r3, [sp, #32]
 802752c:	2b00      	cmp	r3, #0
 802752e:	dd05      	ble.n	802753c <_dtoa_r+0x83c>
 8027530:	4621      	mov	r1, r4
 8027532:	461a      	mov	r2, r3
 8027534:	4658      	mov	r0, fp
 8027536:	f000 fbff 	bl	8027d38 <__lshift>
 802753a:	4604      	mov	r4, r0
 802753c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802753e:	2b00      	cmp	r3, #0
 8027540:	d059      	beq.n	80275f6 <_dtoa_r+0x8f6>
 8027542:	4621      	mov	r1, r4
 8027544:	4648      	mov	r0, r9
 8027546:	f000 fc63 	bl	8027e10 <__mcmp>
 802754a:	2800      	cmp	r0, #0
 802754c:	da53      	bge.n	80275f6 <_dtoa_r+0x8f6>
 802754e:	1e7b      	subs	r3, r7, #1
 8027550:	9304      	str	r3, [sp, #16]
 8027552:	4649      	mov	r1, r9
 8027554:	2300      	movs	r3, #0
 8027556:	220a      	movs	r2, #10
 8027558:	4658      	mov	r0, fp
 802755a:	f000 fa41 	bl	80279e0 <__multadd>
 802755e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027560:	4681      	mov	r9, r0
 8027562:	2b00      	cmp	r3, #0
 8027564:	f000 8172 	beq.w	802784c <_dtoa_r+0xb4c>
 8027568:	2300      	movs	r3, #0
 802756a:	4629      	mov	r1, r5
 802756c:	220a      	movs	r2, #10
 802756e:	4658      	mov	r0, fp
 8027570:	f000 fa36 	bl	80279e0 <__multadd>
 8027574:	9b00      	ldr	r3, [sp, #0]
 8027576:	2b00      	cmp	r3, #0
 8027578:	4605      	mov	r5, r0
 802757a:	dc67      	bgt.n	802764c <_dtoa_r+0x94c>
 802757c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802757e:	2b02      	cmp	r3, #2
 8027580:	dc41      	bgt.n	8027606 <_dtoa_r+0x906>
 8027582:	e063      	b.n	802764c <_dtoa_r+0x94c>
 8027584:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027586:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802758a:	e746      	b.n	802741a <_dtoa_r+0x71a>
 802758c:	9b07      	ldr	r3, [sp, #28]
 802758e:	1e5c      	subs	r4, r3, #1
 8027590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027592:	42a3      	cmp	r3, r4
 8027594:	bfbf      	itttt	lt
 8027596:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8027598:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802759a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802759c:	1ae3      	sublt	r3, r4, r3
 802759e:	bfb4      	ite	lt
 80275a0:	18d2      	addlt	r2, r2, r3
 80275a2:	1b1c      	subge	r4, r3, r4
 80275a4:	9b07      	ldr	r3, [sp, #28]
 80275a6:	bfbc      	itt	lt
 80275a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80275aa:	2400      	movlt	r4, #0
 80275ac:	2b00      	cmp	r3, #0
 80275ae:	bfb5      	itete	lt
 80275b0:	eba8 0603 	sublt.w	r6, r8, r3
 80275b4:	9b07      	ldrge	r3, [sp, #28]
 80275b6:	2300      	movlt	r3, #0
 80275b8:	4646      	movge	r6, r8
 80275ba:	e730      	b.n	802741e <_dtoa_r+0x71e>
 80275bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80275be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80275c0:	4646      	mov	r6, r8
 80275c2:	e735      	b.n	8027430 <_dtoa_r+0x730>
 80275c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80275c6:	e75c      	b.n	8027482 <_dtoa_r+0x782>
 80275c8:	2300      	movs	r3, #0
 80275ca:	e788      	b.n	80274de <_dtoa_r+0x7de>
 80275cc:	3fe00000 	.word	0x3fe00000
 80275d0:	40240000 	.word	0x40240000
 80275d4:	40140000 	.word	0x40140000
 80275d8:	9b02      	ldr	r3, [sp, #8]
 80275da:	e780      	b.n	80274de <_dtoa_r+0x7de>
 80275dc:	2300      	movs	r3, #0
 80275de:	930a      	str	r3, [sp, #40]	@ 0x28
 80275e0:	e782      	b.n	80274e8 <_dtoa_r+0x7e8>
 80275e2:	d099      	beq.n	8027518 <_dtoa_r+0x818>
 80275e4:	9a08      	ldr	r2, [sp, #32]
 80275e6:	331c      	adds	r3, #28
 80275e8:	441a      	add	r2, r3
 80275ea:	4498      	add	r8, r3
 80275ec:	441e      	add	r6, r3
 80275ee:	9208      	str	r2, [sp, #32]
 80275f0:	e792      	b.n	8027518 <_dtoa_r+0x818>
 80275f2:	4603      	mov	r3, r0
 80275f4:	e7f6      	b.n	80275e4 <_dtoa_r+0x8e4>
 80275f6:	9b07      	ldr	r3, [sp, #28]
 80275f8:	9704      	str	r7, [sp, #16]
 80275fa:	2b00      	cmp	r3, #0
 80275fc:	dc20      	bgt.n	8027640 <_dtoa_r+0x940>
 80275fe:	9300      	str	r3, [sp, #0]
 8027600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027602:	2b02      	cmp	r3, #2
 8027604:	dd1e      	ble.n	8027644 <_dtoa_r+0x944>
 8027606:	9b00      	ldr	r3, [sp, #0]
 8027608:	2b00      	cmp	r3, #0
 802760a:	f47f aec0 	bne.w	802738e <_dtoa_r+0x68e>
 802760e:	4621      	mov	r1, r4
 8027610:	2205      	movs	r2, #5
 8027612:	4658      	mov	r0, fp
 8027614:	f000 f9e4 	bl	80279e0 <__multadd>
 8027618:	4601      	mov	r1, r0
 802761a:	4604      	mov	r4, r0
 802761c:	4648      	mov	r0, r9
 802761e:	f000 fbf7 	bl	8027e10 <__mcmp>
 8027622:	2800      	cmp	r0, #0
 8027624:	f77f aeb3 	ble.w	802738e <_dtoa_r+0x68e>
 8027628:	4656      	mov	r6, sl
 802762a:	2331      	movs	r3, #49	@ 0x31
 802762c:	f806 3b01 	strb.w	r3, [r6], #1
 8027630:	9b04      	ldr	r3, [sp, #16]
 8027632:	3301      	adds	r3, #1
 8027634:	9304      	str	r3, [sp, #16]
 8027636:	e6ae      	b.n	8027396 <_dtoa_r+0x696>
 8027638:	9c07      	ldr	r4, [sp, #28]
 802763a:	9704      	str	r7, [sp, #16]
 802763c:	4625      	mov	r5, r4
 802763e:	e7f3      	b.n	8027628 <_dtoa_r+0x928>
 8027640:	9b07      	ldr	r3, [sp, #28]
 8027642:	9300      	str	r3, [sp, #0]
 8027644:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027646:	2b00      	cmp	r3, #0
 8027648:	f000 8104 	beq.w	8027854 <_dtoa_r+0xb54>
 802764c:	2e00      	cmp	r6, #0
 802764e:	dd05      	ble.n	802765c <_dtoa_r+0x95c>
 8027650:	4629      	mov	r1, r5
 8027652:	4632      	mov	r2, r6
 8027654:	4658      	mov	r0, fp
 8027656:	f000 fb6f 	bl	8027d38 <__lshift>
 802765a:	4605      	mov	r5, r0
 802765c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802765e:	2b00      	cmp	r3, #0
 8027660:	d05a      	beq.n	8027718 <_dtoa_r+0xa18>
 8027662:	6869      	ldr	r1, [r5, #4]
 8027664:	4658      	mov	r0, fp
 8027666:	f000 f959 	bl	802791c <_Balloc>
 802766a:	4606      	mov	r6, r0
 802766c:	b928      	cbnz	r0, 802767a <_dtoa_r+0x97a>
 802766e:	4b84      	ldr	r3, [pc, #528]	@ (8027880 <_dtoa_r+0xb80>)
 8027670:	4602      	mov	r2, r0
 8027672:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8027676:	f7ff bb5a 	b.w	8026d2e <_dtoa_r+0x2e>
 802767a:	692a      	ldr	r2, [r5, #16]
 802767c:	3202      	adds	r2, #2
 802767e:	0092      	lsls	r2, r2, #2
 8027680:	f105 010c 	add.w	r1, r5, #12
 8027684:	300c      	adds	r0, #12
 8027686:	f7ff fa86 	bl	8026b96 <memcpy>
 802768a:	2201      	movs	r2, #1
 802768c:	4631      	mov	r1, r6
 802768e:	4658      	mov	r0, fp
 8027690:	f000 fb52 	bl	8027d38 <__lshift>
 8027694:	f10a 0301 	add.w	r3, sl, #1
 8027698:	9307      	str	r3, [sp, #28]
 802769a:	9b00      	ldr	r3, [sp, #0]
 802769c:	4453      	add	r3, sl
 802769e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80276a0:	9b02      	ldr	r3, [sp, #8]
 80276a2:	f003 0301 	and.w	r3, r3, #1
 80276a6:	462f      	mov	r7, r5
 80276a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80276aa:	4605      	mov	r5, r0
 80276ac:	9b07      	ldr	r3, [sp, #28]
 80276ae:	4621      	mov	r1, r4
 80276b0:	3b01      	subs	r3, #1
 80276b2:	4648      	mov	r0, r9
 80276b4:	9300      	str	r3, [sp, #0]
 80276b6:	f7ff fa9b 	bl	8026bf0 <quorem>
 80276ba:	4639      	mov	r1, r7
 80276bc:	9002      	str	r0, [sp, #8]
 80276be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80276c2:	4648      	mov	r0, r9
 80276c4:	f000 fba4 	bl	8027e10 <__mcmp>
 80276c8:	462a      	mov	r2, r5
 80276ca:	9008      	str	r0, [sp, #32]
 80276cc:	4621      	mov	r1, r4
 80276ce:	4658      	mov	r0, fp
 80276d0:	f000 fbba 	bl	8027e48 <__mdiff>
 80276d4:	68c2      	ldr	r2, [r0, #12]
 80276d6:	4606      	mov	r6, r0
 80276d8:	bb02      	cbnz	r2, 802771c <_dtoa_r+0xa1c>
 80276da:	4601      	mov	r1, r0
 80276dc:	4648      	mov	r0, r9
 80276de:	f000 fb97 	bl	8027e10 <__mcmp>
 80276e2:	4602      	mov	r2, r0
 80276e4:	4631      	mov	r1, r6
 80276e6:	4658      	mov	r0, fp
 80276e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80276ea:	f000 f957 	bl	802799c <_Bfree>
 80276ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80276f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80276f2:	9e07      	ldr	r6, [sp, #28]
 80276f4:	ea43 0102 	orr.w	r1, r3, r2
 80276f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80276fa:	4319      	orrs	r1, r3
 80276fc:	d110      	bne.n	8027720 <_dtoa_r+0xa20>
 80276fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8027702:	d029      	beq.n	8027758 <_dtoa_r+0xa58>
 8027704:	9b08      	ldr	r3, [sp, #32]
 8027706:	2b00      	cmp	r3, #0
 8027708:	dd02      	ble.n	8027710 <_dtoa_r+0xa10>
 802770a:	9b02      	ldr	r3, [sp, #8]
 802770c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8027710:	9b00      	ldr	r3, [sp, #0]
 8027712:	f883 8000 	strb.w	r8, [r3]
 8027716:	e63f      	b.n	8027398 <_dtoa_r+0x698>
 8027718:	4628      	mov	r0, r5
 802771a:	e7bb      	b.n	8027694 <_dtoa_r+0x994>
 802771c:	2201      	movs	r2, #1
 802771e:	e7e1      	b.n	80276e4 <_dtoa_r+0x9e4>
 8027720:	9b08      	ldr	r3, [sp, #32]
 8027722:	2b00      	cmp	r3, #0
 8027724:	db04      	blt.n	8027730 <_dtoa_r+0xa30>
 8027726:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027728:	430b      	orrs	r3, r1
 802772a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802772c:	430b      	orrs	r3, r1
 802772e:	d120      	bne.n	8027772 <_dtoa_r+0xa72>
 8027730:	2a00      	cmp	r2, #0
 8027732:	dded      	ble.n	8027710 <_dtoa_r+0xa10>
 8027734:	4649      	mov	r1, r9
 8027736:	2201      	movs	r2, #1
 8027738:	4658      	mov	r0, fp
 802773a:	f000 fafd 	bl	8027d38 <__lshift>
 802773e:	4621      	mov	r1, r4
 8027740:	4681      	mov	r9, r0
 8027742:	f000 fb65 	bl	8027e10 <__mcmp>
 8027746:	2800      	cmp	r0, #0
 8027748:	dc03      	bgt.n	8027752 <_dtoa_r+0xa52>
 802774a:	d1e1      	bne.n	8027710 <_dtoa_r+0xa10>
 802774c:	f018 0f01 	tst.w	r8, #1
 8027750:	d0de      	beq.n	8027710 <_dtoa_r+0xa10>
 8027752:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8027756:	d1d8      	bne.n	802770a <_dtoa_r+0xa0a>
 8027758:	9a00      	ldr	r2, [sp, #0]
 802775a:	2339      	movs	r3, #57	@ 0x39
 802775c:	7013      	strb	r3, [r2, #0]
 802775e:	4633      	mov	r3, r6
 8027760:	461e      	mov	r6, r3
 8027762:	3b01      	subs	r3, #1
 8027764:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8027768:	2a39      	cmp	r2, #57	@ 0x39
 802776a:	d052      	beq.n	8027812 <_dtoa_r+0xb12>
 802776c:	3201      	adds	r2, #1
 802776e:	701a      	strb	r2, [r3, #0]
 8027770:	e612      	b.n	8027398 <_dtoa_r+0x698>
 8027772:	2a00      	cmp	r2, #0
 8027774:	dd07      	ble.n	8027786 <_dtoa_r+0xa86>
 8027776:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802777a:	d0ed      	beq.n	8027758 <_dtoa_r+0xa58>
 802777c:	9a00      	ldr	r2, [sp, #0]
 802777e:	f108 0301 	add.w	r3, r8, #1
 8027782:	7013      	strb	r3, [r2, #0]
 8027784:	e608      	b.n	8027398 <_dtoa_r+0x698>
 8027786:	9b07      	ldr	r3, [sp, #28]
 8027788:	9a07      	ldr	r2, [sp, #28]
 802778a:	f803 8c01 	strb.w	r8, [r3, #-1]
 802778e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027790:	4293      	cmp	r3, r2
 8027792:	d028      	beq.n	80277e6 <_dtoa_r+0xae6>
 8027794:	4649      	mov	r1, r9
 8027796:	2300      	movs	r3, #0
 8027798:	220a      	movs	r2, #10
 802779a:	4658      	mov	r0, fp
 802779c:	f000 f920 	bl	80279e0 <__multadd>
 80277a0:	42af      	cmp	r7, r5
 80277a2:	4681      	mov	r9, r0
 80277a4:	f04f 0300 	mov.w	r3, #0
 80277a8:	f04f 020a 	mov.w	r2, #10
 80277ac:	4639      	mov	r1, r7
 80277ae:	4658      	mov	r0, fp
 80277b0:	d107      	bne.n	80277c2 <_dtoa_r+0xac2>
 80277b2:	f000 f915 	bl	80279e0 <__multadd>
 80277b6:	4607      	mov	r7, r0
 80277b8:	4605      	mov	r5, r0
 80277ba:	9b07      	ldr	r3, [sp, #28]
 80277bc:	3301      	adds	r3, #1
 80277be:	9307      	str	r3, [sp, #28]
 80277c0:	e774      	b.n	80276ac <_dtoa_r+0x9ac>
 80277c2:	f000 f90d 	bl	80279e0 <__multadd>
 80277c6:	4629      	mov	r1, r5
 80277c8:	4607      	mov	r7, r0
 80277ca:	2300      	movs	r3, #0
 80277cc:	220a      	movs	r2, #10
 80277ce:	4658      	mov	r0, fp
 80277d0:	f000 f906 	bl	80279e0 <__multadd>
 80277d4:	4605      	mov	r5, r0
 80277d6:	e7f0      	b.n	80277ba <_dtoa_r+0xaba>
 80277d8:	9b00      	ldr	r3, [sp, #0]
 80277da:	2b00      	cmp	r3, #0
 80277dc:	bfcc      	ite	gt
 80277de:	461e      	movgt	r6, r3
 80277e0:	2601      	movle	r6, #1
 80277e2:	4456      	add	r6, sl
 80277e4:	2700      	movs	r7, #0
 80277e6:	4649      	mov	r1, r9
 80277e8:	2201      	movs	r2, #1
 80277ea:	4658      	mov	r0, fp
 80277ec:	f000 faa4 	bl	8027d38 <__lshift>
 80277f0:	4621      	mov	r1, r4
 80277f2:	4681      	mov	r9, r0
 80277f4:	f000 fb0c 	bl	8027e10 <__mcmp>
 80277f8:	2800      	cmp	r0, #0
 80277fa:	dcb0      	bgt.n	802775e <_dtoa_r+0xa5e>
 80277fc:	d102      	bne.n	8027804 <_dtoa_r+0xb04>
 80277fe:	f018 0f01 	tst.w	r8, #1
 8027802:	d1ac      	bne.n	802775e <_dtoa_r+0xa5e>
 8027804:	4633      	mov	r3, r6
 8027806:	461e      	mov	r6, r3
 8027808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802780c:	2a30      	cmp	r2, #48	@ 0x30
 802780e:	d0fa      	beq.n	8027806 <_dtoa_r+0xb06>
 8027810:	e5c2      	b.n	8027398 <_dtoa_r+0x698>
 8027812:	459a      	cmp	sl, r3
 8027814:	d1a4      	bne.n	8027760 <_dtoa_r+0xa60>
 8027816:	9b04      	ldr	r3, [sp, #16]
 8027818:	3301      	adds	r3, #1
 802781a:	9304      	str	r3, [sp, #16]
 802781c:	2331      	movs	r3, #49	@ 0x31
 802781e:	f88a 3000 	strb.w	r3, [sl]
 8027822:	e5b9      	b.n	8027398 <_dtoa_r+0x698>
 8027824:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027826:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8027884 <_dtoa_r+0xb84>
 802782a:	b11b      	cbz	r3, 8027834 <_dtoa_r+0xb34>
 802782c:	f10a 0308 	add.w	r3, sl, #8
 8027830:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027832:	6013      	str	r3, [r2, #0]
 8027834:	4650      	mov	r0, sl
 8027836:	b019      	add	sp, #100	@ 0x64
 8027838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802783c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802783e:	2b01      	cmp	r3, #1
 8027840:	f77f ae37 	ble.w	80274b2 <_dtoa_r+0x7b2>
 8027844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027846:	930a      	str	r3, [sp, #40]	@ 0x28
 8027848:	2001      	movs	r0, #1
 802784a:	e655      	b.n	80274f8 <_dtoa_r+0x7f8>
 802784c:	9b00      	ldr	r3, [sp, #0]
 802784e:	2b00      	cmp	r3, #0
 8027850:	f77f aed6 	ble.w	8027600 <_dtoa_r+0x900>
 8027854:	4656      	mov	r6, sl
 8027856:	4621      	mov	r1, r4
 8027858:	4648      	mov	r0, r9
 802785a:	f7ff f9c9 	bl	8026bf0 <quorem>
 802785e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8027862:	f806 8b01 	strb.w	r8, [r6], #1
 8027866:	9b00      	ldr	r3, [sp, #0]
 8027868:	eba6 020a 	sub.w	r2, r6, sl
 802786c:	4293      	cmp	r3, r2
 802786e:	ddb3      	ble.n	80277d8 <_dtoa_r+0xad8>
 8027870:	4649      	mov	r1, r9
 8027872:	2300      	movs	r3, #0
 8027874:	220a      	movs	r2, #10
 8027876:	4658      	mov	r0, fp
 8027878:	f000 f8b2 	bl	80279e0 <__multadd>
 802787c:	4681      	mov	r9, r0
 802787e:	e7ea      	b.n	8027856 <_dtoa_r+0xb56>
 8027880:	0802d165 	.word	0x0802d165
 8027884:	0802d100 	.word	0x0802d100

08027888 <_free_r>:
 8027888:	b538      	push	{r3, r4, r5, lr}
 802788a:	4605      	mov	r5, r0
 802788c:	2900      	cmp	r1, #0
 802788e:	d041      	beq.n	8027914 <_free_r+0x8c>
 8027890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027894:	1f0c      	subs	r4, r1, #4
 8027896:	2b00      	cmp	r3, #0
 8027898:	bfb8      	it	lt
 802789a:	18e4      	addlt	r4, r4, r3
 802789c:	f7fe fa98 	bl	8025dd0 <__malloc_lock>
 80278a0:	4a1d      	ldr	r2, [pc, #116]	@ (8027918 <_free_r+0x90>)
 80278a2:	6813      	ldr	r3, [r2, #0]
 80278a4:	b933      	cbnz	r3, 80278b4 <_free_r+0x2c>
 80278a6:	6063      	str	r3, [r4, #4]
 80278a8:	6014      	str	r4, [r2, #0]
 80278aa:	4628      	mov	r0, r5
 80278ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80278b0:	f7fe ba94 	b.w	8025ddc <__malloc_unlock>
 80278b4:	42a3      	cmp	r3, r4
 80278b6:	d908      	bls.n	80278ca <_free_r+0x42>
 80278b8:	6820      	ldr	r0, [r4, #0]
 80278ba:	1821      	adds	r1, r4, r0
 80278bc:	428b      	cmp	r3, r1
 80278be:	bf01      	itttt	eq
 80278c0:	6819      	ldreq	r1, [r3, #0]
 80278c2:	685b      	ldreq	r3, [r3, #4]
 80278c4:	1809      	addeq	r1, r1, r0
 80278c6:	6021      	streq	r1, [r4, #0]
 80278c8:	e7ed      	b.n	80278a6 <_free_r+0x1e>
 80278ca:	461a      	mov	r2, r3
 80278cc:	685b      	ldr	r3, [r3, #4]
 80278ce:	b10b      	cbz	r3, 80278d4 <_free_r+0x4c>
 80278d0:	42a3      	cmp	r3, r4
 80278d2:	d9fa      	bls.n	80278ca <_free_r+0x42>
 80278d4:	6811      	ldr	r1, [r2, #0]
 80278d6:	1850      	adds	r0, r2, r1
 80278d8:	42a0      	cmp	r0, r4
 80278da:	d10b      	bne.n	80278f4 <_free_r+0x6c>
 80278dc:	6820      	ldr	r0, [r4, #0]
 80278de:	4401      	add	r1, r0
 80278e0:	1850      	adds	r0, r2, r1
 80278e2:	4283      	cmp	r3, r0
 80278e4:	6011      	str	r1, [r2, #0]
 80278e6:	d1e0      	bne.n	80278aa <_free_r+0x22>
 80278e8:	6818      	ldr	r0, [r3, #0]
 80278ea:	685b      	ldr	r3, [r3, #4]
 80278ec:	6053      	str	r3, [r2, #4]
 80278ee:	4408      	add	r0, r1
 80278f0:	6010      	str	r0, [r2, #0]
 80278f2:	e7da      	b.n	80278aa <_free_r+0x22>
 80278f4:	d902      	bls.n	80278fc <_free_r+0x74>
 80278f6:	230c      	movs	r3, #12
 80278f8:	602b      	str	r3, [r5, #0]
 80278fa:	e7d6      	b.n	80278aa <_free_r+0x22>
 80278fc:	6820      	ldr	r0, [r4, #0]
 80278fe:	1821      	adds	r1, r4, r0
 8027900:	428b      	cmp	r3, r1
 8027902:	bf04      	itt	eq
 8027904:	6819      	ldreq	r1, [r3, #0]
 8027906:	685b      	ldreq	r3, [r3, #4]
 8027908:	6063      	str	r3, [r4, #4]
 802790a:	bf04      	itt	eq
 802790c:	1809      	addeq	r1, r1, r0
 802790e:	6021      	streq	r1, [r4, #0]
 8027910:	6054      	str	r4, [r2, #4]
 8027912:	e7ca      	b.n	80278aa <_free_r+0x22>
 8027914:	bd38      	pop	{r3, r4, r5, pc}
 8027916:	bf00      	nop
 8027918:	2003ce00 	.word	0x2003ce00

0802791c <_Balloc>:
 802791c:	b570      	push	{r4, r5, r6, lr}
 802791e:	69c6      	ldr	r6, [r0, #28]
 8027920:	4604      	mov	r4, r0
 8027922:	460d      	mov	r5, r1
 8027924:	b976      	cbnz	r6, 8027944 <_Balloc+0x28>
 8027926:	2010      	movs	r0, #16
 8027928:	f7fe f9a0 	bl	8025c6c <malloc>
 802792c:	4602      	mov	r2, r0
 802792e:	61e0      	str	r0, [r4, #28]
 8027930:	b920      	cbnz	r0, 802793c <_Balloc+0x20>
 8027932:	4b18      	ldr	r3, [pc, #96]	@ (8027994 <_Balloc+0x78>)
 8027934:	4818      	ldr	r0, [pc, #96]	@ (8027998 <_Balloc+0x7c>)
 8027936:	216b      	movs	r1, #107	@ 0x6b
 8027938:	f7ff f93c 	bl	8026bb4 <__assert_func>
 802793c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027940:	6006      	str	r6, [r0, #0]
 8027942:	60c6      	str	r6, [r0, #12]
 8027944:	69e6      	ldr	r6, [r4, #28]
 8027946:	68f3      	ldr	r3, [r6, #12]
 8027948:	b183      	cbz	r3, 802796c <_Balloc+0x50>
 802794a:	69e3      	ldr	r3, [r4, #28]
 802794c:	68db      	ldr	r3, [r3, #12]
 802794e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8027952:	b9b8      	cbnz	r0, 8027984 <_Balloc+0x68>
 8027954:	2101      	movs	r1, #1
 8027956:	fa01 f605 	lsl.w	r6, r1, r5
 802795a:	1d72      	adds	r2, r6, #5
 802795c:	0092      	lsls	r2, r2, #2
 802795e:	4620      	mov	r0, r4
 8027960:	f000 ff51 	bl	8028806 <_calloc_r>
 8027964:	b160      	cbz	r0, 8027980 <_Balloc+0x64>
 8027966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802796a:	e00e      	b.n	802798a <_Balloc+0x6e>
 802796c:	2221      	movs	r2, #33	@ 0x21
 802796e:	2104      	movs	r1, #4
 8027970:	4620      	mov	r0, r4
 8027972:	f000 ff48 	bl	8028806 <_calloc_r>
 8027976:	69e3      	ldr	r3, [r4, #28]
 8027978:	60f0      	str	r0, [r6, #12]
 802797a:	68db      	ldr	r3, [r3, #12]
 802797c:	2b00      	cmp	r3, #0
 802797e:	d1e4      	bne.n	802794a <_Balloc+0x2e>
 8027980:	2000      	movs	r0, #0
 8027982:	bd70      	pop	{r4, r5, r6, pc}
 8027984:	6802      	ldr	r2, [r0, #0]
 8027986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802798a:	2300      	movs	r3, #0
 802798c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027990:	e7f7      	b.n	8027982 <_Balloc+0x66>
 8027992:	bf00      	nop
 8027994:	0802cf20 	.word	0x0802cf20
 8027998:	0802d176 	.word	0x0802d176

0802799c <_Bfree>:
 802799c:	b570      	push	{r4, r5, r6, lr}
 802799e:	69c6      	ldr	r6, [r0, #28]
 80279a0:	4605      	mov	r5, r0
 80279a2:	460c      	mov	r4, r1
 80279a4:	b976      	cbnz	r6, 80279c4 <_Bfree+0x28>
 80279a6:	2010      	movs	r0, #16
 80279a8:	f7fe f960 	bl	8025c6c <malloc>
 80279ac:	4602      	mov	r2, r0
 80279ae:	61e8      	str	r0, [r5, #28]
 80279b0:	b920      	cbnz	r0, 80279bc <_Bfree+0x20>
 80279b2:	4b09      	ldr	r3, [pc, #36]	@ (80279d8 <_Bfree+0x3c>)
 80279b4:	4809      	ldr	r0, [pc, #36]	@ (80279dc <_Bfree+0x40>)
 80279b6:	218f      	movs	r1, #143	@ 0x8f
 80279b8:	f7ff f8fc 	bl	8026bb4 <__assert_func>
 80279bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80279c0:	6006      	str	r6, [r0, #0]
 80279c2:	60c6      	str	r6, [r0, #12]
 80279c4:	b13c      	cbz	r4, 80279d6 <_Bfree+0x3a>
 80279c6:	69eb      	ldr	r3, [r5, #28]
 80279c8:	6862      	ldr	r2, [r4, #4]
 80279ca:	68db      	ldr	r3, [r3, #12]
 80279cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80279d0:	6021      	str	r1, [r4, #0]
 80279d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80279d6:	bd70      	pop	{r4, r5, r6, pc}
 80279d8:	0802cf20 	.word	0x0802cf20
 80279dc:	0802d176 	.word	0x0802d176

080279e0 <__multadd>:
 80279e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80279e4:	690d      	ldr	r5, [r1, #16]
 80279e6:	4607      	mov	r7, r0
 80279e8:	460c      	mov	r4, r1
 80279ea:	461e      	mov	r6, r3
 80279ec:	f101 0c14 	add.w	ip, r1, #20
 80279f0:	2000      	movs	r0, #0
 80279f2:	f8dc 3000 	ldr.w	r3, [ip]
 80279f6:	b299      	uxth	r1, r3
 80279f8:	fb02 6101 	mla	r1, r2, r1, r6
 80279fc:	0c1e      	lsrs	r6, r3, #16
 80279fe:	0c0b      	lsrs	r3, r1, #16
 8027a00:	fb02 3306 	mla	r3, r2, r6, r3
 8027a04:	b289      	uxth	r1, r1
 8027a06:	3001      	adds	r0, #1
 8027a08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027a0c:	4285      	cmp	r5, r0
 8027a0e:	f84c 1b04 	str.w	r1, [ip], #4
 8027a12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8027a16:	dcec      	bgt.n	80279f2 <__multadd+0x12>
 8027a18:	b30e      	cbz	r6, 8027a5e <__multadd+0x7e>
 8027a1a:	68a3      	ldr	r3, [r4, #8]
 8027a1c:	42ab      	cmp	r3, r5
 8027a1e:	dc19      	bgt.n	8027a54 <__multadd+0x74>
 8027a20:	6861      	ldr	r1, [r4, #4]
 8027a22:	4638      	mov	r0, r7
 8027a24:	3101      	adds	r1, #1
 8027a26:	f7ff ff79 	bl	802791c <_Balloc>
 8027a2a:	4680      	mov	r8, r0
 8027a2c:	b928      	cbnz	r0, 8027a3a <__multadd+0x5a>
 8027a2e:	4602      	mov	r2, r0
 8027a30:	4b0c      	ldr	r3, [pc, #48]	@ (8027a64 <__multadd+0x84>)
 8027a32:	480d      	ldr	r0, [pc, #52]	@ (8027a68 <__multadd+0x88>)
 8027a34:	21ba      	movs	r1, #186	@ 0xba
 8027a36:	f7ff f8bd 	bl	8026bb4 <__assert_func>
 8027a3a:	6922      	ldr	r2, [r4, #16]
 8027a3c:	3202      	adds	r2, #2
 8027a3e:	f104 010c 	add.w	r1, r4, #12
 8027a42:	0092      	lsls	r2, r2, #2
 8027a44:	300c      	adds	r0, #12
 8027a46:	f7ff f8a6 	bl	8026b96 <memcpy>
 8027a4a:	4621      	mov	r1, r4
 8027a4c:	4638      	mov	r0, r7
 8027a4e:	f7ff ffa5 	bl	802799c <_Bfree>
 8027a52:	4644      	mov	r4, r8
 8027a54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8027a58:	3501      	adds	r5, #1
 8027a5a:	615e      	str	r6, [r3, #20]
 8027a5c:	6125      	str	r5, [r4, #16]
 8027a5e:	4620      	mov	r0, r4
 8027a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027a64:	0802d165 	.word	0x0802d165
 8027a68:	0802d176 	.word	0x0802d176

08027a6c <__hi0bits>:
 8027a6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8027a70:	4603      	mov	r3, r0
 8027a72:	bf36      	itet	cc
 8027a74:	0403      	lslcc	r3, r0, #16
 8027a76:	2000      	movcs	r0, #0
 8027a78:	2010      	movcc	r0, #16
 8027a7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8027a7e:	bf3c      	itt	cc
 8027a80:	021b      	lslcc	r3, r3, #8
 8027a82:	3008      	addcc	r0, #8
 8027a84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8027a88:	bf3c      	itt	cc
 8027a8a:	011b      	lslcc	r3, r3, #4
 8027a8c:	3004      	addcc	r0, #4
 8027a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8027a92:	bf3c      	itt	cc
 8027a94:	009b      	lslcc	r3, r3, #2
 8027a96:	3002      	addcc	r0, #2
 8027a98:	2b00      	cmp	r3, #0
 8027a9a:	db05      	blt.n	8027aa8 <__hi0bits+0x3c>
 8027a9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8027aa0:	f100 0001 	add.w	r0, r0, #1
 8027aa4:	bf08      	it	eq
 8027aa6:	2020      	moveq	r0, #32
 8027aa8:	4770      	bx	lr

08027aaa <__lo0bits>:
 8027aaa:	6803      	ldr	r3, [r0, #0]
 8027aac:	4602      	mov	r2, r0
 8027aae:	f013 0007 	ands.w	r0, r3, #7
 8027ab2:	d00b      	beq.n	8027acc <__lo0bits+0x22>
 8027ab4:	07d9      	lsls	r1, r3, #31
 8027ab6:	d421      	bmi.n	8027afc <__lo0bits+0x52>
 8027ab8:	0798      	lsls	r0, r3, #30
 8027aba:	bf49      	itett	mi
 8027abc:	085b      	lsrmi	r3, r3, #1
 8027abe:	089b      	lsrpl	r3, r3, #2
 8027ac0:	2001      	movmi	r0, #1
 8027ac2:	6013      	strmi	r3, [r2, #0]
 8027ac4:	bf5c      	itt	pl
 8027ac6:	6013      	strpl	r3, [r2, #0]
 8027ac8:	2002      	movpl	r0, #2
 8027aca:	4770      	bx	lr
 8027acc:	b299      	uxth	r1, r3
 8027ace:	b909      	cbnz	r1, 8027ad4 <__lo0bits+0x2a>
 8027ad0:	0c1b      	lsrs	r3, r3, #16
 8027ad2:	2010      	movs	r0, #16
 8027ad4:	b2d9      	uxtb	r1, r3
 8027ad6:	b909      	cbnz	r1, 8027adc <__lo0bits+0x32>
 8027ad8:	3008      	adds	r0, #8
 8027ada:	0a1b      	lsrs	r3, r3, #8
 8027adc:	0719      	lsls	r1, r3, #28
 8027ade:	bf04      	itt	eq
 8027ae0:	091b      	lsreq	r3, r3, #4
 8027ae2:	3004      	addeq	r0, #4
 8027ae4:	0799      	lsls	r1, r3, #30
 8027ae6:	bf04      	itt	eq
 8027ae8:	089b      	lsreq	r3, r3, #2
 8027aea:	3002      	addeq	r0, #2
 8027aec:	07d9      	lsls	r1, r3, #31
 8027aee:	d403      	bmi.n	8027af8 <__lo0bits+0x4e>
 8027af0:	085b      	lsrs	r3, r3, #1
 8027af2:	f100 0001 	add.w	r0, r0, #1
 8027af6:	d003      	beq.n	8027b00 <__lo0bits+0x56>
 8027af8:	6013      	str	r3, [r2, #0]
 8027afa:	4770      	bx	lr
 8027afc:	2000      	movs	r0, #0
 8027afe:	4770      	bx	lr
 8027b00:	2020      	movs	r0, #32
 8027b02:	4770      	bx	lr

08027b04 <__i2b>:
 8027b04:	b510      	push	{r4, lr}
 8027b06:	460c      	mov	r4, r1
 8027b08:	2101      	movs	r1, #1
 8027b0a:	f7ff ff07 	bl	802791c <_Balloc>
 8027b0e:	4602      	mov	r2, r0
 8027b10:	b928      	cbnz	r0, 8027b1e <__i2b+0x1a>
 8027b12:	4b05      	ldr	r3, [pc, #20]	@ (8027b28 <__i2b+0x24>)
 8027b14:	4805      	ldr	r0, [pc, #20]	@ (8027b2c <__i2b+0x28>)
 8027b16:	f240 1145 	movw	r1, #325	@ 0x145
 8027b1a:	f7ff f84b 	bl	8026bb4 <__assert_func>
 8027b1e:	2301      	movs	r3, #1
 8027b20:	6144      	str	r4, [r0, #20]
 8027b22:	6103      	str	r3, [r0, #16]
 8027b24:	bd10      	pop	{r4, pc}
 8027b26:	bf00      	nop
 8027b28:	0802d165 	.word	0x0802d165
 8027b2c:	0802d176 	.word	0x0802d176

08027b30 <__multiply>:
 8027b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b34:	4614      	mov	r4, r2
 8027b36:	690a      	ldr	r2, [r1, #16]
 8027b38:	6923      	ldr	r3, [r4, #16]
 8027b3a:	429a      	cmp	r2, r3
 8027b3c:	bfa8      	it	ge
 8027b3e:	4623      	movge	r3, r4
 8027b40:	460f      	mov	r7, r1
 8027b42:	bfa4      	itt	ge
 8027b44:	460c      	movge	r4, r1
 8027b46:	461f      	movge	r7, r3
 8027b48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8027b4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8027b50:	68a3      	ldr	r3, [r4, #8]
 8027b52:	6861      	ldr	r1, [r4, #4]
 8027b54:	eb0a 0609 	add.w	r6, sl, r9
 8027b58:	42b3      	cmp	r3, r6
 8027b5a:	b085      	sub	sp, #20
 8027b5c:	bfb8      	it	lt
 8027b5e:	3101      	addlt	r1, #1
 8027b60:	f7ff fedc 	bl	802791c <_Balloc>
 8027b64:	b930      	cbnz	r0, 8027b74 <__multiply+0x44>
 8027b66:	4602      	mov	r2, r0
 8027b68:	4b44      	ldr	r3, [pc, #272]	@ (8027c7c <__multiply+0x14c>)
 8027b6a:	4845      	ldr	r0, [pc, #276]	@ (8027c80 <__multiply+0x150>)
 8027b6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8027b70:	f7ff f820 	bl	8026bb4 <__assert_func>
 8027b74:	f100 0514 	add.w	r5, r0, #20
 8027b78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8027b7c:	462b      	mov	r3, r5
 8027b7e:	2200      	movs	r2, #0
 8027b80:	4543      	cmp	r3, r8
 8027b82:	d321      	bcc.n	8027bc8 <__multiply+0x98>
 8027b84:	f107 0114 	add.w	r1, r7, #20
 8027b88:	f104 0214 	add.w	r2, r4, #20
 8027b8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8027b90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8027b94:	9302      	str	r3, [sp, #8]
 8027b96:	1b13      	subs	r3, r2, r4
 8027b98:	3b15      	subs	r3, #21
 8027b9a:	f023 0303 	bic.w	r3, r3, #3
 8027b9e:	3304      	adds	r3, #4
 8027ba0:	f104 0715 	add.w	r7, r4, #21
 8027ba4:	42ba      	cmp	r2, r7
 8027ba6:	bf38      	it	cc
 8027ba8:	2304      	movcc	r3, #4
 8027baa:	9301      	str	r3, [sp, #4]
 8027bac:	9b02      	ldr	r3, [sp, #8]
 8027bae:	9103      	str	r1, [sp, #12]
 8027bb0:	428b      	cmp	r3, r1
 8027bb2:	d80c      	bhi.n	8027bce <__multiply+0x9e>
 8027bb4:	2e00      	cmp	r6, #0
 8027bb6:	dd03      	ble.n	8027bc0 <__multiply+0x90>
 8027bb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8027bbc:	2b00      	cmp	r3, #0
 8027bbe:	d05b      	beq.n	8027c78 <__multiply+0x148>
 8027bc0:	6106      	str	r6, [r0, #16]
 8027bc2:	b005      	add	sp, #20
 8027bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027bc8:	f843 2b04 	str.w	r2, [r3], #4
 8027bcc:	e7d8      	b.n	8027b80 <__multiply+0x50>
 8027bce:	f8b1 a000 	ldrh.w	sl, [r1]
 8027bd2:	f1ba 0f00 	cmp.w	sl, #0
 8027bd6:	d024      	beq.n	8027c22 <__multiply+0xf2>
 8027bd8:	f104 0e14 	add.w	lr, r4, #20
 8027bdc:	46a9      	mov	r9, r5
 8027bde:	f04f 0c00 	mov.w	ip, #0
 8027be2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8027be6:	f8d9 3000 	ldr.w	r3, [r9]
 8027bea:	fa1f fb87 	uxth.w	fp, r7
 8027bee:	b29b      	uxth	r3, r3
 8027bf0:	fb0a 330b 	mla	r3, sl, fp, r3
 8027bf4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8027bf8:	f8d9 7000 	ldr.w	r7, [r9]
 8027bfc:	4463      	add	r3, ip
 8027bfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8027c02:	fb0a c70b 	mla	r7, sl, fp, ip
 8027c06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8027c0a:	b29b      	uxth	r3, r3
 8027c0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8027c10:	4572      	cmp	r2, lr
 8027c12:	f849 3b04 	str.w	r3, [r9], #4
 8027c16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8027c1a:	d8e2      	bhi.n	8027be2 <__multiply+0xb2>
 8027c1c:	9b01      	ldr	r3, [sp, #4]
 8027c1e:	f845 c003 	str.w	ip, [r5, r3]
 8027c22:	9b03      	ldr	r3, [sp, #12]
 8027c24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8027c28:	3104      	adds	r1, #4
 8027c2a:	f1b9 0f00 	cmp.w	r9, #0
 8027c2e:	d021      	beq.n	8027c74 <__multiply+0x144>
 8027c30:	682b      	ldr	r3, [r5, #0]
 8027c32:	f104 0c14 	add.w	ip, r4, #20
 8027c36:	46ae      	mov	lr, r5
 8027c38:	f04f 0a00 	mov.w	sl, #0
 8027c3c:	f8bc b000 	ldrh.w	fp, [ip]
 8027c40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8027c44:	fb09 770b 	mla	r7, r9, fp, r7
 8027c48:	4457      	add	r7, sl
 8027c4a:	b29b      	uxth	r3, r3
 8027c4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8027c50:	f84e 3b04 	str.w	r3, [lr], #4
 8027c54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8027c58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8027c5c:	f8be 3000 	ldrh.w	r3, [lr]
 8027c60:	fb09 330a 	mla	r3, r9, sl, r3
 8027c64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8027c68:	4562      	cmp	r2, ip
 8027c6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8027c6e:	d8e5      	bhi.n	8027c3c <__multiply+0x10c>
 8027c70:	9f01      	ldr	r7, [sp, #4]
 8027c72:	51eb      	str	r3, [r5, r7]
 8027c74:	3504      	adds	r5, #4
 8027c76:	e799      	b.n	8027bac <__multiply+0x7c>
 8027c78:	3e01      	subs	r6, #1
 8027c7a:	e79b      	b.n	8027bb4 <__multiply+0x84>
 8027c7c:	0802d165 	.word	0x0802d165
 8027c80:	0802d176 	.word	0x0802d176

08027c84 <__pow5mult>:
 8027c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027c88:	4615      	mov	r5, r2
 8027c8a:	f012 0203 	ands.w	r2, r2, #3
 8027c8e:	4607      	mov	r7, r0
 8027c90:	460e      	mov	r6, r1
 8027c92:	d007      	beq.n	8027ca4 <__pow5mult+0x20>
 8027c94:	4c25      	ldr	r4, [pc, #148]	@ (8027d2c <__pow5mult+0xa8>)
 8027c96:	3a01      	subs	r2, #1
 8027c98:	2300      	movs	r3, #0
 8027c9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027c9e:	f7ff fe9f 	bl	80279e0 <__multadd>
 8027ca2:	4606      	mov	r6, r0
 8027ca4:	10ad      	asrs	r5, r5, #2
 8027ca6:	d03d      	beq.n	8027d24 <__pow5mult+0xa0>
 8027ca8:	69fc      	ldr	r4, [r7, #28]
 8027caa:	b97c      	cbnz	r4, 8027ccc <__pow5mult+0x48>
 8027cac:	2010      	movs	r0, #16
 8027cae:	f7fd ffdd 	bl	8025c6c <malloc>
 8027cb2:	4602      	mov	r2, r0
 8027cb4:	61f8      	str	r0, [r7, #28]
 8027cb6:	b928      	cbnz	r0, 8027cc4 <__pow5mult+0x40>
 8027cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8027d30 <__pow5mult+0xac>)
 8027cba:	481e      	ldr	r0, [pc, #120]	@ (8027d34 <__pow5mult+0xb0>)
 8027cbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8027cc0:	f7fe ff78 	bl	8026bb4 <__assert_func>
 8027cc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027cc8:	6004      	str	r4, [r0, #0]
 8027cca:	60c4      	str	r4, [r0, #12]
 8027ccc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8027cd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8027cd4:	b94c      	cbnz	r4, 8027cea <__pow5mult+0x66>
 8027cd6:	f240 2171 	movw	r1, #625	@ 0x271
 8027cda:	4638      	mov	r0, r7
 8027cdc:	f7ff ff12 	bl	8027b04 <__i2b>
 8027ce0:	2300      	movs	r3, #0
 8027ce2:	f8c8 0008 	str.w	r0, [r8, #8]
 8027ce6:	4604      	mov	r4, r0
 8027ce8:	6003      	str	r3, [r0, #0]
 8027cea:	f04f 0900 	mov.w	r9, #0
 8027cee:	07eb      	lsls	r3, r5, #31
 8027cf0:	d50a      	bpl.n	8027d08 <__pow5mult+0x84>
 8027cf2:	4631      	mov	r1, r6
 8027cf4:	4622      	mov	r2, r4
 8027cf6:	4638      	mov	r0, r7
 8027cf8:	f7ff ff1a 	bl	8027b30 <__multiply>
 8027cfc:	4631      	mov	r1, r6
 8027cfe:	4680      	mov	r8, r0
 8027d00:	4638      	mov	r0, r7
 8027d02:	f7ff fe4b 	bl	802799c <_Bfree>
 8027d06:	4646      	mov	r6, r8
 8027d08:	106d      	asrs	r5, r5, #1
 8027d0a:	d00b      	beq.n	8027d24 <__pow5mult+0xa0>
 8027d0c:	6820      	ldr	r0, [r4, #0]
 8027d0e:	b938      	cbnz	r0, 8027d20 <__pow5mult+0x9c>
 8027d10:	4622      	mov	r2, r4
 8027d12:	4621      	mov	r1, r4
 8027d14:	4638      	mov	r0, r7
 8027d16:	f7ff ff0b 	bl	8027b30 <__multiply>
 8027d1a:	6020      	str	r0, [r4, #0]
 8027d1c:	f8c0 9000 	str.w	r9, [r0]
 8027d20:	4604      	mov	r4, r0
 8027d22:	e7e4      	b.n	8027cee <__pow5mult+0x6a>
 8027d24:	4630      	mov	r0, r6
 8027d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027d2a:	bf00      	nop
 8027d2c:	0802d1d0 	.word	0x0802d1d0
 8027d30:	0802cf20 	.word	0x0802cf20
 8027d34:	0802d176 	.word	0x0802d176

08027d38 <__lshift>:
 8027d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027d3c:	460c      	mov	r4, r1
 8027d3e:	6849      	ldr	r1, [r1, #4]
 8027d40:	6923      	ldr	r3, [r4, #16]
 8027d42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8027d46:	68a3      	ldr	r3, [r4, #8]
 8027d48:	4607      	mov	r7, r0
 8027d4a:	4691      	mov	r9, r2
 8027d4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027d50:	f108 0601 	add.w	r6, r8, #1
 8027d54:	42b3      	cmp	r3, r6
 8027d56:	db0b      	blt.n	8027d70 <__lshift+0x38>
 8027d58:	4638      	mov	r0, r7
 8027d5a:	f7ff fddf 	bl	802791c <_Balloc>
 8027d5e:	4605      	mov	r5, r0
 8027d60:	b948      	cbnz	r0, 8027d76 <__lshift+0x3e>
 8027d62:	4602      	mov	r2, r0
 8027d64:	4b28      	ldr	r3, [pc, #160]	@ (8027e08 <__lshift+0xd0>)
 8027d66:	4829      	ldr	r0, [pc, #164]	@ (8027e0c <__lshift+0xd4>)
 8027d68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8027d6c:	f7fe ff22 	bl	8026bb4 <__assert_func>
 8027d70:	3101      	adds	r1, #1
 8027d72:	005b      	lsls	r3, r3, #1
 8027d74:	e7ee      	b.n	8027d54 <__lshift+0x1c>
 8027d76:	2300      	movs	r3, #0
 8027d78:	f100 0114 	add.w	r1, r0, #20
 8027d7c:	f100 0210 	add.w	r2, r0, #16
 8027d80:	4618      	mov	r0, r3
 8027d82:	4553      	cmp	r3, sl
 8027d84:	db33      	blt.n	8027dee <__lshift+0xb6>
 8027d86:	6920      	ldr	r0, [r4, #16]
 8027d88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027d8c:	f104 0314 	add.w	r3, r4, #20
 8027d90:	f019 091f 	ands.w	r9, r9, #31
 8027d94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027d98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8027d9c:	d02b      	beq.n	8027df6 <__lshift+0xbe>
 8027d9e:	f1c9 0e20 	rsb	lr, r9, #32
 8027da2:	468a      	mov	sl, r1
 8027da4:	2200      	movs	r2, #0
 8027da6:	6818      	ldr	r0, [r3, #0]
 8027da8:	fa00 f009 	lsl.w	r0, r0, r9
 8027dac:	4310      	orrs	r0, r2
 8027dae:	f84a 0b04 	str.w	r0, [sl], #4
 8027db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8027db6:	459c      	cmp	ip, r3
 8027db8:	fa22 f20e 	lsr.w	r2, r2, lr
 8027dbc:	d8f3      	bhi.n	8027da6 <__lshift+0x6e>
 8027dbe:	ebac 0304 	sub.w	r3, ip, r4
 8027dc2:	3b15      	subs	r3, #21
 8027dc4:	f023 0303 	bic.w	r3, r3, #3
 8027dc8:	3304      	adds	r3, #4
 8027dca:	f104 0015 	add.w	r0, r4, #21
 8027dce:	4584      	cmp	ip, r0
 8027dd0:	bf38      	it	cc
 8027dd2:	2304      	movcc	r3, #4
 8027dd4:	50ca      	str	r2, [r1, r3]
 8027dd6:	b10a      	cbz	r2, 8027ddc <__lshift+0xa4>
 8027dd8:	f108 0602 	add.w	r6, r8, #2
 8027ddc:	3e01      	subs	r6, #1
 8027dde:	4638      	mov	r0, r7
 8027de0:	612e      	str	r6, [r5, #16]
 8027de2:	4621      	mov	r1, r4
 8027de4:	f7ff fdda 	bl	802799c <_Bfree>
 8027de8:	4628      	mov	r0, r5
 8027dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027dee:	f842 0f04 	str.w	r0, [r2, #4]!
 8027df2:	3301      	adds	r3, #1
 8027df4:	e7c5      	b.n	8027d82 <__lshift+0x4a>
 8027df6:	3904      	subs	r1, #4
 8027df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8027dfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8027e00:	459c      	cmp	ip, r3
 8027e02:	d8f9      	bhi.n	8027df8 <__lshift+0xc0>
 8027e04:	e7ea      	b.n	8027ddc <__lshift+0xa4>
 8027e06:	bf00      	nop
 8027e08:	0802d165 	.word	0x0802d165
 8027e0c:	0802d176 	.word	0x0802d176

08027e10 <__mcmp>:
 8027e10:	690a      	ldr	r2, [r1, #16]
 8027e12:	4603      	mov	r3, r0
 8027e14:	6900      	ldr	r0, [r0, #16]
 8027e16:	1a80      	subs	r0, r0, r2
 8027e18:	b530      	push	{r4, r5, lr}
 8027e1a:	d10e      	bne.n	8027e3a <__mcmp+0x2a>
 8027e1c:	3314      	adds	r3, #20
 8027e1e:	3114      	adds	r1, #20
 8027e20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8027e24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8027e28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8027e2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8027e30:	4295      	cmp	r5, r2
 8027e32:	d003      	beq.n	8027e3c <__mcmp+0x2c>
 8027e34:	d205      	bcs.n	8027e42 <__mcmp+0x32>
 8027e36:	f04f 30ff 	mov.w	r0, #4294967295
 8027e3a:	bd30      	pop	{r4, r5, pc}
 8027e3c:	42a3      	cmp	r3, r4
 8027e3e:	d3f3      	bcc.n	8027e28 <__mcmp+0x18>
 8027e40:	e7fb      	b.n	8027e3a <__mcmp+0x2a>
 8027e42:	2001      	movs	r0, #1
 8027e44:	e7f9      	b.n	8027e3a <__mcmp+0x2a>
	...

08027e48 <__mdiff>:
 8027e48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e4c:	4689      	mov	r9, r1
 8027e4e:	4606      	mov	r6, r0
 8027e50:	4611      	mov	r1, r2
 8027e52:	4648      	mov	r0, r9
 8027e54:	4614      	mov	r4, r2
 8027e56:	f7ff ffdb 	bl	8027e10 <__mcmp>
 8027e5a:	1e05      	subs	r5, r0, #0
 8027e5c:	d112      	bne.n	8027e84 <__mdiff+0x3c>
 8027e5e:	4629      	mov	r1, r5
 8027e60:	4630      	mov	r0, r6
 8027e62:	f7ff fd5b 	bl	802791c <_Balloc>
 8027e66:	4602      	mov	r2, r0
 8027e68:	b928      	cbnz	r0, 8027e76 <__mdiff+0x2e>
 8027e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8027f68 <__mdiff+0x120>)
 8027e6c:	f240 2137 	movw	r1, #567	@ 0x237
 8027e70:	483e      	ldr	r0, [pc, #248]	@ (8027f6c <__mdiff+0x124>)
 8027e72:	f7fe fe9f 	bl	8026bb4 <__assert_func>
 8027e76:	2301      	movs	r3, #1
 8027e78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8027e7c:	4610      	mov	r0, r2
 8027e7e:	b003      	add	sp, #12
 8027e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027e84:	bfbc      	itt	lt
 8027e86:	464b      	movlt	r3, r9
 8027e88:	46a1      	movlt	r9, r4
 8027e8a:	4630      	mov	r0, r6
 8027e8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8027e90:	bfba      	itte	lt
 8027e92:	461c      	movlt	r4, r3
 8027e94:	2501      	movlt	r5, #1
 8027e96:	2500      	movge	r5, #0
 8027e98:	f7ff fd40 	bl	802791c <_Balloc>
 8027e9c:	4602      	mov	r2, r0
 8027e9e:	b918      	cbnz	r0, 8027ea8 <__mdiff+0x60>
 8027ea0:	4b31      	ldr	r3, [pc, #196]	@ (8027f68 <__mdiff+0x120>)
 8027ea2:	f240 2145 	movw	r1, #581	@ 0x245
 8027ea6:	e7e3      	b.n	8027e70 <__mdiff+0x28>
 8027ea8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8027eac:	6926      	ldr	r6, [r4, #16]
 8027eae:	60c5      	str	r5, [r0, #12]
 8027eb0:	f109 0310 	add.w	r3, r9, #16
 8027eb4:	f109 0514 	add.w	r5, r9, #20
 8027eb8:	f104 0e14 	add.w	lr, r4, #20
 8027ebc:	f100 0b14 	add.w	fp, r0, #20
 8027ec0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8027ec4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8027ec8:	9301      	str	r3, [sp, #4]
 8027eca:	46d9      	mov	r9, fp
 8027ecc:	f04f 0c00 	mov.w	ip, #0
 8027ed0:	9b01      	ldr	r3, [sp, #4]
 8027ed2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8027ed6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8027eda:	9301      	str	r3, [sp, #4]
 8027edc:	fa1f f38a 	uxth.w	r3, sl
 8027ee0:	4619      	mov	r1, r3
 8027ee2:	b283      	uxth	r3, r0
 8027ee4:	1acb      	subs	r3, r1, r3
 8027ee6:	0c00      	lsrs	r0, r0, #16
 8027ee8:	4463      	add	r3, ip
 8027eea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8027eee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8027ef2:	b29b      	uxth	r3, r3
 8027ef4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8027ef8:	4576      	cmp	r6, lr
 8027efa:	f849 3b04 	str.w	r3, [r9], #4
 8027efe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8027f02:	d8e5      	bhi.n	8027ed0 <__mdiff+0x88>
 8027f04:	1b33      	subs	r3, r6, r4
 8027f06:	3b15      	subs	r3, #21
 8027f08:	f023 0303 	bic.w	r3, r3, #3
 8027f0c:	3415      	adds	r4, #21
 8027f0e:	3304      	adds	r3, #4
 8027f10:	42a6      	cmp	r6, r4
 8027f12:	bf38      	it	cc
 8027f14:	2304      	movcc	r3, #4
 8027f16:	441d      	add	r5, r3
 8027f18:	445b      	add	r3, fp
 8027f1a:	461e      	mov	r6, r3
 8027f1c:	462c      	mov	r4, r5
 8027f1e:	4544      	cmp	r4, r8
 8027f20:	d30e      	bcc.n	8027f40 <__mdiff+0xf8>
 8027f22:	f108 0103 	add.w	r1, r8, #3
 8027f26:	1b49      	subs	r1, r1, r5
 8027f28:	f021 0103 	bic.w	r1, r1, #3
 8027f2c:	3d03      	subs	r5, #3
 8027f2e:	45a8      	cmp	r8, r5
 8027f30:	bf38      	it	cc
 8027f32:	2100      	movcc	r1, #0
 8027f34:	440b      	add	r3, r1
 8027f36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8027f3a:	b191      	cbz	r1, 8027f62 <__mdiff+0x11a>
 8027f3c:	6117      	str	r7, [r2, #16]
 8027f3e:	e79d      	b.n	8027e7c <__mdiff+0x34>
 8027f40:	f854 1b04 	ldr.w	r1, [r4], #4
 8027f44:	46e6      	mov	lr, ip
 8027f46:	0c08      	lsrs	r0, r1, #16
 8027f48:	fa1c fc81 	uxtah	ip, ip, r1
 8027f4c:	4471      	add	r1, lr
 8027f4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8027f52:	b289      	uxth	r1, r1
 8027f54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8027f58:	f846 1b04 	str.w	r1, [r6], #4
 8027f5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8027f60:	e7dd      	b.n	8027f1e <__mdiff+0xd6>
 8027f62:	3f01      	subs	r7, #1
 8027f64:	e7e7      	b.n	8027f36 <__mdiff+0xee>
 8027f66:	bf00      	nop
 8027f68:	0802d165 	.word	0x0802d165
 8027f6c:	0802d176 	.word	0x0802d176

08027f70 <__d2b>:
 8027f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027f74:	460f      	mov	r7, r1
 8027f76:	2101      	movs	r1, #1
 8027f78:	ec59 8b10 	vmov	r8, r9, d0
 8027f7c:	4616      	mov	r6, r2
 8027f7e:	f7ff fccd 	bl	802791c <_Balloc>
 8027f82:	4604      	mov	r4, r0
 8027f84:	b930      	cbnz	r0, 8027f94 <__d2b+0x24>
 8027f86:	4602      	mov	r2, r0
 8027f88:	4b23      	ldr	r3, [pc, #140]	@ (8028018 <__d2b+0xa8>)
 8027f8a:	4824      	ldr	r0, [pc, #144]	@ (802801c <__d2b+0xac>)
 8027f8c:	f240 310f 	movw	r1, #783	@ 0x30f
 8027f90:	f7fe fe10 	bl	8026bb4 <__assert_func>
 8027f94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8027f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027f9c:	b10d      	cbz	r5, 8027fa2 <__d2b+0x32>
 8027f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8027fa2:	9301      	str	r3, [sp, #4]
 8027fa4:	f1b8 0300 	subs.w	r3, r8, #0
 8027fa8:	d023      	beq.n	8027ff2 <__d2b+0x82>
 8027faa:	4668      	mov	r0, sp
 8027fac:	9300      	str	r3, [sp, #0]
 8027fae:	f7ff fd7c 	bl	8027aaa <__lo0bits>
 8027fb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8027fb6:	b1d0      	cbz	r0, 8027fee <__d2b+0x7e>
 8027fb8:	f1c0 0320 	rsb	r3, r0, #32
 8027fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8027fc0:	430b      	orrs	r3, r1
 8027fc2:	40c2      	lsrs	r2, r0
 8027fc4:	6163      	str	r3, [r4, #20]
 8027fc6:	9201      	str	r2, [sp, #4]
 8027fc8:	9b01      	ldr	r3, [sp, #4]
 8027fca:	61a3      	str	r3, [r4, #24]
 8027fcc:	2b00      	cmp	r3, #0
 8027fce:	bf0c      	ite	eq
 8027fd0:	2201      	moveq	r2, #1
 8027fd2:	2202      	movne	r2, #2
 8027fd4:	6122      	str	r2, [r4, #16]
 8027fd6:	b1a5      	cbz	r5, 8028002 <__d2b+0x92>
 8027fd8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8027fdc:	4405      	add	r5, r0
 8027fde:	603d      	str	r5, [r7, #0]
 8027fe0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8027fe4:	6030      	str	r0, [r6, #0]
 8027fe6:	4620      	mov	r0, r4
 8027fe8:	b003      	add	sp, #12
 8027fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027fee:	6161      	str	r1, [r4, #20]
 8027ff0:	e7ea      	b.n	8027fc8 <__d2b+0x58>
 8027ff2:	a801      	add	r0, sp, #4
 8027ff4:	f7ff fd59 	bl	8027aaa <__lo0bits>
 8027ff8:	9b01      	ldr	r3, [sp, #4]
 8027ffa:	6163      	str	r3, [r4, #20]
 8027ffc:	3020      	adds	r0, #32
 8027ffe:	2201      	movs	r2, #1
 8028000:	e7e8      	b.n	8027fd4 <__d2b+0x64>
 8028002:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8028006:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802800a:	6038      	str	r0, [r7, #0]
 802800c:	6918      	ldr	r0, [r3, #16]
 802800e:	f7ff fd2d 	bl	8027a6c <__hi0bits>
 8028012:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8028016:	e7e5      	b.n	8027fe4 <__d2b+0x74>
 8028018:	0802d165 	.word	0x0802d165
 802801c:	0802d176 	.word	0x0802d176

08028020 <__ssputs_r>:
 8028020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028024:	688e      	ldr	r6, [r1, #8]
 8028026:	461f      	mov	r7, r3
 8028028:	42be      	cmp	r6, r7
 802802a:	680b      	ldr	r3, [r1, #0]
 802802c:	4682      	mov	sl, r0
 802802e:	460c      	mov	r4, r1
 8028030:	4690      	mov	r8, r2
 8028032:	d82d      	bhi.n	8028090 <__ssputs_r+0x70>
 8028034:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8028038:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802803c:	d026      	beq.n	802808c <__ssputs_r+0x6c>
 802803e:	6965      	ldr	r5, [r4, #20]
 8028040:	6909      	ldr	r1, [r1, #16]
 8028042:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8028046:	eba3 0901 	sub.w	r9, r3, r1
 802804a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802804e:	1c7b      	adds	r3, r7, #1
 8028050:	444b      	add	r3, r9
 8028052:	106d      	asrs	r5, r5, #1
 8028054:	429d      	cmp	r5, r3
 8028056:	bf38      	it	cc
 8028058:	461d      	movcc	r5, r3
 802805a:	0553      	lsls	r3, r2, #21
 802805c:	d527      	bpl.n	80280ae <__ssputs_r+0x8e>
 802805e:	4629      	mov	r1, r5
 8028060:	f7fd fe36 	bl	8025cd0 <_malloc_r>
 8028064:	4606      	mov	r6, r0
 8028066:	b360      	cbz	r0, 80280c2 <__ssputs_r+0xa2>
 8028068:	6921      	ldr	r1, [r4, #16]
 802806a:	464a      	mov	r2, r9
 802806c:	f7fe fd93 	bl	8026b96 <memcpy>
 8028070:	89a3      	ldrh	r3, [r4, #12]
 8028072:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8028076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802807a:	81a3      	strh	r3, [r4, #12]
 802807c:	6126      	str	r6, [r4, #16]
 802807e:	6165      	str	r5, [r4, #20]
 8028080:	444e      	add	r6, r9
 8028082:	eba5 0509 	sub.w	r5, r5, r9
 8028086:	6026      	str	r6, [r4, #0]
 8028088:	60a5      	str	r5, [r4, #8]
 802808a:	463e      	mov	r6, r7
 802808c:	42be      	cmp	r6, r7
 802808e:	d900      	bls.n	8028092 <__ssputs_r+0x72>
 8028090:	463e      	mov	r6, r7
 8028092:	6820      	ldr	r0, [r4, #0]
 8028094:	4632      	mov	r2, r6
 8028096:	4641      	mov	r1, r8
 8028098:	f7fe fc83 	bl	80269a2 <memmove>
 802809c:	68a3      	ldr	r3, [r4, #8]
 802809e:	1b9b      	subs	r3, r3, r6
 80280a0:	60a3      	str	r3, [r4, #8]
 80280a2:	6823      	ldr	r3, [r4, #0]
 80280a4:	4433      	add	r3, r6
 80280a6:	6023      	str	r3, [r4, #0]
 80280a8:	2000      	movs	r0, #0
 80280aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80280ae:	462a      	mov	r2, r5
 80280b0:	f000 fbcf 	bl	8028852 <_realloc_r>
 80280b4:	4606      	mov	r6, r0
 80280b6:	2800      	cmp	r0, #0
 80280b8:	d1e0      	bne.n	802807c <__ssputs_r+0x5c>
 80280ba:	6921      	ldr	r1, [r4, #16]
 80280bc:	4650      	mov	r0, sl
 80280be:	f7ff fbe3 	bl	8027888 <_free_r>
 80280c2:	230c      	movs	r3, #12
 80280c4:	f8ca 3000 	str.w	r3, [sl]
 80280c8:	89a3      	ldrh	r3, [r4, #12]
 80280ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80280ce:	81a3      	strh	r3, [r4, #12]
 80280d0:	f04f 30ff 	mov.w	r0, #4294967295
 80280d4:	e7e9      	b.n	80280aa <__ssputs_r+0x8a>
	...

080280d8 <_svfiprintf_r>:
 80280d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280dc:	4698      	mov	r8, r3
 80280de:	898b      	ldrh	r3, [r1, #12]
 80280e0:	061b      	lsls	r3, r3, #24
 80280e2:	b09d      	sub	sp, #116	@ 0x74
 80280e4:	4607      	mov	r7, r0
 80280e6:	460d      	mov	r5, r1
 80280e8:	4614      	mov	r4, r2
 80280ea:	d510      	bpl.n	802810e <_svfiprintf_r+0x36>
 80280ec:	690b      	ldr	r3, [r1, #16]
 80280ee:	b973      	cbnz	r3, 802810e <_svfiprintf_r+0x36>
 80280f0:	2140      	movs	r1, #64	@ 0x40
 80280f2:	f7fd fded 	bl	8025cd0 <_malloc_r>
 80280f6:	6028      	str	r0, [r5, #0]
 80280f8:	6128      	str	r0, [r5, #16]
 80280fa:	b930      	cbnz	r0, 802810a <_svfiprintf_r+0x32>
 80280fc:	230c      	movs	r3, #12
 80280fe:	603b      	str	r3, [r7, #0]
 8028100:	f04f 30ff 	mov.w	r0, #4294967295
 8028104:	b01d      	add	sp, #116	@ 0x74
 8028106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802810a:	2340      	movs	r3, #64	@ 0x40
 802810c:	616b      	str	r3, [r5, #20]
 802810e:	2300      	movs	r3, #0
 8028110:	9309      	str	r3, [sp, #36]	@ 0x24
 8028112:	2320      	movs	r3, #32
 8028114:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8028118:	f8cd 800c 	str.w	r8, [sp, #12]
 802811c:	2330      	movs	r3, #48	@ 0x30
 802811e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80282bc <_svfiprintf_r+0x1e4>
 8028122:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8028126:	f04f 0901 	mov.w	r9, #1
 802812a:	4623      	mov	r3, r4
 802812c:	469a      	mov	sl, r3
 802812e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028132:	b10a      	cbz	r2, 8028138 <_svfiprintf_r+0x60>
 8028134:	2a25      	cmp	r2, #37	@ 0x25
 8028136:	d1f9      	bne.n	802812c <_svfiprintf_r+0x54>
 8028138:	ebba 0b04 	subs.w	fp, sl, r4
 802813c:	d00b      	beq.n	8028156 <_svfiprintf_r+0x7e>
 802813e:	465b      	mov	r3, fp
 8028140:	4622      	mov	r2, r4
 8028142:	4629      	mov	r1, r5
 8028144:	4638      	mov	r0, r7
 8028146:	f7ff ff6b 	bl	8028020 <__ssputs_r>
 802814a:	3001      	adds	r0, #1
 802814c:	f000 80a7 	beq.w	802829e <_svfiprintf_r+0x1c6>
 8028150:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028152:	445a      	add	r2, fp
 8028154:	9209      	str	r2, [sp, #36]	@ 0x24
 8028156:	f89a 3000 	ldrb.w	r3, [sl]
 802815a:	2b00      	cmp	r3, #0
 802815c:	f000 809f 	beq.w	802829e <_svfiprintf_r+0x1c6>
 8028160:	2300      	movs	r3, #0
 8028162:	f04f 32ff 	mov.w	r2, #4294967295
 8028166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802816a:	f10a 0a01 	add.w	sl, sl, #1
 802816e:	9304      	str	r3, [sp, #16]
 8028170:	9307      	str	r3, [sp, #28]
 8028172:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8028176:	931a      	str	r3, [sp, #104]	@ 0x68
 8028178:	4654      	mov	r4, sl
 802817a:	2205      	movs	r2, #5
 802817c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028180:	484e      	ldr	r0, [pc, #312]	@ (80282bc <_svfiprintf_r+0x1e4>)
 8028182:	f7d8 f845 	bl	8000210 <memchr>
 8028186:	9a04      	ldr	r2, [sp, #16]
 8028188:	b9d8      	cbnz	r0, 80281c2 <_svfiprintf_r+0xea>
 802818a:	06d0      	lsls	r0, r2, #27
 802818c:	bf44      	itt	mi
 802818e:	2320      	movmi	r3, #32
 8028190:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028194:	0711      	lsls	r1, r2, #28
 8028196:	bf44      	itt	mi
 8028198:	232b      	movmi	r3, #43	@ 0x2b
 802819a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802819e:	f89a 3000 	ldrb.w	r3, [sl]
 80281a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80281a4:	d015      	beq.n	80281d2 <_svfiprintf_r+0xfa>
 80281a6:	9a07      	ldr	r2, [sp, #28]
 80281a8:	4654      	mov	r4, sl
 80281aa:	2000      	movs	r0, #0
 80281ac:	f04f 0c0a 	mov.w	ip, #10
 80281b0:	4621      	mov	r1, r4
 80281b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80281b6:	3b30      	subs	r3, #48	@ 0x30
 80281b8:	2b09      	cmp	r3, #9
 80281ba:	d94b      	bls.n	8028254 <_svfiprintf_r+0x17c>
 80281bc:	b1b0      	cbz	r0, 80281ec <_svfiprintf_r+0x114>
 80281be:	9207      	str	r2, [sp, #28]
 80281c0:	e014      	b.n	80281ec <_svfiprintf_r+0x114>
 80281c2:	eba0 0308 	sub.w	r3, r0, r8
 80281c6:	fa09 f303 	lsl.w	r3, r9, r3
 80281ca:	4313      	orrs	r3, r2
 80281cc:	9304      	str	r3, [sp, #16]
 80281ce:	46a2      	mov	sl, r4
 80281d0:	e7d2      	b.n	8028178 <_svfiprintf_r+0xa0>
 80281d2:	9b03      	ldr	r3, [sp, #12]
 80281d4:	1d19      	adds	r1, r3, #4
 80281d6:	681b      	ldr	r3, [r3, #0]
 80281d8:	9103      	str	r1, [sp, #12]
 80281da:	2b00      	cmp	r3, #0
 80281dc:	bfbb      	ittet	lt
 80281de:	425b      	neglt	r3, r3
 80281e0:	f042 0202 	orrlt.w	r2, r2, #2
 80281e4:	9307      	strge	r3, [sp, #28]
 80281e6:	9307      	strlt	r3, [sp, #28]
 80281e8:	bfb8      	it	lt
 80281ea:	9204      	strlt	r2, [sp, #16]
 80281ec:	7823      	ldrb	r3, [r4, #0]
 80281ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80281f0:	d10a      	bne.n	8028208 <_svfiprintf_r+0x130>
 80281f2:	7863      	ldrb	r3, [r4, #1]
 80281f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80281f6:	d132      	bne.n	802825e <_svfiprintf_r+0x186>
 80281f8:	9b03      	ldr	r3, [sp, #12]
 80281fa:	1d1a      	adds	r2, r3, #4
 80281fc:	681b      	ldr	r3, [r3, #0]
 80281fe:	9203      	str	r2, [sp, #12]
 8028200:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8028204:	3402      	adds	r4, #2
 8028206:	9305      	str	r3, [sp, #20]
 8028208:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80282cc <_svfiprintf_r+0x1f4>
 802820c:	7821      	ldrb	r1, [r4, #0]
 802820e:	2203      	movs	r2, #3
 8028210:	4650      	mov	r0, sl
 8028212:	f7d7 fffd 	bl	8000210 <memchr>
 8028216:	b138      	cbz	r0, 8028228 <_svfiprintf_r+0x150>
 8028218:	9b04      	ldr	r3, [sp, #16]
 802821a:	eba0 000a 	sub.w	r0, r0, sl
 802821e:	2240      	movs	r2, #64	@ 0x40
 8028220:	4082      	lsls	r2, r0
 8028222:	4313      	orrs	r3, r2
 8028224:	3401      	adds	r4, #1
 8028226:	9304      	str	r3, [sp, #16]
 8028228:	f814 1b01 	ldrb.w	r1, [r4], #1
 802822c:	4824      	ldr	r0, [pc, #144]	@ (80282c0 <_svfiprintf_r+0x1e8>)
 802822e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8028232:	2206      	movs	r2, #6
 8028234:	f7d7 ffec 	bl	8000210 <memchr>
 8028238:	2800      	cmp	r0, #0
 802823a:	d036      	beq.n	80282aa <_svfiprintf_r+0x1d2>
 802823c:	4b21      	ldr	r3, [pc, #132]	@ (80282c4 <_svfiprintf_r+0x1ec>)
 802823e:	bb1b      	cbnz	r3, 8028288 <_svfiprintf_r+0x1b0>
 8028240:	9b03      	ldr	r3, [sp, #12]
 8028242:	3307      	adds	r3, #7
 8028244:	f023 0307 	bic.w	r3, r3, #7
 8028248:	3308      	adds	r3, #8
 802824a:	9303      	str	r3, [sp, #12]
 802824c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802824e:	4433      	add	r3, r6
 8028250:	9309      	str	r3, [sp, #36]	@ 0x24
 8028252:	e76a      	b.n	802812a <_svfiprintf_r+0x52>
 8028254:	fb0c 3202 	mla	r2, ip, r2, r3
 8028258:	460c      	mov	r4, r1
 802825a:	2001      	movs	r0, #1
 802825c:	e7a8      	b.n	80281b0 <_svfiprintf_r+0xd8>
 802825e:	2300      	movs	r3, #0
 8028260:	3401      	adds	r4, #1
 8028262:	9305      	str	r3, [sp, #20]
 8028264:	4619      	mov	r1, r3
 8028266:	f04f 0c0a 	mov.w	ip, #10
 802826a:	4620      	mov	r0, r4
 802826c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028270:	3a30      	subs	r2, #48	@ 0x30
 8028272:	2a09      	cmp	r2, #9
 8028274:	d903      	bls.n	802827e <_svfiprintf_r+0x1a6>
 8028276:	2b00      	cmp	r3, #0
 8028278:	d0c6      	beq.n	8028208 <_svfiprintf_r+0x130>
 802827a:	9105      	str	r1, [sp, #20]
 802827c:	e7c4      	b.n	8028208 <_svfiprintf_r+0x130>
 802827e:	fb0c 2101 	mla	r1, ip, r1, r2
 8028282:	4604      	mov	r4, r0
 8028284:	2301      	movs	r3, #1
 8028286:	e7f0      	b.n	802826a <_svfiprintf_r+0x192>
 8028288:	ab03      	add	r3, sp, #12
 802828a:	9300      	str	r3, [sp, #0]
 802828c:	462a      	mov	r2, r5
 802828e:	4b0e      	ldr	r3, [pc, #56]	@ (80282c8 <_svfiprintf_r+0x1f0>)
 8028290:	a904      	add	r1, sp, #16
 8028292:	4638      	mov	r0, r7
 8028294:	f7fd fe86 	bl	8025fa4 <_printf_float>
 8028298:	1c42      	adds	r2, r0, #1
 802829a:	4606      	mov	r6, r0
 802829c:	d1d6      	bne.n	802824c <_svfiprintf_r+0x174>
 802829e:	89ab      	ldrh	r3, [r5, #12]
 80282a0:	065b      	lsls	r3, r3, #25
 80282a2:	f53f af2d 	bmi.w	8028100 <_svfiprintf_r+0x28>
 80282a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80282a8:	e72c      	b.n	8028104 <_svfiprintf_r+0x2c>
 80282aa:	ab03      	add	r3, sp, #12
 80282ac:	9300      	str	r3, [sp, #0]
 80282ae:	462a      	mov	r2, r5
 80282b0:	4b05      	ldr	r3, [pc, #20]	@ (80282c8 <_svfiprintf_r+0x1f0>)
 80282b2:	a904      	add	r1, sp, #16
 80282b4:	4638      	mov	r0, r7
 80282b6:	f7fe f90d 	bl	80264d4 <_printf_i>
 80282ba:	e7ed      	b.n	8028298 <_svfiprintf_r+0x1c0>
 80282bc:	0802d2d0 	.word	0x0802d2d0
 80282c0:	0802d2da 	.word	0x0802d2da
 80282c4:	08025fa5 	.word	0x08025fa5
 80282c8:	08028021 	.word	0x08028021
 80282cc:	0802d2d6 	.word	0x0802d2d6

080282d0 <__sfputc_r>:
 80282d0:	6893      	ldr	r3, [r2, #8]
 80282d2:	3b01      	subs	r3, #1
 80282d4:	2b00      	cmp	r3, #0
 80282d6:	b410      	push	{r4}
 80282d8:	6093      	str	r3, [r2, #8]
 80282da:	da08      	bge.n	80282ee <__sfputc_r+0x1e>
 80282dc:	6994      	ldr	r4, [r2, #24]
 80282de:	42a3      	cmp	r3, r4
 80282e0:	db01      	blt.n	80282e6 <__sfputc_r+0x16>
 80282e2:	290a      	cmp	r1, #10
 80282e4:	d103      	bne.n	80282ee <__sfputc_r+0x1e>
 80282e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80282ea:	f000 b9f1 	b.w	80286d0 <__swbuf_r>
 80282ee:	6813      	ldr	r3, [r2, #0]
 80282f0:	1c58      	adds	r0, r3, #1
 80282f2:	6010      	str	r0, [r2, #0]
 80282f4:	7019      	strb	r1, [r3, #0]
 80282f6:	4608      	mov	r0, r1
 80282f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80282fc:	4770      	bx	lr

080282fe <__sfputs_r>:
 80282fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028300:	4606      	mov	r6, r0
 8028302:	460f      	mov	r7, r1
 8028304:	4614      	mov	r4, r2
 8028306:	18d5      	adds	r5, r2, r3
 8028308:	42ac      	cmp	r4, r5
 802830a:	d101      	bne.n	8028310 <__sfputs_r+0x12>
 802830c:	2000      	movs	r0, #0
 802830e:	e007      	b.n	8028320 <__sfputs_r+0x22>
 8028310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028314:	463a      	mov	r2, r7
 8028316:	4630      	mov	r0, r6
 8028318:	f7ff ffda 	bl	80282d0 <__sfputc_r>
 802831c:	1c43      	adds	r3, r0, #1
 802831e:	d1f3      	bne.n	8028308 <__sfputs_r+0xa>
 8028320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028324 <_vfiprintf_r>:
 8028324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028328:	460d      	mov	r5, r1
 802832a:	b09d      	sub	sp, #116	@ 0x74
 802832c:	4614      	mov	r4, r2
 802832e:	4698      	mov	r8, r3
 8028330:	4606      	mov	r6, r0
 8028332:	b118      	cbz	r0, 802833c <_vfiprintf_r+0x18>
 8028334:	6a03      	ldr	r3, [r0, #32]
 8028336:	b90b      	cbnz	r3, 802833c <_vfiprintf_r+0x18>
 8028338:	f7fe fa78 	bl	802682c <__sinit>
 802833c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802833e:	07d9      	lsls	r1, r3, #31
 8028340:	d405      	bmi.n	802834e <_vfiprintf_r+0x2a>
 8028342:	89ab      	ldrh	r3, [r5, #12]
 8028344:	059a      	lsls	r2, r3, #22
 8028346:	d402      	bmi.n	802834e <_vfiprintf_r+0x2a>
 8028348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802834a:	f7fe fc22 	bl	8026b92 <__retarget_lock_acquire_recursive>
 802834e:	89ab      	ldrh	r3, [r5, #12]
 8028350:	071b      	lsls	r3, r3, #28
 8028352:	d501      	bpl.n	8028358 <_vfiprintf_r+0x34>
 8028354:	692b      	ldr	r3, [r5, #16]
 8028356:	b99b      	cbnz	r3, 8028380 <_vfiprintf_r+0x5c>
 8028358:	4629      	mov	r1, r5
 802835a:	4630      	mov	r0, r6
 802835c:	f000 f9f6 	bl	802874c <__swsetup_r>
 8028360:	b170      	cbz	r0, 8028380 <_vfiprintf_r+0x5c>
 8028362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028364:	07dc      	lsls	r4, r3, #31
 8028366:	d504      	bpl.n	8028372 <_vfiprintf_r+0x4e>
 8028368:	f04f 30ff 	mov.w	r0, #4294967295
 802836c:	b01d      	add	sp, #116	@ 0x74
 802836e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028372:	89ab      	ldrh	r3, [r5, #12]
 8028374:	0598      	lsls	r0, r3, #22
 8028376:	d4f7      	bmi.n	8028368 <_vfiprintf_r+0x44>
 8028378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802837a:	f7fe fc0b 	bl	8026b94 <__retarget_lock_release_recursive>
 802837e:	e7f3      	b.n	8028368 <_vfiprintf_r+0x44>
 8028380:	2300      	movs	r3, #0
 8028382:	9309      	str	r3, [sp, #36]	@ 0x24
 8028384:	2320      	movs	r3, #32
 8028386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802838a:	f8cd 800c 	str.w	r8, [sp, #12]
 802838e:	2330      	movs	r3, #48	@ 0x30
 8028390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8028540 <_vfiprintf_r+0x21c>
 8028394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8028398:	f04f 0901 	mov.w	r9, #1
 802839c:	4623      	mov	r3, r4
 802839e:	469a      	mov	sl, r3
 80283a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80283a4:	b10a      	cbz	r2, 80283aa <_vfiprintf_r+0x86>
 80283a6:	2a25      	cmp	r2, #37	@ 0x25
 80283a8:	d1f9      	bne.n	802839e <_vfiprintf_r+0x7a>
 80283aa:	ebba 0b04 	subs.w	fp, sl, r4
 80283ae:	d00b      	beq.n	80283c8 <_vfiprintf_r+0xa4>
 80283b0:	465b      	mov	r3, fp
 80283b2:	4622      	mov	r2, r4
 80283b4:	4629      	mov	r1, r5
 80283b6:	4630      	mov	r0, r6
 80283b8:	f7ff ffa1 	bl	80282fe <__sfputs_r>
 80283bc:	3001      	adds	r0, #1
 80283be:	f000 80a7 	beq.w	8028510 <_vfiprintf_r+0x1ec>
 80283c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80283c4:	445a      	add	r2, fp
 80283c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80283c8:	f89a 3000 	ldrb.w	r3, [sl]
 80283cc:	2b00      	cmp	r3, #0
 80283ce:	f000 809f 	beq.w	8028510 <_vfiprintf_r+0x1ec>
 80283d2:	2300      	movs	r3, #0
 80283d4:	f04f 32ff 	mov.w	r2, #4294967295
 80283d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80283dc:	f10a 0a01 	add.w	sl, sl, #1
 80283e0:	9304      	str	r3, [sp, #16]
 80283e2:	9307      	str	r3, [sp, #28]
 80283e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80283e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80283ea:	4654      	mov	r4, sl
 80283ec:	2205      	movs	r2, #5
 80283ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80283f2:	4853      	ldr	r0, [pc, #332]	@ (8028540 <_vfiprintf_r+0x21c>)
 80283f4:	f7d7 ff0c 	bl	8000210 <memchr>
 80283f8:	9a04      	ldr	r2, [sp, #16]
 80283fa:	b9d8      	cbnz	r0, 8028434 <_vfiprintf_r+0x110>
 80283fc:	06d1      	lsls	r1, r2, #27
 80283fe:	bf44      	itt	mi
 8028400:	2320      	movmi	r3, #32
 8028402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028406:	0713      	lsls	r3, r2, #28
 8028408:	bf44      	itt	mi
 802840a:	232b      	movmi	r3, #43	@ 0x2b
 802840c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028410:	f89a 3000 	ldrb.w	r3, [sl]
 8028414:	2b2a      	cmp	r3, #42	@ 0x2a
 8028416:	d015      	beq.n	8028444 <_vfiprintf_r+0x120>
 8028418:	9a07      	ldr	r2, [sp, #28]
 802841a:	4654      	mov	r4, sl
 802841c:	2000      	movs	r0, #0
 802841e:	f04f 0c0a 	mov.w	ip, #10
 8028422:	4621      	mov	r1, r4
 8028424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028428:	3b30      	subs	r3, #48	@ 0x30
 802842a:	2b09      	cmp	r3, #9
 802842c:	d94b      	bls.n	80284c6 <_vfiprintf_r+0x1a2>
 802842e:	b1b0      	cbz	r0, 802845e <_vfiprintf_r+0x13a>
 8028430:	9207      	str	r2, [sp, #28]
 8028432:	e014      	b.n	802845e <_vfiprintf_r+0x13a>
 8028434:	eba0 0308 	sub.w	r3, r0, r8
 8028438:	fa09 f303 	lsl.w	r3, r9, r3
 802843c:	4313      	orrs	r3, r2
 802843e:	9304      	str	r3, [sp, #16]
 8028440:	46a2      	mov	sl, r4
 8028442:	e7d2      	b.n	80283ea <_vfiprintf_r+0xc6>
 8028444:	9b03      	ldr	r3, [sp, #12]
 8028446:	1d19      	adds	r1, r3, #4
 8028448:	681b      	ldr	r3, [r3, #0]
 802844a:	9103      	str	r1, [sp, #12]
 802844c:	2b00      	cmp	r3, #0
 802844e:	bfbb      	ittet	lt
 8028450:	425b      	neglt	r3, r3
 8028452:	f042 0202 	orrlt.w	r2, r2, #2
 8028456:	9307      	strge	r3, [sp, #28]
 8028458:	9307      	strlt	r3, [sp, #28]
 802845a:	bfb8      	it	lt
 802845c:	9204      	strlt	r2, [sp, #16]
 802845e:	7823      	ldrb	r3, [r4, #0]
 8028460:	2b2e      	cmp	r3, #46	@ 0x2e
 8028462:	d10a      	bne.n	802847a <_vfiprintf_r+0x156>
 8028464:	7863      	ldrb	r3, [r4, #1]
 8028466:	2b2a      	cmp	r3, #42	@ 0x2a
 8028468:	d132      	bne.n	80284d0 <_vfiprintf_r+0x1ac>
 802846a:	9b03      	ldr	r3, [sp, #12]
 802846c:	1d1a      	adds	r2, r3, #4
 802846e:	681b      	ldr	r3, [r3, #0]
 8028470:	9203      	str	r2, [sp, #12]
 8028472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8028476:	3402      	adds	r4, #2
 8028478:	9305      	str	r3, [sp, #20]
 802847a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8028550 <_vfiprintf_r+0x22c>
 802847e:	7821      	ldrb	r1, [r4, #0]
 8028480:	2203      	movs	r2, #3
 8028482:	4650      	mov	r0, sl
 8028484:	f7d7 fec4 	bl	8000210 <memchr>
 8028488:	b138      	cbz	r0, 802849a <_vfiprintf_r+0x176>
 802848a:	9b04      	ldr	r3, [sp, #16]
 802848c:	eba0 000a 	sub.w	r0, r0, sl
 8028490:	2240      	movs	r2, #64	@ 0x40
 8028492:	4082      	lsls	r2, r0
 8028494:	4313      	orrs	r3, r2
 8028496:	3401      	adds	r4, #1
 8028498:	9304      	str	r3, [sp, #16]
 802849a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802849e:	4829      	ldr	r0, [pc, #164]	@ (8028544 <_vfiprintf_r+0x220>)
 80284a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80284a4:	2206      	movs	r2, #6
 80284a6:	f7d7 feb3 	bl	8000210 <memchr>
 80284aa:	2800      	cmp	r0, #0
 80284ac:	d03f      	beq.n	802852e <_vfiprintf_r+0x20a>
 80284ae:	4b26      	ldr	r3, [pc, #152]	@ (8028548 <_vfiprintf_r+0x224>)
 80284b0:	bb1b      	cbnz	r3, 80284fa <_vfiprintf_r+0x1d6>
 80284b2:	9b03      	ldr	r3, [sp, #12]
 80284b4:	3307      	adds	r3, #7
 80284b6:	f023 0307 	bic.w	r3, r3, #7
 80284ba:	3308      	adds	r3, #8
 80284bc:	9303      	str	r3, [sp, #12]
 80284be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80284c0:	443b      	add	r3, r7
 80284c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80284c4:	e76a      	b.n	802839c <_vfiprintf_r+0x78>
 80284c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80284ca:	460c      	mov	r4, r1
 80284cc:	2001      	movs	r0, #1
 80284ce:	e7a8      	b.n	8028422 <_vfiprintf_r+0xfe>
 80284d0:	2300      	movs	r3, #0
 80284d2:	3401      	adds	r4, #1
 80284d4:	9305      	str	r3, [sp, #20]
 80284d6:	4619      	mov	r1, r3
 80284d8:	f04f 0c0a 	mov.w	ip, #10
 80284dc:	4620      	mov	r0, r4
 80284de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80284e2:	3a30      	subs	r2, #48	@ 0x30
 80284e4:	2a09      	cmp	r2, #9
 80284e6:	d903      	bls.n	80284f0 <_vfiprintf_r+0x1cc>
 80284e8:	2b00      	cmp	r3, #0
 80284ea:	d0c6      	beq.n	802847a <_vfiprintf_r+0x156>
 80284ec:	9105      	str	r1, [sp, #20]
 80284ee:	e7c4      	b.n	802847a <_vfiprintf_r+0x156>
 80284f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80284f4:	4604      	mov	r4, r0
 80284f6:	2301      	movs	r3, #1
 80284f8:	e7f0      	b.n	80284dc <_vfiprintf_r+0x1b8>
 80284fa:	ab03      	add	r3, sp, #12
 80284fc:	9300      	str	r3, [sp, #0]
 80284fe:	462a      	mov	r2, r5
 8028500:	4b12      	ldr	r3, [pc, #72]	@ (802854c <_vfiprintf_r+0x228>)
 8028502:	a904      	add	r1, sp, #16
 8028504:	4630      	mov	r0, r6
 8028506:	f7fd fd4d 	bl	8025fa4 <_printf_float>
 802850a:	4607      	mov	r7, r0
 802850c:	1c78      	adds	r0, r7, #1
 802850e:	d1d6      	bne.n	80284be <_vfiprintf_r+0x19a>
 8028510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028512:	07d9      	lsls	r1, r3, #31
 8028514:	d405      	bmi.n	8028522 <_vfiprintf_r+0x1fe>
 8028516:	89ab      	ldrh	r3, [r5, #12]
 8028518:	059a      	lsls	r2, r3, #22
 802851a:	d402      	bmi.n	8028522 <_vfiprintf_r+0x1fe>
 802851c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802851e:	f7fe fb39 	bl	8026b94 <__retarget_lock_release_recursive>
 8028522:	89ab      	ldrh	r3, [r5, #12]
 8028524:	065b      	lsls	r3, r3, #25
 8028526:	f53f af1f 	bmi.w	8028368 <_vfiprintf_r+0x44>
 802852a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802852c:	e71e      	b.n	802836c <_vfiprintf_r+0x48>
 802852e:	ab03      	add	r3, sp, #12
 8028530:	9300      	str	r3, [sp, #0]
 8028532:	462a      	mov	r2, r5
 8028534:	4b05      	ldr	r3, [pc, #20]	@ (802854c <_vfiprintf_r+0x228>)
 8028536:	a904      	add	r1, sp, #16
 8028538:	4630      	mov	r0, r6
 802853a:	f7fd ffcb 	bl	80264d4 <_printf_i>
 802853e:	e7e4      	b.n	802850a <_vfiprintf_r+0x1e6>
 8028540:	0802d2d0 	.word	0x0802d2d0
 8028544:	0802d2da 	.word	0x0802d2da
 8028548:	08025fa5 	.word	0x08025fa5
 802854c:	080282ff 	.word	0x080282ff
 8028550:	0802d2d6 	.word	0x0802d2d6

08028554 <__sflush_r>:
 8028554:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8028558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802855c:	0716      	lsls	r6, r2, #28
 802855e:	4605      	mov	r5, r0
 8028560:	460c      	mov	r4, r1
 8028562:	d454      	bmi.n	802860e <__sflush_r+0xba>
 8028564:	684b      	ldr	r3, [r1, #4]
 8028566:	2b00      	cmp	r3, #0
 8028568:	dc02      	bgt.n	8028570 <__sflush_r+0x1c>
 802856a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802856c:	2b00      	cmp	r3, #0
 802856e:	dd48      	ble.n	8028602 <__sflush_r+0xae>
 8028570:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8028572:	2e00      	cmp	r6, #0
 8028574:	d045      	beq.n	8028602 <__sflush_r+0xae>
 8028576:	2300      	movs	r3, #0
 8028578:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802857c:	682f      	ldr	r7, [r5, #0]
 802857e:	6a21      	ldr	r1, [r4, #32]
 8028580:	602b      	str	r3, [r5, #0]
 8028582:	d030      	beq.n	80285e6 <__sflush_r+0x92>
 8028584:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028586:	89a3      	ldrh	r3, [r4, #12]
 8028588:	0759      	lsls	r1, r3, #29
 802858a:	d505      	bpl.n	8028598 <__sflush_r+0x44>
 802858c:	6863      	ldr	r3, [r4, #4]
 802858e:	1ad2      	subs	r2, r2, r3
 8028590:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028592:	b10b      	cbz	r3, 8028598 <__sflush_r+0x44>
 8028594:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028596:	1ad2      	subs	r2, r2, r3
 8028598:	2300      	movs	r3, #0
 802859a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802859c:	6a21      	ldr	r1, [r4, #32]
 802859e:	4628      	mov	r0, r5
 80285a0:	47b0      	blx	r6
 80285a2:	1c43      	adds	r3, r0, #1
 80285a4:	89a3      	ldrh	r3, [r4, #12]
 80285a6:	d106      	bne.n	80285b6 <__sflush_r+0x62>
 80285a8:	6829      	ldr	r1, [r5, #0]
 80285aa:	291d      	cmp	r1, #29
 80285ac:	d82b      	bhi.n	8028606 <__sflush_r+0xb2>
 80285ae:	4a2a      	ldr	r2, [pc, #168]	@ (8028658 <__sflush_r+0x104>)
 80285b0:	410a      	asrs	r2, r1
 80285b2:	07d6      	lsls	r6, r2, #31
 80285b4:	d427      	bmi.n	8028606 <__sflush_r+0xb2>
 80285b6:	2200      	movs	r2, #0
 80285b8:	6062      	str	r2, [r4, #4]
 80285ba:	04d9      	lsls	r1, r3, #19
 80285bc:	6922      	ldr	r2, [r4, #16]
 80285be:	6022      	str	r2, [r4, #0]
 80285c0:	d504      	bpl.n	80285cc <__sflush_r+0x78>
 80285c2:	1c42      	adds	r2, r0, #1
 80285c4:	d101      	bne.n	80285ca <__sflush_r+0x76>
 80285c6:	682b      	ldr	r3, [r5, #0]
 80285c8:	b903      	cbnz	r3, 80285cc <__sflush_r+0x78>
 80285ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80285cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80285ce:	602f      	str	r7, [r5, #0]
 80285d0:	b1b9      	cbz	r1, 8028602 <__sflush_r+0xae>
 80285d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80285d6:	4299      	cmp	r1, r3
 80285d8:	d002      	beq.n	80285e0 <__sflush_r+0x8c>
 80285da:	4628      	mov	r0, r5
 80285dc:	f7ff f954 	bl	8027888 <_free_r>
 80285e0:	2300      	movs	r3, #0
 80285e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80285e4:	e00d      	b.n	8028602 <__sflush_r+0xae>
 80285e6:	2301      	movs	r3, #1
 80285e8:	4628      	mov	r0, r5
 80285ea:	47b0      	blx	r6
 80285ec:	4602      	mov	r2, r0
 80285ee:	1c50      	adds	r0, r2, #1
 80285f0:	d1c9      	bne.n	8028586 <__sflush_r+0x32>
 80285f2:	682b      	ldr	r3, [r5, #0]
 80285f4:	2b00      	cmp	r3, #0
 80285f6:	d0c6      	beq.n	8028586 <__sflush_r+0x32>
 80285f8:	2b1d      	cmp	r3, #29
 80285fa:	d001      	beq.n	8028600 <__sflush_r+0xac>
 80285fc:	2b16      	cmp	r3, #22
 80285fe:	d11e      	bne.n	802863e <__sflush_r+0xea>
 8028600:	602f      	str	r7, [r5, #0]
 8028602:	2000      	movs	r0, #0
 8028604:	e022      	b.n	802864c <__sflush_r+0xf8>
 8028606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802860a:	b21b      	sxth	r3, r3
 802860c:	e01b      	b.n	8028646 <__sflush_r+0xf2>
 802860e:	690f      	ldr	r7, [r1, #16]
 8028610:	2f00      	cmp	r7, #0
 8028612:	d0f6      	beq.n	8028602 <__sflush_r+0xae>
 8028614:	0793      	lsls	r3, r2, #30
 8028616:	680e      	ldr	r6, [r1, #0]
 8028618:	bf08      	it	eq
 802861a:	694b      	ldreq	r3, [r1, #20]
 802861c:	600f      	str	r7, [r1, #0]
 802861e:	bf18      	it	ne
 8028620:	2300      	movne	r3, #0
 8028622:	eba6 0807 	sub.w	r8, r6, r7
 8028626:	608b      	str	r3, [r1, #8]
 8028628:	f1b8 0f00 	cmp.w	r8, #0
 802862c:	dde9      	ble.n	8028602 <__sflush_r+0xae>
 802862e:	6a21      	ldr	r1, [r4, #32]
 8028630:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8028632:	4643      	mov	r3, r8
 8028634:	463a      	mov	r2, r7
 8028636:	4628      	mov	r0, r5
 8028638:	47b0      	blx	r6
 802863a:	2800      	cmp	r0, #0
 802863c:	dc08      	bgt.n	8028650 <__sflush_r+0xfc>
 802863e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028646:	81a3      	strh	r3, [r4, #12]
 8028648:	f04f 30ff 	mov.w	r0, #4294967295
 802864c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028650:	4407      	add	r7, r0
 8028652:	eba8 0800 	sub.w	r8, r8, r0
 8028656:	e7e7      	b.n	8028628 <__sflush_r+0xd4>
 8028658:	dfbffffe 	.word	0xdfbffffe

0802865c <_fflush_r>:
 802865c:	b538      	push	{r3, r4, r5, lr}
 802865e:	690b      	ldr	r3, [r1, #16]
 8028660:	4605      	mov	r5, r0
 8028662:	460c      	mov	r4, r1
 8028664:	b913      	cbnz	r3, 802866c <_fflush_r+0x10>
 8028666:	2500      	movs	r5, #0
 8028668:	4628      	mov	r0, r5
 802866a:	bd38      	pop	{r3, r4, r5, pc}
 802866c:	b118      	cbz	r0, 8028676 <_fflush_r+0x1a>
 802866e:	6a03      	ldr	r3, [r0, #32]
 8028670:	b90b      	cbnz	r3, 8028676 <_fflush_r+0x1a>
 8028672:	f7fe f8db 	bl	802682c <__sinit>
 8028676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802867a:	2b00      	cmp	r3, #0
 802867c:	d0f3      	beq.n	8028666 <_fflush_r+0xa>
 802867e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028680:	07d0      	lsls	r0, r2, #31
 8028682:	d404      	bmi.n	802868e <_fflush_r+0x32>
 8028684:	0599      	lsls	r1, r3, #22
 8028686:	d402      	bmi.n	802868e <_fflush_r+0x32>
 8028688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802868a:	f7fe fa82 	bl	8026b92 <__retarget_lock_acquire_recursive>
 802868e:	4628      	mov	r0, r5
 8028690:	4621      	mov	r1, r4
 8028692:	f7ff ff5f 	bl	8028554 <__sflush_r>
 8028696:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028698:	07da      	lsls	r2, r3, #31
 802869a:	4605      	mov	r5, r0
 802869c:	d4e4      	bmi.n	8028668 <_fflush_r+0xc>
 802869e:	89a3      	ldrh	r3, [r4, #12]
 80286a0:	059b      	lsls	r3, r3, #22
 80286a2:	d4e1      	bmi.n	8028668 <_fflush_r+0xc>
 80286a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80286a6:	f7fe fa75 	bl	8026b94 <__retarget_lock_release_recursive>
 80286aa:	e7dd      	b.n	8028668 <_fflush_r+0xc>

080286ac <fiprintf>:
 80286ac:	b40e      	push	{r1, r2, r3}
 80286ae:	b503      	push	{r0, r1, lr}
 80286b0:	4601      	mov	r1, r0
 80286b2:	ab03      	add	r3, sp, #12
 80286b4:	4805      	ldr	r0, [pc, #20]	@ (80286cc <fiprintf+0x20>)
 80286b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80286ba:	6800      	ldr	r0, [r0, #0]
 80286bc:	9301      	str	r3, [sp, #4]
 80286be:	f7ff fe31 	bl	8028324 <_vfiprintf_r>
 80286c2:	b002      	add	sp, #8
 80286c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80286c8:	b003      	add	sp, #12
 80286ca:	4770      	bx	lr
 80286cc:	200100b8 	.word	0x200100b8

080286d0 <__swbuf_r>:
 80286d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80286d2:	460e      	mov	r6, r1
 80286d4:	4614      	mov	r4, r2
 80286d6:	4605      	mov	r5, r0
 80286d8:	b118      	cbz	r0, 80286e2 <__swbuf_r+0x12>
 80286da:	6a03      	ldr	r3, [r0, #32]
 80286dc:	b90b      	cbnz	r3, 80286e2 <__swbuf_r+0x12>
 80286de:	f7fe f8a5 	bl	802682c <__sinit>
 80286e2:	69a3      	ldr	r3, [r4, #24]
 80286e4:	60a3      	str	r3, [r4, #8]
 80286e6:	89a3      	ldrh	r3, [r4, #12]
 80286e8:	071a      	lsls	r2, r3, #28
 80286ea:	d501      	bpl.n	80286f0 <__swbuf_r+0x20>
 80286ec:	6923      	ldr	r3, [r4, #16]
 80286ee:	b943      	cbnz	r3, 8028702 <__swbuf_r+0x32>
 80286f0:	4621      	mov	r1, r4
 80286f2:	4628      	mov	r0, r5
 80286f4:	f000 f82a 	bl	802874c <__swsetup_r>
 80286f8:	b118      	cbz	r0, 8028702 <__swbuf_r+0x32>
 80286fa:	f04f 37ff 	mov.w	r7, #4294967295
 80286fe:	4638      	mov	r0, r7
 8028700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028702:	6823      	ldr	r3, [r4, #0]
 8028704:	6922      	ldr	r2, [r4, #16]
 8028706:	1a98      	subs	r0, r3, r2
 8028708:	6963      	ldr	r3, [r4, #20]
 802870a:	b2f6      	uxtb	r6, r6
 802870c:	4283      	cmp	r3, r0
 802870e:	4637      	mov	r7, r6
 8028710:	dc05      	bgt.n	802871e <__swbuf_r+0x4e>
 8028712:	4621      	mov	r1, r4
 8028714:	4628      	mov	r0, r5
 8028716:	f7ff ffa1 	bl	802865c <_fflush_r>
 802871a:	2800      	cmp	r0, #0
 802871c:	d1ed      	bne.n	80286fa <__swbuf_r+0x2a>
 802871e:	68a3      	ldr	r3, [r4, #8]
 8028720:	3b01      	subs	r3, #1
 8028722:	60a3      	str	r3, [r4, #8]
 8028724:	6823      	ldr	r3, [r4, #0]
 8028726:	1c5a      	adds	r2, r3, #1
 8028728:	6022      	str	r2, [r4, #0]
 802872a:	701e      	strb	r6, [r3, #0]
 802872c:	6962      	ldr	r2, [r4, #20]
 802872e:	1c43      	adds	r3, r0, #1
 8028730:	429a      	cmp	r2, r3
 8028732:	d004      	beq.n	802873e <__swbuf_r+0x6e>
 8028734:	89a3      	ldrh	r3, [r4, #12]
 8028736:	07db      	lsls	r3, r3, #31
 8028738:	d5e1      	bpl.n	80286fe <__swbuf_r+0x2e>
 802873a:	2e0a      	cmp	r6, #10
 802873c:	d1df      	bne.n	80286fe <__swbuf_r+0x2e>
 802873e:	4621      	mov	r1, r4
 8028740:	4628      	mov	r0, r5
 8028742:	f7ff ff8b 	bl	802865c <_fflush_r>
 8028746:	2800      	cmp	r0, #0
 8028748:	d0d9      	beq.n	80286fe <__swbuf_r+0x2e>
 802874a:	e7d6      	b.n	80286fa <__swbuf_r+0x2a>

0802874c <__swsetup_r>:
 802874c:	b538      	push	{r3, r4, r5, lr}
 802874e:	4b29      	ldr	r3, [pc, #164]	@ (80287f4 <__swsetup_r+0xa8>)
 8028750:	4605      	mov	r5, r0
 8028752:	6818      	ldr	r0, [r3, #0]
 8028754:	460c      	mov	r4, r1
 8028756:	b118      	cbz	r0, 8028760 <__swsetup_r+0x14>
 8028758:	6a03      	ldr	r3, [r0, #32]
 802875a:	b90b      	cbnz	r3, 8028760 <__swsetup_r+0x14>
 802875c:	f7fe f866 	bl	802682c <__sinit>
 8028760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028764:	0719      	lsls	r1, r3, #28
 8028766:	d422      	bmi.n	80287ae <__swsetup_r+0x62>
 8028768:	06da      	lsls	r2, r3, #27
 802876a:	d407      	bmi.n	802877c <__swsetup_r+0x30>
 802876c:	2209      	movs	r2, #9
 802876e:	602a      	str	r2, [r5, #0]
 8028770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028774:	81a3      	strh	r3, [r4, #12]
 8028776:	f04f 30ff 	mov.w	r0, #4294967295
 802877a:	e033      	b.n	80287e4 <__swsetup_r+0x98>
 802877c:	0758      	lsls	r0, r3, #29
 802877e:	d512      	bpl.n	80287a6 <__swsetup_r+0x5a>
 8028780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028782:	b141      	cbz	r1, 8028796 <__swsetup_r+0x4a>
 8028784:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028788:	4299      	cmp	r1, r3
 802878a:	d002      	beq.n	8028792 <__swsetup_r+0x46>
 802878c:	4628      	mov	r0, r5
 802878e:	f7ff f87b 	bl	8027888 <_free_r>
 8028792:	2300      	movs	r3, #0
 8028794:	6363      	str	r3, [r4, #52]	@ 0x34
 8028796:	89a3      	ldrh	r3, [r4, #12]
 8028798:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802879c:	81a3      	strh	r3, [r4, #12]
 802879e:	2300      	movs	r3, #0
 80287a0:	6063      	str	r3, [r4, #4]
 80287a2:	6923      	ldr	r3, [r4, #16]
 80287a4:	6023      	str	r3, [r4, #0]
 80287a6:	89a3      	ldrh	r3, [r4, #12]
 80287a8:	f043 0308 	orr.w	r3, r3, #8
 80287ac:	81a3      	strh	r3, [r4, #12]
 80287ae:	6923      	ldr	r3, [r4, #16]
 80287b0:	b94b      	cbnz	r3, 80287c6 <__swsetup_r+0x7a>
 80287b2:	89a3      	ldrh	r3, [r4, #12]
 80287b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80287b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80287bc:	d003      	beq.n	80287c6 <__swsetup_r+0x7a>
 80287be:	4621      	mov	r1, r4
 80287c0:	4628      	mov	r0, r5
 80287c2:	f000 f8a7 	bl	8028914 <__smakebuf_r>
 80287c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80287ca:	f013 0201 	ands.w	r2, r3, #1
 80287ce:	d00a      	beq.n	80287e6 <__swsetup_r+0x9a>
 80287d0:	2200      	movs	r2, #0
 80287d2:	60a2      	str	r2, [r4, #8]
 80287d4:	6962      	ldr	r2, [r4, #20]
 80287d6:	4252      	negs	r2, r2
 80287d8:	61a2      	str	r2, [r4, #24]
 80287da:	6922      	ldr	r2, [r4, #16]
 80287dc:	b942      	cbnz	r2, 80287f0 <__swsetup_r+0xa4>
 80287de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80287e2:	d1c5      	bne.n	8028770 <__swsetup_r+0x24>
 80287e4:	bd38      	pop	{r3, r4, r5, pc}
 80287e6:	0799      	lsls	r1, r3, #30
 80287e8:	bf58      	it	pl
 80287ea:	6962      	ldrpl	r2, [r4, #20]
 80287ec:	60a2      	str	r2, [r4, #8]
 80287ee:	e7f4      	b.n	80287da <__swsetup_r+0x8e>
 80287f0:	2000      	movs	r0, #0
 80287f2:	e7f7      	b.n	80287e4 <__swsetup_r+0x98>
 80287f4:	200100b8 	.word	0x200100b8

080287f8 <abort>:
 80287f8:	b508      	push	{r3, lr}
 80287fa:	2006      	movs	r0, #6
 80287fc:	f000 f8ee 	bl	80289dc <raise>
 8028800:	2001      	movs	r0, #1
 8028802:	f7db fa7f 	bl	8003d04 <_exit>

08028806 <_calloc_r>:
 8028806:	b570      	push	{r4, r5, r6, lr}
 8028808:	fba1 5402 	umull	r5, r4, r1, r2
 802880c:	b93c      	cbnz	r4, 802881e <_calloc_r+0x18>
 802880e:	4629      	mov	r1, r5
 8028810:	f7fd fa5e 	bl	8025cd0 <_malloc_r>
 8028814:	4606      	mov	r6, r0
 8028816:	b928      	cbnz	r0, 8028824 <_calloc_r+0x1e>
 8028818:	2600      	movs	r6, #0
 802881a:	4630      	mov	r0, r6
 802881c:	bd70      	pop	{r4, r5, r6, pc}
 802881e:	220c      	movs	r2, #12
 8028820:	6002      	str	r2, [r0, #0]
 8028822:	e7f9      	b.n	8028818 <_calloc_r+0x12>
 8028824:	462a      	mov	r2, r5
 8028826:	4621      	mov	r1, r4
 8028828:	f7fe f8d5 	bl	80269d6 <memset>
 802882c:	e7f5      	b.n	802881a <_calloc_r+0x14>

0802882e <__ascii_mbtowc>:
 802882e:	b082      	sub	sp, #8
 8028830:	b901      	cbnz	r1, 8028834 <__ascii_mbtowc+0x6>
 8028832:	a901      	add	r1, sp, #4
 8028834:	b142      	cbz	r2, 8028848 <__ascii_mbtowc+0x1a>
 8028836:	b14b      	cbz	r3, 802884c <__ascii_mbtowc+0x1e>
 8028838:	7813      	ldrb	r3, [r2, #0]
 802883a:	600b      	str	r3, [r1, #0]
 802883c:	7812      	ldrb	r2, [r2, #0]
 802883e:	1e10      	subs	r0, r2, #0
 8028840:	bf18      	it	ne
 8028842:	2001      	movne	r0, #1
 8028844:	b002      	add	sp, #8
 8028846:	4770      	bx	lr
 8028848:	4610      	mov	r0, r2
 802884a:	e7fb      	b.n	8028844 <__ascii_mbtowc+0x16>
 802884c:	f06f 0001 	mvn.w	r0, #1
 8028850:	e7f8      	b.n	8028844 <__ascii_mbtowc+0x16>

08028852 <_realloc_r>:
 8028852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028856:	4680      	mov	r8, r0
 8028858:	4615      	mov	r5, r2
 802885a:	460c      	mov	r4, r1
 802885c:	b921      	cbnz	r1, 8028868 <_realloc_r+0x16>
 802885e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028862:	4611      	mov	r1, r2
 8028864:	f7fd ba34 	b.w	8025cd0 <_malloc_r>
 8028868:	b92a      	cbnz	r2, 8028876 <_realloc_r+0x24>
 802886a:	f7ff f80d 	bl	8027888 <_free_r>
 802886e:	2400      	movs	r4, #0
 8028870:	4620      	mov	r0, r4
 8028872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028876:	f000 f8ef 	bl	8028a58 <_malloc_usable_size_r>
 802887a:	4285      	cmp	r5, r0
 802887c:	4606      	mov	r6, r0
 802887e:	d802      	bhi.n	8028886 <_realloc_r+0x34>
 8028880:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8028884:	d8f4      	bhi.n	8028870 <_realloc_r+0x1e>
 8028886:	4629      	mov	r1, r5
 8028888:	4640      	mov	r0, r8
 802888a:	f7fd fa21 	bl	8025cd0 <_malloc_r>
 802888e:	4607      	mov	r7, r0
 8028890:	2800      	cmp	r0, #0
 8028892:	d0ec      	beq.n	802886e <_realloc_r+0x1c>
 8028894:	42b5      	cmp	r5, r6
 8028896:	462a      	mov	r2, r5
 8028898:	4621      	mov	r1, r4
 802889a:	bf28      	it	cs
 802889c:	4632      	movcs	r2, r6
 802889e:	f7fe f97a 	bl	8026b96 <memcpy>
 80288a2:	4621      	mov	r1, r4
 80288a4:	4640      	mov	r0, r8
 80288a6:	f7fe ffef 	bl	8027888 <_free_r>
 80288aa:	463c      	mov	r4, r7
 80288ac:	e7e0      	b.n	8028870 <_realloc_r+0x1e>

080288ae <__ascii_wctomb>:
 80288ae:	4603      	mov	r3, r0
 80288b0:	4608      	mov	r0, r1
 80288b2:	b141      	cbz	r1, 80288c6 <__ascii_wctomb+0x18>
 80288b4:	2aff      	cmp	r2, #255	@ 0xff
 80288b6:	d904      	bls.n	80288c2 <__ascii_wctomb+0x14>
 80288b8:	228a      	movs	r2, #138	@ 0x8a
 80288ba:	601a      	str	r2, [r3, #0]
 80288bc:	f04f 30ff 	mov.w	r0, #4294967295
 80288c0:	4770      	bx	lr
 80288c2:	700a      	strb	r2, [r1, #0]
 80288c4:	2001      	movs	r0, #1
 80288c6:	4770      	bx	lr

080288c8 <__swhatbuf_r>:
 80288c8:	b570      	push	{r4, r5, r6, lr}
 80288ca:	460c      	mov	r4, r1
 80288cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80288d0:	2900      	cmp	r1, #0
 80288d2:	b096      	sub	sp, #88	@ 0x58
 80288d4:	4615      	mov	r5, r2
 80288d6:	461e      	mov	r6, r3
 80288d8:	da0d      	bge.n	80288f6 <__swhatbuf_r+0x2e>
 80288da:	89a3      	ldrh	r3, [r4, #12]
 80288dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80288e0:	f04f 0100 	mov.w	r1, #0
 80288e4:	bf14      	ite	ne
 80288e6:	2340      	movne	r3, #64	@ 0x40
 80288e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80288ec:	2000      	movs	r0, #0
 80288ee:	6031      	str	r1, [r6, #0]
 80288f0:	602b      	str	r3, [r5, #0]
 80288f2:	b016      	add	sp, #88	@ 0x58
 80288f4:	bd70      	pop	{r4, r5, r6, pc}
 80288f6:	466a      	mov	r2, sp
 80288f8:	f000 f878 	bl	80289ec <_fstat_r>
 80288fc:	2800      	cmp	r0, #0
 80288fe:	dbec      	blt.n	80288da <__swhatbuf_r+0x12>
 8028900:	9901      	ldr	r1, [sp, #4]
 8028902:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8028906:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802890a:	4259      	negs	r1, r3
 802890c:	4159      	adcs	r1, r3
 802890e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028912:	e7eb      	b.n	80288ec <__swhatbuf_r+0x24>

08028914 <__smakebuf_r>:
 8028914:	898b      	ldrh	r3, [r1, #12]
 8028916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028918:	079d      	lsls	r5, r3, #30
 802891a:	4606      	mov	r6, r0
 802891c:	460c      	mov	r4, r1
 802891e:	d507      	bpl.n	8028930 <__smakebuf_r+0x1c>
 8028920:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8028924:	6023      	str	r3, [r4, #0]
 8028926:	6123      	str	r3, [r4, #16]
 8028928:	2301      	movs	r3, #1
 802892a:	6163      	str	r3, [r4, #20]
 802892c:	b003      	add	sp, #12
 802892e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028930:	ab01      	add	r3, sp, #4
 8028932:	466a      	mov	r2, sp
 8028934:	f7ff ffc8 	bl	80288c8 <__swhatbuf_r>
 8028938:	9f00      	ldr	r7, [sp, #0]
 802893a:	4605      	mov	r5, r0
 802893c:	4639      	mov	r1, r7
 802893e:	4630      	mov	r0, r6
 8028940:	f7fd f9c6 	bl	8025cd0 <_malloc_r>
 8028944:	b948      	cbnz	r0, 802895a <__smakebuf_r+0x46>
 8028946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802894a:	059a      	lsls	r2, r3, #22
 802894c:	d4ee      	bmi.n	802892c <__smakebuf_r+0x18>
 802894e:	f023 0303 	bic.w	r3, r3, #3
 8028952:	f043 0302 	orr.w	r3, r3, #2
 8028956:	81a3      	strh	r3, [r4, #12]
 8028958:	e7e2      	b.n	8028920 <__smakebuf_r+0xc>
 802895a:	89a3      	ldrh	r3, [r4, #12]
 802895c:	6020      	str	r0, [r4, #0]
 802895e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8028962:	81a3      	strh	r3, [r4, #12]
 8028964:	9b01      	ldr	r3, [sp, #4]
 8028966:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802896a:	b15b      	cbz	r3, 8028984 <__smakebuf_r+0x70>
 802896c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028970:	4630      	mov	r0, r6
 8028972:	f000 f84d 	bl	8028a10 <_isatty_r>
 8028976:	b128      	cbz	r0, 8028984 <__smakebuf_r+0x70>
 8028978:	89a3      	ldrh	r3, [r4, #12]
 802897a:	f023 0303 	bic.w	r3, r3, #3
 802897e:	f043 0301 	orr.w	r3, r3, #1
 8028982:	81a3      	strh	r3, [r4, #12]
 8028984:	89a3      	ldrh	r3, [r4, #12]
 8028986:	431d      	orrs	r5, r3
 8028988:	81a5      	strh	r5, [r4, #12]
 802898a:	e7cf      	b.n	802892c <__smakebuf_r+0x18>

0802898c <_raise_r>:
 802898c:	291f      	cmp	r1, #31
 802898e:	b538      	push	{r3, r4, r5, lr}
 8028990:	4605      	mov	r5, r0
 8028992:	460c      	mov	r4, r1
 8028994:	d904      	bls.n	80289a0 <_raise_r+0x14>
 8028996:	2316      	movs	r3, #22
 8028998:	6003      	str	r3, [r0, #0]
 802899a:	f04f 30ff 	mov.w	r0, #4294967295
 802899e:	bd38      	pop	{r3, r4, r5, pc}
 80289a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80289a2:	b112      	cbz	r2, 80289aa <_raise_r+0x1e>
 80289a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80289a8:	b94b      	cbnz	r3, 80289be <_raise_r+0x32>
 80289aa:	4628      	mov	r0, r5
 80289ac:	f000 f852 	bl	8028a54 <_getpid_r>
 80289b0:	4622      	mov	r2, r4
 80289b2:	4601      	mov	r1, r0
 80289b4:	4628      	mov	r0, r5
 80289b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80289ba:	f000 b839 	b.w	8028a30 <_kill_r>
 80289be:	2b01      	cmp	r3, #1
 80289c0:	d00a      	beq.n	80289d8 <_raise_r+0x4c>
 80289c2:	1c59      	adds	r1, r3, #1
 80289c4:	d103      	bne.n	80289ce <_raise_r+0x42>
 80289c6:	2316      	movs	r3, #22
 80289c8:	6003      	str	r3, [r0, #0]
 80289ca:	2001      	movs	r0, #1
 80289cc:	e7e7      	b.n	802899e <_raise_r+0x12>
 80289ce:	2100      	movs	r1, #0
 80289d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80289d4:	4620      	mov	r0, r4
 80289d6:	4798      	blx	r3
 80289d8:	2000      	movs	r0, #0
 80289da:	e7e0      	b.n	802899e <_raise_r+0x12>

080289dc <raise>:
 80289dc:	4b02      	ldr	r3, [pc, #8]	@ (80289e8 <raise+0xc>)
 80289de:	4601      	mov	r1, r0
 80289e0:	6818      	ldr	r0, [r3, #0]
 80289e2:	f7ff bfd3 	b.w	802898c <_raise_r>
 80289e6:	bf00      	nop
 80289e8:	200100b8 	.word	0x200100b8

080289ec <_fstat_r>:
 80289ec:	b538      	push	{r3, r4, r5, lr}
 80289ee:	4d07      	ldr	r5, [pc, #28]	@ (8028a0c <_fstat_r+0x20>)
 80289f0:	2300      	movs	r3, #0
 80289f2:	4604      	mov	r4, r0
 80289f4:	4608      	mov	r0, r1
 80289f6:	4611      	mov	r1, r2
 80289f8:	602b      	str	r3, [r5, #0]
 80289fa:	f7db f9d3 	bl	8003da4 <_fstat>
 80289fe:	1c43      	adds	r3, r0, #1
 8028a00:	d102      	bne.n	8028a08 <_fstat_r+0x1c>
 8028a02:	682b      	ldr	r3, [r5, #0]
 8028a04:	b103      	cbz	r3, 8028a08 <_fstat_r+0x1c>
 8028a06:	6023      	str	r3, [r4, #0]
 8028a08:	bd38      	pop	{r3, r4, r5, pc}
 8028a0a:	bf00      	nop
 8028a0c:	2003cf40 	.word	0x2003cf40

08028a10 <_isatty_r>:
 8028a10:	b538      	push	{r3, r4, r5, lr}
 8028a12:	4d06      	ldr	r5, [pc, #24]	@ (8028a2c <_isatty_r+0x1c>)
 8028a14:	2300      	movs	r3, #0
 8028a16:	4604      	mov	r4, r0
 8028a18:	4608      	mov	r0, r1
 8028a1a:	602b      	str	r3, [r5, #0]
 8028a1c:	f7db f9d2 	bl	8003dc4 <_isatty>
 8028a20:	1c43      	adds	r3, r0, #1
 8028a22:	d102      	bne.n	8028a2a <_isatty_r+0x1a>
 8028a24:	682b      	ldr	r3, [r5, #0]
 8028a26:	b103      	cbz	r3, 8028a2a <_isatty_r+0x1a>
 8028a28:	6023      	str	r3, [r4, #0]
 8028a2a:	bd38      	pop	{r3, r4, r5, pc}
 8028a2c:	2003cf40 	.word	0x2003cf40

08028a30 <_kill_r>:
 8028a30:	b538      	push	{r3, r4, r5, lr}
 8028a32:	4d07      	ldr	r5, [pc, #28]	@ (8028a50 <_kill_r+0x20>)
 8028a34:	2300      	movs	r3, #0
 8028a36:	4604      	mov	r4, r0
 8028a38:	4608      	mov	r0, r1
 8028a3a:	4611      	mov	r1, r2
 8028a3c:	602b      	str	r3, [r5, #0]
 8028a3e:	f7db f94f 	bl	8003ce0 <_kill>
 8028a42:	1c43      	adds	r3, r0, #1
 8028a44:	d102      	bne.n	8028a4c <_kill_r+0x1c>
 8028a46:	682b      	ldr	r3, [r5, #0]
 8028a48:	b103      	cbz	r3, 8028a4c <_kill_r+0x1c>
 8028a4a:	6023      	str	r3, [r4, #0]
 8028a4c:	bd38      	pop	{r3, r4, r5, pc}
 8028a4e:	bf00      	nop
 8028a50:	2003cf40 	.word	0x2003cf40

08028a54 <_getpid_r>:
 8028a54:	f7db b93c 	b.w	8003cd0 <_getpid>

08028a58 <_malloc_usable_size_r>:
 8028a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028a5c:	1f18      	subs	r0, r3, #4
 8028a5e:	2b00      	cmp	r3, #0
 8028a60:	bfbc      	itt	lt
 8028a62:	580b      	ldrlt	r3, [r1, r0]
 8028a64:	18c0      	addlt	r0, r0, r3
 8028a66:	4770      	bx	lr

08028a68 <_init>:
 8028a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028a6a:	bf00      	nop
 8028a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028a6e:	bc08      	pop	{r3}
 8028a70:	469e      	mov	lr, r3
 8028a72:	4770      	bx	lr

08028a74 <_fini>:
 8028a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028a76:	bf00      	nop
 8028a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028a7a:	bc08      	pop	{r3}
 8028a7c:	469e      	mov	lr, r3
 8028a7e:	4770      	bx	lr
